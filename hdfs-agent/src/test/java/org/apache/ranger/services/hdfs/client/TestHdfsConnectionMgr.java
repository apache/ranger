/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hdfs.client;

import org.apache.ranger.plugin.util.TimedEventUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import static org.mockito.Mockito.eq;

/**
 * @generated by Cursor
 * @description : Unit Test cases for HdfsConnectionMgr
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHdfsConnectionMgr {
    @Test
    public void test01_cacheMiss_withConfigs_constructsClient() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("username", "u");
        cfg.put("password", "p");
        HdfsConnectionMgr mgr = new HdfsConnectionMgr();

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsClient> constructed = Mockito.mockConstruction(HdfsClient.class, (mock, ctx) -> {
                    Mockito.when(mock.listFiles(eq("/"), eq("*"), Mockito.isNull())).thenReturn(Collections.singletonList("/a"));
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> {
                Callable<HdfsClient> c = inv.getArgument(0);
                return c.call();
            });

            HdfsClient client = mgr.getHadoopConnection("svc", "hdfs", cfg);
            Assertions.assertNotNull(client);
        }
    }

    @Test
    public void test02_cacheHit_successfulListFiles() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        HdfsConnectionMgr   mgr = new HdfsConnectionMgr();

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsClient> constructed = Mockito.mockConstruction(HdfsClient.class, (mock, ctx) -> {
                    Mockito.when(mock.listFiles(eq("/"), eq("*"), Mockito.isNull())).thenReturn(Collections.singletonList("/a"));
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), Mockito.anyLong(), Mockito.eq(TimeUnit.SECONDS))).then(inv -> {
                Callable<HdfsClient> c = inv.getArgument(0);
                return c.call();
            });

            HdfsClient first  = mgr.getHadoopConnection("svc2", "hdfs", cfg);
            HdfsClient second = mgr.getHadoopConnection("svc2", "hdfs", cfg);
            Assertions.assertSame(first, second);
        }
    }

    @Test
    public void test03_cacheHit_nullListFiles_triggersReconnection() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        HdfsConnectionMgr   mgr = new HdfsConnectionMgr();

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsClient> constructed = Mockito.mockConstruction(HdfsClient.class, (mock, ctx) -> {
                    Mockito.when(mock.listFiles(eq("/"), eq("*"), Mockito.isNull())).thenReturn(null).thenReturn(Collections.singletonList("/a"));
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), Mockito.anyLong(), Mockito.eq(TimeUnit.SECONDS))).then(inv -> {
                Callable<HdfsClient> c = inv.getArgument(0);
                return c.call();
            });

            HdfsClient client = mgr.getHadoopConnection("svc3", "hdfs", cfg);
            Assertions.assertNotNull(client);
        }
    }
}
