/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hdfs.client;

import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.plugin.util.TimedEventUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import static org.mockito.Mockito.eq;

/**
 * @generated by Cursor
 * @description : Unit Test cases for HdfsResourceMgr
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHdfsResourceMgr {
    @Test
    public void test01_connectionTest_delegatesToHdfsClient() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("username", "u");

        Map<String, Object> expected = new HashMap<>();
        expected.put("connectivityStatus", true);

        try (MockedStatic<HdfsClient> mocked = Mockito.mockStatic(HdfsClient.class)) {
            mocked.when(() -> HdfsClient.connectionTest(eq("svc"), eq(cfg))).thenReturn(expected);

            Map<String, Object> ret = HdfsResourceMgr.connectionTest("svc", cfg);
            Assertions.assertEquals(expected, ret);
            mocked.verify(() -> HdfsClient.connectionTest(eq("svc"), eq(cfg)));
        }
    }

    @Test
    public void test02_getHdfsResources_userInputNoSlash() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("abc");
        ctx.setResourceName("path");
        Map<String, List<String>> res = new HashMap<>();
        res.put(HdfsResourceMgr.PATH, Collections.singletonList("/alt/skip"));
        ctx.setResources(res);

        Map<String, String> cfg      = new HashMap<>();
        HdfsClient          client   = Mockito.mock(HdfsClient.class);
        List<String>        expected = Arrays.asList("/x", "/y");
        Mockito.when(client.listFiles(eq("/"), eq("abc*"), eq(Collections.singletonList("/alt/skip")))).thenReturn(expected);

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(client);
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> {
                Callable<List<String>> c = inv.getArgument(0);
                return c.call();
            });

            List<String> out = HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx);
            Assertions.assertEquals(expected, out);
        }
    }

    @Test
    public void test03_getHdfsResources_userInputRootOnly() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("/");
        ctx.setResourceName("path");
        ctx.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/p")));

        Map<String, String> cfg      = new HashMap<>();
        HdfsClient          client   = Mockito.mock(HdfsClient.class);
        List<String>        expected = Collections.singletonList("/a");
        Mockito.when(client.listFiles(eq("/"), Mockito.isNull(), eq(Collections.singletonList("/p")))).thenReturn(expected);

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(client);
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> ((Callable<List<String>>) inv.getArgument(0)).call());

            List<String> out = HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx);
            Assertions.assertEquals(expected, out);
        }
    }

    @Test
    public void test04_getHdfsResources_userInputTrailingSlash() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("/tmp/");
        ctx.setResourceName("path");
        ctx.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/ignore")));

        Map<String, String> cfg      = new HashMap<>();
        HdfsClient          client   = Mockito.mock(HdfsClient.class);
        List<String>        expected = Arrays.asList("/tmp/a", "/tmp/b");
        Mockito.when(client.listFiles(eq("/tmp/"), Mockito.isNull(), eq(Collections.singletonList("/ignore")))).thenReturn(expected);

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(client);
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> ((Callable<List<String>>) inv.getArgument(0)).call());

            List<String> out = HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx);
            Assertions.assertEquals(expected, out);
        }
    }

    @Test
    public void test05_getHdfsResources_userInputWithComponent() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("/tmp/dir");
        ctx.setResourceName("path");
        ctx.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/tmp/a")));

        Map<String, String> cfg      = new HashMap<>();
        HdfsClient          client   = Mockito.mock(HdfsClient.class);
        List<String>        expected = Arrays.asList("/tmp/dir1", "/tmp/dir2");
        Mockito.when(client.listFiles(eq("/tmp/"), eq("dir*"), eq(Collections.singletonList("/tmp/a")))).thenReturn(expected);

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(client);
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> ((Callable<List<String>>) inv.getArgument(0)).call());

            List<String> out = HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx);
            Assertions.assertEquals(expected, out);
        }
    }

    @Test
    public void test06_getHdfsResources_nullServiceOrUserInput_returnsNull() throws Exception {
        ResourceLookupContext ctx1 = new ResourceLookupContext();
        ctx1.setUserInput("/tmp");
        ctx1.setResourceName("path");
        ctx1.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/p")));

        ResourceLookupContext ctx2 = new ResourceLookupContext();
        ctx2.setUserInput(null);
        ctx2.setResourceName("path");
        ctx2.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/p")));

        Map<String, String> cfg = new HashMap<>();

        Assertions.assertNull(HdfsResourceMgr.getHdfsResources(null, "hdfs", cfg, ctx1));
        Assertions.assertNull(HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx2));
    }

    @Test
    public void test07_getHdfsResources_returnsNullWhenHdfsClientNull() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("/tmp");
        ctx.setResourceName("path");
        ctx.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/p")));

        Map<String, String> cfg = new HashMap<>();

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(null);
                })) {
            // timedTask should not be called when client is null; but we still set a safe default
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), Mockito.anyLong(), Mockito.any(TimeUnit.class))).thenThrow(new AssertionError("timedTask should not be invoked"));

            List<String> out = HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx);
            Assertions.assertNull(out);
        }
    }

    @Test
    public void test08_getHdfsResources_propagatesHadoopException() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("/tmp");
        ctx.setResourceName("path");
        ctx.setResources(Collections.singletonMap(HdfsResourceMgr.PATH, Collections.singletonList("/p")));

        Map<String, String> cfg    = new HashMap<>();
        HdfsClient          client = Mockito.mock(HdfsClient.class);
        Mockito.when(client.listFiles(eq("/"), eq("tmp*"), eq(Collections.singletonList("/p")))).thenThrow(new HadoopException("boom", new RuntimeException("x")));

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HdfsConnectionMgr> conn = Mockito.mockConstruction(HdfsConnectionMgr.class, (mock, context) -> {
                    Mockito.when(mock.getHadoopConnection(eq("svc"), eq("hdfs"), eq(cfg))).thenReturn(client);
                })) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(Callable.class), eq(5L), eq(TimeUnit.SECONDS))).then(inv -> {
                Callable<List<String>> c = inv.getArgument(0);
                return c.call();
            });

            Assertions.assertThrows(HadoopException.class, () -> HdfsResourceMgr.getHdfsResources("svc", "hdfs", cfg, ctx));
        }
    }
}
