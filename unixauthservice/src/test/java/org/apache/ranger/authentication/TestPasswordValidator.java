/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.authentication;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for PasswordValidator
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPasswordValidator {
    @Test
    public void test00_staticGettersAndSetters() {
        PasswordValidator.setValidatorProgram("/tmp/prog");
        PasswordValidator.setAdminUserList(Collections.singletonList("root"));
        PasswordValidator.setAdminRoleNames("ROLE_SUPER");

        assertEquals("/tmp/prog", PasswordValidator.getValidatorProgram());
        assertEquals(Collections.singletonList("root"), PasswordValidator.getAdminUserList());
        assertEquals("ROLE_SUPER", PasswordValidator.getAdminRoleNames());
    }

    @Test
    public void test01_nullProgramWritesFailedAndClosesSocket() throws Exception {
        PasswordValidator.setValidatorProgram(null);
        PasswordValidator.setAdminUserList(null);
        PasswordValidator.setAdminRoleNames(null);

        ByteArrayOutputStream out    = new ByteArrayOutputStream();
        Socket                socket = buildSocket("LOGIN: alice secret", out);

        new PasswordValidator(socket).run();

        String response = out.toString(StandardCharsets.UTF_8.name()).trim();
        assertEquals("FAILED: Unable to validate credentials.", response);
        verify(socket, times(1)).close();
    }

    @Test
    public void test02_okResponseAppendsAdminRoleAndDestroysProcess() throws Exception {
        PasswordValidator.setValidatorProgram("/bin/validator");
        PasswordValidator.setAdminUserList(Arrays.asList("alice", "bob"));
        PasswordValidator.setAdminRoleNames("ROLE_ADMIN");

        ByteArrayOutputStream out    = new ByteArrayOutputStream();
        Socket                socket = buildSocket("LOGIN: alice secret", out);

        Process              process       = mock(Process.class);
        ByteArrayInputStream processStdout = new ByteArrayInputStream("OK".getBytes(StandardCharsets.UTF_8));
        when(process.getInputStream()).thenReturn(processStdout);
        when(process.getOutputStream()).thenReturn(new ByteArrayOutputStream());

        try (MockedStatic<Runtime> runtimeStatic = mockStatic(Runtime.class)) {
            Runtime rt = mock(Runtime.class);
            runtimeStatic.when(Runtime::getRuntime).thenReturn(rt);
            when(rt.exec("/bin/validator")).thenReturn(process);

            new PasswordValidator(socket).run();
        }

        String response = out.toString(StandardCharsets.UTF_8.name()).trim();
        assertEquals("OK ROLE_ADMIN", response);
        verify(process, times(1)).destroy();
        verify(socket, times(1)).close();
    }

    @Test
    public void test03_okResponseWithoutAdminDoesNotAppendRole() throws Exception {
        PasswordValidator.setValidatorProgram("/bin/validator");
        PasswordValidator.setAdminUserList(Collections.singletonList("bob"));
        PasswordValidator.setAdminRoleNames("ROLE_ADMIN");

        ByteArrayOutputStream out    = new ByteArrayOutputStream();
        Socket                socket = buildSocket("LOGIN: alice secret", out);

        Process              process       = mock(Process.class);
        ByteArrayInputStream processStdout = new ByteArrayInputStream("OK".getBytes(StandardCharsets.UTF_8));
        when(process.getInputStream()).thenReturn(processStdout);
        when(process.getOutputStream()).thenReturn(new ByteArrayOutputStream());

        try (MockedStatic<Runtime> runtimeStatic = mockStatic(Runtime.class)) {
            Runtime rt = mock(Runtime.class);
            runtimeStatic.when(Runtime::getRuntime).thenReturn(rt);
            when(rt.exec("/bin/validator")).thenReturn(process);

            new PasswordValidator(socket).run();
        }

        String response = out.toString(StandardCharsets.UTF_8.name()).trim();
        assertEquals("OK", response);
        verify(process, times(1)).destroy();
        verify(socket, times(1)).close();
    }

    @Test
    public void test04_execThrowsWritesFailed() throws Exception {
        PasswordValidator.setValidatorProgram("/bin/validator");
        PasswordValidator.setAdminUserList(Collections.singletonList("alice"));
        PasswordValidator.setAdminRoleNames("ROLE_ADMIN");

        ByteArrayOutputStream out    = new ByteArrayOutputStream();
        Socket                socket = buildSocket("LOGIN: alice secret", out);

        try (MockedStatic<Runtime> runtimeStatic = mockStatic(Runtime.class)) {
            Runtime rt = mock(Runtime.class);
            runtimeStatic.when(Runtime::getRuntime).thenReturn(rt);
            when(rt.exec("/bin/validator")).thenThrow(new IOException("boom"));

            new PasswordValidator(socket).run();
        }

        // Output may not be flushed in catch path; verify socket is closed indicating catch executed
        verify(socket, times(1)).close();
    }

    @Test
    public void test05_closeSocketIOExceptionHandled() throws Exception {
        PasswordValidator.setValidatorProgram(null);
        PasswordValidator.setAdminUserList(null);
        PasswordValidator.setAdminRoleNames(null);

        ByteArrayOutputStream out    = new ByteArrayOutputStream();
        Socket                socket = buildSocket("LOGIN: alice secret", out);
        doThrow(new IOException("close failure")).when(socket).close();

        new PasswordValidator(socket).run();

        // No exception should be thrown even if close() fails; nothing to assert besides method completed
        verify(socket, times(1)).close();
    }

    private Socket buildSocket(String requestLine, ByteArrayOutputStream responseOut) throws IOException {
        Socket       socket = mock(Socket.class);
        InputStream  in     = new ByteArrayInputStream((requestLine + "\n").getBytes(StandardCharsets.UTF_8));
        OutputStream out    = responseOut;
        when(socket.getInputStream()).thenReturn(in);
        when(socket.getOutputStream()).thenReturn(out);
        return socket;
    }
}
