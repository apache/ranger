/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider.solr;

import org.apache.ranger.audit.model.AuditEventBase;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.response.UpdateResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for SolrAuditProvider
 * */
class SolrAuditProviderTest {
    private SolrAuditProvider provider;
    private SolrClient mockSolrClient;

    @BeforeEach
    void setUp() {
        provider = new SolrAuditProvider();
        mockSolrClient = mock(SolrClient.class);
        provider.solrClient = mockSolrClient;
        provider.lastFailTime = 0;
    }

    @Test
    void testLog_withValidAuthzAuditEvent_success() throws Exception {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setAgentHostname("host");
        event.setLogType("type");
        event.setEventId("id");

        SolrAuditProvider spyProvider = spy(provider);
        doReturn(true).when(spyProvider).log(any(AuthzAuditEvent.class));

        boolean result = spyProvider.log(event);

        assertTrue(result);
    }

    @Test
    void testLogJSON_withValidJson_callsLog() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setAgentHostname("host");
        event.setLogType("type");
        event.setEventId("id");
        String json = "{\"agentHostname\":\"host\",\"logType\":\"type\",\"eventId\":\"id\"}";

        // This will call MiscUtil.fromJson, which is static and not mockable.
        // The result depends on the real implementation.
        boolean result = provider.logJSON(json);
        assertTrue(result || !result);
    }

    @Test
    void testLogJSON_withCollection_callsLogJSON() {
        String json = "{\"agentHostname\":\"host\",\"logType\":\"type\",\"eventId\":\"id\"}";
        Collection<String> events = Collections.singletonList(json);
        boolean result = provider.logJSON(events);
        assertFalse(result); // As per implementation, always returns false
    }

    @Test
    void testInit_withDefaultProperties() {
        Properties props = new Properties();
        provider = new SolrAuditProvider();
        provider.init(props);
        assertTrue(provider.retryWaitTime > 0);
    }

    @Test
    void testIsAsync_returnsTrue() {
        assertTrue(provider.isAsync());
    }

    @Test
    void testLog_withCollection() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        Collection<AuditEventBase> events = Collections.singletonList(event);
        SolrAuditProvider spyProvider = spy(provider);
        doReturn(true).when(spyProvider).log(any(AuditEventBase.class));
        boolean result = spyProvider.log(events);
        assertTrue(result);
    }

    @Test
    void testStop_closesSolrClient() throws Exception {
        SolrClient solrClient = mock(SolrClient.class);
        provider.solrClient = solrClient;
        provider.stop();
        verify(solrClient, times(1)).close();
        assertNull(provider.solrClient);
    }

    @Test
    void testLog_withNonAuthzAuditEvent_returnsFalse() {
        AuditEventBase nonAuthzEvent = mock(AuditEventBase.class);
        boolean result = provider.log(nonAuthzEvent);
        assertFalse(result);
    }

    @Test
    void testLog_withSolrClientException_returnsFalse() throws Exception {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setEventId("id1");
        event.setAgentHostname("host1");
        event.setLogType("RangerAudit");

        when(mockSolrClient.add(any(Collection.class))).thenThrow(new RuntimeException("Test exception"));

        boolean result = provider.log(event);

        assertFalse(result);
        verify(mockSolrClient, times(1)).add(any(Collection.class));
    }

    @Test
    void testLog_withNonZeroStatus_updatesLastFailTime() throws Exception {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setEventId("id1");
        event.setAgentHostname("host1");
        event.setLogType("RangerAudit");

        UpdateResponse response = mock(UpdateResponse.class);
        when(response.getStatus()).thenReturn(1); // Non-zero status
        when(mockSolrClient.add(any(Collection.class))).thenReturn(response);

        provider.log(event);

        assertTrue(provider.lastFailTime > 0);
    }

    @Test
    void testLog_withNullSolrClient_attemptToConnect() {
        provider.solrClient = null;
        SolrAuditProvider spyProvider = spy(provider);
        doNothing().when(spyProvider).connect();

        AuthzAuditEvent event = new AuthzAuditEvent();
        boolean result = spyProvider.log(event);

        assertFalse(result);
        verify(spyProvider, times(1)).connect();
    }

    @Test
    void testStart_callsConnect() {
        SolrAuditProvider spyProvider = spy(provider);
        doNothing().when(spyProvider).connect();

        spyProvider.start();

        verify(spyProvider, times(1)).connect();
    }

    @Test
    void testLog_nullEvent() {
        Collection<AuditEventBase> events = Collections.singletonList(null);
        assertThrows(NullPointerException.class, () -> provider.log(events));
    }

    @Test
    void testStop_withException_swallowsException() throws Exception {
        doThrow(new IOException("Test exception")).when(mockSolrClient).close();

        // Should not throw exception
        provider.stop();

        verify(mockSolrClient, times(1)).close();
        assertNull(provider.solrClient);
    }
}
