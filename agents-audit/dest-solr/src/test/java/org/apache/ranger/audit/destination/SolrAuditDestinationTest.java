/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.destination;

import org.apache.ranger.audit.model.AuditEventBase;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.response.UpdateResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyCollection;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for SolrAuditDestination
 * */
class SolrAuditDestinationTest {
    @Mock
    private SolrClient mockSolrClient;

    @Mock
    private AuthzAuditEvent mockAuditEvent;

    @Mock
    private UpdateResponse mockUpdateResponse;

    private SolrAuditDestination destination;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        destination = new SolrAuditDestination();

        // Inject mockSolrClient using reflection
        java.lang.reflect.Field solrClientField = SolrAuditDestination.class.getDeclaredField("solrClient");
        solrClientField.setAccessible(true);
        solrClientField.set(destination, mockSolrClient);
    }

    @Test
    void testInitAndStop() {
        Properties props = new Properties();
        assertDoesNotThrow(() -> destination.init(props, "test"));
        assertDoesNotThrow(() -> destination.stop());
    }

    @Test
    void testFlush() {
        assertDoesNotThrow(() -> destination.flush());
    }

    @Test
    void testLog_Success() throws Exception {
        List<AuditEventBase> events = new ArrayList<>();
        events.add(mockAuditEvent);

        when(mockSolrClient.add(anyCollection())).thenReturn(mockUpdateResponse);
        when(mockUpdateResponse.getStatus()).thenReturn(0);

        // toSolrDoc expects AuthzAuditEvent, so mock required methods
        when(mockAuditEvent.getEventId()).thenReturn("id1");

        boolean result = destination.log(events);

        assertTrue(result);
        verify(mockSolrClient).add(anyCollection());
    }

    @Test
    void testLog_Failure() throws Exception {
        List<AuditEventBase> events = new ArrayList<>();
        events.add(mockAuditEvent);

        when(mockSolrClient.add(anyCollection())).thenReturn(mockUpdateResponse);
        when(mockUpdateResponse.getStatus()).thenReturn(1);

        when(mockAuditEvent.getEventId()).thenReturn("id2");

        boolean result = destination.log(events);

        assertFalse(result);
        verify(mockSolrClient).add(anyCollection());
    }

    @Test
    void testLog_Exception() throws Exception {
        List<AuditEventBase> events = new ArrayList<>();
        events.add(mockAuditEvent);

        when(mockSolrClient.add(anyCollection())).thenThrow(new IOException("Solr error"));

        when(mockAuditEvent.getEventId()).thenReturn("id3");

        boolean result = destination.log(events);

        assertFalse(result);
        verify(mockSolrClient).add(anyCollection());
    }

    @Test
    void testToSolrDoc() {
        AuthzAuditEvent event = mock(AuthzAuditEvent.class);
        when(event.getEventId()).thenReturn("id");
        when(event.getAccessType()).thenReturn("read");
        when(event.getAclEnforcer()).thenReturn("enforcer");
        when(event.getAgentId()).thenReturn("agent");
        when(event.getRepositoryName()).thenReturn("repo");
        when(event.getSessionId()).thenReturn("sess");
        when(event.getUser()).thenReturn("user");
        when(event.getRequestData()).thenReturn("reqData");
        when(event.getResourcePath()).thenReturn("resource");
        when(event.getClientIP()).thenReturn("cliIP");
        when(event.getLogType()).thenReturn("logType");
        when(event.getAccessResult()).thenReturn((short) 1);
        when(event.getPolicyId()).thenReturn(2L);
        when(event.getRepositoryType()).thenReturn(3);
        when(event.getResourceType()).thenReturn("resType");
        when(event.getResultReason()).thenReturn("reason");
        when(event.getAction()).thenReturn("action");
        when(event.getEventTime()).thenReturn(new Date());
        when(event.getSeqNum()).thenReturn(4L);
        when(event.getEventCount()).thenReturn(5L);
        when(event.getEventDurationMS()).thenReturn(6L);
        when(event.getTags()).thenReturn(Collections.singleton("tags"));
        when(event.getDatasets()).thenReturn(Collections.singleton("datasets"));
        when(event.getProjects()).thenReturn(Collections.singleton("projects"));
        when(event.getClusterName()).thenReturn("cluster");
        when(event.getZoneName()).thenReturn("zone");
        when(event.getAgentHostname()).thenReturn("host");
        when(event.getPolicyVersion()).thenReturn(7L);

        org.apache.solr.common.SolrInputDocument doc = destination.toSolrDoc(event);

        assertEquals("id", doc.getFieldValue("id"));
        assertEquals("read", doc.getFieldValue("access"));
        assertEquals("enforcer", doc.getFieldValue("enforcer"));
        assertEquals("agent", doc.getFieldValue("agent"));
        assertEquals("repo", doc.getFieldValue("repo"));
        assertEquals("sess", doc.getFieldValue("sess"));
        assertEquals("user", doc.getFieldValue("reqUser"));
        assertEquals("reqData", doc.getFieldValue("reqData"));
        assertEquals("resource", doc.getFieldValue("resource"));
        assertEquals("cliIP", doc.getFieldValue("cliIP"));
        assertEquals("logType", doc.getFieldValue("logType"));
        assertEquals(1, ((Number) doc.getFieldValue("result")).intValue());
        assertEquals(2L, doc.getFieldValue("policy"));
        assertEquals(3, doc.getFieldValue("repoType"));
        assertEquals("resType", doc.getFieldValue("resType"));
        assertEquals("reason", doc.getFieldValue("reason"));
        assertEquals("action", doc.getFieldValue("action"));
        assertEquals(4L, doc.getFieldValue("seq_num"));
        assertEquals(5, ((Number) doc.getFieldValue("event_count")).intValue());
        assertEquals(6L, doc.getFieldValue("event_dur_ms"));
        assertEquals("tags", doc.getFieldValue("tags"));
        assertEquals("datasets", doc.getFieldValue("datasets"));
        assertEquals("projects", doc.getFieldValue("projects"));
        assertEquals("cluster", doc.getFieldValue("cluster"));
        assertEquals("zone", doc.getFieldValue("zoneName"));
        assertEquals("host", doc.getFieldValue("agentHost"));
        assertEquals(7L, doc.getFieldValue("policyVersion"));
    }
}
