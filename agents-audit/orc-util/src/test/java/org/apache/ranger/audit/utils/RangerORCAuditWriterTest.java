/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.utils;

import org.apache.orc.Writer;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;

/**
 * @generated by copilot
 * @description Unit Test cases for RangerORCAuditWriter
 * */
class RangerORCAuditWriterTest {
    @Test
    void testOrcFileExtensionConstant() {
        assertEquals(".orc", RangerORCAuditWriter.ORC_FILE_EXTENSION);
    }

    @Test
    void testFileTypeDefaultValue() {
        RangerORCAuditWriter writer = new RangerORCAuditWriter();
        assertEquals("orc", writer.fileType);
    }

    @Test
    void testLogAsORCDelegatesToLogAuditAsORC() throws Exception {
        RangerORCAuditWriter writer = spy(new RangerORCAuditWriter());
        doReturn(Collections.singletonList(new AuthzAuditEvent())).when(writer).getAuthzAuditEvents(any());
        doReturn(true).when(writer).logAuditAsORC(any());
        assertTrue(writer.logAsORC(Collections.singletonList("event")));
        verify(writer).logAuditAsORC(any());
    }

    @Test
    void testLogFileAlwaysReturnsFalse() throws Exception {
        RangerORCAuditWriter writer = new RangerORCAuditWriter();
        assertFalse(writer.logFile(new File("test")));
    }

    @Test
    void testStopClosesOrcLogWriter() throws Exception {
        RangerORCAuditWriter writer = new RangerORCAuditWriter();
        Writer mockWriter = mock(Writer.class);
        ORCFileUtil mockOrcUtil = mock(ORCFileUtil.class);
        writer.orcLogWriter = mockWriter;
        writer.orcFileUtil = mockOrcUtil;
        writer.stop();
        verify(mockOrcUtil).close(mockWriter);
        assertNull(writer.orcLogWriter);
    }

    @Test
    void testStopHandlesExceptionAndNullifiesWriter() throws Exception {
        RangerORCAuditWriter writer = new RangerORCAuditWriter();
        Writer mockWriter = mock(Writer.class);
        ORCFileUtil mockOrcUtil = mock(ORCFileUtil.class);
        doThrow(new RuntimeException("close error")).when(mockOrcUtil).close(mockWriter);
        writer.orcLogWriter = mockWriter;
        writer.orcFileUtil = mockOrcUtil;
        writer.stop();
        assertNull(writer.orcLogWriter);
    }

    @Test
    void testFlushAndStartAreNoOps() {
        RangerORCAuditWriter writer = new RangerORCAuditWriter();
        writer.flush();
        writer.start();
        // No exception means pass
    }
}
