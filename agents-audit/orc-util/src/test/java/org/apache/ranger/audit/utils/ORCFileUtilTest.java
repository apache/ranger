/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.utils;

import org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.DecimalColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.DoubleColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;
import org.apache.orc.CompressionKind;
import org.apache.orc.Writer;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
 * @generated by copilot
 * @description Unit Test cases for ORCFileUtil
 * */
class ORCFileUtilTest {
    @Test
    void testGetInstanceReturnsSingleton() {
        ORCFileUtil util1 = ORCFileUtil.getInstance();
        ORCFileUtil util2 = ORCFileUtil.getInstance();
        assertNotNull(util1);
        assertSame(util1, util2);
    }

    @Test
    void testGetORCCompression() {
        ORCFileUtil util = new ORCFileUtil();
        assertEquals(CompressionKind.SNAPPY, util.getORCCompression("snappy"));
        assertEquals(CompressionKind.LZO, util.getORCCompression("lzo"));
        assertEquals(CompressionKind.ZLIB, util.getORCCompression("zlib"));
        assertEquals(CompressionKind.NONE, util.getORCCompression("none"));
        // Default fallback
        assertEquals(CompressionKind.SNAPPY, util.getORCCompression("unknown"));
        assertEquals(CompressionKind.SNAPPY, util.getORCCompression(null));
    }

    @Test
    void testGetShortFieldType() {
        ORCFileUtil util = new ORCFileUtil();
        assertEquals("string", util.getShortFieldType("java.lang.String"));
        assertEquals("int", util.getShortFieldType("int"));
        assertEquals("string", util.getShortFieldType("short"));
        assertEquals("string", util.getShortFieldType("java.util.Date"));
        assertEquals("bigint", util.getShortFieldType("long"));
        assertNull(util.getShortFieldType("float"));
    }

    @Test
    void testCastLongObject() {
        ORCFileUtil util = new ORCFileUtil();
        assertEquals(123L, util.castLongObject(123L));
        assertEquals(456L, util.castLongObject(456));
        assertEquals(789L, util.castLongObject("789"));
        assertEquals(0L, util.castLongObject("notANumber"));
        assertEquals(0L, util.castLongObject(null));
    }

    @Test
    void testCastStringObject() {
        ORCFileUtil util = new ORCFileUtil();
        assertEquals("test", util.castStringObject("test"));
        Date now = new Date();
        assertNotNull(util.castStringObject(now));
        assertNull(util.castStringObject(123));
    }

    @Test
    void testGetBytesValues() {
        ORCFileUtil util = new ORCFileUtil();
        byte[] result = util.getBytesValues("abc");
        assertArrayEquals("abc".getBytes(), result);
        assertArrayEquals("".getBytes(), util.getBytesValues(null));
    }

    @Test
    void testGetDateString() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        Date date = new Date(1700000000000L);
        Method m = ORCFileUtil.class.getDeclaredMethod("getDateString", Date.class);
        m.setAccessible(true);
        String result = (String) m.invoke(util, date);
        assertTrue(result.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"));
    }

    @Test
    void testGetAuditSchemaReturnsStruct() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        Method m = ORCFileUtil.class.getDeclaredMethod("getAuditSchema");
        m.setAccessible(true);
        String schema = (String) m.invoke(util);
        assertTrue(schema.startsWith("struct<"));
        assertTrue(schema.endsWith(">"));
    }

    @Test
    void testGetSchemaFieldTypeMap() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        // set auditSchema field
        String fakeSchema = "struct<foo:string,bar:int>";
        java.lang.reflect.Field f = ORCFileUtil.class.getDeclaredField("auditSchema");
        f.setAccessible(true);
        f.set(util, fakeSchema);

        Method m = ORCFileUtil.class.getDeclaredMethod("getSchemaFieldTypeMap");
        m.setAccessible(true);
        Map<String, String> map = (Map<String, String>) m.invoke(util);
        assertEquals("string", map.get("foo"));
        assertEquals("int", map.get("bar"));
    }

    @Test
    void testGetColumnVectorTypeCoversAllCases() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        Method m = ORCFileUtil.class.getDeclaredMethod("getColumnVectorType", String.class);
        m.setAccessible(true);

        assertTrue(m.invoke(util, "int") instanceof LongColumnVector);
        assertTrue(m.invoke(util, "bigint") instanceof LongColumnVector);
        assertTrue(m.invoke(util, "date") instanceof LongColumnVector);
        assertTrue(m.invoke(util, "boolean") instanceof LongColumnVector);
        assertTrue(m.invoke(util, "string") instanceof BytesColumnVector);
        assertTrue(m.invoke(util, "varchar") instanceof BytesColumnVector);
        assertTrue(m.invoke(util, "char") instanceof BytesColumnVector);
        assertTrue(m.invoke(util, "binary") instanceof BytesColumnVector);
        assertTrue(m.invoke(util, "decimal") instanceof DecimalColumnVector);
        assertTrue(m.invoke(util, "double") instanceof DoubleColumnVector);
        assertTrue(m.invoke(util, "float") instanceof DoubleColumnVector);
        assertNull(m.invoke(util, "unknownType"));
    }

    @Test
    void testCastLongObjectHandlesNonNumber() {
        ORCFileUtil util = new ORCFileUtil();
        // Should log error and return 0L
        assertEquals(0L, util.castLongObject(new Object()));
    }

    @Test
    void testCastStringObjectHandlesNonStringNonDate() {
        ORCFileUtil util = new ORCFileUtil();
        // Should log error and return null
        assertNull(util.castStringObject(123));
    }

    @Test
    void testInitSetsConfiguration() throws Exception {
        ORCFileUtil util = new ORCFileUtil();

        // Test configuration values
        int bufferSize = 4096;
        long stripeSize = 67108864L;
        String compression = "zlib";

        util.init(bufferSize, stripeSize, compression);

        // Verify fields are set correctly
        assertEquals(bufferSize, util.orcBufferSize);
        assertEquals(stripeSize, util.orcStripeSize);
        assertEquals(CompressionKind.ZLIB, util.compressionKind);
        assertNotNull(util.schema);
        assertNotNull(util.batch);
        assertNotNull(util.auditSchema);
    }

    @Test
    void testBuildVectorRowBatch() throws Exception {
        ORCFileUtil util = new ORCFileUtil();

        // Initialize to create schema
        util.init(1000, 10000L, "none");

        // Get the vectorizedRowBatchMap via reflection
        java.lang.reflect.Field field = ORCFileUtil.class.getDeclaredField("vectorizedRowBatchMap");
        field.setAccessible(true);
        Map<String, ColumnVector> map = (Map<String, ColumnVector>) field.get(util);

        // Should have entries for each field in the schema
        assertFalse(map.isEmpty());

        // Check for expected field types
        field = ORCFileUtil.class.getDeclaredField("schemaFields");
        field.setAccessible(true);
        ArrayList<String> schemaFields = (ArrayList<String>) field.get(util);

        // Ensure all schema fields have corresponding column vectors
        for (String fieldName : schemaFields) {
            assertTrue(map.containsKey(fieldName));
            assertNotNull(map.get(fieldName));
        }
    }

    @Test
    void testGetFieldValueReturnsCorrectInfo() throws Exception {
        ORCFileUtil util = new ORCFileUtil();

        // Create a sample event
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setEventId("test123");
        event.setClientIP("192.168.1.1");

        // Test getting eventId field
        ORCFileUtil.SchemaInfo info = util.getFieldValue(event, "eventId");
        assertEquals("eventId", info.getField());
        assertEquals("java.lang.String", info.getType());
        assertEquals("test123", info.getValue());

        // Test getting clientIP field
        info = util.getFieldValue(event, "clientIP");
        assertEquals("clientIP", info.getField());
        assertEquals("java.lang.String", info.getType());
        assertEquals("192.168.1.1", info.getValue());
    }

    @Test
    void testSchemaInfoGettersAndSetters() {
        ORCFileUtil.SchemaInfo info = new ORCFileUtil.SchemaInfo();

        // Test field property
        info.setField("testField");
        assertEquals("testField", info.getField());

        // Test type property
        info.setType("string");
        assertEquals("string", info.getType());

        // Test value property
        Object testValue = "testValue";
        info.setValue(testValue);
        assertEquals(testValue, info.getValue());
    }

    @Test
    void testLogHandlesEmptyEvents() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        util.init(10, 100L, "none");

        // Create mock writer
        Writer mockWriter = mock(Writer.class);

        // Test with empty collection
        Collection<AuthzAuditEvent> emptyEvents = new ArrayList<>();

        // Should not throw exception
        util.log(mockWriter, emptyEvents);

        // Verify writer was not called with any row batch
        verify(mockWriter, never()).addRowBatch(any());
    }

    @Test
    void testLogHandlesBatchSizeExactlyMatchingBufferSize() throws Exception {
        ORCFileUtil util = new ORCFileUtil();
        int bufferSize = 3; // Small buffer size for testing
        util.init(bufferSize, 100L, "none");

        // Create mock writer
        Writer mockWriter = mock(Writer.class);

        // Create exactly bufferSize events
        Collection<AuthzAuditEvent> events = new ArrayList<>();
        for (int i = 0; i < bufferSize; i++) {
            AuthzAuditEvent event = new AuthzAuditEvent();
            event.setEventId("test" + i);
            events.add(event);
        }

        // Log the events
        util.log(mockWriter, events);

        // Should call addRowBatch exactly once
        verify(mockWriter, times(1)).addRowBatch(any());
    }

    @Test
    void testGetColumnVectorTypeThrowsForUnsupportedTypes() {
        ORCFileUtil util = new ORCFileUtil();

        // Test unsupported complex types
        assertThrows(Exception.class, () -> util.getColumnVectorType("array"));
        assertThrows(Exception.class, () -> util.getColumnVectorType("map"));
        assertThrows(Exception.class, () -> util.getColumnVectorType("struct"));
        assertThrows(Exception.class, () -> util.getColumnVectorType("uniontype"));
    }
}
