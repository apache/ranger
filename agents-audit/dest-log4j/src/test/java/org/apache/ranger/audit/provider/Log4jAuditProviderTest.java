/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider;

import org.apache.ranger.audit.model.AuditEventBase;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for Log4jAuditProvider
 * */
class Log4jAuditProviderTest {
    private Log4jAuditProvider auditProvider;

    @Mock
    private Logger mockAuditLogger;

    @Mock
    private Logger mockLogger;

    @Mock
    private AuditEventBase mockEvent;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        auditProvider = new Log4jAuditProvider();

        // Use reflection to inject the mock logger
        try {
            java.lang.reflect.Field auditLogField = Log4jAuditProvider.class.getDeclaredField("AUDITLOG");
            auditLogField.setAccessible(true);
            auditLogField.set(null, mockAuditLogger);

            java.lang.reflect.Field logField = Log4jAuditProvider.class.getDeclaredField("LOG");
            logField.setAccessible(true);
            logField.set(null, mockLogger);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    void testLogSingleEventWithLoggerDisabled() {
        // Given
        when(mockAuditLogger.isInfoEnabled()).thenReturn(false);

        // When
        boolean result = auditProvider.log(mockEvent);

        // Then
        assertTrue(result);
        // Verify the logger was not called
        verify(mockAuditLogger, times(0)).info(anyString());
    }

    @Test
    void testLogNullEvent() {
        // Given
        when(mockAuditLogger.isInfoEnabled()).thenReturn(true);

        // When
        boolean result = auditProvider.log((AuditEventBase) null);

        // Then
        assertTrue(result);
        // Verify the logger was not called with any message
        verify(mockAuditLogger, times(0)).info(anyString());
    }

    @Test
    void testStartStop() {
        // These methods are intentionally empty but should not throw exceptions
        auditProvider.start();
        auditProvider.stop();
    }

    @Test
    void testWaitToComplete() {
        // These methods are inherited no-ops but should not throw exceptions
        auditProvider.waitToComplete();
        auditProvider.waitToComplete(1000);

        // No assertions needed as these methods are no-ops
    }
}
