/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.destination;

import org.apache.ranger.audit.model.AuditEventBase;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for Log4JAuditDestination
 * */
class Log4JAuditDestinationTest {
    private Log4JAuditDestination destination;
    private Logger mockLogger;
    private AuditEventBase mockEvent;

    @BeforeEach
    void setUp() throws Exception {
        destination = new Log4JAuditDestination();
        mockLogger = mock(Logger.class);
        mockEvent = mock(AuditEventBase.class);

        // Set static auditLogger field via reflection
        Field auditLoggerField = Log4JAuditDestination.class.getDeclaredField("auditLogger");
        auditLoggerField.setAccessible(true);
        auditLoggerField.set(null, mockLogger);
    }

    @Test
    void testInit_UsesDefaultLoggerName() {
        Properties props = new Properties();
        destination.init(props, "testPrefix");
        // No exception means success, logger is set
    }

    @Test
    void testInit_UsesCustomLoggerName() {
        Properties props = new Properties();
        props.setProperty("testPrefix.logger", "custom.logger");
        destination.init(props, "testPrefix");
        // No exception means success, logger is set
    }

    @Test
    void testLog_Event_NullEvent() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        assertTrue(destination.log((AuditEventBase) null));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLog_Event_InfoDisabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(false);
        assertTrue(destination.log(mockEvent));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLog_Event_InfoEnabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        // Can't mock MiscUtil.stringify, so just ensure no exception
        assertTrue(destination.log(mockEvent));
    }

    @Test
    void testLogJSON_String_NullEvent() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        assertTrue(destination.logJSON((String) null));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLogJSON_String_InfoDisabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(false);
        assertTrue(destination.logJSON("event"));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLogJSON_String_InfoEnabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        assertTrue(destination.logJSON("event"));
        verify(mockLogger).info("event");
    }

    @Test
    void testLogJSON_Collection_InfoDisabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(false);
        List<String> events = Arrays.asList("a", "b");
        assertTrue(destination.logJSON(events));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLogJSON_Collection_InfoEnabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        List<String> events = Arrays.asList("a", "b");
        assertFalse(destination.logJSON(events));
        verify(mockLogger, times(2)).info(anyString());
    }

    @Test
    void testLog_Collection_InfoDisabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(false);
        List<AuditEventBase> events = Arrays.asList(mockEvent, mockEvent);
        assertTrue(destination.log(events));
        verify(mockLogger, never()).info(anyString());
    }

    @Test
    void testLog_Collection_InfoEnabled() {
        when(mockLogger.isInfoEnabled()).thenReturn(true);
        List<AuditEventBase> events = Arrays.asList(mockEvent, mockEvent);
        assertTrue(destination.log(events));
    }

    @Test
    void testStop() {
        assertDoesNotThrow(() -> destination.stop());
    }
}
