/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.utils;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.security.auth.Subject;
import javax.security.auth.kerberos.KerberosPrincipal;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;

import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.RETURNS_SMART_NULLS;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.withSettings;

/**
 * @generated by copilot
 * @description Unit Test cases for AbstractKerberosUser
 * */
class AbstractKerberosUserTest {
    private AbstractKerberosUserImpl user;

    @BeforeEach
    void setUp() {
        user = new AbstractKerberosUserImpl("test@EXAMPLE.COM");
    }

    @Test
    void testDoAsPrivilegedActionThrowsIfNotLoggedIn() {
        assertThrows(IllegalStateException.class, () -> user.doAs((PrivilegedAction<Object>) () -> null));
    }

    @Test
    void testDoAsPrivilegedExceptionActionThrowsIfNotLoggedIn() {
        assertThrows(IllegalStateException.class, () -> user.doAs((PrivilegedExceptionAction<Object>) () -> null));
    }

    @Test
    void testToStringContainsPrincipal() {
        String str = user.toString();
        assertTrue(str.contains("test@EXAMPLE.COM"));
    }

    @Test
    void testCheckTGTAndReloginWhenNoTGT() throws Exception {
        // Create a test user with no TGT
        AbstractKerberosUserImpl userWithNoTGT = spy(new AbstractKerberosUserImpl("test@EXAMPLE.COM"));

        // Use empty subject (no tickets)
        userWithNoTGT.subject = new Subject();
        userWithNoTGT.loggedIn.set(true);

        // Mock login/logout to prevent actual execution
        doNothing().when(userWithNoTGT).login();
        doNothing().when(userWithNoTGT).logout();

        // Should return true because with no TGT it should relogin
        assertTrue(userWithNoTGT.checkTGTAndRelogin());

        // Verify logout and login were called
        verify(userWithNoTGT).logout();
        verify(userWithNoTGT).login();
    }

    // Helper method to create a TGS principal
    private KerberosPrincipal createTGSPrincipal() {
        String realm = "EXAMPLE.COM";
        String name = "krbtgt/" + realm + "@" + realm;
        return mock(KerberosPrincipal.class, withSettings()
                .defaultAnswer(RETURNS_SMART_NULLS)
                .useConstructor(name));
    }

    @Test
    void testLoginDoesNothingIfAlreadyLoggedIn() throws Exception {
        // Create user and set it as already logged in
        AbstractKerberosUserImpl testUser = spy(new AbstractKerberosUserImpl("test@EXAMPLE.COM"));
        testUser.loggedIn.set(true);

        // Create a mock login context and set it
        LoginContext mockContext = mock(LoginContext.class);
        testUser.loginContext = mockContext;

        // Call login - should be a no-op
        testUser.login();

        // Verify login was not called
        verify(mockContext, never()).login();
    }

    @Test
    void testLogoutDoesNothingIfNotLoggedIn() throws Exception {
        // Ensure we're not logged in
        assertFalse(user.isLoggedIn());

        // Create a login context spy
        LoginContext mockContext = mock(LoginContext.class);
        user.loginContext = mockContext;

        // Logout should be a no-op
        user.logout();

        // Verify logout was never called
        verify(mockContext, never()).logout();
    }

    static class AbstractKerberosUserImpl extends AbstractKerberosUser {
        private final String principal;

        AbstractKerberosUserImpl(String principal) {
            this.principal = principal;
        }

        @Override
        protected LoginContext createLoginContext(Subject subject) throws LoginException {
            // Return a dummy LoginContext with no-op login/logout
            return new LoginContext("dummy") {
                @Override
                public void login() {}

                @Override
                public void logout() {}
            };
        }

        @Override
        public String getPrincipal() {
            return principal;
        }
    }
}
