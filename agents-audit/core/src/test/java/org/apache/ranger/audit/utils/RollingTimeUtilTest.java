/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.audit.utils;

import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for RollingTimeUtil
 * */
class RollingTimeUtilTest {
    @Test
    void testTimePeriodConstants() {
        assertEquals("m", RollingTimeUtil.MINUTES);
        assertEquals("h", RollingTimeUtil.HOURS);
        assertEquals("d", RollingTimeUtil.DAYS);
        assertEquals("w", RollingTimeUtil.WEEKS);
        assertEquals("M", RollingTimeUtil.MONTHS);
        assertEquals("y", RollingTimeUtil.YEARS);
    }

    @Test
    void testSingletonInstance() {
        RollingTimeUtil util1 = RollingTimeUtil.getInstance();
        RollingTimeUtil util2 = RollingTimeUtil.getInstance();
        assertSame(util1, util2);
    }

    @Test
    void testConvertRolloverSecondsToRolloverPeriod() {
        RollingTimeUtil util = new RollingTimeUtil();
        assertEquals("1d", util.convertRolloverSecondsToRolloverPeriod(86400));
        assertEquals("2d", util.convertRolloverSecondsToRolloverPeriod(2 * 86400));
        assertEquals("1h", util.convertRolloverSecondsToRolloverPeriod(3600));
        assertEquals("2h", util.convertRolloverSecondsToRolloverPeriod(2 * 3600));
        assertEquals("1m", util.convertRolloverSecondsToRolloverPeriod(60));
        assertEquals("2m", util.convertRolloverSecondsToRolloverPeriod(120));
        assertNull(util.convertRolloverSecondsToRolloverPeriod(59));
    }

    @Test
    void testComputeNextRollingTimeWithDuration() {
        RollingTimeUtil util = new RollingTimeUtil();
        long now = System.currentTimeMillis();
        long next = util.computeNextRollingTime(60, null);
        assertTrue(next > now);
    }

    @Test
    void testComputeNextRollingTimeStringPeriod() throws Exception {
        RollingTimeUtil util = new RollingTimeUtil();
        Date next = util.computeNextRollingTime("1m");
        assertNotNull(next);
        next = util.computeNextRollingTime("1h");
        assertNotNull(next);
        next = util.computeNextRollingTime("1d");
        assertNotNull(next);
        next = util.computeNextRollingTime("1w");
        assertNotNull(next);
        next = util.computeNextRollingTime("1M");
        assertNotNull(next);
        next = util.computeNextRollingTime("1y");
        assertNotNull(next);
    }

    @Test
    void testComputeNextRollingTimeStringPeriodThrows() {
        RollingTimeUtil util = new RollingTimeUtil();
        Exception ex = assertThrows(Exception.class, () -> util.computeNextRollingTime(""));
        assertTrue(ex.getMessage().contains("Unable to compute"));
    }
}
