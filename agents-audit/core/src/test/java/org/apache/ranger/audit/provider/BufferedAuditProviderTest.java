/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider;

import org.apache.ranger.audit.model.AuditEventBase;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collection;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for BufferedAuditProvider
 * */
class BufferedAuditProviderTest {
    private TestBufferedAuditProvider auditProvider;

    @Mock
    private LogBuffer<AuditEventBase> mockBuffer;

    @Mock
    private LogDestination<AuditEventBase> mockDestination;

    @Mock
    private AuditEventBase mockAuditEvent;

    @Mock
    private AuthzAuditEvent mockAuthzEvent;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        auditProvider = new TestBufferedAuditProvider();
        auditProvider.setBufferAndDestination(mockBuffer, mockDestination);
    }

    @Test
    void testLogAuditEvent() {
        // Given
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);

        // When
        boolean result = auditProvider.log(mockAuditEvent);

        // Then
        assertTrue(result);
        verify(mockBuffer).add(mockAuditEvent);
    }

    @Test
    void testLogAuditEventFailure() {
        // Given
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(false);

        // When
        boolean result = auditProvider.log(mockAuditEvent);

        // Then
        assertFalse(result);
        verify(mockBuffer).add(mockAuditEvent);
    }

    @Test
    void testLogAuthzEvent() {
        // Given
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);

        // When
        boolean result = auditProvider.log(mockAuthzEvent);

        // Then
        assertTrue(result);
        verify(mockBuffer).add(mockAuthzEvent);
        verify(mockAuthzEvent).setLogType("RangerAudit");
        verify(mockAuthzEvent).setEventId(anyString());
        verify(mockAuthzEvent).setAgentHostname(anyString());
    }

    @Test
    void testLogAuthzEventWithPresetValues() {
        // Given
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);
        when(mockAuthzEvent.getAgentHostname()).thenReturn("presetHostname");
        when(mockAuthzEvent.getLogType()).thenReturn("presetLogType");
        when(mockAuthzEvent.getEventId()).thenReturn("presetEventId");

        // When
        boolean result = auditProvider.log(mockAuthzEvent);

        // Then
        assertTrue(result);
        verify(mockBuffer).add(mockAuthzEvent);
        verify(mockAuthzEvent, never()).setLogType(anyString());
        verify(mockAuthzEvent, never()).setEventId(anyString());
        verify(mockAuthzEvent, never()).setAgentHostname(anyString());
    }

    @Test
    void testLogJSON() {
        // Given
        String jsonEvent = "{\"eventTime\":\"2023-05-20\",\"accessType\":\"read\"}";
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);

        // When
        boolean result = auditProvider.logJSON(jsonEvent);

        // Then
        assertTrue(result);
        verify(mockBuffer).add(any(AuthzAuditEvent.class));
    }

    @Test
    void testLogJSONCollection() {
        // Given
        Collection<String> jsonEvents = Arrays.asList(
                "{\"eventTime\":\"2023-05-20\",\"accessType\":\"read\"}",
                "{\"eventTime\":\"2023-05-21\",\"accessType\":\"write\"}");
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);

        // When
        boolean result = auditProvider.logJSON(jsonEvents);

        // Then
        assertTrue(result);
        verify(mockBuffer, times(2)).add(any(AuthzAuditEvent.class));
    }

    @Test
    void testLogJSONCollectionFailure() {
        // Given
        Collection<String> jsonEvents = Arrays.asList(
                "{\"eventTime\":\"2023-05-20\",\"accessType\":\"read\"}",
                "{\"eventTime\":\"2023-05-21\",\"accessType\":\"write\"}");
        when(mockBuffer.add(any(AuditEventBase.class)))
                .thenReturn(true)
                .thenReturn(false);

        // When
        boolean result = auditProvider.logJSON(jsonEvents);

        // Then
        assertFalse(result);
        verify(mockBuffer, times(2)).add(any(AuthzAuditEvent.class));
    }

    @Test
    void testLogCollection() {
        // Given
        Collection<AuditEventBase> events = Arrays.asList(
                mockAuditEvent,
                mock(AuditEventBase.class));
        when(mockBuffer.add(any(AuditEventBase.class))).thenReturn(true);

        // When
        boolean result = auditProvider.log(events);

        // Then
        assertTrue(result);
        verify(mockBuffer, times(2)).add(any(AuditEventBase.class));
    }

    @Test
    void testLogCollectionFailure() {
        // Given
        Collection<AuditEventBase> events = Arrays.asList(
                mockAuditEvent,
                mock(AuditEventBase.class));
        when(mockBuffer.add(any(AuditEventBase.class)))
                .thenReturn(true)
                .thenReturn(false);

        // When
        boolean result = auditProvider.log(events);

        // Then
        assertFalse(result);
        verify(mockBuffer, times(2)).add(any(AuditEventBase.class));
    }

    @Test
    void testStart() {
        // When
        auditProvider.start();

        // Then
        verify(mockBuffer).start(mockDestination);
    }

    @Test
    void testStop() {
        // When
        auditProvider.stop();

        // Then
        verify(mockBuffer).stop();
    }

    @Test
    void testFlush() {
        // This is a no-op method in BufferedAuditProvider
        auditProvider.flush();

        // No verification needed as method is empty
    }

    @Test
    void testWaitToComplete() {
        // These are no-op methods in BufferedAuditProvider
        auditProvider.waitToComplete();
        auditProvider.waitToComplete(1000);

        // No verification needed as methods are empty
    }

    @Test
    void testGetters() {
        // When & Then
        assertSame(mockBuffer, auditProvider.getBuffer());
        assertSame(mockDestination, auditProvider.getDestination());
    }

    // Test implementation of BufferedAuditProvider for testing
    static class TestBufferedAuditProvider extends BufferedAuditProvider {
        public TestBufferedAuditProvider() {
            // Default constructor
        }

        @Override
        public void init(Properties props, String propPrefix) {
            // Simple implementation for testing
            super.init(props, propPrefix);
        }
    }
}
