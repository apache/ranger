/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.test;

import org.apache.ranger.audit.model.AuditEventBase;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.audit.model.EnumRepositoryType;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for TestEvents
 * */
class TestEventsTest {
    @Test
    void testMainMethodCoverage() {
        // This will execute the main method and cover all its code for coverage tools
        TestEvents.main(new String[0]);
    }

    @Test
    void testPrivateConstructorNotAccessible() throws Exception {
        Constructor<TestEvents> constructor = TestEvents.class.getDeclaredConstructor();
        // Java 8: skip canAccess/isAccessible check
        constructor.setAccessible(true);
        TestEvents instance = constructor.newInstance();
        assertNotNull(instance);
    }

    @Test
    void testGetTestEventBranch0() {
        AuditEventBase event = invokeGetTestEvent(0);
        assertTrue(event instanceof AuthzAuditEvent);
        AuthzAuditEvent authz = (AuthzAuditEvent) event;
        assertEquals("hdfsdev", authz.getRepositoryName());
        assertEquals(EnumRepositoryType.HDFS, authz.getRepositoryType());
        assertEquals("/tmp/test-audit.log", authz.getResourcePath());
        assertEquals("file", authz.getResourceType());
        assertEquals("read", authz.getAccessType());
        assertNotNull(authz.getEventTime());
        assertEquals("0", authz.getResultReason());
    }

    @Test
    void testGetTestEventBranch1() {
        AuditEventBase event = invokeGetTestEvent(1);
        AuthzAuditEvent authz = (AuthzAuditEvent) event;
        assertEquals("hbasedev", authz.getRepositoryName());
        assertEquals(EnumRepositoryType.HBASE, authz.getRepositoryType());
        assertEquals("test_table/test_cf/test_col", authz.getResourcePath());
        assertEquals("column", authz.getResourceType());
        assertEquals("read", authz.getAccessType());
        assertNotNull(authz.getEventTime());
        assertEquals("1", authz.getResultReason());
    }

    @Test
    void testGetTestEventBranch2() {
        AuditEventBase event = invokeGetTestEvent(2);
        AuthzAuditEvent authz = (AuthzAuditEvent) event;
        assertEquals("hivedev", authz.getRepositoryName());
        assertEquals(EnumRepositoryType.HIVE, authz.getRepositoryType());
        assertEquals("test_database/test_table/test_col", authz.getResourcePath());
        assertEquals("column", authz.getResourceType());
        assertEquals("select", authz.getAccessType());
        assertNotNull(authz.getEventTime());
        assertEquals("2", authz.getResultReason());
    }

    @Test
    void testGetTestEventBranch3() {
        AuditEventBase event = invokeGetTestEvent(3);
        AuthzAuditEvent authz = (AuthzAuditEvent) event;
        assertEquals("knoxdev", authz.getRepositoryName());
        assertEquals(EnumRepositoryType.KNOX, authz.getRepositoryType());
        assertEquals("topologies/ranger-admin", authz.getResourcePath());
        assertEquals("service", authz.getResourceType());
        assertEquals("get", authz.getAccessType());
        assertNotNull(authz.getEventTime());
        assertEquals("3", authz.getResultReason());
    }

    @Test
    void testGetTestEventBranch4() {
        AuditEventBase event = invokeGetTestEvent(4);
        AuthzAuditEvent authz = (AuthzAuditEvent) event;
        assertEquals("stormdev", authz.getRepositoryName());
        assertEquals(EnumRepositoryType.STORM, authz.getRepositoryType());
        assertEquals("topologies/read-finance-stream", authz.getResourcePath());
        assertEquals("topology", authz.getResourceType());
        assertEquals("submit", authz.getAccessType());
        assertNotNull(authz.getEventTime());
        assertEquals("4", authz.getResultReason());
    }

    private AuditEventBase invokeGetTestEvent(int idx) {
        try {
            Method method = TestEvents.class.getDeclaredMethod("getTestEvent", int.class);
            method.setAccessible(true);
            return (AuditEventBase) method.invoke(null, idx);
        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            fail("Reflection failed: " + e.getMessage());
            return null;
        }
    }
}
