/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for StandAloneAuditProviderFactory
 * */
class StandAloneAuditProviderFactoryTest {
    @BeforeEach
    void setUp() throws Exception {
        // Reset the singleton instance before each test
        resetSingleton();
    }

    @AfterEach
    void tearDown() throws Exception {
        // Reset the singleton after each test to avoid affecting other tests
        resetSingleton();
    }

    @Test
    void testGetInstanceReturnsSameInstance() {
        // When getting the instance twice
        StandAloneAuditProviderFactory instance1 = StandAloneAuditProviderFactory.getInstance();
        StandAloneAuditProviderFactory instance2 = StandAloneAuditProviderFactory.getInstance();

        // Then the returned instances should be the same
        assertNotNull(instance1);
        assertSame(instance1, instance2, "getInstance() should always return the same instance");
    }

    @Test
    void testInstanceIsAuditProviderFactory() {
        // When getting an instance
        StandAloneAuditProviderFactory instance = StandAloneAuditProviderFactory.getInstance();

        // Then it should be an instance of AuditProviderFactory
        assertTrue(instance instanceof AuditProviderFactory,
                "StandAloneAuditProviderFactory should be an instance of AuditProviderFactory");
    }

    @Test
    void testMultithreadedGetInstance() throws InterruptedException {
        // Test getting instances from multiple threads to verify thread safety
        final int threadCount = 10;
        final StandAloneAuditProviderFactory[] instances = new StandAloneAuditProviderFactory[threadCount];

        // Create threads that will call getInstance()
        Thread[] threads = new Thread[threadCount];
        for (int i = 0; i < threadCount; i++) {
            final int index = i;
            threads[i] = new Thread(() -> {
                instances[index] = StandAloneAuditProviderFactory.getInstance();
            });
        }

        // Start all threads
        for (Thread thread : threads) {
            thread.start();
        }

        // Wait for all threads to complete
        for (Thread thread : threads) {
            thread.join();
        }

        // Verify all threads got the same instance
        StandAloneAuditProviderFactory firstInstance = instances[0];
        assertNotNull(firstInstance, "getInstance should not return null");

        for (int i = 1; i < threadCount; i++) {
            assertSame(firstInstance, instances[i],
                    "All threads should get the same instance");
        }
    }

    @Test
    void testConstructorIsPrivate() throws Exception {
        // Private constructor test - verify it's not accessible
        boolean isPrivate = java.lang.reflect.Modifier.isPrivate(
                StandAloneAuditProviderFactory.class.getDeclaredConstructor().getModifiers());

        assertTrue(isPrivate, "Constructor should be private for singleton pattern");
    }

    /**
     * Helper method to reset the singleton instance using reflection
     */
    private void resetSingleton() throws Exception {
        Field field = StandAloneAuditProviderFactory.class.getDeclaredField("sFactory");
        field.setAccessible(true);
        field.set(null, null);
    }
}
