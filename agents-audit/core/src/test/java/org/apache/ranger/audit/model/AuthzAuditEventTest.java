/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.model;

import org.junit.jupiter.api.Test;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for AuthzAuditEvent
 * */
class AuthzAuditEventTest {
    @Test
    void testDefaultConstructor() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        assertNotNull(event);
        assertEquals(0, event.getRepositoryType());
        assertNotNull(event.getEventTime());
        assertEquals(1, event.getEventCount());
        assertNotNull(event.getTags());
    }

    @Test
    void testParameterizedConstructor() {
        Date now = new Date();
        AuthzAuditEvent event = new AuthzAuditEvent(
                1, "repo", "user", now, "read", "/path", "file", "access",
                (short) 1, "agent", 100L, "reason", "enforcer", "sess", "cliType", "127.0.0.1", "reqData", "cluster", "zone", 2L);
        assertEquals(1, event.getRepositoryType());
        assertEquals("repo", event.getRepositoryName());
        assertEquals("user", event.getUser());
        assertEquals(now, event.getEventTime());
        assertEquals("read", event.getAccessType());
        assertEquals("/path", event.getResourcePath());
        assertEquals("file", event.getResourceType());
        assertEquals("access", event.getAction());
        assertEquals(1, event.getAccessResult());
        assertEquals("agent", event.getAgentId());
        assertEquals(100L, event.getPolicyId());
        assertEquals("reason", event.getResultReason());
        assertEquals("enforcer", event.getAclEnforcer());
        assertEquals("sess", event.getSessionId());
        assertEquals("cliType", event.getClientType());
        assertEquals("127.0.0.1", event.getClientIP());
        assertEquals("reqData", event.getRequestData());
        assertEquals("cluster", event.getClusterName());
        assertEquals("zone", event.getZoneName());
        assertEquals(2L, event.getPolicyVersion());
    }

    @Test
    void testSettersAndGetters() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setRepositoryType(2);
        event.setRepositoryName("repo2");
        event.setUser("user2");
        event.setAccessType("write");
        event.setResourcePath("/data");
        event.setResourceType("dir");
        event.setAction("modify");
        event.setAccessResult((short) 0);
        event.setAgentId("agent2");
        event.setPolicyId(200L);
        event.setResultReason("denied");
        event.setAclEnforcer("enforcer2");
        event.setSessionId("sess2");
        event.setClientType("cli2");
        event.setClientIP("192.168.1.1");
        event.setRequestData("data");
        event.setAgentHostname("host");
        event.setLogType("type");
        event.setEventId("id");
        event.setSeqNum(10L);
        event.setEventCount(5L);
        event.setEventDurationMS(100L);
        Set<String> tags = new HashSet<>();
        tags.add("tag1");
        event.setTags(tags);
        Set<String> datasets = new HashSet<>();
        datasets.add("ds1");
        event.setDatasets(datasets);
        Set<String> projects = new HashSet<>();
        projects.add("prj1");
        event.setProjects(projects);
        event.setClusterName("cl");
        event.setZoneName("zn");
        event.setPolicyVersion(3L);
        event.setAdditionalInfo("info");

        assertEquals(2, event.getRepositoryType());
        assertEquals("repo2", event.getRepositoryName());
        assertEquals("user2", event.getUser());
        assertEquals("write", event.getAccessType());
        assertEquals("/data", event.getResourcePath());
        assertEquals("dir", event.getResourceType());
        assertEquals("modify", event.getAction());
        assertEquals(0, event.getAccessResult());
        assertEquals("agent2", event.getAgentId());
        assertEquals(200L, event.getPolicyId());
        assertEquals("denied", event.getResultReason());
        assertEquals("enforcer2", event.getAclEnforcer());
        assertEquals("sess2", event.getSessionId());
        assertEquals("cli2", event.getClientType());
        assertEquals("192.168.1.1", event.getClientIP());
        assertEquals("data", event.getRequestData());
        assertEquals("host", event.getAgentHostname());
        assertEquals("type", event.getLogType());
        assertEquals("id", event.getEventId());
        assertEquals(10L, event.getSeqNum());
        assertEquals(5L, event.getEventCount());
        assertEquals(100L, event.getEventDurationMS());
        assertEquals(tags, event.getTags());
        assertEquals(datasets, event.getDatasets());
        assertEquals(projects, event.getProjects());
        assertEquals("cl", event.getClusterName());
        assertEquals("zn", event.getZoneName());
        assertEquals(3L, event.getPolicyVersion());
        assertEquals("info", event.getAdditionalInfo());
    }

    @Test
    void testGetEventKey() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setUser("alice");
        event.setAccessType("read");
        event.setResourcePath("/file");
        event.setResourceType("file");
        event.setAction("access");
        event.setAccessResult((short) 1);
        event.setSessionId("sess1");
        event.setClientIP("10.0.0.1");
        String expected = "alice^read^/file^file^access^1^sess1^10.0.0.1";
        assertEquals(expected, event.getEventKey());
    }

    @Test
    void testToString() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setUser("bob");
        String str = event.toString();
        assertTrue(str.contains("AuthzAuditEvent{"));
        assertTrue(str.contains("user=bob"));
    }
}
