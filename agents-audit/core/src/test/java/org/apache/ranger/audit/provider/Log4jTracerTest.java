/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import static org.mockito.Mockito.verify;

/**
 * @generated by copilot
 * @description Unit Test cases for Log4jTracer
 * */
class Log4jTracerTest {
    private Log4jTracer tracer;

    @Mock
    private Logger mockLogger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        tracer = new Log4jTracer(mockLogger);
    }

    @Test
    void testDebugWithMessage() {
        // Given
        String message = "Debug message";

        // When
        tracer.debug(message);

        // Then
        verify(mockLogger).debug(message);
    }

    @Test
    void testDebugWithMessageAndException() {
        // Given
        String message = "Debug message with exception";
        Throwable exception = new RuntimeException("Test exception");

        // When
        tracer.debug(message, exception);

        // Then
        verify(mockLogger).debug(message, exception);
    }

    @Test
    void testInfoWithMessage() {
        // Given
        String message = "Info message";

        // When
        tracer.info(message);

        // Then
        verify(mockLogger).info(message);
    }

    @Test
    void testInfoWithMessageAndException() {
        // Given
        String message = "Info message with exception";
        Throwable exception = new RuntimeException("Test exception");

        // When
        tracer.info(message, exception);

        // Then
        verify(mockLogger).info(message, exception);
    }

    @Test
    void testWarnWithMessage() {
        // Given
        String message = "Warn message";

        // When
        tracer.warn(message);

        // Then
        verify(mockLogger).warn(message);
    }

    @Test
    void testWarnWithMessageAndException() {
        // Given
        String message = "Warn message with exception";
        Throwable exception = new RuntimeException("Test exception");

        // When
        tracer.warn(message, exception);

        // Then
        verify(mockLogger).warn(message, exception);
    }

    @Test
    void testErrorWithMessage() {
        // Given
        String message = "Error message";

        // When
        tracer.error(message);

        // Then
        verify(mockLogger).error(message);
    }

    @Test
    void testErrorWithMessageAndException() {
        // Given
        String message = "Error message with exception";
        Throwable exception = new RuntimeException("Test exception");

        // When
        tracer.error(message, exception);

        // Then
        verify(mockLogger).error(message, exception);
    }
}
