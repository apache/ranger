/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.utils;

import org.junit.jupiter.api.Test;

import javax.security.auth.login.AppConfigurationEntry;

import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for InMemoryJAASConfiguration
 * */
class InMemoryJAASConfigurationTest {
    @Test
    void testInitWithValidProperties() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleControlFlag", "required");
        props.setProperty("xasecure.audit.jaas.TestClient.option.useKeyTab", "true");
        props.setProperty("xasecure.audit.jaas.TestClient.option.principal", "test@EXAMPLE.COM");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        assertNotNull(entries);
        assertEquals(1, entries.length);
        assertEquals("com.sun.security.auth.module.Krb5LoginModule", entries[0].getLoginModuleName());
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
        assertEquals("true", entries[0].getOptions().get("useKeyTab"));
        assertNotNull(entries[0].getOptions().get("principal"));
    }

    @Test
    void testInitWithEmptyProperties() {
        Properties props = new Properties();
        assertThrows(Exception.class, () -> InMemoryJAASConfiguration.init(props));
    }

    @Test
    void testInitWithUnknownControlFlagDefaultsToRequired() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleControlFlag", "unknownflag");
        props.setProperty("xasecure.audit.jaas.TestClient.option.useKeyTab", "true");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        assertNotNull(entries);
        assertEquals(1, entries.length);
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
    }

    @Test
    void testGetAppConfigurationEntryReturnsNullForUnknownClient() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleControlFlag", "required");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("UnknownClient");
        // May return null or empty array depending on parent config
        assertTrue(entries == null || entries.length == 0);
    }

    @Test
    void testMultipleModulesForSameClient() throws Exception {
        Properties props = new Properties();
        // First configuration entry
        props.setProperty("xasecure.audit.jaas.TestClient.0.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.0.loginModuleControlFlag", "required");
        props.setProperty("xasecure.audit.jaas.TestClient.0.option.useKeyTab", "true");
        props.setProperty("xasecure.audit.jaas.TestClient.0.option.principal", "test1@EXAMPLE.COM");

        // Second configuration entry
        props.setProperty("xasecure.audit.jaas.TestClient.1.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.1.loginModuleControlFlag", "optional");
        props.setProperty("xasecure.audit.jaas.TestClient.1.option.useKeyTab", "false");
        props.setProperty("xasecure.audit.jaas.TestClient.1.option.principal", "test2@EXAMPLE.COM");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        assertNotNull(entries);
        assertEquals(2, entries.length);

        // First entry should be "required"
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
        assertEquals("true", entries[0].getOptions().get("useKeyTab"));
        assertTrue(entries[0].getOptions().get("principal").toString().contains("test1@EXAMPLE.COM"));

        // Second entry should be "optional"
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL, entries[1].getControlFlag());
        assertEquals("false", entries[1].getOptions().get("useKeyTab"));
        assertTrue(entries[1].getOptions().get("principal").toString().contains("test2@EXAMPLE.COM"));
    }

    @Test
    void testMissingLoginModuleName() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleControlFlag", "required");
        props.setProperty("xasecure.audit.jaas.TestClient.option.useKeyTab", "true");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        // Without loginModuleName, no entry should be created
        assertTrue(entries == null || entries.length == 0);
    }

    @Test
    void testDifferentControlFlags() throws Exception {
        // Test all four valid control flag values
        String[] controlFlags = {"optional", "requisite", "sufficient", "required"};
        AppConfigurationEntry.LoginModuleControlFlag[] expectedFlags = {
                AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL,
                AppConfigurationEntry.LoginModuleControlFlag.REQUISITE,
                AppConfigurationEntry.LoginModuleControlFlag.SUFFICIENT,
                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED
        };

        for (int i = 0; i < controlFlags.length; i++) {
            Properties props = new Properties();
            props.setProperty("xasecure.audit.jaas.TestClient." + i + ".loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
            props.setProperty("xasecure.audit.jaas.TestClient." + i + ".loginModuleControlFlag", controlFlags[i]);

            InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

            AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
            assertNotNull(entries);
            assertEquals(1, entries.length);
            assertEquals(expectedFlags[i], entries[0].getControlFlag());
        }
    }

    @Test
    void testMissingControlFlagDefaultsToRequired() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        // No controlFlag specified
        props.setProperty("xasecure.audit.jaas.TestClient.option.useKeyTab", "true");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        assertNotNull(entries);
        assertEquals(1, entries.length);
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
    }

    @Test
    void testMultipleClientsConfiguration() throws Exception {
        Properties props = new Properties();
        // First client configuration
        props.setProperty("xasecure.audit.jaas.ClientA.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.ClientA.loginModuleControlFlag", "required");
        props.setProperty("xasecure.audit.jaas.ClientA.option.useKeyTab", "true");

        // Second client configuration
        props.setProperty("xasecure.audit.jaas.ClientB.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.ClientB.loginModuleControlFlag", "optional");
        props.setProperty("xasecure.audit.jaas.ClientB.option.useTicketCache", "true");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        // Check first client
        AppConfigurationEntry[] entriesA = config.getAppConfigurationEntry("ClientA");
        assertNotNull(entriesA);
        assertEquals(1, entriesA.length);
        assertEquals("true", entriesA[0].getOptions().get("useKeyTab"));
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entriesA[0].getControlFlag());

        // Check second client
        AppConfigurationEntry[] entriesB = config.getAppConfigurationEntry("ClientB");
        assertNotNull(entriesB);
        assertEquals(1, entriesB.length);
        assertEquals("true", entriesB[0].getOptions().get("useTicketCache"));
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL, entriesB[0].getControlFlag());
    }

    @Test
    void testLoginModuleWithMultipleOptions() throws Exception {
        Properties props = new Properties();
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        props.setProperty("xasecure.audit.jaas.TestClient.loginModuleControlFlag", "required");
        props.setProperty("xasecure.audit.jaas.TestClient.option.useKeyTab", "true");
        props.setProperty("xasecure.audit.jaas.TestClient.option.storeKey", "true");
        props.setProperty("xasecure.audit.jaas.TestClient.option.keyTab", "/etc/security/keytabs/test.keytab");
        props.setProperty("xasecure.audit.jaas.TestClient.option.principal", "test@EXAMPLE.COM");
        props.setProperty("xasecure.audit.jaas.TestClient.option.debug", "true");

        InMemoryJAASConfiguration config = InMemoryJAASConfiguration.init(props);

        AppConfigurationEntry[] entries = config.getAppConfigurationEntry("TestClient");
        assertNotNull(entries);
        assertEquals(1, entries.length);

        // Verify all options are present
        assertEquals("true", entries[0].getOptions().get("useKeyTab"));
        assertEquals("true", entries[0].getOptions().get("storeKey"));
        assertEquals("/etc/security/keytabs/test.keytab", entries[0].getOptions().get("keyTab"));
        assertNotNull(entries[0].getOptions().get("principal")); // Principal might be processed
        assertEquals("true", entries[0].getOptions().get("debug"));
    }

    @Test
    void testIsNumericHelperMethod() throws Exception {
        // Use reflection to access private static method
        java.lang.reflect.Method isNumeric = InMemoryJAASConfiguration.class.getDeclaredMethod("isNumeric", String.class);
        isNumeric.setAccessible(true);

        // Test valid numeric values
        assertTrue((boolean) isNumeric.invoke(null, "123"));
        assertTrue((boolean) isNumeric.invoke(null, "-123"));
        assertTrue((boolean) isNumeric.invoke(null, "0"));
        assertTrue((boolean) isNumeric.invoke(null, "123.456"));
        assertTrue((boolean) isNumeric.invoke(null, "-123.456"));

        // Test invalid numeric values
        assertFalse((boolean) isNumeric.invoke(null, "abc"));
        assertFalse((boolean) isNumeric.invoke(null, "123abc"));
        assertFalse((boolean) isNumeric.invoke(null, ""));
        assertFalse((boolean) isNumeric.invoke(null, " "));
        assertFalse((boolean) isNumeric.invoke(null, "123 456"));
    }
}
