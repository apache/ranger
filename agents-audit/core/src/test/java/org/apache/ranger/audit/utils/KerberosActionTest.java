/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.utils;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InOrder;
import org.slf4j.Logger;

import javax.security.auth.login.LoginException;

import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for KerberosAction
 * */
class KerberosActionTest {
    private KerberosUser kerberosUser;
    private Logger logger;
    private PrivilegedExceptionAction<String> action;

    @BeforeEach
    void setUp() {
        kerberosUser = mock(KerberosUser.class);
        logger = mock(Logger.class);
        action = mock(PrivilegedExceptionAction.class);
    }

    @Test
    void testExecute_Successful() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(false);
        when(kerberosUser.getPrincipal()).thenReturn("test@EXAMPLE.COM");
        when(kerberosUser.doAs(action)).thenReturn("result");

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);
        String result = kerberosAction.execute();

        assertEquals("result", result);
        verify(kerberosUser).login();
        verify(logger).info(contains("Successful login"), eq("test@EXAMPLE.COM"));
        verify(kerberosUser).checkTGTAndRelogin();
        verify(kerberosUser).doAs(action);
    }

    @Test
    void testExecute_LoginFails() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(false);
        doThrow(new LoginException("login failed")).when(kerberosUser).login();

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);

        Exception ex = assertThrows(Exception.class, kerberosAction::execute);
        assertTrue(ex.getMessage().contains("Login failed"));
        verify(kerberosUser).login();
    }

    @Test
    void testExecute_ReloginFails() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(true);
        when(kerberosUser.checkTGTAndRelogin()).thenThrow(new LoginException("relogin failed"));

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);

        Exception ex = assertThrows(Exception.class, kerberosAction::execute);
        assertTrue(ex.getMessage().contains("Relogin check failed"));
        verify(kerberosUser).checkTGTAndRelogin();
    }

    @Test
    void testExecute_PrivilegedActionThrowsSecurityException_RetriesAndSucceeds() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(true);
        when(kerberosUser.doAs(action))
                .thenThrow(new SecurityException("security"))
                .thenReturn("retryResult");

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);

        String result = kerberosAction.execute();

        assertEquals("retryResult", result);
        InOrder inOrder = inOrder(kerberosUser, logger);
        inOrder.verify(kerberosUser).doAs(action);
        inOrder.verify(logger).info(contains("Privileged action failed, attempting relogin and retrying..."));
        inOrder.verify(logger).debug(eq(""), any(SecurityException.class));
        inOrder.verify(kerberosUser).logout();
        inOrder.verify(kerberosUser).login();
        inOrder.verify(kerberosUser).doAs(action);
    }

    @Test
    void testExecute_PrivilegedActionThrowsSecurityException_RetryFails() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(true);
        when(kerberosUser.doAs(action))
                .thenThrow(new SecurityException("security"))
                .thenThrow(new RuntimeException("still fails"));

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);

        Exception ex = assertThrows(Exception.class, kerberosAction::execute);
        assertTrue(ex.getMessage().contains("Retrying privileged action failed"));
        verify(kerberosUser, times(2)).doAs(action);
        verify(kerberosUser).logout();
        verify(kerberosUser).login();
    }

    @Test
    void testExecute_PrivilegedActionThrowsPrivilegedActionException() throws Exception {
        when(kerberosUser.isLoggedIn()).thenReturn(true);
        PrivilegedActionException pae = new PrivilegedActionException(new Exception("action failed"));
        when(kerberosUser.doAs(action)).thenThrow(pae);

        KerberosAction<String> kerberosAction = new KerberosAction<>(kerberosUser, action, logger);

        Exception ex = assertThrows(Exception.class, kerberosAction::execute);
        assertTrue(ex.getMessage().contains("Privileged action failed due to"));
        verify(kerberosUser).doAs(action);
    }
}
