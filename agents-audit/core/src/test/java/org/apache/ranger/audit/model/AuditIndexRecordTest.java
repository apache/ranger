/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.model;

import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for AuditIndexRecord
 * */
class AuditIndexRecordTest {
    @Test
    void testDefaultValues() {
        AuditIndexRecord record = new AuditIndexRecord();
        assertNull(record.getId());
        assertNull(record.getFilePath());
        assertEquals(0, record.getLinePosition());
        assertEquals(SPOOL_FILE_STATUS.write_inprogress, record.getStatus());
        assertNull(record.getFileCreateTime());
        assertNull(record.getWriteCompleteTime());
        assertNull(record.getDoneCompleteTime());
        assertNull(record.getLastSuccessTime());
        assertNull(record.getLastFailedTime());
        assertEquals(0, record.getFailedAttemptCount());
        assertFalse(record.getLastAttempt());
    }

    @Test
    void testSettersAndGetters() {
        AuditIndexRecord record = new AuditIndexRecord();
        String id = "abc123";
        String filePath = "/tmp/file";
        int linePosition = 42;
        SPOOL_FILE_STATUS status = SPOOL_FILE_STATUS.done;
        Date now = new Date();
        Date later = new Date(now.getTime() + 1000);
        Date muchLater = new Date(now.getTime() + 2000);

        record.setId(id);
        record.setFilePath(filePath);
        record.setLinePosition(linePosition);
        record.setStatus(status);
        record.setFileCreateTime(now);
        record.setWriteCompleteTime(later);
        record.setDoneCompleteTime(muchLater);
        record.setLastSuccessTime(later);
        record.setLastFailedTime(muchLater);
        record.setFailedAttemptCount(3);
        record.setLastAttempt(true);

        assertEquals(id, record.getId());
        assertEquals(filePath, record.getFilePath());
        assertEquals(linePosition, record.getLinePosition());
        assertEquals(status, record.getStatus());
        assertEquals(now, record.getFileCreateTime());
        assertEquals(later, record.getWriteCompleteTime());
        assertEquals(muchLater, record.getDoneCompleteTime());
        assertEquals(later, record.getLastSuccessTime());
        assertEquals(muchLater, record.getLastFailedTime());
        assertEquals(3, record.getFailedAttemptCount());
        assertTrue(record.getLastAttempt());
    }

    @Test
    void testToString() {
        AuditIndexRecord record = new AuditIndexRecord();
        record.setId("id1");
        record.setFilePath("/path/to/file");
        record.setLinePosition(10);
        record.setStatus(SPOOL_FILE_STATUS.done);
        record.setFailedAttemptCount(2);
        record.setLastAttempt(true);

        String str = record.toString();
        assertTrue(str.contains("AuditIndexRecord [id=id1"));
        assertTrue(str.contains("filePath=/path/to/file"));
        assertTrue(str.contains("linePosition=10"));
        assertTrue(str.contains("status=done"));
        assertTrue(str.contains("failedAttemptCount=2"));
        assertTrue(str.contains("lastAttempt=true"));
    }
}
