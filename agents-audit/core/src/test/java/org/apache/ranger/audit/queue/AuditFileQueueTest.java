/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.queue;

import org.apache.ranger.audit.model.AuditEventBase;
import org.apache.ranger.audit.provider.AuditHandler;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for AuditFileQueue
 * */
class AuditFileQueueTest {
    private AuditHandler mockConsumer;
    private AuditFileQueue queue;
    private AuditFileQueueSpool mockSpooler;
    private Properties props;

    @BeforeEach
    void setUp() {
        mockConsumer = mock(AuditHandler.class);
        queue = new AuditFileQueue(mockConsumer);
        mockSpooler = mock(AuditFileQueueSpool.class);
        props = new Properties();
        // Use reflection to inject the mock spooler after init
    }

    @Test
    void testInitSetsUpSpooler() throws Exception {
        queue = spy(queue);
        java.lang.reflect.Field field = AuditFileQueue.class.getDeclaredField("fileSpooler");
        field.setAccessible(true);
        field.set(queue, mockSpooler);
        queue.init(props, "xasecure.audit.batch");
        assertNotNull(queue.fileSpooler);
    }

    @Test
    void testLogSingleEventDelegatesToSpooler() {
        AuditEventBase event = mock(AuditEventBase.class);
        queue.fileSpooler = mockSpooler;
        when(mockSpooler.isSpoolingSuccessful()).thenReturn(true);

        boolean result = queue.log(event);

        verify(mockSpooler).stashLogs(event);
        assertTrue(result);
    }

    @Test
    void testLogMultipleEventsDelegatesToSpooler() {
        AuditEventBase event1 = mock(AuditEventBase.class);
        AuditEventBase event2 = mock(AuditEventBase.class);
        queue.fileSpooler = mockSpooler;
        when(mockSpooler.isSpoolingSuccessful()).thenReturn(true);

        List<AuditEventBase> events = Arrays.asList(event1, event2);
        boolean result = queue.log(events);

        verify(mockSpooler, times(2)).stashLogs(any(AuditEventBase.class));
        assertTrue(result);
    }

    @Test
    void testStartStartsConsumerAndSpooler() {
        queue.fileSpooler = mockSpooler;
        queue.start();
        verify(mockConsumer).start();
        verify(mockSpooler).start();
    }

    @Test
    void testStopStopsConsumer() {
        queue.stop();
        verify(mockConsumer).stop();
    }

    @Test
    void testWaitToCompleteDelegatesToConsumer() {
        queue.waitToComplete();
        verify(mockConsumer).waitToComplete();
    }

    @Test
    void testWaitToCompleteWithTimeoutDelegatesToConsumer() {
        queue.waitToComplete(100L);
        verify(mockConsumer).waitToComplete(100L);
    }

    @Test
    void testFlushDelegatesToConsumer() {
        queue.flush();
        verify(mockConsumer).flush();
    }

    @Test
    void testLogWithNullEventReturnsFalse() {
        // Test null event handling
        boolean result = queue.log((AuditEventBase) null);
        assertFalse(result);
    }

    @Test
    void testLogWithNullCollectionReturnsTrue() {
        // Test null collection handling
        boolean result = queue.log((Collection<AuditEventBase>) null);
        assertTrue(result);
    }

    @Test
    void testLogWhenSpoolingFails() {
        // Setup
        AuditEventBase event = mock(AuditEventBase.class);
        queue.fileSpooler = mockSpooler;
        when(mockSpooler.isSpoolingSuccessful()).thenReturn(false);

        // Execute
        boolean result = queue.log(event);

        // Verify
        verify(mockSpooler).stashLogs(event);
        assertFalse(result);
    }

    @Test
    void testStartWithNullConsumer() {
        // Create a queue with null consumer
        AuditFileQueue queueWithNullConsumer = new AuditFileQueue(null);
        queueWithNullConsumer.fileSpooler = mockSpooler;

        // Should not throw exception when consumer is null
        assertDoesNotThrow(() -> queueWithNullConsumer.start());

        // Spooler should still be started
        verify(mockSpooler).start();
    }

    @Test
    void testStartWithNullSpooler() {
        // Create a queue with null spooler
        queue.fileSpooler = null;

        // Should not throw exception when spooler is null
        assertDoesNotThrow(() -> queue.start());

        // Consumer should still be started
        verify(mockConsumer).start();
    }

    @Test
    void testStopWithNullConsumer() {
        // Create a queue with null consumer
        AuditFileQueue queueWithNullConsumer = new AuditFileQueue(null);

        // Should not throw exception when consumer is null
        assertDoesNotThrow(() -> queueWithNullConsumer.stop());
    }

    @Test
    void testWaitToCompleteWithNullConsumer() {
        // Create a queue with null consumer
        AuditFileQueue queueWithNullConsumer = new AuditFileQueue(null);

        // Should not throw exception when consumer is null
        assertDoesNotThrow(() -> queueWithNullConsumer.waitToComplete());
    }

    @Test
    void testWaitToCompleteWithTimeoutAndNullConsumer() {
        // Create a queue with null consumer
        AuditFileQueue queueWithNullConsumer = new AuditFileQueue(null);

        // Should not throw exception when consumer is null
        assertDoesNotThrow(() -> queueWithNullConsumer.waitToComplete(100L));
    }

    @Test
    void testFlushWithNullConsumer() {
        // Create a queue with null consumer
        AuditFileQueue queueWithNullConsumer = new AuditFileQueue(null);

        // Should not throw exception when consumer is null
        assertDoesNotThrow(() -> queueWithNullConsumer.flush());
    }

    @Test
    void testLogMultipleEventsWithSomeFailing() {
        // Setup
        AuditEventBase event1 = mock(AuditEventBase.class);
        AuditEventBase event2 = mock(AuditEventBase.class);
        queue.fileSpooler = mockSpooler;

        // First event succeeds, second fails
        when(mockSpooler.isSpoolingSuccessful())
                .thenReturn(true)
                .thenReturn(false);

        List<AuditEventBase> events = Arrays.asList(event1, event2);
        boolean result = queue.log(events);

        // Last result should be returned (false)
        assertFalse(result);
        verify(mockSpooler, times(2)).stashLogs(any(AuditEventBase.class));
    }
}
