/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.audit.provider;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Properties;

import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by copilot
 * @description Unit Test cases for AuditProviderFactory
 * */
class AuditProviderFactoryTest {
    private AuditProviderFactory factory;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);

        // Create a new instance for each test
        factory = new AuditProviderFactory();

        // Reset the static singleton for clean testing
        try {
            Field field = AuditProviderFactory.class.getDeclaredField("sFactory");
            field.setAccessible(true);
            field.set(null, null);
        } catch (Exception e) {
            fail("Failed to reset sFactory: " + e.getMessage());
        }
    }

    @Test
    void testGetInstance() {
        AuditProviderFactory instance1 = AuditProviderFactory.getInstance();
        AuditProviderFactory instance2 = AuditProviderFactory.getInstance();

        assertNotNull(instance1);
        assertSame(instance1, instance2, "getInstance should return the same instance");
    }

    @Test
    void testGetAuditProvider() {
        AuditHandler provider = factory.getAuditProvider();
        assertNotNull(provider);
        assertTrue(provider instanceof DummyAuditProvider, "Default provider should be DummyAuditProvider");
    }

    @Test
    void testIsInitDone() throws Exception {
        assertFalse(factory.isInitDone(), "isInitDone should be false initially");

        Field field = AuditProviderFactory.class.getDeclaredField("mInitDone");
        field.setAccessible(true);
        field.set(factory, true);

        assertTrue(factory.isInitDone(), "isInitDone should be true after setting mInitDone");
    }

    @Test
    void testShutdownWithoutInit() {
        factory.shutdown();
        assertFalse(factory.isInitDone() && factory.getAuditProvider() == null);
    }

    @Test
    void testGetProviderFromConfigWithInvalidClass() throws Exception {
        Properties props = new Properties();
        String propPrefix = AuditProviderFactory.AUDIT_DEST_BASE + ".custom";
        props.setProperty(propPrefix + ".class", "non.existent.ClassName");

        Method method = AuditProviderFactory.class.getDeclaredMethod("getProviderFromConfig", Properties.class, String.class, String.class, AuditHandler.class);
        method.setAccessible(true);
        Object result = method.invoke(factory, props, propPrefix, "custom", null);

        assertNull(result);
    }

    @Test
    void testGetProviderFromConfigWithUnknownProviderName() throws Exception {
        Properties props = new Properties();
        String propPrefix = AuditProviderFactory.AUDIT_DEST_BASE + ".unknown";

        Method method = AuditProviderFactory.class.getDeclaredMethod("getProviderFromConfig", Properties.class, String.class, String.class, AuditHandler.class);
        method.setAccessible(true);
        Object result = method.invoke(factory, props, propPrefix, "unknown", null);

        assertNull(result);
    }
}
