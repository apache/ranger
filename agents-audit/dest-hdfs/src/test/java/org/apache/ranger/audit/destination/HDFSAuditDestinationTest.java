/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.audit.destination;

import org.apache.ranger.audit.utils.RangerAuditWriter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by copilot
 * @description Unit Test cases for HDFSAuditDestination
 * */
class HDFSAuditDestinationTest {
    private HDFSAuditDestination destination;
    private RangerAuditWriter mockWriter;

    @BeforeEach
    void setUp() throws Exception {
        mockWriter = mock(RangerAuditWriter.class);

        // Subclass to override getWriter()
        destination = new HDFSAuditDestination() {
            @Override
            public RangerAuditWriter getWriter() {
                return mockWriter;
            }
        };
    }

    @Test
    void testInitSetsInitDone() {
        Properties props = new Properties();
        destination.init(props, "prefix");
        assertTrue(getPrivateInitDone(destination));
    }

    @Test
    void testLogJSONSuccess() throws Exception {
        destination.init(new Properties(), "prefix");
        Collection<String> events = Arrays.asList("{\"event\":1}", "{\"event\":2}");
        when(mockWriter.log(events)).thenReturn(true);

        boolean result = destination.logJSON(events);

        assertTrue(result);
        verify(mockWriter, atLeastOnce()).log(events);
    }

    @Test
    void testLogJSONWhenNotInit() throws Exception {
        Collection<String> events = Arrays.asList("{\"event\":1}");
        boolean result = destination.logJSON(events);
        assertFalse(result);
    }

    @Test
    void testLogFileSuccess() throws Exception {
        destination.init(new Properties(), "prefix");
        File file = mock(File.class);
        when(mockWriter.logFile(file)).thenReturn(true);

        boolean result = destination.logFile(file);

        assertTrue(result);
        verify(mockWriter).logFile(file);
    }

    @Test
    void testLogFileWhenNotInit() throws Exception {
        File file = mock(File.class);
        boolean result = destination.logFile(file);
        assertFalse(result);
    }

    @Test
    void testStopCallsWriterStop() throws Exception {
        destination.init(new Properties(), "prefix");
        destination.stop();
        verify(mockWriter).stop();
    }

    // Helper to access private field
    private boolean getPrivateInitDone(HDFSAuditDestination dest) {
        try {
            java.lang.reflect.Field f = HDFSAuditDestination.class.getDeclaredField("initDone");
            f.setAccessible(true);
            return f.getBoolean(dest);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
