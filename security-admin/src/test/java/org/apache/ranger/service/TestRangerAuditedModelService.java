/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.service;

import org.apache.ranger.common.view.VTrxLogAttr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXTrxLogV2;
import org.apache.ranger.plugin.model.RangerBaseModelObject;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerDataMaskPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerAuditedModelService
 */

public class TestRangerAuditedModelService {
    @InjectMocks private TestSvc                                   svc = spy(new TestSvc());
    @Mock private        org.apache.ranger.biz.RangerBizUtil       bizUtil;
    @Mock private        RangerDataHistService                     dataHistService;
    @Mock private        RangerDaoManager                          daoMgr;
    @Mock private        org.apache.ranger.db.XXDataMaskTypeDefDao xxDataMaskTypeDefDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoMgr.getXXDataMaskTypeDef()).thenReturn(xxDataMaskTypeDefDao);
    }

    @Test
    void testInit_addsDefaultNameWhenEmpty_andGetTrxLogAttrValue() {
        svc.trxLogAttrs.clear();
        svc.init();
        V v = new V();
        v.name = "n";
        assertEquals("n", svc.getTrxLogAttrValue(v, new VTrxLogAttr("name", "Name", false, true)));
    }

    @Test
    void testOnObjectChange_createsHistoryAndTrxLogs() {
        V current = new V();
        current.setId(1L);
        current.name = "c";
        svc.onObjectChange(current, null, RangerServiceService.OPERATION_CREATE_CONTEXT);
        verify(dataHistService).createObjectDataHistory(eq(current), eq(RangerDataHistService.ACTION_CREATE));
    }

    @Test
    void testCreateTransactionLog_attrChange() {
        XXTrxLogV2 log = new XXTrxLogV2();
        svc.createTransactionLog(log, "attr", "old", "new");
        verify(bizUtil).createTrxLog(anyList());
    }

    @Test
    void testCreateTransactionLog_forObject() {
        V obj = new V();
        obj.setId(10L);
        obj.name = "x";
        svc.createTransactionLog(obj, null, RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        verify(bizUtil, atLeastOnce()).createTrxLog(anyList());
    }

    @Test
    void testGetTransactionLogs_skipsWhenNullOrNoChange() {
        // indirectly covered via createTransactionLog with null obj
        svc.createTransactionLog(null, new V(), RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        verify(bizUtil, never()).createTrxLog(isNull());
    }

    @Test
    void testAddLabelToDataMaskTxnPolicy_insertsLabel() {
        RangerPolicy                 policy = new RangerPolicy();
        RangerDataMaskPolicyItem     item   = new RangerDataMaskPolicyItem();
        RangerPolicyItemDataMaskInfo info   = new RangerPolicyItemDataMaskInfo();
        info.setDataMaskType("MASK_TYPE");
        item.setDataMaskInfo(info);
        policy.setDataMaskPolicyItems(Collections.singletonList(item));
        org.apache.ranger.entity.XXDataMaskTypeDef def = new org.apache.ranger.entity.XXDataMaskTypeDef();
        def.setName("MASK_TYPE");
        def.setLabel("LBL");
        when(xxDataMaskTypeDefDao.getAll()).thenReturn(Collections.singletonList(def));

        TestPolicySvc svc2 = new TestPolicySvc();
        svc2.setDaoMgr(daoMgr);
        String result = svc2.addLabelToDataMaskTxnPolicy(policy, "[{\"k\":\"v\"}]");
        assertTrue(result.contains("DataMasklabel"));
    }

    static class XX extends XXDBBase {
        private Long id;

        @Override
        public Long getId() {
            return id;
        }

        @Override
        public void setId(Long id) {
            this.id = id;
        }
    }

    static class V extends RangerBaseModelObject {
        String name;

        public String getName() {
            return name;
        }
    }

    static class TestSvc extends RangerAuditedModelService<XX, V> {
        TestSvc() {
            super(100, 200);
            trxLogAttrs.put("name", new VTrxLogAttr("name", "Name", false, true));
        }

        @Override
        public String getParentObjectName(V obj, V oldObj) {
            return "parent";
        }

        @Override
        public Long getParentObjectId(V obj, V oldObj) {
            return 123L;
        }

        @Override
        protected XX mapViewToEntityBean(V vObj, XX mObj, int ctx) {
            return mObj;
        }

        @Override
        protected V mapEntityToViewBean(V vObj, XX mObj) {
            return vObj;
        }

        @Override
        protected void validateForCreate(V vObj) {
        }

        @Override
        protected void validateForUpdate(V vObj, XX entityObj) {
        }
    }

    static class TestPolicySvc extends RangerAuditedModelService<XX, RangerPolicy> {
        TestPolicySvc() {
            super(100, 200);
        }

        @Override
        protected XX mapViewToEntityBean(RangerPolicy vObj, XX mObj, int ctx) {
            return mObj;
        }

        @Override
        protected RangerPolicy mapEntityToViewBean(RangerPolicy vObj, XX mObj) {
            return vObj;
        }

        @Override
        protected void validateForCreate(RangerPolicy vObj) {
        }

        @Override
        protected void validateForUpdate(RangerPolicy vObj, XX entityObj) {
        }

        void setDaoMgr(RangerDaoManager d) {
            this.daoMgr = d;
        }
    }
}
