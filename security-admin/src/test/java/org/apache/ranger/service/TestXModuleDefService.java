/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupPermissionDao;
import org.apache.ranger.db.XXUserPermissionDao;
import org.apache.ranger.entity.XXGroupPermission;
import org.apache.ranger.entity.XXModuleDef;
import org.apache.ranger.entity.XXUserPermission;
import org.apache.ranger.view.VXModuleDef;
import org.apache.ranger.view.VXModuleDefList;
import org.apache.ranger.view.VXModulePermissionList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.anyList;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XModuleDefService
 */

public class TestXModuleDefService {
    @InjectMocks private XModuleDefService svc = spy(new XModuleDefService());

    @Mock private RangerDaoManager        daoManager;
    @Mock private XXUserPermissionDao     xUserPermDao;
    @Mock private XXGroupPermissionDao    xGroupPermDao;
    @Mock private XUserPermissionService  xUserPermService;
    @Mock private XGroupPermissionService xGrpPermService;
    @Mock private XUserService            xUserService;
    @Mock private XGroupService           xGroupService;

    @Test
    public void testSearchFieldsInitialized() {
        XModuleDefService local = new XModuleDefService();
        assertNotNull(local.searchFields);
        assertFalse(local.searchFields.isEmpty());
    }

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoManager.getXXUserPermission()).thenReturn(xUserPermDao);
        when(daoManager.getXXGroupPermission()).thenReturn(xGroupPermDao);
    }

    @Test
    void testSearchModuleDef_dedupsAndPopulatesLists() {
        SearchCriteria sc = new SearchCriteria();
        XXModuleDef    m1 = new XXModuleDef();
        m1.setId(1L);
        m1.setModule("m");
        XXModuleDef dup = new XXModuleDef();
        dup.setId(1L);
        dup.setModule("m");
        doReturn(Arrays.asList(m1, dup)).when(svc).searchResources(any(), anyList(), anyList(), any());

        when(xUserService.getXXPortalUserIdXXUserNameMap()).thenReturn(Collections.singletonMap(1L, new Object[] {"u", "U"}));
        when(xGroupService.getXXGroupIdNameMap()).thenReturn(Collections.singletonMap(1L, "g"));

        when(xUserPermDao.findByModuleId(eq(1L), anyBoolean())).thenReturn(Collections.emptyList());
        when(xGroupPermDao.findByModuleId(eq(1L), anyBoolean())).thenReturn(Collections.emptyList());

        VXModuleDefList out = svc.searchModuleDef(sc);

        assertNotNull(out);
        assertEquals(1, out.getTotalCount());
        assertEquals(1, out.getvXModuleDef().size());
    }

    @Test
    void testPopulateViewBean_overload_populatesFromMapsOrFallbacks() {
        XXModuleDef x = new XXModuleDef();
        x.setId(5L);

        List<XXUserPermission>  userPerms  = Collections.singletonList(new XXUserPermission());
        List<XXGroupPermission> groupPerms = Collections.singletonList(new XXGroupPermission());
        when(xUserPermDao.findByModuleId(5L, false)).thenReturn(userPerms);
        when(xGroupPermDao.findByModuleId(5L, false)).thenReturn(groupPerms);

        // With empty maps -> fallback to per-item populateViewBean
        Map<Long, Object[]> emptyUsers  = Collections.emptyMap();
        Map<Long, String>   emptyGroups = Collections.emptyMap();
        when(xUserPermService.populateViewBean(any())).thenReturn(new org.apache.ranger.view.VXUserPermission());
        when(xGrpPermService.populateViewBean(any())).thenReturn(new org.apache.ranger.view.VXGroupPermission());
        VXModuleDef v1 = svc.populateViewBean(x, emptyUsers, emptyGroups, false);
        assertNotNull(v1);
        assertNotNull(v1.getUserPermList());
        assertNotNull(v1.getGroupPermList());

        // With non-empty maps -> use bulk population helpers
        Map<Long, Object[]> userMap = new HashMap<>();
        userMap.put(1L, new Object[] {"u", "U"});
        Map<Long, String> groupMap = new HashMap<>();
        groupMap.put(1L, "g");
        when(xUserPermService.getPopulatedVXUserPermissionList(eq(userPerms), eq(userMap), any())).thenReturn(Collections.emptyList());
        when(xGrpPermService.getPopulatedVXGroupPermissionList(eq(groupPerms), eq(groupMap), any())).thenReturn(Collections.emptyList());
        VXModuleDef v2 = svc.populateViewBean(x, userMap, groupMap, false);
        assertNotNull(v2);
    }

    @Test
    void testPopulateViewBean_default_usesServices() {
        XXModuleDef x = new XXModuleDef();
        x.setId(6L);
        when(xUserService.getXXPortalUserIdXXUserNameMap()).thenReturn(Collections.emptyMap());
        when(xGroupService.getXXGroupIdNameMap()).thenReturn(Collections.emptyMap());
        when(xUserPermDao.findByModuleId(eq(6L), anyBoolean())).thenReturn(Collections.emptyList());
        when(xGroupPermDao.findByModuleId(eq(6L), anyBoolean())).thenReturn(Collections.emptyList());
        when(xUserPermService.populateViewBean(any())).thenReturn(new org.apache.ranger.view.VXUserPermission());
        when(xGrpPermService.populateViewBean(any())).thenReturn(new org.apache.ranger.view.VXGroupPermission());

        VXModuleDef v = svc.populateViewBean(x);
        assertNotNull(v);
    }

    @Test
    void testSearchModuleDefList_buildsUserAndGroupNames() {
        SearchCriteria sc = new SearchCriteria();
        XXModuleDef    m  = new XXModuleDef();
        m.setId(3L);
        m.setModule("mod");
        doReturn(Collections.singletonList(m)).when(svc).searchResources(any(), anyList(), anyList(), any());

        when(xUserPermDao.findModuleUsersByModuleId(3L)).thenReturn(Arrays.asList("u1", "u2"));
        when(xGroupPermDao.findModuleGroupsByModuleId(3L)).thenReturn(Arrays.asList("g1", "g2"));

        VXModulePermissionList out = svc.searchModuleDefList(sc);

        assertEquals(1, out.getTotalCount());
        assertEquals(1, out.getvXModulePermissionList().size());
        assertEquals(Arrays.asList("u1", "u2"), out.getvXModulePermissionList().get(0).getUserNameList());
        assertEquals(Arrays.asList("g1", "g2"), out.getvXModulePermissionList().get(0).getGroupNameList());
    }

    @Test
    void testValidateNoOps_doNotThrow() {
        svc.validateForCreate(new VXModuleDef());
        svc.validateForUpdate(new VXModuleDef(), new XXModuleDef());
    }
}
