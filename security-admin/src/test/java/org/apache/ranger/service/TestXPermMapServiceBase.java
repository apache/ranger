/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPermMap;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXPermMapList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XPermMapServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXPermMapServiceBase {
    @Mock
    public RangerDaoManager daoManager;

    @Test
    public void testSearchXPermMaps_returnsList() {
        TestableService svc = new TestableService();
        svc.daoManager  = daoManager;
        svc.nextResults = Collections.singletonList(new XXPermMap());
        SearchCriteria sc  = new SearchCriteria();
        VXPermMapList  out = svc.searchXPermMaps(sc);
        assertNotNull(out);
        assertNotNull(out.getVXPermMaps());
    }

    @Test
    public void testParentLookups_andMapping() {
        TestableService svc = new TestableService();
        svc.daoManager = daoManager;
        XXGroupDao grpDao  = mock(XXGroupDao.class);
        XXUserDao  userDao = mock(XXUserDao.class);
        when(daoManager.getXXGroup()).thenReturn(grpDao);
        when(daoManager.getXXUser()).thenReturn(userDao);
        XXGroup g = new XXGroup();
        g.setName("g1");
        XXUser u = new XXUser();
        u.setName("u1");
        when(grpDao.getById(anyLong())).thenReturn(g);
        when(userDao.getById(anyLong())).thenReturn(u);

        VXPermMap v = new VXPermMap();
        v.setGroupId(10L);
        assertEquals(AppConstants.CLASS_TYPE_XA_GROUP, svc.getParentObjectType(v, null));
        assertEquals("g1", svc.getParentObjectName(v, null));
        assertEquals(Long.valueOf(10L), svc.getParentObjectId(v, null));

        v.setGroupId(null);
        v.setUserId(20L);
        assertEquals(AppConstants.CLASS_TYPE_XA_USER, svc.getParentObjectType(v, null));
        assertEquals("u1", svc.getParentObjectName(v, null));
        assertEquals(Long.valueOf(20L), svc.getParentObjectId(v, null));

        XXPermMap x = new XXPermMap();
        x.setPermGroup("pg");
        x.setResourceId(1L);
        x.setGroupId(2L);
        x.setUserId(3L);
        x.setPermFor(4);
        x.setPermType(5);
        x.setIsRecursive(1);
        x.setIsWildCard(true);
        x.setGrantOrRevoke(true);
        x.setIpAddress("ip");
        VXPermMap v2 = svc.mapEntityToViewBean(new VXPermMap(), x);
        assertEquals("pg", v2.getPermGroup());
    }

    public static class TestableService extends XPermMapServiceBase<XXPermMap, VXPermMap> {
        public List<XXPermMap> nextResults = new ArrayList<>();

        @Override
        protected void validateForCreate(VXPermMap viewBaseBean) {}

        @Override
        protected void validateForUpdate(VXPermMap viewBaseBean, XXPermMap t) {}

        @Override
        protected List<XXPermMap> searchResources(SearchCriteria searchCriteria, List<SearchField> searchFieldList, List<SortField> sortFieldList, VList vList) {
            return nextResults;
        }
    }
}
