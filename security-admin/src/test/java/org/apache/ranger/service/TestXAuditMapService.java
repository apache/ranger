/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXAuditMap;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.view.VXAuditMap;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.apache.ranger.service.RangerBaseModelService.OPERATION_DELETE_CONTEXT;
import static org.apache.ranger.service.RangerBaseModelService.OPERATION_UPDATE_CONTEXT;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XAuditMapService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXAuditMapService {
    @InjectMocks
    XAuditMapService xAuditMapService;

    @Mock
    VXAuditMap vXAuditMap;

    @Mock
    RangerBizUtil bizUtil;

    @Mock
    RangerDaoManager daoManager;

    @Test
    public void test1GetTransactionLog() {
        xAuditMapService.createTransactionLog(vXAuditMap, null, OPERATION_DELETE_CONTEXT);
    }

    @Test
    public void test2GetTransactionLog() {
        xAuditMapService.createTransactionLog(vXAuditMap, vXAuditMap, OPERATION_DELETE_CONTEXT);
    }

    @Test
    public void test3_mapViewToEntityBean_fillsAddedAndUpdatedBy() {
        xAuditMapService.stringUtil = new StringUtil();
        XXPortalUserDao userDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(userDao);
        XXPortalUser user = new XXPortalUser();
        user.setId(9L);
        when(userDao.findByLoginId("owner")).thenReturn(user);
        when(userDao.findByLoginId("upd")).thenReturn(user);

        VXAuditMap v = new VXAuditMap();
        v.setOwner("owner");
        v.setUpdatedBy("upd");
        XXAuditMap x = new XXAuditMap();

        XXAuditMap ret = xAuditMapService.mapViewToEntityBean(v, x, OPERATION_UPDATE_CONTEXT);
        assertEquals(Long.valueOf(9L), ret.getAddedByUserId());
        assertEquals(Long.valueOf(9L), ret.getUpdatedByUserId());
    }

    @Test
    public void test4_mapEntityToViewBean_backfillsOwnerAndUpdatedBy() {
        xAuditMapService.stringUtil = new StringUtil();
        XXPortalUserDao userDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(userDao);
        XXPortalUser user = new XXPortalUser();
        user.setLoginId("alice");
        when(userDao.getById(anyLong())).thenReturn(user);

        XXAuditMap x = new XXAuditMap();
        x.setAddedByUserId(7L);
        x.setUpdatedByUserId(8L);
        VXAuditMap v   = new VXAuditMap();
        VXAuditMap out = xAuditMapService.mapEntityToViewBean(v, x);
        assertEquals("alice", out.getOwner());
        assertEquals("alice", out.getUpdatedBy());
    }
}
