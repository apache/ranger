/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerCommonEnums;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.view.VXAsset;
import org.apache.ranger.view.VXAssetList;
import org.apache.ranger.view.VXRepository;
import org.apache.ranger.view.VXRepositoryList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XRepositoryService
 */

public class TestXRepositoryService {
    private XRepositoryService svc;

    @Mock private RESTErrorUtil      restErrorUtil;
    @Mock private HttpServletRequest request;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        svc = new XRepositoryService();
        svc.restErrorUtil = restErrorUtil;
    }

    @Test
    void testMapXAToPublicObject_andBack() {
        VXAsset in = new VXAsset();
        in.setId(1L);
        in.setName("repo");
        in.setDescription("d");
        in.setAssetType(AppConstants.ASSET_HDFS);
        in.setConfig("{}");
        in.setActiveStatus(RangerCommonEnums.STATUS_ENABLED);

        VXRepository out = svc.mapXAToPublicObject(in);
        assertEquals("repo", out.getName());
        assertEquals(true, out.getIsActive());

        VXAsset back = svc.mapPublicToXAObject(out);
        assertEquals(in.getName(), back.getName());
        assertEquals(RangerCommonEnums.STATUS_ENABLED, back.getActiveStatus());
    }

    @Test
    void testGetMappedSearchParams_buildsStatusAndType() {
        SearchCriteria sc = new SearchCriteria();
        sc.addParam("type", "hdfs");
        when(restErrorUtil.parseBoolean(anyString(), anyString(), org.mockito.ArgumentMatchers.eq(MessageEnums.INVALID_INPUT_DATA), org.mockito.ArgumentMatchers.isNull(), anyString())).thenReturn(Boolean.TRUE);
        when(request.getParameter("status")).thenReturn("true");

        SearchCriteria out = svc.getMappedSearchParams(request, sc);
        Object statuses = out.getParamValue("status");
        assertNotNull(statuses);
        assertFalse(((java.util.List<?>) statuses).isEmpty());
        assertEquals(AppConstants.ASSET_HDFS, out.getParamValue("type"));
    }

    @Test
    void testMapToVXRepositoryList_mapsAll() {
        VXAsset a = new VXAsset();
        a.setName("a");
        a.setActiveStatus(RangerCommonEnums.STATUS_ENABLED);
        VXAsset b = new VXAsset();
        b.setName("b");
        b.setActiveStatus(RangerCommonEnums.STATUS_DISABLED);
        VXAssetList list = new VXAssetList(Arrays.asList(a, b));
        VXRepositoryList out = svc.mapToVXRepositoryList(list);
        assertEquals(2, out.getList().size());
    }
}
