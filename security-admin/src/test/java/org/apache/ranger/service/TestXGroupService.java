/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.view.VXGroup;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.lang.reflect.Field;
import java.util.Date;

import static org.apache.ranger.service.RangerBaseModelService.OPERATION_UPDATE_CONTEXT;
import static org.mockito.Mockito.lenient;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class TestXGroupService {
    @Spy
    @InjectMocks
    XGroupService xGroupService;

    @Mock
    RangerDaoManager daoManager;

    @Mock
    BaseDao<XXGroup> entityDao;

    @Mock
    XXGroupDao xXGroupDao;

    @Mock
    XXPortalUserDao xXPortalUserDao;

    @Mock
    XXPortalUser tUser;

    @Mock
    XXDBBase xXDBBase;

    @Mock
    RESTErrorUtil restErrorUtil;

    @BeforeEach
    public void setup() throws Exception {
        setSuperField(xGroupService, "entityDao", entityDao, AbstractBaseResourceService.class);
        setSuperField(xGroupService, "daoManager", daoManager, AbstractBaseResourceService.class);
        setSuperField(xGroupService, "restErrorUtil", restErrorUtil, AbstractBaseResourceService.class);
    }

    @Test
    public void test2CreateXGroupWithOutLogin() {
        VXGroup vxGroup = createvXGroup();
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup resource = createXXGroup();
        Mockito.when(xXGroupDao.findByGroupName(vxGroup.getName())).thenReturn(resource);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(xXPortalUserDao);
        lenient().when(xXPortalUserDao.getById(1L)).thenReturn(tUser);
        lenient().when(entityDao.update(resource)).thenReturn(resource);
        xGroupService.createXGroupWithOutLogin(vxGroup);
    }

    @Test
    public void test4GetTransactionLog() {
        VXGroup vObj = createvXGroup();
        xGroupService.createTransactionLog(vObj, null, OPERATION_UPDATE_CONTEXT);
    }

    public VXGroup createvXGroup() {
        VXGroup vXGroup = new VXGroup();
        Date    date    = new Date();
        vXGroup.setCreateDate(date);
        vXGroup.setCredStoreId(1L);
        vXGroup.setDescription("this is test description");
        vXGroup.setGroupSource(0);
        vXGroup.setGroupType(1);
        vXGroup.setId(1L);
        vXGroup.setIsVisible(1);
        vXGroup.setName("testGroup");
        vXGroup.setMObj(xXDBBase);
        vXGroup.setOwner("admin");
        vXGroup.setUpdateDate(date);
        vXGroup.setUpdatedBy("admin");
        return vXGroup;
    }

    private static void setSuperField(Object target, String fieldName, Object value, Class<?> declaringClass) throws Exception {
        Field f = declaringClass.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    private XXGroup createXXGroup() {
        XXGroup xXGroup = new XXGroup();
        Date    date    = new Date();
        xXGroup.setAddedByUserId(1L);
        xXGroup.setCreateTime(date);
        xXGroup.setCredStoreId(1L);
        xXGroup.setDescription("this is test description");
        xXGroup.setGroupSource(0);
        xXGroup.setGroupType(1);
        xXGroup.setId(1L);
        xXGroup.setIsVisible(1);
        xXGroup.setName("testGroup");
        xXGroup.setUpdateTime(date);
        xXGroup.setUpdatedByUserId(1L);
        return xXGroup;
    }
}
