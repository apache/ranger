/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.commons.collections.CollectionUtils;
import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGdsDatasetDao;
import org.apache.ranger.db.XXGdsProjectDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXGdsDataset;
import org.apache.ranger.entity.XXGdsDatasetInProject;
import org.apache.ranger.entity.XXGdsProject;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.plugin.model.RangerGds.GdsShareStatus;
import org.apache.ranger.plugin.model.RangerGds.RangerDatasetInProject;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.startsWith;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsDatasetInProjectService
 */

public class TestRangerGdsDatasetInProjectService {
    @InjectMocks private RangerGdsDatasetInProjectService svc = spy(new RangerGdsDatasetInProjectService());

    @Mock private RangerDaoManager daoMgr;
    @Mock private XXGdsDatasetDao  xxGdsDatasetDao;
    @Mock private XXGdsProjectDao  xxGdsProjectDao;
    @Mock private XXPortalUserDao  xxPortalUserDao;
    @Mock private RESTErrorUtil    restErrorUtil;
    @Mock private GUIDUtil         guidUtil;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoMgr.getXXGdsDataset()).thenReturn(xxGdsDatasetDao);
        when(daoMgr.getXXGdsProject()).thenReturn(xxGdsProjectDao);
    }

    @Test
    void testMapViewToEntityBean_success_mapsAllFields() {
        RangerDatasetInProject v = new RangerDatasetInProject();
        v.setGuid("g");
        v.setIsEnabled(true);
        v.setDescription("d");
        v.setProjectId(2L);
        v.setDatasetId(1L);
        v.setStatus(GdsShareStatus.ACTIVE);
        RangerValiditySchedule sch = new RangerValiditySchedule();
        v.setValiditySchedule(sch);
        v.setProfiles(new HashSet<>(Arrays.asList("p1", "p2")));
        Map<String, String> opts = new HashMap<>();
        opts.put("k", "v");
        v.setOptions(opts);
        Map<String, String> add = new HashMap<>();
        add.put("a", "b");
        v.setAdditionalInfo(add);
        v.setApprover("user1");

        when(xxGdsDatasetDao.getById(1L)).thenReturn(new XXGdsDataset());
        when(xxGdsProjectDao.getById(2L)).thenReturn(new XXGdsProject());
        XXPortalUser u = new XXPortalUser();
        u.setId(7L);
        when(xxPortalUserDao.findByLoginId("user1")).thenReturn(u);

        XXGdsDatasetInProject x = svc.mapViewToEntityBean(v, new XXGdsDatasetInProject(), RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        assertEquals("g", x.getGuid());
        assertEquals(Long.valueOf(2L), x.getProjectId());
        assertEquals(Long.valueOf(1L), x.getDatasetId());
        assertEquals(Short.valueOf((short) v.getStatus().ordinal()), x.getStatus());
        assertEquals(Long.valueOf(7L), x.getApproverId());
        assertNotNull(x.getValidityPeriod());
        assertNotNull(x.getProfiles());
        assertNotNull(x.getOptions());
        assertNotNull(x.getAdditionalInfo());
    }

    @Test
    void testMapViewToEntityBean_missingDataset_throws() {
        RangerDatasetInProject v = new RangerDatasetInProject();
        v.setDatasetId(99L);
        v.setProjectId(1L);
        when(xxGdsDatasetDao.getById(99L)).thenReturn(null);
        when(restErrorUtil.createRESTException(startsWith("No dataset"), eq(MessageEnums.INVALID_INPUT_DATA))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> svc.mapViewToEntityBean(v, new XXGdsDatasetInProject(), RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    void testMapViewToEntityBean_missingProject_throws() {
        RangerDatasetInProject v = new RangerDatasetInProject();
        v.setDatasetId(1L);
        v.setProjectId(99L);
        when(xxGdsDatasetDao.getById(1L)).thenReturn(new XXGdsDataset());
        when(xxGdsProjectDao.getById(99L)).thenReturn(null);
        when(restErrorUtil.createRESTException(startsWith("No project"), eq(MessageEnums.INVALID_INPUT_DATA))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> svc.mapViewToEntityBean(v, new XXGdsDatasetInProject(), RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    void testMapEntityToViewBean_roundTrip() {
        XXGdsDatasetInProject x = new XXGdsDatasetInProject();
        x.setGuid("g");
        x.setIsEnabled(true);
        x.setVersion(3L);
        x.setDescription("d");
        x.setProjectId(2L);
        x.setDatasetId(1L);
        x.setStatus((short) GdsShareStatus.ACTIVE.ordinal());
        x.setValidityPeriod(JsonUtils.objectToJson(new RangerValiditySchedule()));
        x.setProfiles(JsonUtils.objectToJson(new HashSet<String>(Collections.singletonList("p1"))));
        x.setOptions(JsonUtils.mapToJson(Collections.singletonMap("k", "v")));
        x.setAdditionalInfo(JsonUtils.mapToJson(Collections.singletonMap("a", "b")));
        x.setApproverId(7L);

        doReturn("user1").when(svc).getUserName(7L);

        RangerDatasetInProject v = svc.mapEntityToViewBean(new RangerDatasetInProject(), x);
        assertEquals("g", v.getGuid());
        assertEquals(3L, v.getVersion());
        assertEquals(GdsShareStatus.ACTIVE, v.getStatus());
        assertEquals("user1", v.getApprover());
        assertNotNull(v.getValiditySchedule());
        assertFalse(CollectionUtils.isEmpty(v.getProfiles()));
        assertEquals("v", v.getOptions().get("k"));
        assertEquals("b", v.getAdditionalInfo().get("a"));
    }

    @Test
    void testValidateForCreate_populatesDefaultsAndThrowsOnErrors() {
        RangerDatasetInProject v = new RangerDatasetInProject();
        when(restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(v));

        RangerDatasetInProject v2 = new RangerDatasetInProject();
        v2.setDatasetId(1L);
        v2.setProjectId(2L);
        when(xxGdsDatasetDao.getById(1L)).thenReturn(new XXGdsDataset());
        when(xxGdsProjectDao.getById(2L)).thenReturn(new XXGdsProject());
        when(guidUtil.genGUID()).thenReturn("gen");
        svc.validateForCreate(v2);
        assertEquals("gen", v2.getGuid());
        assertTrue(v2.getIsEnabled());
    }

    @Test
    void testGetParentObjectNameAndId() {
        RangerDatasetInProject v = new RangerDatasetInProject();
        v.setDatasetId(1L);
        XXGdsDataset d = new XXGdsDataset();
        d.setName("ds");
        when(xxGdsDatasetDao.getById(1L)).thenReturn(d);
        assertEquals("ds", svc.getParentObjectName(v, null));
        assertEquals(Long.valueOf(1L), svc.getParentObjectId(v, null));
    }
}
