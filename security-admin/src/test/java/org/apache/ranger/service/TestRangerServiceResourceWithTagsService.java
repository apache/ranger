/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceResourceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.plugin.model.RangerServiceResourceWithTags;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServiceResourceWithTagsService
 */

public class TestRangerServiceResourceWithTagsService {
    @InjectMocks private RangerServiceResourceWithTagsService svc = spy(new RangerServiceResourceWithTagsService());

    @Mock private RangerDaoManager     daoMgr;
    @Mock private XXServiceResourceDao xxServiceResourceDao;
    @Mock private XXServiceDao         xxServiceDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoMgr.getXXServiceResource()).thenReturn(xxServiceResourceDao);
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
    }

    @Test
    void testConstructor_initializesSearchAndSortFields() {
        RangerServiceResourceWithTagsService local = new RangerServiceResourceWithTagsService();
        assertFalse(local.searchFields.isEmpty());
        assertFalse(local.sortFields.isEmpty());
    }

    @Test
    void testMapEntityToViewBean_parsesResourceElementsJson() {
        XXServiceResource x = new XXServiceResource();
        x.setServiceId(5L);
        x.setServiceResourceElements("{\"path\":{\"values\":[\"/a\"],\"isExcludes\":false,\"isRecursive\":true}}");
        XXService svcEntity = new XXService();
        svcEntity.setId(5L);
        svcEntity.setName("svc");
        when(xxServiceDao.getById(5L)).thenReturn(svcEntity);

        RangerServiceResourceWithTags out = svc.mapEntityToViewBean(new RangerServiceResourceWithTags(), x);
        assertNotNull(out.getResourceElements());
        assertTrue(out.getResourceElements().containsKey("path"));
    }

    @Test
    void testMapEntityToViewBean_emptyJsonLeavesElementsEmpty() {
        XXServiceResource x = new XXServiceResource();
        x.setServiceId(5L);
        x.setServiceResourceElements("");
        XXService svcEntity = new XXService();
        svcEntity.setId(5L);
        svcEntity.setName("svc");
        when(xxServiceDao.getById(5L)).thenReturn(svcEntity);

        RangerServiceResourceWithTags out = svc.mapEntityToViewBean(new RangerServiceResourceWithTags(), x);
        verify(xxServiceDao, times(1)).getById(anyLong());
    }
}
