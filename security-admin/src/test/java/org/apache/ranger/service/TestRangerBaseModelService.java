/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAccessTypeDefDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPolicyConditionDefDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.entity.XXAccessTypeDef;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPolicyConditionDef;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.plugin.model.RangerBaseModelObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerBaseModelService
 */

public class TestRangerBaseModelService {
    @Mock private BaseDao<DummyEntity>    entityDao;
    @Mock private RangerDaoManager        daoMgr;
    @Mock private XXPortalUserDao         xxPortalUserDao;
    @Mock private XXGroupDao              xxGroupDao;
    @Mock private XXAccessTypeDefDao      xxAccessTypeDefDao;
    @Mock private XXPolicyConditionDefDao xxPolicyConditionDefDao;
    @Mock private XXResourceDefDao        xxResourceDefDao;
    private       DummyService            svc;

    @Test
    public void testBaseFieldsInitialized() {
        DummyService svc = new DummyService();
        assertNotNull(svc.searchFields);
        assertNotNull(svc.sortFields);
        svc.searchFields.add(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL));
        svc.sortFields.add(new SortField("name", "obj.name", true, SortField.SORT_ORDER.ASC));
        assertNotNull(svc.countQueryStr);
        assertNotNull(svc.queryStr);
    }

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        svc           = new DummyService();
        svc.entityDao = entityDao;
        svc.daoMgr    = daoMgr;
        svc.searchFields.add(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL));
        svc.sortFields.add(new SortField("id", "obj.id", true, SortField.SORT_ORDER.ASC));
    }

    @Test
    void testCreateAndReadAndUpdateAndDeleteFlow() {
        DummyView   v = new DummyView();
        DummyEntity e = new DummyEntity();
        e.setId(5L);
        when(entityDao.create(any(DummyEntity.class))).thenReturn(e);
        when(entityDao.create(any(DummyEntity.class), eq(true))).thenReturn(e);
        when(entityDao.getById(5L)).thenReturn(e);
        when(entityDao.update(any(DummyEntity.class))).thenReturn(e);
        when(entityDao.remove(any(DummyEntity.class))).thenReturn(true);

        DummyView created = svc.create(v);
        assertNotNull(created);

        DummyView createdFlush = svc.create(v, true);
        assertNotNull(createdFlush);

        DummyView read = svc.read(5L);
        assertNotNull(read);
    }

    @Test
    void testReadNotFoundThrows() {
        when(entityDao.getById(100L)).thenReturn(null);
        assertThrows(RuntimeException.class, () -> svc.read(100L));
    }

    @Test
    void testDeleteNotFoundThrows() {
        DummyView v = new DummyView();
        v.setId(123L);
        when(entityDao.getById(123L)).thenReturn(null);
        assertThrows(RuntimeException.class, () -> svc.delete(v));
    }

    @Test
    void testHelperNameLookups() {
        when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        XXPortalUser user = new XXPortalUser();
        user.setId(1L);
        user.setLoginId("alice");
        when(xxPortalUserDao.getById(1L)).thenReturn(user);
        when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);
        XXGroup group = new XXGroup();
        group.setId(2L);
        group.setName("dev");
        when(xxGroupDao.getById(2L)).thenReturn(group);
        when(daoMgr.getXXAccessTypeDef()).thenReturn(xxAccessTypeDefDao);
        XXAccessTypeDef at = new XXAccessTypeDef();
        at.setId(3L);
        at.setName("read");
        when(xxAccessTypeDefDao.getById(3L)).thenReturn(at);
        when(daoMgr.getXXPolicyConditionDef()).thenReturn(xxPolicyConditionDefDao);
        XXPolicyConditionDef cd = new XXPolicyConditionDef();
        cd.setId(4L);
        cd.setName("ip");
        when(xxPolicyConditionDefDao.getById(4L)).thenReturn(cd);
        when(daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);
        XXResourceDef rd = new XXResourceDef();
        rd.setId(5L);
        rd.setName("path");
        when(xxResourceDefDao.getById(5L)).thenReturn(rd);

        assertEquals("alice", invokeStringHelper(svc, "getUserName", 1L));
        assertEquals("dev", invokeStringHelper(svc, "getGroupName", 2L));
        assertEquals("read", invokeStringHelper(svc, "getAccessTypeName", 3L));
        assertEquals("ip", invokeStringHelper(svc, "getConditionName", 4L));
        assertEquals("path", invokeStringHelper(svc, "getResourceName", 5L));
        assertNull(invokeStringHelper(svc, "getUserName", null));
    }

    @Test
    void testPreUpdate_success() {
        DummyView v = new DummyView();
        v.setId(7L);
        DummyEntity e = new DummyEntity();
        e.setId(7L);
        when(entityDao.getById(7L)).thenReturn(e);
        DummyEntity out = svc.preUpdate(v);
        assertNotNull(out);
        assertEquals(7L, out.getId());
    }

    @Test
    void testPreUpdate_missing_throws() {
        DummyView v = new DummyView();
        v.setId(8L);
        when(entityDao.getById(8L)).thenReturn(null);
        assertThrows(RuntimeException.class, () -> svc.preUpdate(v));
    }

    private String invokeStringHelper(Object target, String method, Long arg) {
        try {
            Method m = RangerBaseModelService.class.getDeclaredMethod(method, Long.class);
            m.setAccessible(true);
            return (String) m.invoke(target, arg);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static class DummyView extends RangerBaseModelObject {}

    private static class DummyEntity extends XXDBBase {
        private Long id;

        @Override
        public Long getId() {
            return id;
        }

        @Override
        public void setId(Long id) {
            this.id = id;
        }
    }

    private static class DummyService extends RangerBaseModelService<DummyEntity, DummyView> {
        @Override
        protected DummyEntity mapViewToEntityBean(DummyView vObj, DummyEntity xObj, int op) {
            return xObj;
        }

        @Override
        protected DummyView mapEntityToViewBean(DummyView vObj, DummyEntity xObj) {
            return vObj;
        }

        @Override
        protected DummyEntity createEntityObject() {
            return new DummyEntity();
        }

        @Override
        protected DummyView createViewObject() {
            return new DummyView();
        }

        @Override
        protected DummyView populateViewBean(DummyEntity xObj) {
            return new DummyView();
        }

        @Override
        protected DummyEntity populateEntityBeanForCreate(DummyEntity xObj, DummyView vObj) {
            return xObj;
        }

        @Override
        protected DummyEntity populateEntityBeanForUpdate(DummyEntity xObj, DummyView vObj) {
            return xObj;
        }

        @Override
        protected void validateForCreate(DummyView vObj) {
        }

        @Override
        protected void validateForUpdate(DummyView vObj, DummyEntity entityObj) {
        }
    }
}
