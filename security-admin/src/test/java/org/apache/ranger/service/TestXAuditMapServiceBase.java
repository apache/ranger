/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.entity.XXAuditMap;
import org.apache.ranger.view.VXAuditMap;
import org.apache.ranger.view.VXAuditMapList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XAuditMapServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXAuditMapServiceBase {
    @Test
    public void testGetParentObjectId_usesResourceId_andNullSafe() {
        TestableService svc = new TestableService();
        VXAuditMap      v   = new VXAuditMap();
        v.setResourceId(99L);
        assertEquals(99L, svc.getParentObjectId(v, null));
        assertNull(svc.getParentObjectId(null, null));
    }

    @Test
    public void testMapEntityToViewBean_copiesAllFields() {
        TestableService svc = new TestableService();
        XXAuditMap      e   = new XXAuditMap();
        e.setResourceId(1L);
        e.setGroupId(2L);
        e.setUserId(3L);
        e.setAuditType(4);
        VXAuditMap v = new VXAuditMap();
        v = svc.mapEntityToViewBean(v, e);
        assertEquals(1L, v.getResourceId());
        assertEquals(2L, v.getGroupId());
        assertEquals(3L, v.getUserId());
        assertEquals(Integer.valueOf(4), v.getAuditType());
    }

    @Test
    public void testMapViewToEntityBean_copiesAllFields() {
        TestableService svc = new TestableService();
        VXAuditMap      v   = new VXAuditMap();
        v.setResourceId(10L);
        v.setGroupId(20L);
        v.setUserId(30L);
        v.setAuditType(40);
        XXAuditMap e = new XXAuditMap();
        e = svc.mapViewToEntityBean(v, e, 0);
        assertEquals(Long.valueOf(10L), e.getResourceId());
        assertEquals(Long.valueOf(20L), e.getGroupId());
        assertEquals(Long.valueOf(30L), e.getUserId());
        assertEquals(Integer.valueOf(40), e.getAuditType());
    }

    @Test
    public void testSearchXAuditMaps_returnsViewList() {
        TestableService svc = new TestableService();
        XXAuditMap      e   = new XXAuditMap();
        e.setResourceId(7L);
        svc.nextResults = Collections.singletonList(e);
        SearchCriteria sc  = new SearchCriteria();
        VXAuditMapList out = svc.searchXAuditMaps(sc);
        assertNotNull(out);
        assertNotNull(out.getVXAuditMaps());
        assertEquals(1, out.getVXAuditMaps().size());
        assertEquals(7L, out.getVXAuditMaps().get(0).getResourceId());
    }

    public static class TestableService extends XAuditMapServiceBase<XXAuditMap, VXAuditMap> {
        public List<XXAuditMap> nextResults = new ArrayList<>();

        @Override
        protected void validateForCreate(VXAuditMap viewBaseBean) {}

        @Override
        protected void validateForUpdate(VXAuditMap viewBaseBean, XXAuditMap t) {}

        @Override
        protected List<XXAuditMap> searchResources(SearchCriteria searchCriteria, List<SearchField> searchFieldList, List<SortField> sortFieldList, VList vList) {
            return nextResults;
        }
    }
}
