/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.db.XXUserPermissionDao;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.entity.XXUserPermission;
import org.apache.ranger.view.VXUserPermission;
import org.apache.ranger.view.VXUserPermissionList;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XUserPermissionServiceBase
 */

public class TestXUserPermissionServiceBase {
    private static class TestSvc extends XUserPermissionServiceBase<XXUserPermission, VXUserPermission> {
        @Override
        protected void validateForCreate(VXUserPermission vObj) {
        }

        @Override
        protected void validateForUpdate(VXUserPermission vObj, XXUserPermission mObj) {
        }

        // Expose protected
        XXUserPermission callMapViewToEntityBean(VXUserPermission v, XXUserPermission x, int op) {
            return super.mapViewToEntityBean(v, x, op);
        }

        VXUserPermission callMapEntityToViewBean(VXUserPermission v, XXUserPermission x) {
            return super.mapEntityToViewBean(v, x);
        }
    }

    private TestSvc svc;

    @Mock private RangerDaoManager      daoManager;
    @Mock private XXPortalUserDao       xxPortalUserDao;
    @Mock private XXUserDao             xxUserDao;
    @Mock private XXUserPermissionDao   xxUserPermissionDao;
    @Mock private RESTErrorUtil         restErrorUtil;

    private AutoCloseable mocks;

    @BeforeEach
    void init() {
        mocks = MockitoAnnotations.openMocks(this);
        svc = spy(new TestSvc());
        svc.daoManager = daoManager;
        svc.restErrorUtil = restErrorUtil;
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
        when(daoManager.getXXUser()).thenReturn(xxUserDao);
        when(daoManager.getXXUserPermission()).thenReturn(xxUserPermissionDao);
    }

    @AfterEach
    void cleanup() throws Exception {
        if (mocks != null) {
            mocks.close();
        }
    }

    @Test
    void testSearchXUserPermission_populatesList() {
        doReturn(Arrays.asList(new XXUserPermission(), new XXUserPermission()))
                .when(svc).searchResources(any(SearchCriteria.class), any(), any(), any(VXUserPermissionList.class));
        VXUserPermissionList out = svc.searchXUserPermission(new SearchCriteria());
        assertNotNull(out);
        assertEquals(2, out.getvXModuleDef().size());
    }

    @Test
    void testMapViewToEntityBean_mapsPortalUserId_andValidates() {
        VXUserPermission v = new VXUserPermission();
        v.setUserId(10L);
        v.setModuleId(2L);
        v.setIsAllowed(1);

        XXPortalUser portal = new XXPortalUser();
        portal.setId(100L);
        when(xxPortalUserDao.findByXUserId(10L)).thenReturn(portal);
        when(xxUserPermissionDao.findByModuleIdAndPortalUserId(100L, 2L)).thenReturn(null);

        XXUserPermission xOut = svc.callMapViewToEntityBean(v, new XXUserPermission(), RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        assertEquals(Long.valueOf(100L), xOut.getUserId());
        assertEquals(Long.valueOf(2L), xOut.getModuleId());
        assertEquals(Integer.valueOf(1), xOut.getIsAllowed());
    }

    @Test
    void testMapViewToEntityBean_throwsWhenPortalUserMissing() {
        VXUserPermission v = new VXUserPermission();
        v.setUserId(99L);
        when(xxPortalUserDao.findByXUserId(anyLong())).thenReturn(null);
        when(restErrorUtil.createRESTException(any(String.class), eq(MessageEnums.INVALID_INPUT_DATA)))
                .thenThrow(new RuntimeException("400"));
        assertThrows(RuntimeException.class, () -> svc.callMapViewToEntityBean(v, new XXUserPermission(), RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    void testMapEntityToViewBean_mapsUserIdBack_orNull() {
        XXUserPermission x = new XXUserPermission();
        x.setUserId(200L);
        x.setModuleId(5L);
        x.setIsAllowed(1);

        XXUser u = new XXUser();
        u.setId(15L);
        when(xxUserDao.findByPortalUserId(200L)).thenReturn(u);
        VXUserPermission v = svc.callMapEntityToViewBean(new VXUserPermission(), x);
        assertEquals(Long.valueOf(15L), v.getUserId());

        when(xxUserDao.findByPortalUserId(200L)).thenReturn(null);
        VXUserPermission v2 = svc.callMapEntityToViewBean(new VXUserPermission(), x);
        assertNull(v2.getUserId());
    }

    @Test
    void testValidateXUserPerm_duplicateOnCreate_throws() {
        XXUserPermission x = new XXUserPermission();
        x.setUserId(100L);
        x.setModuleId(7L);
        when(xxUserPermissionDao.findByModuleIdAndPortalUserId(100L, 7L)).thenReturn(new XXUserPermission());
        when(restErrorUtil.createRESTException(any(String.class), eq(MessageEnums.ERROR_DUPLICATE_OBJECT)))
                .thenThrow(new RuntimeException("409"));
        assertThrows(RuntimeException.class, () -> svc.validateXUserPermForCreate(x));
    }

    @Test
    void testValidateXUserPerm_duplicateOnUpdateForDifferentId_throws() {
        XXUserPermission found = new XXUserPermission();
        found.setId(1L);
        when(xxUserPermissionDao.findByModuleIdAndPortalUserId(100L, 7L)).thenReturn(found);

        XXUserPermission x = new XXUserPermission();
        x.setId(2L);
        x.setUserId(100L);
        x.setModuleId(7L);

        when(restErrorUtil.createRESTException(any(String.class), eq(MessageEnums.ERROR_DUPLICATE_OBJECT)))
                .thenThrow(new RuntimeException("409"));
        assertThrows(RuntimeException.class, () -> svc.validateXUserPermForUpdate(x));
    }
}
