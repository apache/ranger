/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerSearchUtil;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.entity.XXGdsDataset;
import org.apache.ranger.plugin.model.RangerGds;
import org.apache.ranger.plugin.model.RangerGds.RangerDataset;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.view.RangerGdsVList.RangerDatasetList;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsDatasetService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerGdsDatasetService {
    @InjectMocks
    public RangerGdsDatasetService svc = new RangerGdsDatasetService();

    @Mock
    public RangerDaoManager      daoManager;
    @Mock
    public BaseDao<XXGdsDataset> entityDao;
    @Mock
    public RangerSearchUtil      searchUtil;
    @Mock
    public RESTErrorUtil         restErrorUtil;
    @Mock
    public EntityManager         entityManager;
    @Mock
    public Query                 query;

    public static RangerDataset createViewDataset() {
        RangerDataset v = new RangerDataset();
        v.setGuid(null);
        v.setIsEnabled(null);
        v.setName("ds1");
        v.setDescription("desc");
        RangerGds.RangerGdsObjectACL acl = new RangerGds.RangerGdsObjectACL();
        v.setAcl(acl);
        Map<String, String> options = new HashMap<>();
        options.put("k", "v");
        Map<String, String> addl = new HashMap<>();
        addl.put("a", "b");
        v.setOptions(options);
        v.setAdditionalInfo(addl);
        RangerValiditySchedule vs = new RangerValiditySchedule();
        v.setValiditySchedule(vs);
        v.setLabels(Arrays.asList("finance", "public"));
        v.setKeywords(Arrays.asList("pii", "gdpr"));
        return v;
    }

    @Test
    public void test1_mapViewToEntityBean_roundTrip() {
        RangerDataset v   = createViewDataset();
        XXGdsDataset  x   = new XXGdsDataset();
        XXGdsDataset  out = svc.mapViewToEntityBean(v, x, 0);
        assertEquals("ds1", out.getName());
        assertNotNull(out.getAcl());
        assertNotNull(out.getOptions());
        assertNotNull(out.getAdditionalInfo());
        assertNotNull(out.getValiditySchedule());
        assertNotNull(out.getLabels());
        assertNotNull(out.getKeywords());
    }

    @Test
    public void test2_mapEntityToViewBean_roundTrip() {
        XXGdsDataset x = new XXGdsDataset();
        x.setGuid("g");
        x.setIsEnabled(Boolean.TRUE);
        x.setVersion(3L);
        x.setName("ds1");
        x.setDescription("desc");
        x.setAcl(JsonUtils.objectToJson(new RangerGds.RangerGdsObjectACL()));
        x.setTermsOfUse("terms");
        Map<String, String> options = new HashMap<>();
        options.put("k", "v");
        Map<String, String> addl = new HashMap<>();
        addl.put("a", "b");
        x.setOptions(JsonUtils.mapToJson(options));
        x.setAdditionalInfo(JsonUtils.mapToJson(addl));
        x.setValiditySchedule(JsonUtils.objectToJson(new RangerValiditySchedule()));
        x.setLabels(JsonUtils.listToJson(Collections.singletonList("finance")));
        x.setKeywords(JsonUtils.listToJson(Collections.singletonList("pii")));

        RangerDataset v   = new RangerDataset();
        RangerDataset out = svc.mapEntityToViewBean(v, x);
        assertEquals("g", out.getGuid());
        assertEquals(Boolean.TRUE, out.getIsEnabled());
        assertEquals("ds1", out.getName());
        assertEquals("desc", out.getDescription());
        assertNotNull(out.getAcl());
        assertEquals("terms", out.getTermsOfUse());
        assertEquals("v", out.getOptions().get("k"));
        assertEquals("b", out.getAdditionalInfo().get("a"));
        assertNotNull(out.getValiditySchedule());
        assertEquals(1, out.getLabels().size());
        assertEquals(1, out.getKeywords().size());
    }

    @Test
    public void test3_validateForCreate_setsDefaults_and_throwsOnBlankName() {
        RangerGdsDatasetService s = createServiceWithDeps();
        // blank name path -> throws
        RangerDataset vInvalid = new RangerDataset();
        vInvalid.setName("");
        when(restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> s.validateForCreate(vInvalid));

        // valid path -> sets defaults
        RangerDataset v = new RangerDataset();
        v.setName("ds");
        v.setGuid(null);
        v.setIsEnabled(null);
        assertDoesNotThrow(() -> s.validateForCreate(v));
        assertNotNull(v.getGuid());
        assertEquals(Boolean.TRUE, v.getIsEnabled());
    }

    @Test
    public void test4_validateForUpdate_setsDefaultEnabled_and_throwsOnBlankName() {
        RangerGdsDatasetService s = createServiceWithDeps();
        // blank name -> throws
        RangerDataset vInvalid = new RangerDataset();
        vInvalid.setName(null);
        when(restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> s.validateForUpdate(vInvalid, new XXGdsDataset()));

        // valid, isEnabled null -> set TRUE
        RangerDataset v = new RangerDataset();
        v.setName("ok");
        v.setIsEnabled(null);
        assertDoesNotThrow(() -> s.validateForUpdate(v, new XXGdsDataset()));
        assertEquals(Boolean.TRUE, v.getIsEnabled());
    }

    @Test
    public void test5_searchDatasets_filtersByLabelAndKeyword_andPopulatesList() throws Exception {
        RangerGdsDatasetService s = createServiceWithDeps();

        SearchFilter f = new SearchFilter();
        f.setGetCount(true);
        // request to filter labels fully and keywords partially
        f.setParam(SearchFilter.DATASET_LABEL_MATCH_TYPE, SearchField.SEARCH_TYPE.FULL.name());
        f.setParam(SearchFilter.DATASET_KEYWORD_MATCH_TYPE, SearchField.SEARCH_TYPE.PARTIAL.name());
        f.setMultiValueParam(SearchFilter.DATASET_LABEL, new Object[] {"finance"});
        f.setMultiValueParam(SearchFilter.DATASET_KEYWORD, new Object[] {"pi"});

        when(entityDao.getEntityManager()).thenReturn(entityManager);
        when(searchUtil.createSearchQuery(eq(entityManager), anyString(), anyString(), eq(f), anyList(), eq(false), eq(false))).thenReturn(query);
        when(searchUtil.createSearchQuery(eq(entityManager), anyString(), isNull(), eq(f), anyList(), eq(false), eq(true))).thenReturn(query);
        when(searchUtil.constructSortClause(eq(f), any(List.class))).thenReturn(" ORDER BY obj.id asc");
        when(query.getFirstResult()).thenReturn(0);
        when(query.getMaxResults()).thenReturn(1000);
        when(entityDao.executeCountQueryInSecurityContext(eq(XXGdsDataset.class), eq(query))).thenReturn(1L);

        XXGdsDataset x = new XXGdsDataset();
        x.setId(7L);
        x.setName("ds1");
        x.setLabels(JsonUtils.listToJson(Collections.singletonList("finance")));
        x.setKeywords(JsonUtils.listToJson(Collections.singletonList("pii")));
        when(entityDao.executeQueryInSecurityContext(eq(XXGdsDataset.class), eq(query))).thenReturn(Collections.singletonList(x));

        RangerDatasetList out = s.searchDatasets(f);
        assertNotNull(out);
        assertEquals(1, out.getList().size());
        assertEquals("ds1", out.getList().get(0).getName());
    }

    @Test
    public void test6_privateHelpers_reflection_extractFilterValues_and_isAnyMatch() throws Exception {
        SearchFilter f = new SearchFilter();
        f.setMultiValueParam(SearchFilter.DATASET_LABEL, new Object[] {"finance", "public"});
        Method mExtract = RangerGdsDatasetService.class.getDeclaredMethod("extractFilterValues", String.class, SearchFilter.class);
        mExtract.setAccessible(true);
        @SuppressWarnings("unchecked")
        Set<String> vals = (Set<String>) mExtract.invoke(svc, SearchFilter.DATASET_LABEL, f);
        assertEquals(new HashSet<>(Arrays.asList("finance", "public")), vals);

        Method mMatch = RangerGdsDatasetService.class.getDeclaredMethod("isAnyMatch", String.class, Set.class, Set.class);
        mMatch.setAccessible(true);
        Set<String> set      = new HashSet<>(Arrays.asList("one", "two"));
        Set<String> searches = new HashSet<>(Collections.singletonList("tw"));
        Boolean     partial  = (Boolean) mMatch.invoke(svc, SearchField.SEARCH_TYPE.PARTIAL.name(), set, searches);
        assertEquals(Boolean.TRUE, partial);
    }

    @Test
    public void test7_postCreate_and_postUpdate_returnPopulate() {
        XXGdsDataset x = new XXGdsDataset();
        x.setName("ds");
        assertNotNull(svc.postCreate(x));
        assertNotNull(svc.postUpdate(x));
    }

    @Test
    public void test8_preDelete_delegatesToSuper() {
        RangerGdsDatasetService s = createServiceWithDeps();
        XXGdsDataset            x = new XXGdsDataset();
        x.setId(99L);
        when(entityDao.getById(99L)).thenReturn(x);
        XXGdsDataset out = s.preDelete(99L);
        assertEquals(x, out);
    }

    @Test
    public void test9_getPopulatedViewObject_populatesFromEntity() {
        XXGdsDataset x = new XXGdsDataset();
        x.setName("ds");
        RangerDataset v = svc.getPopulatedViewObject(x);
        assertNotNull(v);
    }

    private RangerGdsDatasetService createServiceWithDeps() {
        RangerGdsDatasetService s = new RangerGdsDatasetService();
        s.searchUtil    = searchUtil;
        s.entityDao     = entityDao;
        s.daoMgr        = daoManager;
        s.restErrorUtil = restErrorUtil;
        s.stringUtil    = new StringUtil();
        s.guidUtil      = new GUIDUtil();
        return s;
    }
}
