/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerPolicyRetriever;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXPolicyWithAssignedId;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedConstruction;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockConstruction;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerPolicyWithAssignedIdService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicyWithAssignedIdService {
    @InjectMocks
    public RangerPolicyWithAssignedIdService svc;

    @Mock
    public RangerDaoManager daoMgr;

    @Test
    public void testA_populateViewBean_usesRetriever() {
        XXPolicyWithAssignedId x = new XXPolicyWithAssignedId();
        x.setId(5L);

        RangerPolicy expected = new RangerPolicy();
        expected.setId(5L);

        try (MockedConstruction<RangerPolicyRetriever> mocked = mockConstruction(RangerPolicyRetriever.class,
                (mock, context) -> when(mock.getPolicy(5L)).thenReturn(expected))) {
            RangerPolicy v = svc.populateViewBean(x);
            assertNotNull(v);
            assertEquals(Long.valueOf(5L), v.getId());
        }
    }

    @Test
    public void testB_mapViewToEntityBean_setsServiceAndGuidAndTypes() {
        XXServiceDao    svcDao = mock(XXServiceDao.class);
        XXServiceDefDao defDao = mock(XXServiceDefDao.class);
        when(daoMgr.getXXService()).thenReturn(svcDao);
        when(daoMgr.getXXServiceDef()).thenReturn(defDao);

        XXService xService = new XXService();
        xService.setId(100L);
        xService.setType(200L);
        when(svcDao.findByName(eq("srv"))).thenReturn(xService);

        XXServiceDef xDef = new XXServiceDef();
        xDef.setName("typeName");
        when(defDao.getById(eq(200L))).thenReturn(xDef);

        RangerPolicy v = new RangerPolicy();
        v.setService("srv");
        v.setGuid("g");
        v.setName("p");
        XXPolicyWithAssignedId x = new XXPolicyWithAssignedId();

        x = svc.mapViewToEntityBean(v, x, 0);

        assertEquals(Long.valueOf(100L), x.getService());
        assertEquals("g", x.getGuid());
        assertEquals("typeName", v.getServiceType());
    }

    @Test
    public void testC_mapEntityToViewBean_setsServiceNameAndType() {
        XXServiceDao    svcDao = mock(XXServiceDao.class);
        XXServiceDefDao defDao = mock(XXServiceDefDao.class);
        when(daoMgr.getXXService()).thenReturn(svcDao);
        when(daoMgr.getXXServiceDef()).thenReturn(defDao);

        XXService xService = new XXService();
        xService.setId(100L);
        xService.setType(200L);
        xService.setName("srv");
        when(svcDao.getById(anyLong())).thenReturn(xService);

        XXServiceDef xDef = new XXServiceDef();
        xDef.setName("typeName");
        when(defDao.getById(eq(200L))).thenReturn(xDef);

        XXPolicyWithAssignedId x = new XXPolicyWithAssignedId();
        x.setService(100L);
        x.setGuid("g");
        x.setName("p");
        x.setZoneId(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID);

        RangerPolicy v = new RangerPolicy();
        v = svc.mapEntityToViewBean(v, x);

        assertEquals("srv", v.getService());
        assertEquals("typeName", v.getServiceType());
    }

    @Test
    public void testD_validateMethods_noop() {
        // Just ensure methods are invocable for coverage
        svc.validateForCreate(new RangerPolicy());
        svc.validateForUpdate(new RangerPolicy(), new XXPolicyWithAssignedId());
    }
}
