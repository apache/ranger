/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.entity.XXPolicyLabel;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerPolicyLabelsService
 */

public class TestRangerPolicyLabelsService {
    @Test
    public void constructor_addsSearchAndSortFields() {
        RangerPolicyLabelsService<XXPolicyLabel, RangerPolicy> svc = new RangerPolicyLabelsService<>();

        // Verify one search field for POLICY_LABEL
        SearchField sf = svc.searchFields.get(0);
        assertEquals("policyLabel", sf.getClientFieldName());
        assertEquals("obj.policyLabel", sf.getFieldName());
        assertEquals(SearchField.DATA_TYPE.STRING, sf.getDataType());
        assertEquals(SearchField.SEARCH_TYPE.PARTIAL, sf.getSearchType());

        // Verify one sort field by id asc
        SortField sort = svc.sortFields.get(0);
        assertEquals("obj.id", sort.getFieldName());
        assertTrue(sort.isDefault());
        assertEquals(SortField.SORT_ORDER.ASC, sort.getDefaultOrder());
    }

    @Test
    public void populateViewBean_isAccessibleViaSubclass() {
        // Just ensure service instance exists and can be used; map methods are TODOs
        RangerPolicyLabelsService<XXPolicyLabel, RangerPolicy> svc = new RangerPolicyLabelsService<>();
        assertNotNull(svc);
    }

    @Test
    public void mapViewToEntityBean_returnsNull() {
        TestSvc svc = new TestSvc();
        assertNull(svc.callMapViewToEntityBean(new RangerPolicy(), new XXPolicyLabel(), 0));
    }

    @Test
    public void mapEntityToViewBean_returnsNull() {
        TestSvc svc = new TestSvc();
        assertNull(svc.callMapEntityToViewBean(new RangerPolicy(), new XXPolicyLabel()));
    }

    @Test
    public void validateForCreate_noException() {
        TestSvc svc = new TestSvc();
        svc.callValidateForCreate(new RangerPolicy());
    }

    @Test
    public void validateForUpdate_noException() {
        TestSvc svc = new TestSvc();
        svc.callValidateForUpdate(new RangerPolicy(), new XXPolicyLabel());
    }

    static class TestSvc extends RangerPolicyLabelsService<XXPolicyLabel, RangerPolicy> {
        XXPolicyLabel callMapViewToEntityBean(RangerPolicy v, XXPolicyLabel x, int op) {
            return super.mapViewToEntityBean(v, x, op);
        }

        RangerPolicy callMapEntityToViewBean(RangerPolicy v, XXPolicyLabel x) {
            return super.mapEntityToViewBean(v, x);
        }

        void callValidateForCreate(RangerPolicy v) {
            super.validateForCreate(v);
        }

        void callValidateForUpdate(RangerPolicy v, XXPolicyLabel x) {
            super.validateForUpdate(v, x);
        }
    }
}
