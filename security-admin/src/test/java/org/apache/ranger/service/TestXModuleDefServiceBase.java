/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.entity.XXModuleDef;
import org.apache.ranger.view.VXModuleDef;
import org.apache.ranger.view.VXModuleDefList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XModuleDefServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXModuleDefServiceBase {
    @Test
    public void testMapViewToEntityBean_setsModuleAndUrl() {
        TestableService svc = new TestableService();
        VXModuleDef     v   = new VXModuleDef();
        v.setModule("users");
        v.setUrl("/users");
        XXModuleDef e = new XXModuleDef();
        e = svc.mapViewToEntityBean(v, e, 0);
        assertEquals("users", e.getModule());
        assertEquals("/users", e.getUrl());
    }

    @Test
    public void testSearchModuleDef_dedupsById_andPopulatesViewList() {
        TestableService svc = new TestableService();
        XXModuleDef     a   = new XXModuleDef();
        a.setId(1L);
        a.setModule("A");
        a.setUrl("/a");
        XXModuleDef a2 = new XXModuleDef();
        a2.setId(1L);
        a2.setModule("A2");
        a2.setUrl("/a2");
        XXModuleDef b = new XXModuleDef();
        b.setId(2L);
        b.setModule("B");
        b.setUrl("/b");
        svc.nextResults = Arrays.asList(a, a2, b);

        SearchCriteria  sc  = new SearchCriteria();
        VXModuleDefList out = svc.searchModuleDef(sc);

        assertNotNull(out);
        assertNotNull(out.getvXModuleDef());
        assertEquals(2, out.getvXModuleDef().size());
        assertEquals(2, out.getTotalCount());
        assertEquals(Integer.MAX_VALUE, sc.getMaxRows());

        Set<Long> ids = new HashSet<>();
        for (VXModuleDef v : out.getvXModuleDef()) {
            ids.add(v.getId());
        }
        assertTrue(ids.contains(1L));
        assertTrue(ids.contains(2L));
    }

    public static class TestableService extends XModuleDefServiceBase<XXModuleDef, VXModuleDef> {
        public List<XXModuleDef> nextResults = new ArrayList<>();

        @Override
        protected void validateForCreate(VXModuleDef viewBaseBean) {}

        @Override
        protected void validateForUpdate(VXModuleDef viewBaseBean, XXModuleDef t) {}

        @Override
        protected List<XXModuleDef> searchResources(SearchCriteria searchCriteria, List<SearchField> searchFieldList, List<SortField> sortFieldList, VList vList) {
            return nextResults;
        }
    }
}
