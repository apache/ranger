/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.db.XXAuditMapDao;
import org.apache.ranger.db.XXPermMapDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.view.VXAuditMap;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXResource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XResourceService
 */

public class TestXResourceService {
    @InjectMocks
    private XResourceService svc = new XResourceService();

    @Mock private RangerDaoManager daoManager;
    @Mock private XXResourceDao    xxResourceDao;
    @Mock private XXAssetDao       xxAssetDao;
    @Mock private XXAuditMapDao    xxAuditMapDao;
    @Mock private XXPermMapDao     xxPermMapDao;
    @Mock private XXPortalUserDao  xxPortalUserDao;
    @Mock private XAuditMapService xAuditMapService;
    @Mock private XPermMapService  xPermMapService;
    @Mock private RangerBizUtil    xaBizUtil;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoManager.getXXResource()).thenReturn(xxResourceDao);
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        when(daoManager.getXXAuditMap()).thenReturn(xxAuditMapDao);
        when(daoManager.getXXPermMap()).thenReturn(xxPermMapDao);
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
    }

    @Test
    void testCreateResource_createsAuditAndPermMaps() {
        VXResource input = new VXResource();
        input.setId(2L);
        input.setAuditList(Arrays.asList(new VXAuditMap(), new VXAuditMap()));
        VXPermMap pm = new VXPermMap();
        pm.setUserId(10L);
        input.setPermMapList(Collections.singletonList(pm));

        // super.createResource -> simulate returning the same object with ID
        XResourceService spy = spy(svc);
        doReturn(input).when(spy).createResource(any(VXResource.class));

        // xAuditMapService and xPermMapService create
        when(xAuditMapService.createResource(any(VXAuditMap.class))).thenAnswer(inv -> inv.getArgument(0));
        when(xPermMapService.createResource(any(VXPermMap.class))).thenAnswer(inv -> inv.getArgument(0));

        VXResource out = spy.createResource(input);
        assertNotNull(out.getAuditList());
        assertNotNull(out.getPermMapList());
    }

    @Test
    void testValidateForCreate_missingAssetOrName_throws() {
        VXResource r = new VXResource();
        // missing asset id
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(r));
        // invalid asset id
        r.setAssetId(1000L);
        when(xxAssetDao.getById(1000L)).thenReturn(null);
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(r));
        // valid asset but missing name
        XXAsset a = new XXAsset();
        a.setId(1000L);
        when(xxAssetDao.getById(1000L)).thenReturn(a);
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(r));
    }
}
