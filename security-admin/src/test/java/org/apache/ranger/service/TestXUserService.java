/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupUserDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXPortalUserRoleDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXGroupUser;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXPortalUserRole;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.view.VXUser;
import org.apache.ranger.view.VXUserList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XUserService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
class TestXUserService {
    @InjectMocks
    private XUserService svc;

    @Mock
    private RangerDaoManager                            daoManager;
    @Mock
    private RESTErrorUtil                               restErrorUtil;
    @Mock
    private StringUtil                                  stringUtil;
    @Mock
    private org.apache.ranger.common.db.BaseDao<XXUser> entityDao;

    @Test
    public void testSearchFieldsInitialized() {
        XUserService svc = new XUserService();
        assertNotNull(svc.searchFields);
        assertFalse(svc.searchFields.isEmpty());
    }

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void test_getXUserByUserName_notFound_throws() {
        XXUserDao userDao = mock(XXUserDao.class);
        when(daoManager.getXXUser()).thenReturn(userDao);
        when(userDao.findByUserName("bob")).thenReturn(null);
        when(restErrorUtil.createRESTException(eq("bob is Not Found"), eq(MessageEnums.DATA_NOT_FOUND)))
                .thenThrow(new RuntimeException("404"));

        assertThrows(RuntimeException.class, () -> svc.getXUserByUserName("bob"));
    }

    @Test
    void test_createXUserWithOutLogin_createNewWhenAbsent() {
        XXUserDao       userDao = mock(XXUserDao.class);
        XXPortalUserDao pDao    = mock(XXPortalUserDao.class);
        when(daoManager.getXXUser()).thenReturn(userDao);
        when(daoManager.getXXPortalUser()).thenReturn(pDao);
        when(daoManager.getXXGroupUser()).thenReturn(mock(XXGroupUserDao.class));
        when(userDao.findByUserName("c1")).thenReturn(null);
        when(pDao.findByLoginId("c1")).thenReturn(null);
        when(pDao.getById(anyLong())).thenReturn(null);
        when(entityDao.create(any(XXUser.class))).thenAnswer(inv -> inv.getArgument(0));

        VXUser in = new VXUser();
        in.setName("c1");
        VXUser out = svc.createXUserWithOutLogin(in);

        assertNotNull(out);
        assertEquals("c1", out.getName());
    }

    @Test
    void test_readResourceWithOutLogin_notFound_throws() {
        when(entityDao.getById(99L)).thenReturn(null);
        when(restErrorUtil.createRESTException(
                contains("not found"),
                eq(MessageEnums.DATA_NOT_FOUND),
                eq(99L),
                isNull(),
                anyString()
        )).thenThrow(new RuntimeException("400"));

        assertThrows(RuntimeException.class, () -> svc.readResourceWithOutLogin(99L));
    }

    @Test
    void test_lookupXUsers_mapsVisibilityAndLists() {
        XUserService spySvc = spy(svc);

        XXUser u = new XXUser();
        u.setId(5L);
        u.setName("x");
        u.setIsVisible(1);
        doReturn(Collections.singletonList(u)).when(spySvc)
                .searchResources(any(SearchCriteria.class), anyList(), anyList(), any(VXUserList.class));

        VXUserList list = new VXUserList();
        VXUserList out  = spySvc.lookupXUsers(new SearchCriteria(), list);

        assertEquals(1, out.getVXUsers().size());
        assertEquals(Integer.valueOf(1), out.getVXUsers().get(0).getIsVisible());
    }

    @Test
    void test_populateViewBean_populatesGroupsAndAttributes() {
        XXPortalUserDao     pDao = mock(XXPortalUserDao.class);
        XXPortalUserRoleDao rDao = mock(XXPortalUserRoleDao.class);
        XXGroupUserDao      gDao = mock(XXGroupUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(pDao);
        when(daoManager.getXXPortalUserRole()).thenReturn(rDao);
        when(daoManager.getXXGroupUser()).thenReturn(gDao);
        when(stringUtil.validateEmail("a@n.com")).thenReturn(true);

        XXUser x = new XXUser();
        x.setId(11L);
        x.setName("ann");
        x.setIsVisible(1);

        XXPortalUser pu = new XXPortalUser();
        pu.setId(77L);
        pu.setLoginId("ann");
        pu.setFirstName("A");
        pu.setLastName("N");
        pu.setEmailAddress("a@n.com");
        pu.setStatus(1);

        when(pDao.findByLoginId("ann")).thenReturn(pu);

        XXPortalUserRole role = new XXPortalUserRole();
        role.setUserRole("ROLE_USER");
        when(rDao.findByParentId(77L)).thenReturn(Collections.singletonList(role));

        XXGroupUser gu = new XXGroupUser();
        gu.setParentGroupId(3L);
        gu.setName("g1");
        when(gDao.findByUserId(11L)).thenReturn(Collections.singletonList(gu));

        VXUser v = svc.populateViewBean(x);

        assertEquals(Collections.singletonList(3L), v.getGroupIdList());
        assertEquals(Collections.singletonList("g1"), v.getGroupNameList());
        assertEquals("A", v.getFirstName());
        assertTrue(v.getUserRoleList().contains("ROLE_USER"));
    }
}
