/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.plugin.model.RangerServiceResourceWithTags;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServiceResourceWithTagsServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceResourceWithTagsServiceBase {
    @Test
    public void testA_searchServiceResources_populatesListAndMeta() {
        TestSvc svc = new TestSvc();

        XXServiceResource x = new XXServiceResource();
        x.setGuid("g-1");
        x.setServiceId(1L);
        x.setIsEnabled(true);
        x.setVersion(3L);
        x.setTags("[]");
        svc.toReturn = Collections.singletonList(x);

        SearchFilter f = new SearchFilter();
        f.setMaxRows(25);
        f.setStartIndex(10);
        f.setSortType("asc");
        f.setSortBy("serviceName");

        PList<RangerServiceResourceWithTags> out = svc.searchServiceResources(f);

        assertNotNull(out);
        assertEquals(1, out.getList().size());
        assertEquals(1, out.getResultSize());
        assertEquals(25, out.getPageSize());
        assertEquals(10, out.getStartIndex());
        assertEquals("asc", out.getSortType());
        assertEquals("serviceName", out.getSortBy());

        RangerServiceResourceWithTags v = out.getList().get(0);
        assertEquals("g-1", v.getGuid());
        assertEquals(3L, v.getVersion());
        assertEquals(true, v.getIsEnabled());
        assertEquals("svc-1", v.getServiceName());
    }

    public static class TestSvc extends RangerServiceResourceWithTagsServiceBase<XXServiceResource, RangerServiceResourceWithTags> {
        List<XXServiceResource> toReturn = new ArrayList<>();

        @Override
        protected RangerServiceResourceWithTags mapEntityToViewBean(RangerServiceResourceWithTags vObj, XXServiceResource xObj) {
            return super.mapEntityToViewBean(vObj, xObj);
        }

        @Override
        protected XXServiceResource mapViewToEntityBean(RangerServiceResourceWithTags viewBean, XXServiceResource t, int operationContext) {
            return t;
        }

        @Override
        public RangerServiceResourceWithTags populateViewBean(XXServiceResource xObj) {
            RangerServiceResourceWithTags v = new RangerServiceResourceWithTags();
            v.setGuid(xObj.getGuid());
            v.setVersion(xObj.getVersion());
            v.setIsEnabled(xObj.getIsEnabled());
            v.setServiceName("svc-1");
            return v;
        }

        @Override
        public void validateForCreate(RangerServiceResourceWithTags vObj) {}

        @Override
        public void validateForUpdate(RangerServiceResourceWithTags vObj, XXServiceResource mObj) {}

        @Override
        protected List<XXServiceResource> searchRangerObjects(SearchFilter searchFilter, List<SearchField> searchFieldList, List<SortField> sortFieldList, PList<RangerServiceResourceWithTags> pList) {
            return toReturn;
        }
    }
}
