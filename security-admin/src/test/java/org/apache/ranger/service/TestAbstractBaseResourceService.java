/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SearchUtil;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXResource;
import org.apache.ranger.security.handler.Permission;
import org.apache.ranger.security.handler.RangerDomainObjectSecurityHandler;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXResource;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for AbstractBaseResourceService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAbstractBaseResourceService {
    private       TestableService                   service;
    @Mock private RangerDaoManager                  daoManager;
    @Mock private SearchUtil                        searchUtil;
    @Mock private RESTErrorUtil                     restErrorUtil;
    @Mock private BaseDao<XXResource>               entityDao;
    @Mock private RangerDomainObjectSecurityHandler objectSecurityHandler;

    public NoopService createNoopService() {
        NoopService svc = new NoopService();
        svc.daoManager            = daoManager;
        svc.searchUtil            = searchUtil;
        svc.restErrorUtil         = restErrorUtil;
        svc.entityDao             = entityDao;
        svc.stringUtil            = new StringUtil();
        svc.objectSecurityHandler = objectSecurityHandler;
        return svc;
    }

    @Test
    public void testConvertVListToVMap() {
        service = createService();
        VXResource v1 = new VXResource();
        v1.setId(1L);
        VXResource v2 = new VXResource();
        v2.setId(2L);
        Map<Long, VXResource> out = service.convertVListToVMap(Arrays.asList(v1, v2));
        assertEquals(2, out.size());
        assertSame(v1, out.get(1L));
        assertSame(v2, out.get(2L));
        assertTrue(service.convertVListToVMap(null).isEmpty());
    }

    @Test
    public void testGetSearchCount_usesDaoCount() {
        service = createService();
        SearchCriteria sc    = new SearchCriteria();
        EntityManager  em    = mock(EntityManager.class);
        Query          query = mock(Query.class);
        when(entityDao.getEntityManager()).thenReturn(em);
        when(searchUtil.createSearchQuery(any(), anyString(), isNull(), any(SearchCriteria.class), anyList(), eq(false), eq(true))).thenReturn(query);
        when(entityDao.executeCountQueryInSecurityContext(any(), any(Query.class))).thenReturn(7L);

        List<SearchField> fields = service.searchFields;
        VXLong            count  = service.getSearchCount(sc, fields);
        assertNotNull(count);
        assertEquals(7L, count.getValue());
    }

    @Test
    public void testSetSortClause_setsDefaultWhenNotProvided() {
        service = createService();
        SearchCriteria   sc       = new SearchCriteria();
        CriteriaBuilder  cb       = mock(CriteriaBuilder.class);
        CriteriaQuery<?> criteria = mock(CriteriaQuery.class);
        @SuppressWarnings("unchecked")
        Root<XXDBBase> root = (Root<XXDBBase>) mock(Root.class);

        service.setSortClause(sc, service.sortFields, cb, criteria, root);

        assertEquals("id", sc.getSortBy());
        assertEquals(SortField.SORT_ORDER.ASC.name(), sc.getSortType());
    }

    @Test
    public void testCreateResource_accessDenied_throws403() {
        service = createService();
        VXResource view = new VXResource();
        when(objectSecurityHandler.hasAccess(any(), eq(Permission.PermissionType.CREATE))).thenReturn(false);
        when(restErrorUtil.create403RESTException(anyString())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.createResource(view));
        assertTrue(service.validateCreateCalled);
    }

    @Test
    public void testReadResource_notFound_throws404() {
        service = createService();
        when(entityDao.getById(5L)).thenReturn(null);
        when(restErrorUtil.createRESTException(anyString(), eq(MessageEnums.DATA_NOT_FOUND), eq(5L), isNull(), anyString(), anyInt())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.readResource(5L));
    }

    @Test
    public void testReadResource_success_checksAccessAndReturnsView() {
        service = createService();
        XXResource entity = new XXResource();
        entity.setId(9L);
        when(entityDao.getById(9L)).thenReturn(entity);
        when(objectSecurityHandler.hasAccess(eq(entity), eq(Permission.PermissionType.READ))).thenReturn(true);
        VXResource view = service.readResource(9L);
        assertNotNull(view);
        assertEquals(9L, view.getId());
    }

    @Test
    public void testUpdateResource_accessDenied_throws403() {
        service = createService();
        VXResource view = new VXResource();
        view.setId(10L);
        XXResource entity = new XXResource();
        entity.setId(10L);
        when(entityDao.getById(10L)).thenReturn(entity);
        when(objectSecurityHandler.hasAccess(eq(entity), eq(Permission.PermissionType.UPDATE))).thenReturn(false);
        when(restErrorUtil.create403RESTException(anyString())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.updateResource(view));
        assertTrue(service.validateUpdateCalled);
    }

    @Test
    public void testDeleteResource_notFound_throws404() {
        service = createService();
        when(entityDao.getById(15L)).thenReturn(null);
        when(restErrorUtil.createRESTException(contains("not found"), eq(MessageEnums.DATA_NOT_FOUND), eq(15L), isNull(), anyString())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.deleteResource(15L));
    }

    @Test
    public void testDeleteResource_success_callsRemoveAndPostDelete() {
        service = createService();
        XXResource entity = new XXResource();
        entity.setId(20L);
        when(entityDao.getById(20L)).thenReturn(entity);
        when(objectSecurityHandler.hasAccess(eq(entity), eq(Permission.PermissionType.DELETE))).thenReturn(false);
        when(entityDao.remove(eq(entity))).thenReturn(true);
        boolean result = service.deleteResource(20L);
        assertTrue(result);
        assertTrue(service.postDeleteCalled);
    }

    @Test
    public void testDeleteResource_removeThrows_wrapsInRESTException() {
        service = createService();
        XXResource entity = new XXResource();
        entity.setId(21L);
        when(entityDao.getById(21L)).thenReturn(entity);
        when(entityDao.remove(eq(entity))).thenThrow(new RuntimeException("boom"));
        when(restErrorUtil.createRESTException(contains("can't be deleted"), eq(MessageEnums.OPER_NOT_ALLOWED_FOR_STATE), eq(21L), isNull(), anyString())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.deleteResource(21L));
    }

    @Test
    public void testGetSearchCountUsingCriteria_returnsCount() {
        service = createService();
        SearchCriteria  sc = new SearchCriteria();
        EntityManager   em = mock(EntityManager.class);
        CriteriaBuilder cb = mock(CriteriaBuilder.class);
        @SuppressWarnings("unchecked")
        CriteriaQuery<Long> cq = (CriteriaQuery<Long>) mock(CriteriaQuery.class);
        @SuppressWarnings("unchecked")
        Root<XXResource> root = (Root<XXResource>) mock(Root.class);
        Expression<Long> expr       = mock(Expression.class);
        Predicate        conj       = mock(Predicate.class);
        Predicate        andPred    = mock(Predicate.class);
        TypedQuery<Long> typedQuery = mock(TypedQuery.class);

        when(entityDao.getEntityManager()).thenReturn(em);
        when(em.getCriteriaBuilder()).thenReturn(cb);
        when(cb.createQuery(Long.class)).thenReturn(cq);
        when(cq.from(eq(XXResource.class))).thenReturn(root);
        when(cb.count(any())).thenReturn(expr);
        when(cq.select(eq(expr))).thenReturn(cq);
        when(cb.conjunction()).thenReturn(conj);
        when(cb.and(any(Predicate.class))).thenReturn(andPred);
        when(em.createQuery(eq(cq))).thenReturn(typedQuery);
        when(entityDao.executeCountQueryInSecurityContext(any(), eq(typedQuery))).thenReturn(5L);

        VXLong v = service.getSearchCountUsingCriteria(sc, service.searchFields);
        assertNotNull(v);
        assertEquals(5L, v.getValue());
    }

    @Test
    public void testSearchResourcesUsingCriteria_countZeroReturnsEmpty() {
        service = createService();
        SearchCriteria sc = new SearchCriteria();
        sc.setGetCount(true);
        EntityManager   em = mock(EntityManager.class);
        CriteriaBuilder cb = mock(CriteriaBuilder.class);
        CriteriaQuery   cq = mock(CriteriaQuery.class);
        @SuppressWarnings("unchecked")
        Root<XXResource> root = (Root<XXResource>) mock(Root.class);
        Expression<Long> expr       = mock(Expression.class);
        TypedQuery<Long> countQuery = mock(TypedQuery.class);

        when(entityDao.getEntityManager()).thenReturn(em);
        when(em.getCriteriaBuilder()).thenReturn(cb);
        when(cb.createQuery()).thenReturn(cq);
        when(cq.from(eq(XXResource.class))).thenReturn(root);
        when(cb.count(any())).thenReturn(expr);
        when(cq.select(eq(expr))).thenReturn(cq);
        when(em.createQuery(eq(cq))).thenReturn(countQuery);
        when(entityDao.executeCountQueryInSecurityContext(any(), eq(countQuery))).thenReturn(0L);

        List<XXResource> out = service.searchResourcesUsingCriteria(sc, service.searchFields, service.sortFields, null);
        assertNotNull(out);
        assertTrue(out.isEmpty());
    }

    @Test
    public void testSearchResourcesUsingCriteria_returnsResultAndSetsVList() {
        service = createService();
        SearchCriteria sc = new SearchCriteria();
        sc.setGetCount(true);
        EntityManager   em = mock(EntityManager.class);
        CriteriaBuilder cb = mock(CriteriaBuilder.class);
        CriteriaQuery   cq = mock(CriteriaQuery.class);
        @SuppressWarnings("unchecked")
        Root<XXResource> root = (Root<XXResource>) mock(Root.class);
        Expression<Long> expr       = mock(Expression.class);
        TypedQuery<Long> countQuery = mock(TypedQuery.class);
        @SuppressWarnings("unchecked")
        TypedQuery<XXResource> dataQuery = (TypedQuery<XXResource>) mock(TypedQuery.class);

        when(entityDao.getEntityManager()).thenReturn(em);
        when(em.getCriteriaBuilder()).thenReturn(cb);
        when(cb.createQuery()).thenReturn(cq);
        when(cq.from(eq(XXResource.class))).thenReturn(root);
        when(cb.count(any())).thenReturn(expr);
        when(cq.select(eq(expr))).thenReturn(cq);
        when(em.createQuery(eq(cq))).thenReturn(countQuery);
        when(entityDao.executeCountQueryInSecurityContext(any(), eq(countQuery))).thenReturn(3L);

        when(cq.select(eq(root))).thenReturn(cq);
        when(em.createQuery(eq(cq))).thenReturn(dataQuery);
        doAnswer(inv -> null).when(searchUtil).updateQueryPageSize(eq(dataQuery), eq(sc));

        XXResource r = new XXResource();
        when(entityDao.executeQueryInSecurityContext(any(), any(Query.class))).thenReturn(Collections.singletonList(r));

        TestVList        vList = new TestVList();
        List<XXResource> out   = service.searchResourcesUsingCriteria(sc, service.searchFields, service.sortFields, vList);

        assertNotNull(out);
    }

    @Test
    public void testBuildUserConditions_forStringAndIntegerAndNull() {
        service = createService();
        CriteriaBuilder cb = mock(CriteriaBuilder.class);
        @SuppressWarnings("unchecked")
        Root<XXDBBase> root = (Root<XXDBBase>) mock(Root.class);
        Path<Object>       path    = mock(Path.class);
        Expression<String> strExpr = mock(Expression.class);
        Expression<String> literal = mock(Expression.class);
        Predicate          pred    = mock(Predicate.class);

        when(root.get("name")).thenReturn(path);
        when(cb.lower(any())).thenReturn(strExpr);
        when(cb.literal(anyString())).thenReturn(literal);
        when(cb.equal(any(), any())).thenReturn(pred);
        when(cb.conjunction()).thenReturn(pred);
        when(cb.and(any(Predicate.class))).thenReturn(pred);

        Map<String, Object> params = new HashMap<>();
        params.put("name", "Alice");
        params.put("status", 1);
        List<SearchField> fields = Arrays.asList(
                new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.PARTIAL),
                new SearchField("status", "obj.status", SearchField.DATA_TYPE.INTEGER, SearchField.SEARCH_TYPE.FULL));

        service.buildUserConditions(params, fields, cb, root);

        verify(cb, atLeastOnce()).lower(any());
        // no strict verify for equal, since join path may result in null path under mocks
    }

    @Test
    public void testReadResource_accessDeniedThrows() {
        service = createService();
        XXResource entity = new XXResource();
        entity.setId(30L);
        when(entityDao.getById(30L)).thenReturn(entity);
        when(objectSecurityHandler.hasAccess(eq(entity), eq(Permission.PermissionType.READ))).thenReturn(false);
        when(restErrorUtil.create403RESTException(anyString())).thenThrow(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> service.readResource(30L));
    }

    @Test
    public void testPostDelete_baseMethodInvocableViaReflection() throws Exception {
        service = createService();
        XXResource resource = new XXResource();
        Method     method   = AbstractBaseResourceService.class.getDeclaredMethod("postDelete", XXDBBase.class);
        method.setAccessible(true);
        method.invoke(service, resource);
    }

    @Test
    public void testPreRead_returnsNull() {
        service = createService();
        assertNull(service.preRead(1L));
    }

    @Test
    public void testPostUpdate_populatesView() {
        service = createService();
        XXResource entity = new XXResource();
        entity.setId(42L);
        VXResource view = service.postUpdate(entity);
        assertNotNull(view);
        assertEquals(42L, view.getId());
    }

    @Test
    public void testDeleteResource_callsBasePostDelete_noOverride() {
        NoopService svc    = createNoopService();
        XXResource  entity = new XXResource();
        entity.setId(25L);
        when(entityDao.getById(25L)).thenReturn(entity);
        when(objectSecurityHandler.hasAccess(eq(entity), eq(Permission.PermissionType.DELETE))).thenReturn(true);
        when(entityDao.remove(eq(entity))).thenReturn(true);
        boolean result = svc.deleteResource(25L);
        assertTrue(result);
    }

    private TestableService createService() {
        TestableService svc = new TestableService();
        svc.daoManager            = daoManager;
        svc.searchUtil            = searchUtil;
        svc.restErrorUtil         = restErrorUtil;
        svc.entityDao             = entityDao;
        svc.stringUtil            = new StringUtil();
        svc.objectSecurityHandler = objectSecurityHandler;
        return svc;
    }

    public static class TestableService extends AbstractBaseResourceService<XXResource, VXResource> {
        boolean validateCreateCalled;
        boolean validateUpdateCalled;
        boolean postDeleteCalled;

        @Override
        protected void validateForCreate(VXResource viewBaseBean) {
            validateCreateCalled = true;
        }

        @Override
        protected void validateForUpdate(VXResource viewBaseBean, XXResource t) {
            validateUpdateCalled = true;
        }

        @Override
        protected XXResource mapViewToEntityBean(VXResource viewBean, XXResource t, int operationContext) {
            return t;
        }

        @Override
        protected VXResource mapEntityToViewBean(VXResource viewBean, XXResource t) {
            return viewBean;
        }

        @Override
        protected void postDelete(XXResource resource) {
            postDeleteCalled = true;
        }

        BaseDao<XXResource> getDaoPublic() {
            return getDao();
        }
    }

    public static class NoopService extends AbstractBaseResourceService<XXResource, VXResource> {
        @Override
        protected void validateForCreate(VXResource viewBaseBean) {}

        @Override
        protected void validateForUpdate(VXResource viewBaseBean, XXResource t) {}

        @Override
        protected XXResource mapViewToEntityBean(VXResource viewBean, XXResource t, int operationContext) {
            return t;
        }

        @Override
        protected VXResource mapEntityToViewBean(VXResource viewBean, XXResource t) {
            return viewBean;
        }
    }

    public static class TestVList extends VList {
        private final List<Object> list = new ArrayList<>();

        @Override
        public int getListSize() {
            return list.size();
        }

        @Override
        public List<?> getList() {
            return list;
        }
    }
}
