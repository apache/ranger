/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPermMapDao;
import org.apache.ranger.db.XXResourceDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPermMap;
import org.apache.ranger.entity.XXResource;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.view.VXAuditMap;
import org.apache.ranger.view.VXAuditMapList;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXPermMapList;
import org.apache.ranger.view.VXPermObj;
import org.apache.ranger.view.VXPolicy;
import org.apache.ranger.view.VXPolicyList;
import org.apache.ranger.view.VXResource;
import org.apache.ranger.view.VXResourceList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XPolicyServiceMapping
 */

@ExtendWith(MockitoExtension.class)
public class TestXPolicyServiceMapping {
    @Mock
    RangerDaoManager xaDaoMgr;
    @Mock
    RESTErrorUtil restErrorUtil;
    @Mock
    XPermMapService xPermMapService;
    @Mock
    XXResourceDao xxResourceDao;
    @Mock
    XXAssetDao xxAssetDao;
    @Mock
    XXUserDao xxUserDao;
    @Mock
    XXGroupDao xxGroupDao;
    @Mock
    XXPermMapDao xxPermMapDao;
    @Mock
    XResourceService xResourceService;
    @Mock
    XAuditMapService xAuditMapService;
    @Spy
    StringUtil stringUtil = new StringUtil();
    @InjectMocks
    private XPolicyService xPolicyService = new XPolicyService();

    @Test
    public void mapPublicToXAObject_missingAsset_throws() {
        VXPolicy v = new VXPolicy();
        v.setRepositoryName("missing");
        when(xaDaoMgr.getXXAsset()).thenReturn(xxAssetDao);
        when(xxAssetDao.findByAssetName("missing")).thenReturn(null);

        assertThrows(RuntimeException.class, () -> xPolicyService.mapPublicToXAObject(v, RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    void testMapXAToPublicObject_HivePolicy() {
        VXResource resource = new VXResource();
        resource.setPolicyName(" testPolicy ");
        resource.setName("resource1");
        resource.setDescription("desc");
        resource.setAssetName("asset1");
        resource.setAssetType(AppConstants.ASSET_HIVE);
        resource.setResourceStatus(AppConstants.STATUS_ENABLED);
        resource.setTables("tbl1");
        resource.setColumns("col1");
        resource.setColumnFamilies("cf1");
        resource.setDatabases("db1");
        resource.setUdfs("udf1");
        resource.setTopologies("top1");
        resource.setServices("svc1");
        resource.setTableType(AppConstants.POLICY_INCLUSION);
        resource.setColumnType(AppConstants.POLICY_EXCLUSION);

        VXAuditMap auditMap = new VXAuditMap();
        auditMap.setAuditType(AppConstants.XA_AUDIT_TYPE_ALL);
        resource.setAuditList(Collections.singletonList(auditMap));

        VXPermMap permMap = new VXPermMap();
        permMap.setPermGroup("grp1");
        permMap.setPermFor(AppConstants.XA_PERM_FOR_USER);
        permMap.setUserName("user1");
        permMap.setPermType(AppConstants.XA_PERM_TYPE_READ);
        permMap.setIpAddress("127.0.0.1");
        resource.setPermMapList(Collections.singletonList(permMap));

        VXPolicy policy = xPolicyService.mapXAToPublicObject(resource);

        assertNotNull(policy);
        assertEquals("testPolicy", policy.getPolicyName());
        assertEquals("resource1", policy.getResourceName());
        assertEquals("desc", policy.getDescription());
        assertEquals("asset1", policy.getRepositoryName());
        assertEquals(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HIVE), policy.getRepositoryType());
        assertTrue(policy.getIsEnabled());
        assertTrue(policy.getIsAuditEnabled());
        assertEquals("tbl1", policy.getTables());
        assertEquals("col1", policy.getColumns());
        assertEquals("db1", policy.getDatabases());
        assertEquals("udf1", policy.getUdfs());
        assertEquals(AppConstants.getLabelFor_PolicyType(AppConstants.POLICY_INCLUSION), policy.getTableType());
        assertEquals(AppConstants.getLabelFor_PolicyType(AppConstants.POLICY_EXCLUSION), policy.getColumnType());
        assertNull(policy.getIsRecursive());
        assertNotNull(policy.getPermMapList());
        assertFalse(policy.getPermMapList().isEmpty());
        VXPermObj permObj = policy.getPermMapList().get(0);
        assertEquals(Collections.singletonList("user1"), permObj.getUserList());
        assertTrue(permObj.getPermList().contains(AppConstants.getLabelFor_XAPermType(AppConstants.XA_PERM_TYPE_READ)));
    }

    @Test
    void testMapXAToPublicObject_HdfsPolicy() {
        VXResource resource = new VXResource();
        resource.setPolicyName(" hdfsPolicy ");
        resource.setName("hdfsResource");
        resource.setAssetName("assetHdfs");
        resource.setAssetType(AppConstants.ASSET_HDFS);
        resource.setResourceStatus(AppConstants.STATUS_ENABLED);
        resource.setIsRecursive(AppConstants.BOOL_TRUE);

        VXPolicy policy = xPolicyService.mapXAToPublicObject(resource);

        assertNotNull(policy);
        assertEquals("hdfsPolicy", policy.getPolicyName());
        assertTrue(policy.getIsEnabled());
        assertEquals(Boolean.TRUE, policy.getIsRecursive());
    }

    @Test
    void testMapToVXPolicyList_convertsEachResource() {
        VXResource r1 = new VXResource();
        r1.setPolicyName("p1");
        r1.setResourceStatus(AppConstants.STATUS_ENABLED);
        VXResource r2 = new VXResource();
        r2.setPolicyName("p2");
        r2.setResourceStatus(AppConstants.STATUS_ENABLED);
        VXResourceList list = new VXResourceList(Arrays.asList(r1, r2));

        VXPolicyList out = xPolicyService.mapToVXPolicyList(list);

        assertNotNull(out);
        assertEquals(2, out.getListSize());
    }

    @Test
    void testUpdatePermGroup_updatesGroupedPerms() {
        VXResource in = new VXResource();
        in.setId(99L);
        when(xaDaoMgr.getXXResource()).thenReturn(xxResourceDao);
        when(xxResourceDao.getById(99L)).thenReturn(new XXResource());

        VXPermMap a = new VXPermMap();
        a.setResourceId(99L);
        a.setPermFor(AppConstants.XA_PERM_FOR_USER);
        a.setUserId(1L);
        a.setPermType(AppConstants.XA_PERM_TYPE_READ);
        a.setIpAddress("");
        VXPermMap b = new VXPermMap();
        b.setResourceId(99L);
        b.setPermFor(AppConstants.XA_PERM_FOR_USER);
        b.setUserId(1L);
        b.setPermType(AppConstants.XA_PERM_TYPE_WRITE);
        b.setIpAddress("");
        VXPermMapList current = new VXPermMapList(Arrays.asList(a, b));

        when(xPermMapService.searchXPermMaps(any())).thenReturn(current, current);
        when(xPermMapService.updateResource(any(VXPermMap.class))).thenAnswer(inv -> inv.getArgument(0));

        List<VXPermMap> updated = xPolicyService.updatePermGroup(in);

        assertNotNull(updated);
        assertFalse(updated.isEmpty());
        verify(xPermMapService, atLeastOnce()).updateResource(any(VXPermMap.class));
    }

    @Test
    void testUpdatePermGroup_missingResource_throws() {
        VXResource in = new VXResource();
        in.setId(1L);
        when(xaDaoMgr.getXXResource()).thenReturn(xxResourceDao);
        when(xxResourceDao.getById(1L)).thenReturn(null);

        assertThrows(RuntimeException.class, () -> xPolicyService.updatePermGroup(in));
    }

    @Test
    void testMapPermObjToPermList_CreateContext_buildsUserAndGroupPerms() {
        when(xaDaoMgr.getXXAsset()).thenReturn(xxAssetDao);
        XXAsset asset = new XXAsset();
        asset.setId(500L);
        asset.setAssetType(AppConstants.ASSET_HDFS);
        when(xxAssetDao.findByAssetName("repoC")).thenReturn(asset);

        when(xaDaoMgr.getXXUser()).thenReturn(xxUserDao);
        XXUser xxUser = new XXUser();
        xxUser.setId(10L);
        when(xxUserDao.findByUserName("alice")).thenReturn(xxUser);

        when(xaDaoMgr.getXXGroup()).thenReturn(xxGroupDao);
        XXGroup xxGroup = new XXGroup();
        xxGroup.setId(20L);
        when(xxGroupDao.findByGroupName("dev")).thenReturn(xxGroup);

        VXPermObj perm = new VXPermObj();
        perm.setUserList(Collections.singletonList("alice"));
        perm.setGroupList(Collections.singletonList("dev"));
        perm.setPermList(Collections.singletonList(AppConstants.getLabelFor_XAPermType(AppConstants.XA_PERM_TYPE_READ)));
        perm.setIpAddress("9.9.9.9");

        VXPolicy in = new VXPolicy();
        in.setRepositoryName("repoC");
        in.setPermMapList(Collections.singletonList(perm));

        VXResource out = xPolicyService.mapPublicToXAObject(in, RangerBaseModelService.OPERATION_CREATE_CONTEXT);

        assertNotNull(out.getPermMapList());
        assertEquals(2, out.getPermMapList().size());
        assertEquals("9.9.9.9", out.getPermMapList().get(0).getIpAddress());
    }

    @Test
    void testCompareTwoListElements_reflection() throws Exception {
        Method m = XPolicyService.class.getDeclaredMethod("compareTwoListElements", List.class, List.class);
        m.setAccessible(true);
        List<String> a = Arrays.asList("x", "y");
        List<String> b = Arrays.asList("y", "x");
        assertTrue((Boolean) m.invoke(xPolicyService, a, b));
        assertFalse((Boolean) m.invoke(xPolicyService, a, Collections.singletonList("x")));
        assertFalse((Boolean) m.invoke(xPolicyService, null, b));
    }

    @Test
    void testMapPermObjToPermList_UpdateContext_mergesPrevPermIpAndAddsNew() {
        when(xaDaoMgr.getXXAsset()).thenReturn(xxAssetDao);
        XXAsset asset = new XXAsset();
        asset.setId(600L);
        asset.setAssetType(AppConstants.ASSET_HIVE);
        when(xxAssetDao.findByAssetName("repoU")).thenReturn(asset);

        when(xaDaoMgr.getXXResource()).thenReturn(xxResourceDao);
        when(xxResourceDao.getById(777L)).thenReturn(new XXResource());

        // xResourceService mapping call should be a no-op to avoid NPE
        doAnswer(inv -> null).when(xResourceService).mapBaseAttributesToViewBean(any(XXResource.class), any(VXResource.class));

        // xAuditMapService should return an empty list
        when(xAuditMapService.searchXAuditMaps(any())).thenReturn(new VXAuditMapList(Collections.emptyList()));

        when(xaDaoMgr.getXXUser()).thenReturn(xxUserDao);
        XXUser xxUser = new XXUser();
        xxUser.setId(11L);
        when(xxUserDao.findByUserName("bob")).thenReturn(xxUser);

        when(xaDaoMgr.getXXGroup()).thenReturn(xxGroupDao);
        XXGroup xxGroup = new XXGroup();
        xxGroup.setId(21L);
        when(xxGroupDao.findByGroupName("dev")).thenReturn(xxGroup);

        when(xaDaoMgr.getXXPermMap()).thenReturn(xxPermMapDao);
        XXPermMap prev = new XXPermMap();
        prev.setPermFor(AppConstants.XA_PERM_FOR_USER);
        prev.setUserId(11L);
        prev.setPermType(AppConstants.XA_PERM_TYPE_READ);
        when(xxPermMapDao.findByResourceId(777L)).thenReturn(Collections.singletonList(prev));

        when(xPermMapService.populateViewBean(prev)).thenAnswer(inv -> {
            VXPermMap v = new VXPermMap();
            v.setPermFor(AppConstants.XA_PERM_FOR_USER);
            v.setUserId(11L);
            v.setPermType(AppConstants.XA_PERM_TYPE_READ);
            v.setIpAddress("old");
            return v;
        });

        VXPermObj perm = new VXPermObj();
        perm.setUserList(Collections.singletonList("bob"));
        perm.setGroupList(Collections.singletonList("dev"));
        perm.setPermList(Collections.singletonList(AppConstants.getLabelFor_XAPermType(AppConstants.XA_PERM_TYPE_READ)));
        perm.setIpAddress("1.2.3.4");

        VXPolicy in = new VXPolicy();
        in.setId(777L);
        in.setRepositoryName("repoU");
        in.setRepositoryType(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HIVE));
        in.setPermMapList(Collections.singletonList(perm));
        in.setIsAuditEnabled(true);

        VXResource out = xPolicyService.mapPublicToXAObject(in, RangerBaseModelService.OPERATION_UPDATE_CONTEXT);

        assertNotNull(out.getPermMapList());
        assertEquals(2, out.getPermMapList().size());
        assertTrue(out.getPermMapList().stream().anyMatch(m -> "1.2.3.4".equals(m.getIpAddress())));
    }

    @Test
    void testGetPrevPermMap_buildsUniqueKeyForUserAndGroup() throws Exception {
        when(xaDaoMgr.getXXPermMap()).thenReturn(xxPermMapDao);
        java.util.List<XXPermMap> prev = new java.util.ArrayList<>();

        XXPermMap userPrev = new XXPermMap();
        userPrev.setPermFor(AppConstants.XA_PERM_FOR_USER);
        userPrev.setUserId(11L);
        userPrev.setPermType(AppConstants.XA_PERM_TYPE_READ);
        prev.add(userPrev);

        XXPermMap groupPrev = new XXPermMap();
        groupPrev.setPermFor(AppConstants.XA_PERM_FOR_GROUP);
        groupPrev.setGroupId(21L);
        groupPrev.setPermType(AppConstants.XA_PERM_TYPE_WRITE);
        prev.add(groupPrev);

        when(xxPermMapDao.findByResourceId(999L)).thenReturn(prev);

        java.lang.reflect.Method m = XPolicyService.class.getDeclaredMethod("getPrevPermMap", Long.class);
        m.setAccessible(true);

        @SuppressWarnings("unchecked")
        java.util.Map<String, XXPermMap> result = (java.util.Map<String, XXPermMap>) m.invoke(xPolicyService, 999L);

        assertEquals(2, result.size());
        assertTrue(result.containsKey("999_" + AppConstants.XA_PERM_FOR_USER + "_11_" + AppConstants.XA_PERM_TYPE_READ));
        assertTrue(result.containsKey("999_" + AppConstants.XA_PERM_FOR_GROUP + "_21_" + AppConstants.XA_PERM_TYPE_WRITE));
    }
}
