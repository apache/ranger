/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service.filter;

import com.sun.jersey.spi.container.ContainerRequest;
import com.sun.jersey.spi.container.ContainerResponse;
import org.apache.ranger.common.PropertiesUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.core.MediaType;

import java.net.URI;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerRESTAPIFilter
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRESTAPIFilter {
    @Mock
    public ContainerRequest  request;
    @Mock
    public ContainerResponse response;

    @Test
    public void test1_init_buildsPatterns_whenEnabled() {
        // enable filter
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false; // reset init state
            RangerRESTAPIFilter f = new RangerRESTAPIFilter();
            f.init();
            // internal structures should be non-null and initDone set
            assertNotNull(f.regexList);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test2_filter_request_skipsMultipartAndLogs() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f   = new RangerRESTAPIFilter();
            URI                 uri = URI.create("http://localhost/service/resource");
            when(request.getRequestUri()).thenReturn(uri);
            when(request.getMediaType()).thenReturn(MediaType.APPLICATION_JSON_TYPE);
            ContainerRequest out = f.filter(request);
            assertNotNull(out);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test4_filter_response_skipsSuper_whenImageType() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = true;
            RangerRESTAPIFilter f = new RangerRESTAPIFilter();
            when(response.getMediaType()).thenReturn(new MediaType("image", "png"));
            ContainerResponse out = f.filter(request, response);
            assertNotNull(out);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test6_filter_request_skips_whenMultipart() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f   = new RangerRESTAPIFilter();
            URI                 uri = URI.create("http://localhost/service/resource");
            when(request.getRequestUri()).thenReturn(uri);
            when(request.getMediaType()).thenReturn(new MediaType("multipart", "form-data"));
            ContainerRequest out = f.filter(request);
            assertNotNull(out);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test7_filter_request_skips_whenLogsEndpoint() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f   = new RangerRESTAPIFilter();
            URI                 uri = URI.create("http://localhost/service/general/logs");
            when(request.getRequestUri()).thenReturn(uri);
            when(request.getMediaType()).thenReturn(MediaType.APPLICATION_JSON_TYPE);
            ContainerRequest out = f.filter(request);
            assertNotNull(out);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test8_filter_request_callsSuper_whenJsonAndNotLogs() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f   = new RangerRESTAPIFilter();
            URI                 uri = URI.create("http://localhost/service/resource");
            when(request.getRequestUri()).thenReturn(uri);
            when(request.getMediaType()).thenReturn(MediaType.APPLICATION_JSON_TYPE);
            ContainerRequest out = f.filter(request);
            assertNotNull(out);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test9_init_populatesRegexAndReorders_whenOverlaps() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f = new RangerRESTAPIFilter();
            f.init();
            assertNotNull(f.regexList);
            boolean hasGetIdPattern = f.regexList.stream().anyMatch(s -> s.startsWith("GET:/zztest") && s.contains("\\E"));
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }

    @Test
    public void test10_init_skipsCrudAndHasDuplicateForItem() {
        String old = PropertiesUtil.getPropertiesMap().get("xa.restapi.log.enabled");
        try {
            PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", "true");
            RangerRESTAPIFilter.initDone = false;
            RangerRESTAPIFilter f = new RangerRESTAPIFilter();
            f.init();
            long itemCount = f.regexList.stream()
                    .filter(s -> s.startsWith("GET:/zztest") && s.contains("item") && s.contains("\\Q"))
                    .count();
            boolean hasCrud = f.regexList.stream().anyMatch(s -> s.contains("crudtest"));
            Assertions.assertFalse(hasCrud);
        } finally {
            if (old == null) {
                PropertiesUtil.getPropertiesMap().remove("xa.restapi.log.enabled");
            } else {
                PropertiesUtil.getPropertiesMap().put("xa.restapi.log.enabled", old);
            }
        }
    }
}
