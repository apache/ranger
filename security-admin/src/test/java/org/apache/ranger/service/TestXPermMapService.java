/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPermMap;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResource;
import org.apache.ranger.util.RangerEnumUtil;
import org.apache.ranger.view.VXGroup;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXUser;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.Date;

import static org.apache.ranger.service.RangerBaseModelService.OPERATION_CREATE_CONTEXT;
import static org.apache.ranger.service.RangerBaseModelService.OPERATION_UPDATE_CONTEXT;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XPermMapService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXPermMapService {
    @InjectMocks
    XPermMapService xPermMapService;

    @Mock
    XXPermMap xXPermMap;

    @Mock
    UserSessionBase currentUserSession;

    @Mock
    RangerDaoManager daoManager;

    @Mock
    StringUtil stringUtil;

    @Mock
    XXPortalUserDao xXPortalUserDao;

    @Mock
    XXPortalUser tUser;

    @Mock
    XGroupService xGroupService;

    @Mock
    VXGroup vXGroup;

    @Mock
    XUserService xUserService;

    @Mock
    VXUser vXUser;

    @Mock
    XXDBBase gjObj;

    @Mock
    XXGroupDao xXGroupDao;

    @Mock
    XXResourceDao xXResourceDao;

    @Mock
    XXResource xXResource;

    @Mock
    XXAssetDao xXAssetDao;

    @Mock
    XXAsset xXAsset;

    @Mock
    RangerEnumUtil xaEnumUtil;

    @Mock
    RangerBizUtil bizUtil;

    @Mock
    AbstractBaseResourceService abstractBaseResourceService;

    @Test
    public void test1GetGroupName() {
        Mockito.when(xGroupService.readResource(1L)).thenReturn(vXGroup);
        xPermMapService.getGroupName(1L);
    }

    @Test
    public void test2GetUserName() {
        Mockito.when(xUserService.readResource(1L)).thenReturn(vXUser);
        xPermMapService.getUserName(1L);
    }

    @Test
    public void test3GetTransactionLog() {
        VXPermMap vXPermMap = createVXPermMap();
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup xGroup = createXXGroup();
        Mockito.when(xXGroupDao.getById(1L)).thenReturn(xGroup);
        xPermMapService.createTransactionLog(vXPermMap, null, OPERATION_CREATE_CONTEXT);
    }

    @Test
    public void test4GetTransactionLog() {
        VXPermMap vObj  = createVXPermMap();
        VXPermMap vObj2 = createVXPermMap2();
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup xGroup = createXXGroup();
        Mockito.when(xXGroupDao.getById(1L)).thenReturn(xGroup);
        xPermMapService.createTransactionLog(vObj, vObj2, OPERATION_UPDATE_CONTEXT);
    }

    // new tests appended below
    @Test
    public void test5_populateViewBean_setsGroupAndUserNames() {
        // group case
        XXPermMap x1 = new XXPermMap();
        x1.setPermFor(AppConstants.XA_PERM_FOR_GROUP);
        x1.setGroupId(11L);
        VXGroup g = new VXGroup();
        g.setName("gname");
        Mockito.when(xGroupService.readResource(11L)).thenReturn(g);
        VXPermMap out1 = xPermMapService.populateViewBean(x1);
        assertEquals("gname", out1.getGroupName());

        // user case
        XXPermMap x2 = new XXPermMap();
        x2.setPermFor(AppConstants.XA_PERM_FOR_USER);
        x2.setUserId(22L);
        VXUser u = new VXUser();
        u.setName("uname");
        Mockito.when(xUserService.readResource(22L)).thenReturn(u);
        VXPermMap out2 = xPermMapService.populateViewBean(x2);
        assertEquals("uname", out2.getUserName());
    }

    @Test
    public void test6_mapViewToEntityBean_setsAddedAndUpdatedBy() {
        xPermMapService.stringUtil = new StringUtil();
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(xXPortalUserDao);
        XXPortalUser add = new XXPortalUser();
        add.setId(5L);
        XXPortalUser upd = new XXPortalUser();
        upd.setId(7L);
        Mockito.when(xXPortalUserDao.findByLoginId("owner")).thenReturn(add);
        Mockito.when(xXPortalUserDao.findByLoginId("updby")).thenReturn(upd);

        VXPermMap v = new VXPermMap();
        v.setOwner("owner");
        v.setUpdatedBy("updby");
        v.setResourceId(100L);
        v.setGroupId(10L);
        v.setUserId(20L);
        v.setPermFor(AppConstants.XA_PERM_FOR_GROUP);
        v.setPermType(3);
        v.setIsRecursive(1);
        v.setIsWildCard(true);
        v.setGrantOrRevoke(true);
        v.setIpAddress("1.2.3.4");

        XXPermMap m   = new XXPermMap();
        XXPermMap ret = xPermMapService.mapViewToEntityBean(v, m, OPERATION_CREATE_CONTEXT);

        assertEquals(Long.valueOf(5L), ret.getAddedByUserId());
        assertEquals(Long.valueOf(7L), ret.getUpdatedByUserId());
        assertEquals(v.getResourceId(), ret.getResourceId());
        assertEquals(v.getGroupId(), ret.getGroupId());
        assertEquals(v.getUserId(), ret.getUserId());
        assertEquals(v.getPermFor(), ret.getPermFor());
        assertEquals(v.getPermType(), ret.getPermType());
        assertEquals(v.getIsRecursive(), ret.getIsRecursive());
        assertEquals(v.isIsWildCard(), ret.isIsWildCard());
        assertEquals(v.isGrantOrRevoke(), ret.isGrantOrRevoke());
        assertEquals(v.getIpAddress(), ret.getIpAddress());
    }

    @Test
    public void test7_mapEntityToViewBean_backfillsOwnerAndUpdatedBy() {
        xPermMapService.stringUtil = new StringUtil();
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(xXPortalUserDao);
        XXPortalUser add = new XXPortalUser();
        add.setId(5L);
        add.setLoginId("owner");
        XXPortalUser upd = new XXPortalUser();
        upd.setId(7L);
        upd.setLoginId("updby");
        Mockito.when(xXPortalUserDao.getById(5L)).thenReturn(add);
        Mockito.when(xXPortalUserDao.getById(7L)).thenReturn(upd);

        XXPermMap m = new XXPermMap();
        m.setAddedByUserId(5L);
        m.setUpdatedByUserId(7L);
        m.setResourceId(100L);
        m.setGroupId(10L);
        m.setUserId(20L);
        m.setPermFor(AppConstants.XA_PERM_FOR_GROUP);
        m.setPermType(3);
        m.setIsRecursive(1);
        m.setIsWildCard(true);
        m.setGrantOrRevoke(true);
        m.setIpAddress("1.2.3.4");

        VXPermMap v   = new VXPermMap();
        VXPermMap ret = xPermMapService.mapEntityToViewBean(v, m);

        assertEquals("owner", ret.getOwner());
        assertEquals("updby", ret.getUpdatedBy());
        assertEquals(m.getResourceId(), ret.getResourceId());
        assertEquals(m.getGroupId(), ret.getGroupId());
        assertEquals(m.getUserId(), ret.getUserId());
        assertEquals(m.getPermFor(), ret.getPermFor());
        assertEquals(m.getPermType(), ret.getPermType());
        assertEquals(m.getIsRecursive(), ret.getIsRecursive());
        assertEquals(m.isIsWildCard(), ret.isIsWildCard());
        assertEquals(m.isGrantOrRevoke(), ret.isGrantOrRevoke());
        assertEquals(m.getIpAddress(), ret.getIpAddress());
    }

    @Test
    public void test8_validateMethods_invocableViaReflection() throws Exception {
        Method vc = XPermMapService.class.getDeclaredMethod("validateForCreate", VXPermMap.class);
        vc.setAccessible(true);
        vc.invoke(xPermMapService, new VXPermMap());

        Method vu = XPermMapService.class.getDeclaredMethod("validateForUpdate", VXPermMap.class, XXPermMap.class);
        vu.setAccessible(true);
        vu.invoke(xPermMapService, new VXPermMap(), new XXPermMap());
    }

    public XXGroup createXXGroup() {
        XXGroup xGroup = new XXGroup();
        xGroup.setAddedByUserId(1L);
        Date date = new Date();
        xGroup.setCreateTime(date);
        xGroup.setCredStoreId(1L);
        xGroup.setDescription("this is test xGroup");
        xGroup.setGroupSource(1);
        xGroup.setGroupType(1);
        xGroup.setId(1L);
        xGroup.setIsVisible(1);
        xGroup.setName("testxGroup");
        xGroup.setStatus(1);
        xGroup.setUpdatedByUserId(1L);
        xGroup.setUpdateTime(date);
        return xGroup;
    }

    private VXPermMap createVXPermMap() {
        VXPermMap vXPermMap = new VXPermMap();
        Date      date      = new Date();
        vXPermMap.setCreateDate(date);
        vXPermMap.setGrantOrRevoke(false);
        vXPermMap.setGroupId(1L);
        vXPermMap.setGroupName("testGroupName");
        vXPermMap.setId(1L);
        vXPermMap.setIpAddress("123.45.678.90");
        vXPermMap.setIsRecursive(0);
        vXPermMap.setIsWildCard(false);
        vXPermMap.setMObj(gjObj);
        vXPermMap.setOwner("admin");
        vXPermMap.setPermFor(0);
        vXPermMap.setPermGroup("");
        vXPermMap.setPermType(0);
        vXPermMap.setResourceId(1L);
        vXPermMap.setUpdateDate(date);
        vXPermMap.setUpdatedBy("admin");
        vXPermMap.setUserId(1L);
        vXPermMap.setUserName("testUser");
        return vXPermMap;
    }

    private VXPermMap createVXPermMap2() {
        VXPermMap vXPermMap = new VXPermMap();
        Date      date      = new Date();
        vXPermMap.setCreateDate(date);
        vXPermMap.setGrantOrRevoke(false);
        vXPermMap.setGroupId(1L);
        vXPermMap.setGroupName("testGroupName1");
        vXPermMap.setId(1L);
        vXPermMap.setIpAddress("123.45.678.91");
        vXPermMap.setIsRecursive(0);
        vXPermMap.setIsWildCard(false);
        vXPermMap.setMObj(gjObj);
        vXPermMap.setOwner("admin");
        vXPermMap.setPermFor(0);
        vXPermMap.setPermGroup("");
        vXPermMap.setPermType(0);
        vXPermMap.setResourceId(1L);
        vXPermMap.setUpdateDate(date);
        vXPermMap.setUpdatedBy("admin");
        vXPermMap.setUserId(1L);
        vXPermMap.setUserName("testUser");
        return vXPermMap;
    }
}
