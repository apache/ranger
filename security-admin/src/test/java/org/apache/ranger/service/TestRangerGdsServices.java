/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGdsDataShareDao;
import org.apache.ranger.entity.XXGdsDataShare;
import org.apache.ranger.entity.XXGdsSharedResource;
import org.apache.ranger.plugin.model.RangerGds.RangerSharedResource;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.startsWith;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsSharedResourceService
 */

public class TestRangerGdsServices {
    @Test
    public void testRangerGdsSharedResourceServiceSearchFields() {
        RangerGdsSharedResourceService svc = new RangerGdsSharedResourceService();
        assertNotNull(svc.searchFields);
        assertFalse(svc.searchFields.isEmpty());
    }

    @Test
    public void testRangerGdsDataShareServiceSearchFields() {
        RangerGdsDataShareService svc = new RangerGdsDataShareService();
        assertNotNull(svc.searchFields);
        assertFalse(svc.searchFields.isEmpty());
    }

    @Test
    public void testRangerGdsDataShareInDatasetServiceSearchFields() {
        RangerGdsDataShareInDatasetService svc = new RangerGdsDataShareInDatasetService();
        assertNotNull(svc.searchFields);
        assertFalse(svc.searchFields.isEmpty());
    }

    @Test
    public void testRangerGdsDatasetServiceSearchFields() {
        RangerGdsDatasetService svc = new RangerGdsDatasetService();
        assertNotNull(svc.searchFields);
        assertFalse(svc.searchFields.isEmpty());
    }

    @Test
    public void testRangerGdsDatasetInProjectServiceExists() {
        RangerGdsDatasetInProjectService svc = new RangerGdsDatasetInProjectService();
        assertNotNull(svc);
    }

    @Test
    public void testSharedResource_mapViewToEntity_success_and_mapEntityToView() {
        SharedResourceFixture f = new SharedResourceFixture();
        f.init();
        RangerSharedResource v = new RangerSharedResource();
        v.setGuid("g");
        v.setIsEnabled(true);
        v.setName("n");
        v.setDescription("d");
        v.setDataShareId(5L);
        Map<String, RangerPolicy.RangerPolicyResource> res = new HashMap<>();
        v.setResource(res);
        v.setSubResource(new RangerPolicy.RangerPolicyResource());
        v.setSubResourceType("t");
        v.setConditionExpr("expr");
        v.setAccessTypes(Collections.singleton("a"));
        v.setRowFilter(new RangerPolicy.RangerPolicyItemRowFilterInfo("f"));
        v.setSubResourceMasks(Collections.emptyList());
        v.setProfiles(Collections.singleton("p"));
        v.setOptions(Collections.singletonMap("k", "v"));
        v.setAdditionalInfo(Collections.singletonMap("a", "b"));
        when(f.xxGdsDataShareDao.getById(5L)).thenReturn(new XXGdsDataShare());
        XXGdsSharedResource x = f.svc.mapViewToEntityBean(v, new XXGdsSharedResource(), RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        assertEquals("g", x.getGuid());
        RangerSharedResource round = f.svc.mapEntityToViewBean(new RangerSharedResource(), x);
        assertEquals("n", round.getName());
    }

    @Test
    public void testSharedResource_mapViewToEntity_missingDataShare_throws() {
        SharedResourceFixture f = new SharedResourceFixture();
        f.init();
        RangerSharedResource v = new RangerSharedResource();
        v.setDataShareId(99L);
        when(f.xxGdsDataShareDao.getById(99L)).thenReturn(null);
        when(f.restErrorUtil.createRESTException(startsWith("No data share"), eq(MessageEnums.INVALID_INPUT_DATA))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> f.svc.mapViewToEntityBean(v, new XXGdsSharedResource(), RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    public void testSharedResource_validateForCreate_errorsAndDefaults() {
        SharedResourceFixture f = new SharedResourceFixture();
        f.init();
        RangerSharedResource v = new RangerSharedResource();
        when(f.restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> f.svc.validateForCreate(v));
        RangerSharedResource v2 = new RangerSharedResource();
        v2.setDataShareId(5L);
        when(f.xxGdsDataShareDao.getById(5L)).thenReturn(new XXGdsDataShare());
        when(f.guidUtil.genGUID()).thenReturn("gen");
        f.svc.validateForCreate(v2);
        assertEquals("gen", v2.getGuid());
        assertTrue(v2.getIsEnabled());
    }

    @Test
    public void testSharedResource_preDelete_usesBaseDao() {
        SharedResourceFixture f = new SharedResourceFixture();
        f.init();
        XXGdsSharedResource ent = new XXGdsSharedResource();
        ent.setId(7L);
        when(f.entityDao.getById(7L)).thenReturn(ent);
        XXGdsSharedResource out = f.svc.preDelete(7L);
        assertEquals(7L, out.getId());
    }

    // Additional comprehensive tests for RangerGdsSharedResourceService
    static class SharedResourceFixture {
        @InjectMocks RangerGdsSharedResourceService svc = spy(new RangerGdsSharedResourceService());
        @Mock        RangerDaoManager               daoMgr;
        @Mock        XXGdsDataShareDao              xxGdsDataShareDao;
        @Mock        RESTErrorUtil                  restErrorUtil;
        @Mock        GUIDUtil                       guidUtil;
        @Mock        BaseDao<XXGdsSharedResource>   entityDao;

        @BeforeEach
        void init() {
            MockitoAnnotations.initMocks(this);
            when(daoMgr.getXXGdsDataShare()).thenReturn(xxGdsDataShareDao);
        }
    }
}
