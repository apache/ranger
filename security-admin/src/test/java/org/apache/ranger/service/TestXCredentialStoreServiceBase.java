/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.entity.XXCredentialStore;
import org.apache.ranger.view.VXCredentialStore;
import org.apache.ranger.view.VXCredentialStoreList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XCredentialStoreServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXCredentialStoreServiceBase {
    @Test
    public void mapViewToEntityBean_mapsFields() {
        TestSvc           svc = new TestSvc();
        VXCredentialStore v   = new VXCredentialStore();
        v.setName("n");
        v.setDescription("d");
        XXCredentialStore x = new XXCredentialStore();
        x = svc.callMapViewToEntityBean(v, x);
        assertEquals("n", x.getName());
        assertEquals("d", x.getDescription());
    }

    @Test
    public void mapEntityToViewBean_mapsFields() {
        TestSvc           svc = new TestSvc();
        XXCredentialStore x   = new XXCredentialStore();
        x.setName("n2");
        x.setDescription("d2");
        VXCredentialStore v = new VXCredentialStore();
        v = svc.callMapEntityToViewBean(v, x);
        assertEquals("n2", v.getName());
        assertEquals("d2", v.getDescription());
    }

    @Test
    public void searchXCredentialStores_emptyList() {
        TestSvc        svc      = Mockito.spy(new TestSvc());
        SearchCriteria criteria = new SearchCriteria();
        Mockito.doReturn(java.util.Collections.emptyList()).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        VXCredentialStoreList list = svc.searchXCredentialStores(criteria);
        assertTrue(list.getVXCredentialStores().isEmpty());
    }

    @Test
    public void searchXCredentialStores_mapsResults() {
        TestSvc                           svc      = Mockito.spy(new TestSvc());
        SearchCriteria                    criteria = new SearchCriteria();
        XXCredentialStore                 x        = new XXCredentialStore();
        java.util.List<XXCredentialStore> results  = Collections.singletonList(x);
        VXCredentialStore                 vOut     = new VXCredentialStore();
        vOut.setName("cred");
        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        Mockito.doReturn(vOut).when(svc).populateViewBean(x);
        VXCredentialStoreList list = svc.searchXCredentialStores(criteria);
        assertEquals(1, list.getVXCredentialStores().size());
        assertEquals("cred", list.getVXCredentialStores().get(0).getName());
    }

    static class TestSvc extends XCredentialStoreServiceBase<XXCredentialStore, VXCredentialStore> {
        @Override
        protected void validateForCreate(VXCredentialStore vObj)                              {}

        @Override
        protected void validateForUpdate(VXCredentialStore vObj, XXCredentialStore entityObj) {}

        XXCredentialStore callMapViewToEntityBean(VXCredentialStore v, XXCredentialStore x) {
            return super.mapViewToEntityBean(v, x, 0);
        }

        VXCredentialStore callMapEntityToViewBean(VXCredentialStore v, XXCredentialStore x) {
            return super.mapEntityToViewBean(v, x);
        }
    }
}
