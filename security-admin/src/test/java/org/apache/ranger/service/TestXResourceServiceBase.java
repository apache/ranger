/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.entity.XXResource;
import org.apache.ranger.view.VXResource;
import org.apache.ranger.view.VXResourceList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XResourceServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXResourceServiceBase {
    @Mock
    public RangerDaoManager daoManager;

    @Test
    public void testGetParentObjectId_andName() {
        TestableService svc = new TestableService();
        svc.daoManager = daoManager;

        VXResource v = new VXResource();
        v.setAssetId(42L);
        assertEquals(Long.valueOf(42L), svc.getParentObjectId(v, null));

        XXAssetDao assetDao = mock(XXAssetDao.class);
        when(daoManager.getXXAsset()).thenReturn(assetDao);
        XXAsset asset = new XXAsset();
        asset.setName("repo42");
        when(assetDao.getById(42L)).thenReturn(asset);
        assertEquals("repo42", svc.getParentObjectName(v, null));
    }

    @Test
    public void testSearchXResources_returnsMappedList() {
        TestableService svc = new TestableService();
        XXResource      x   = new XXResource();
        svc.nextResults = Collections.singletonList(x);
        VXResourceList out = svc.searchXResources(new SearchCriteria());
        assertNotNull(out);
        assertNotNull(out.getVXResources());
    }

    public static class TestableService extends XResourceServiceBase<XXResource, VXResource> {
        public List<XXResource> nextResults = new ArrayList<>();

        @Override
        protected void validateForCreate(VXResource viewBaseBean) {}

        @Override
        protected void validateForUpdate(VXResource viewBaseBean, XXResource t) {}

        @Override
        protected List<XXResource> searchResources(SearchCriteria searchCriteria, List<SearchField> searchFieldList, List<SortField> sortFieldList, VList vList) {
            return nextResults;
        }
    }
}
