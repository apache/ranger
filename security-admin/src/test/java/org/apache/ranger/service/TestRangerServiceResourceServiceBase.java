/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SortField;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceResourceElementDao;
import org.apache.ranger.db.XXServiceResourceElementValueDao;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.entity.XXServiceResourceElement;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServiceResourceServiceBase
 */

public class TestRangerServiceResourceServiceBase {
    public static class TestSvc extends RangerServiceResourceServiceBase<XXServiceResource, RangerServiceResource> {
        @Override
        protected XXServiceResource createEntityObject() {
            return new XXServiceResource();
        }

        @Override
        protected RangerServiceResource createViewObject() {
            return new RangerServiceResource();
        }

        @Override
        protected void validateForCreate(RangerServiceResource vObj) {
        }

        @Override
        protected void validateForUpdate(RangerServiceResource vObj, XXServiceResource mObj) {
        }

        @SuppressWarnings({"rawtypes", "unchecked"})
        @Override
        protected List<XXServiceResource> searchRangerObjects(SearchFilter searchFilter, List searchFields, List sortFields, PList retList) {
            XXServiceResource x = new XXServiceResource();
            x.setServiceId(1L);
            return Collections.singletonList(x);
        }
    }

    private TestSvc svc;

    @Mock private RangerDaoManager                    daoMgr;
    @Mock private RESTErrorUtil                       restErrorUtil;
    @Mock private GUIDUtil                            guidUtil;
    @Mock private XXServiceDao                        xxServiceDao;
    @Mock private XXServiceResourceElementDao         xxServiceResourceElementDao;
    @Mock private XXServiceResourceElementValueDao    xxServiceResourceElementValueDao;
    @Mock private XXResourceDefDao                    xxResourceDefDao;

    private AutoCloseable mocks;

    @BeforeEach
    void init() {
        mocks = MockitoAnnotations.openMocks(this);
        svc       = spy(new TestSvc());
        svc.daoMgr = daoMgr;
        svc.restErrorUtil = restErrorUtil;
        svc.guidUtil = guidUtil;

        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(daoMgr.getXXServiceResourceElement()).thenReturn(xxServiceResourceElementDao);
        when(daoMgr.getXXServiceResourceElementValue()).thenReturn(xxServiceResourceElementValueDao);
        when(daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);

        XXService xs = new XXService();
        xs.setId(1L);
        xs.setName("svc");
        when(xxServiceDao.getById(anyLong())).thenReturn(xs);
    }

    @AfterEach
    void cleanup() throws Exception {
        if (mocks != null) {
            mocks.close();
        }
    }

    @Test
    void testSearchServiceResources_setsPListFields() {
        SearchFilter f = new SearchFilter();
        f.setMaxRows(25);
        f.setStartIndex(10);
        f.setSortBy("id");
        f.setSortType(SortField.SORT_ORDER.ASC.name());

        PList<RangerServiceResource> out = svc.searchServiceResources(f);
        assertNotNull(out);
        assertEquals(25, out.getPageSize());
        assertEquals(10, out.getStartIndex());
        assertEquals("id", out.getSortBy());
        assertEquals(SortField.SORT_ORDER.ASC.name(), out.getSortType());
    }

    @Test
    void testMapViewToEntityBean_throwsWhenServiceMissing() {
        RangerServiceResource v = new RangerServiceResource();
        v.setServiceName("missing");
        when(xxServiceDao.findByName("missing")).thenReturn(null);
        when(restErrorUtil.createRESTException(any(String.class), eq(MessageEnums.INVALID_INPUT_DATA))).thenThrow(new RuntimeException("400"));

        assertThrows(RuntimeException.class, () -> svc.mapViewToEntityBean(v, new XXServiceResource(), 0));
    }

    @Test
    void testMapEntityToViewBean_setsServiceNameAndElements() {
        XXService xService = new XXService();
        xService.setId(5L);
        xService.setName("svc");

        XXServiceResource x = new XXServiceResource();
        x.setServiceId(5L);
        x.setGuid("g");
        x.setIsEnabled(Boolean.TRUE);
        x.setResourceSignature("sig");

        XXServiceResourceElement el = new XXServiceResourceElement();
        el.setId(100L);
        el.setResDefId(200L);
        el.setIsExcludes(Boolean.FALSE);
        el.setIsRecursive(Boolean.TRUE);

        XXResourceDef rd = new XXResourceDef();
        rd.setId(200L);
        rd.setName("path");

        when(xxServiceDao.getById(5L)).thenReturn(xService);
        when(xxServiceResourceElementDao.findByResourceId(x.getId())).thenReturn(Collections.singletonList(el));
        when(xxServiceResourceElementValueDao.findValuesByResElementId(100L)).thenReturn(Arrays.asList("/a"));
        when(xxResourceDefDao.getById(200L)).thenReturn(rd);

        RangerServiceResource out = svc.mapEntityToViewBean(new RangerServiceResource(), x);
        assertEquals("svc", out.getServiceName());
        Map<String, RangerPolicy.RangerPolicyResource> elems = out.getResourceElements();
        assertNotNull(elems);
        assertEquals(true, elems.get("path").getIsRecursive());
    }
}
