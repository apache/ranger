/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.entity.XXAccessAudit;
import org.apache.ranger.view.VXAccessAudit;
import org.apache.ranger.view.VXAccessAuditList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XAccessAuditServiceBase
 */

public class TestXAccessAuditServiceBase {
    private TestSvc svc;

    @BeforeEach
    void init() {
        svc = spy(new TestSvc());
    }

    @Test
    void testSearchXAccessAudits_populatesList() {
        XXAccessAudit x1 = new XXAccessAudit();
        XXAccessAudit x2 = new XXAccessAudit();
        doReturn(Arrays.asList(x1, x2)).when(svc)
                .searchResources(any(SearchCriteria.class), anyList(), anyList(), any(VXAccessAuditList.class));

        VXAccessAuditList out = svc.searchXAccessAudits(new SearchCriteria());
        assertNotNull(out);
        List<VXAccessAudit> list = out.getVXAccessAudits();
        assertNotNull(list);
        assertEquals(2, list.size());
    }

    @Test
    void testMappings_areSymmetric() {
        VXAccessAudit v = new VXAccessAudit();
        v.setAuditType(1);
        v.setAccessResult(0);
        v.setAccessType("read");
        v.setAclEnforcer("e");
        v.setAgentId("a");
        v.setClientIP("127.0.0.1");
        v.setClientType("h");
        v.setPolicyId(5L);
        v.setRepoName("r");
        v.setRepoType(2);
        v.setResultReason("ok");
        v.setSessionId("s");
        v.setRequestUser("u");
        v.setAction("act");
        v.setRequestData("d");
        v.setResourcePath("/p");
        v.setResourceType("t");
        v.setSequenceNumber(9L);
        v.setEventCount(3L);
        v.setEventDuration(7L);

        XXAccessAudit x    = svc.callMapViewToEntityBean(v, new XXAccessAudit());
        VXAccessAudit back = svc.callMapEntityToViewBean(new VXAccessAudit(), x);

        assertEquals(v.getAuditType(), back.getAuditType());
        assertEquals(v.getAccessType(), back.getAccessType());
        assertEquals(v.getClientIP(), back.getClientIP());
        assertEquals(v.getResourcePath(), back.getResourcePath());
    }

    public static class TestSvc extends XAccessAuditServiceBase<XXAccessAudit, VXAccessAudit> {
        @Override
        protected void validateForCreate(VXAccessAudit vObj) {
        }

        @Override
        protected void validateForUpdate(VXAccessAudit vObj, XXAccessAudit entityObj) {
        }

        // Expose protected mapping for testing
        VXAccessAudit callMapEntityToViewBean(VXAccessAudit v, XXAccessAudit x) {
            return super.mapEntityToViewBean(v, x);
        }

        XXAccessAudit callMapViewToEntityBean(VXAccessAudit v, XXAccessAudit x) {
            return super.mapViewToEntityBean(v, x, 0);
        }
    }
}
