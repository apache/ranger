/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.view.VList;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.view.VXPortalUser;
import org.apache.ranger.view.VXPortalUserList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XPortalUserServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXPortalUserServiceBase {
    @Test
    public void testA_searchXPortalUsers_returnsList() {
        TestSvc      svc = new TestSvc();
        XXPortalUser x   = new XXPortalUser();
        x.setFirstName("F");
        x.setLastName("L");
        x.setLoginId("u1");
        x.setEmailAddress("e@x");
        svc.results = Collections.singletonList(x);

        SearchCriteria   c    = new SearchCriteria();
        VXPortalUserList list = svc.searchXPortalUsers(c);
        assertNotNull(list);
        assertEquals(1, list.getList().size());
        VXPortalUser v = list.getList().get(0);
        assertEquals("u1", v.getLoginId());
        assertEquals("F", v.getFirstName());
        assertEquals("L", v.getLastName());
    }

    @Test
    public void testB_mapViewToEntityBean_copiesAllFields() {
        TestSvc      svc = new TestSvc();
        VXPortalUser v   = new VXPortalUser();
        v.setFirstName("F");
        v.setLastName("L");
        v.setPublicScreenName("PS");
        v.setLoginId("u");
        v.setPassword("p");
        v.setEmailAddress("e");
        v.setStatus(1);
        v.setUserSource(2);
        v.setNotes("n");
        v.setOtherAttributes("oa");
        v.setSyncSource("s");
        XXPortalUser x   = new XXPortalUser();
        XXPortalUser out = svc.mapViewToEntityBean(v, x, 1);
        assertEquals("F", out.getFirstName());
        assertEquals("L", out.getLastName());
        assertEquals("PS", out.getPublicScreenName());
        assertEquals("u", out.getLoginId());
        assertEquals("p", out.getPassword());
        assertEquals("e", out.getEmailAddress());
        assertEquals(Integer.valueOf(1), out.getStatus());
        assertEquals(Integer.valueOf(2), out.getUserSource());
        assertEquals("n", out.getNotes());
        assertEquals("oa", out.getOtherAttributes());
        assertEquals("s", out.getSyncSource());
    }

    @Test
    public void testC_mapEntityToViewBean_copiesAllFields() {
        TestSvc      svc = new TestSvc();
        XXPortalUser x   = new XXPortalUser();
        x.setFirstName("F");
        x.setLastName("L");
        x.setPublicScreenName("PS");
        x.setLoginId("u");
        x.setPassword("p");
        x.setEmailAddress("e");
        x.setStatus(1);
        x.setUserSource(2);
        x.setNotes("n");
        x.setOtherAttributes("oa");
        x.setSyncSource("s");
        VXPortalUser v   = new VXPortalUser();
        VXPortalUser out = svc.mapEntityToViewBean(v, x);
        assertEquals("F", out.getFirstName());
        assertEquals("L", out.getLastName());
        assertEquals("PS", out.getPublicScreenName());
        assertEquals("u", out.getLoginId());
        assertEquals("p", out.getPassword());
        assertEquals("e", out.getEmailAddress());
        assertEquals(Integer.valueOf(1), out.getStatus());
        assertEquals(Integer.valueOf(2), out.getUserSource());
        assertEquals("n", out.getNotes());
        assertEquals("oa", out.getOtherAttributes());
        assertEquals("s", out.getSyncSource());
    }

    public static class TestSvc extends XPortalUserServiceBase<XXPortalUser, VXPortalUser> {
        List<XXPortalUser> results = new ArrayList<>();

        @Override
        protected void validateForCreate(VXPortalUser vObj) {}

        @Override
        protected void validateForUpdate(VXPortalUser vObj, XXPortalUser entityObj) {}

        @Override
        protected List<XXPortalUser> searchResources(SearchCriteria searchCriteria, List<SearchField> searchFieldList, List<SortField> sortFieldList, VList vList) {
            if (vList instanceof VXPortalUserList) {
                VXPortalUserList l = (VXPortalUserList) vList;
                l.setResultSize(results.size());
                l.setPageSize(25);
                l.setStartIndex(0);
                l.setSortBy("loginId");
                l.setSortType("asc");
            }
            return results;
        }
    }
}
