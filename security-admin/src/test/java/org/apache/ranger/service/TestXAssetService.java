/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.view.VXAsset;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XAssetService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXAssetService {
    @InjectMocks
    public XAssetService svc;

    @Mock
    public RangerDaoManager daoManager;

    @Mock
    public RESTErrorUtil restErrorUtil;

    @Test
    public void testA_validateConfig_hdfs_requires_fsdefaultname() {
        VXAsset v = new VXAsset();
        v.setAssetType(AppConstants.ASSET_HDFS);
        v.setConfig("{\"fs.default.name\":\"\"}");
        when(restErrorUtil.createRESTException(eq("serverMsg.fsDefaultNameEmptyError"), eq(MessageEnums.INVALID_INPUT_DATA), any(), any(), any())).thenThrow(new RuntimeException("bad"));
        assertThrows(RuntimeException.class, () -> svc.validateConfig(v));
    }

    @Test
    public void testB_getConfigWithEncryptedPassword_encryptsWhenNotEncrypted() {
        // inject jsonUtil to avoid NPE
        svc.jsonUtil   = new JSONUtil();
        svc.stringUtil = new StringUtil();
        String config = "{\"password\":\"p\"}";
        String out    = svc.getConfigWithEncryptedPassword(config, false);
        assertNotNull(out);
    }

    @Test
    public void testC_getConfigWithDecryptedPassword_decryptsWhenEncryptedTrue() {
        // provide a fake encrypted value by reusing encrypt utility path
        svc.jsonUtil   = new JSONUtil();
        svc.stringUtil = new StringUtil();
        String encrypted = svc.getConfigWithEncryptedPassword("{\"password\":\"p\"}", true);
        String decrypted = svc.getConfigWithDecryptedPassword(encrypted);
        assertNotNull(decrypted);
    }

    @Test
    public void testD_validateForCreate_checksNameUniquenessAndNonEmpty() {
        XXAssetDao assetDao = mock(XXAssetDao.class);
        when(daoManager.getXXAsset()).thenReturn(assetDao);
        when(assetDao.findByAssetName(eq("dup"))).thenReturn(new XXAsset());
        when(restErrorUtil.createRESTException(eq("Repository Name already exists"), eq(MessageEnums.INVALID_INPUT_DATA), any(), any(), any())).thenThrow(new RuntimeException("dup"));
        VXAsset v = new VXAsset();
        v.setName("dup");
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(v));

        when(assetDao.findByAssetName(eq(""))).thenReturn(null);
        when(restErrorUtil.createRESTException(eq("Repository Name can't be empty"), eq(MessageEnums.INVALID_INPUT_DATA), any(), any(), any())).thenThrow(new RuntimeException("empty"));
        VXAsset v2 = new VXAsset();
        v2.setName("");
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(v2));
    }

    @Test
    public void testE_validateForUpdate_callsCreateWhenNameChanged() {
        XXAssetDao assetDao = mock(XXAssetDao.class);
        when(daoManager.getXXAsset()).thenReturn(assetDao);
        when(assetDao.findByAssetName(eq("new"))).thenReturn(null);
        VXAsset v = new VXAsset();
        v.setName("new");
        XXAsset x = new XXAsset();
        x.setName("old");
        svc.validateForUpdate(v, x);
    }

    @Test
    public void testF_mapViewToEntityBean_preservesOldPasswordOnHidden() {
        svc.jsonUtil   = new JSONUtil();
        svc.stringUtil = new StringUtil();
        VXAsset v      = new VXAsset();
        String  newCfg = "{\"password\":\"*****\"}";
        v.setConfig(newCfg);
        XXAsset x      = new XXAsset();
        String  oldCfg = "{\"password\":\"secret\"}";
        x.setConfig(oldCfg);

        XXAsset out = svc.mapViewToEntityBean(v, x, 0);
        String  cfg = out.getConfig();
        assertNotNull(cfg);
    }
}
