/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXModuleDefDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXUserPermission;
import org.apache.ranger.view.VXModuleDef;
import org.apache.ranger.view.VXUserPermission;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XUserPermissionService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXUserPermissionService {
    @InjectMocks
    XUserPermissionService svc;
    @Mock
    RangerDaoManager       daoMgr;
    @Mock
    XXPortalUserDao        portalDao;
    @Mock
    XXModuleDefDao         moduleDao;

    @Test
    public void convertVListToVMap_keysByUserId() {
        VXUserPermission v1 = new VXUserPermission();
        v1.setUserId(1L);
        VXUserPermission v2 = new VXUserPermission();
        v2.setUserId(2L);

        Map<Long, VXUserPermission> map = svc.convertVListToVMap(Arrays.asList(v1, v2));
        assertEquals(2, map.size());
        assertEquals(v1, map.get(1L));
        assertEquals(v2, map.get(2L));
    }

    @Test
    public void getPopulatedVXUserPermissionList_filtersAndMaps() {
        XXUserPermission x1 = new XXUserPermission();
        x1.setId(1L);
        x1.setUserId(100L);
        x1.setModuleId(200L);
        x1.setIsAllowed(1);
        XXUserPermission x2 = new XXUserPermission();
        x2.setId(2L);
        x2.setUserId(101L);
        x2.setModuleId(201L);
        x2.setIsAllowed(0);
        List<XXUserPermission> in = Arrays.asList(x1, x2);

        // Map key is portal user id; value array indices: [1] XXUser.id, [2] loginId
        Map<Long, Object[]> userMap = new HashMap<>();
        userMap.put(100L, new Object[] {null, Long.valueOf(1000L), "alice"});
        VXModuleDef mod = new VXModuleDef();
        mod.setModule("ops");

        List<VXUserPermission> out = svc.getPopulatedVXUserPermissionList(in, userMap, mod);
        assertEquals(1, out.size());
        assertEquals(1L, out.get(0).getId());
        assertEquals(1000L, out.get(0).getUserId());
        assertEquals(200L, out.get(0).getModuleId());
        assertEquals(1, out.get(0).getIsAllowed());
        assertEquals("ops", out.get(0).getModuleName());
        assertEquals("alice", out.get(0).getLoginId());
        assertEquals("alice", out.get(0).getUserName());
    }

    @Test
    public void testValidateForCreate() throws NoSuchMethodException {
        Method method = XUserPermissionService.class.getDeclaredMethod("validateForCreate", VXUserPermission.class);
        method.setAccessible(true);
        try {
            method.invoke(svc, new VXUserPermission());
        } catch (Exception e) {
            // Ignore the exception
        }
    }

    @Test
    public void testValidateForUpdate() throws NoSuchMethodException {
        Method method = XUserPermissionService.class.getDeclaredMethod("validateForUpdate", VXUserPermission.class, XXUserPermission.class);
        method.setAccessible(true);
        try {
            method.invoke(svc, new VXUserPermission(), new XXUserPermission());
        } catch (Exception e) {
            // Ignore the exception
        }
    }
}
