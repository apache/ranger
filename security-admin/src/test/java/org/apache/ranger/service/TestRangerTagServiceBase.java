/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXTagAttributeDao;
import org.apache.ranger.db.XXTagDefDao;
import org.apache.ranger.entity.XXTag;
import org.apache.ranger.entity.XXTagAttribute;
import org.apache.ranger.entity.XXTagDef;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerTagServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerTagServiceBase {
    @Test
    public void testGetAttributesForTag_collectsFromDao() {
        TestableService   svc     = new TestableService();
        RangerDaoManager  daoMgr  = Mockito.mock(RangerDaoManager.class);
        XXTagAttributeDao attrDao = mock(XXTagAttributeDao.class);
        when(daoMgr.getXXTagAttribute()).thenReturn(attrDao);
        svc.daoMgr = daoMgr;

        XXTag x = new XXTag();
        x.setId(7L);
        XXTagAttribute a = new XXTagAttribute();
        a.setName("k");
        a.setValue("v");
        when(attrDao.findByTagId(anyLong())).thenReturn(Collections.singletonList(a));

        Map<String, String> out = svc.getAttributesForTag(x);
        assertNotNull(out);
        assertEquals("v", out.get("k"));
    }

    @Test
    public void testSearchRangerTags_returnsMappedListAndMeta() {
        TestableService svc = new TestableService();
        XXTag           x1  = new XXTag();
        x1.setId(1L);
        XXTag x2 = new XXTag();
        x2.setId(2L);
        svc.nextResults = Arrays.asList(x1, x2);

        SearchFilter filter = new SearchFilter();
        filter.setStartIndex(5);
        filter.setMaxRows(10);
        filter.setSortBy("name");
        filter.setSortType("asc");

        PList<RangerTag> out = svc.searchRangerTags(filter);
        assertNotNull(out);
        assertEquals(2, out.getResultSize());
        assertEquals(10, out.getPageSize());
        assertEquals(5, out.getStartIndex());
        assertEquals("name", out.getSortBy());
        assertEquals("asc", out.getSortType());
        assertEquals(2, out.getList().size());
    }

    @Test
    public void testMapViewToEntityBean_setsGuidTypeOwnerAndOptions() {
        TestableService  svc       = new TestableService();
        RangerDaoManager daoMgr    = Mockito.mock(RangerDaoManager.class);
        XXTagDefDao      tagDefDao = mock(XXTagDefDao.class);
        when(daoMgr.getXXTagDef()).thenReturn(tagDefDao);
        svc.daoMgr = daoMgr;

        XXTagDef def = new XXTagDef();
        def.setId(99L);
        when(tagDefDao.findByName(eq("pii"))).thenReturn(def);

        RangerTag v = new RangerTag();
        v.setType("pii");
        v.setGuid("guid-1");
        Map<String, Object> options = new HashMap<>();
        v.setOptions(options);
        v.setValidityPeriods(new java.util.ArrayList<>());
        XXTag x = new XXTag();

        x = svc.mapViewToEntityBean(v, x, 0);

        assertEquals("guid-1", x.getGuid());
        assertEquals(Long.valueOf(99L), x.getType());
    }

    @Test
    public void testMapViewToEntityBean_throwsWhenTagDefMissing() {
        TestableService  svc       = new TestableService();
        RangerDaoManager daoMgr    = Mockito.mock(RangerDaoManager.class);
        XXTagDefDao      tagDefDao = mock(XXTagDefDao.class);
        when(daoMgr.getXXTagDef()).thenReturn(tagDefDao);
        svc.daoMgr = daoMgr;

        RangerTag v = new RangerTag();
        v.setType("missing");
        v.setGuid("g");
        XXTag x = new XXTag();

        assertThrows(RuntimeException.class, () -> svc.mapViewToEntityBean(v, x, 0), MessageEnums.INVALID_INPUT_DATA.name());
    }

    public static class TestableService extends RangerTagServiceBase<XXTag, RangerTag> {
        public List<XXTag> nextResults = new ArrayList<>();

        @Override
        public XXTag preCreate(RangerTag vObj) {
            return new XXTag();
        }

        @Override
        public XXTag populateEntityBeanForCreate(XXTag t, RangerTag vObj) {
            return t;
        }

        @Override
        public XXTag populateEntityBeanForUpdate(XXTag t, RangerTag vObj) {
            return t;
        }

        @Override
        protected void validateForCreate(RangerTag vObj) {}

        @Override
        protected void validateForUpdate(RangerTag vObj, XXTag t) {}

        @Override
        protected List<XXTag> searchRangerObjects(SearchFilter searchFilter, List<SearchField> searchFieldList, List<SortField> sortFieldList, PList<RangerTag> pList) {
            return nextResults;
        }

        @Override
        protected RangerTag mapEntityToViewBean(RangerTag vObj, XXTag xObj) {
            RangerTag v = new RangerTag();
            v.setGuid(xObj.getGuid());
            return v;
        }
    }
}
