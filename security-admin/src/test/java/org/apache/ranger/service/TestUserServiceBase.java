/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.view.VXPortalUser;
import org.apache.ranger.view.VXPortalUserList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UserServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserServiceBase {
    @Test
    public void searchUsers_emptyList() {
        TestSvc        svc      = Mockito.spy(new TestSvc());
        SearchCriteria criteria = new SearchCriteria();
        Mockito.doReturn(java.util.Collections.emptyList()).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        VXPortalUserList list = svc.searchUsers(criteria);
        assertTrue(list.getVXPortalUsers().isEmpty());
    }

    @Test
    public void searchUsers_mapsResults() {
        TestSvc                      svc      = Mockito.spy(new TestSvc());
        SearchCriteria               criteria = new SearchCriteria();
        XXPortalUser                 x        = new XXPortalUser();
        java.util.List<XXPortalUser> results  = Collections.singletonList(x);
        VXPortalUser                 vOut     = new VXPortalUser();
        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        Mockito.doReturn(vOut).when(svc).populateViewBean(x);
        VXPortalUserList list = svc.searchUsers(criteria);
        assertSame(vOut, list.getVXPortalUsers().get(0));
    }

    @Test
    public void testMapViewToEntityBean() {
        TestSvc      svc1 = new TestSvc();
        VXPortalUser v    = new VXPortalUser();
        v.setFirstName("first");
        v.setLastName("last");
        v.setLoginId("login");
        v.setEmailAddress("email");
        v.setPassword("password");
        v.setUserRoleList(java.util.Arrays.asList("role1", "role2"));
        XXPortalUser x = new XXPortalUser();

        svc1.callMapViewToEntityBean(v, x);
    }

    static class TestSvc extends UserServiceBase<XXPortalUser, VXPortalUser> {
        @Override
        protected void validateForCreate(VXPortalUser vObj) {}

        @Override
        protected void validateForUpdate(VXPortalUser vObj, XXPortalUser entityObj) {}

        VXPortalUser callMapEntityToViewBean(VXPortalUser v, XXPortalUser x) {
            return super.mapEntityToViewBean(v, x);
        }

        XXPortalUser callMapViewToEntityBean(VXPortalUser v, XXPortalUser x) {
            return super.mapViewToEntityBean(v, x, 0);
        }
    }
}
