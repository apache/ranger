/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXPolicyExportAudit;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.view.VXPolicyExportAudit;
import org.apache.ranger.view.VXPolicyExportAuditList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XPolicyExportAuditServiceBase
 */

public class TestXPolicyExportAuditServiceBase {
    private static class TestSvc extends XPolicyExportAuditServiceBase<XXPolicyExportAudit, VXPolicyExportAudit> {
        @Override
        protected void validateForCreate(VXPolicyExportAudit vObj) {
        }

        @Override
        protected void validateForUpdate(VXPolicyExportAudit vObj, XXPolicyExportAudit mObj) {
        }

        VXPolicyExportAudit callMapEntityToViewBean(VXPolicyExportAudit v, XXPolicyExportAudit x) {
            return super.mapEntityToViewBean(v, x);
        }

        XXPolicyExportAudit callMapViewToEntityBean(VXPolicyExportAudit v, XXPolicyExportAudit x) {
            return super.mapViewToEntityBean(v, x, 0);
        }
    }

    private TestSvc svc;

    @Mock private RangerDaoManager daoManager;
    @Mock private XXServiceDao     xxServiceDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        svc = spy(new TestSvc());
        svc.daoManager = daoManager;
        when(daoManager.getXXService()).thenReturn(xxServiceDao);
    }

    @Test
    void testSearch_enrichesRepositoryDisplayName() {
        XXPolicyExportAudit x1 = new XXPolicyExportAudit();
        XXPolicyExportAudit x2 = new XXPolicyExportAudit();
        doReturn(Arrays.asList(x1, x2)).when(svc)
                .searchResources(any(SearchCriteria.class), anyList(), anyList(), any(VXPolicyExportAuditList.class));

        XXService svcEntity = new XXService();
        svcEntity.setDisplayName("Hive");
        when(xxServiceDao.findByName(any(String.class))).thenReturn(svcEntity);

        VXPolicyExportAuditList out = svc.searchXPolicyExportAudits(new SearchCriteria());
        assertNotNull(out);
        assertEquals(2, out.getVXPolicyExportAudits().size());
    }

    @Test
    void testMappings_areSymmetric() {
        VXPolicyExportAudit v = new VXPolicyExportAudit();
        v.setClientIP("ip");
        v.setAgentId("a");
        v.setRequestedEpoch(1L);
        v.setLastUpdated(new Date(2L));
        v.setRepositoryName("repo");
        v.setExportedJson("{}");
        v.setHttpRetCode(200);
        v.setClusterName("c");
        v.setZoneName("z");
        v.setPolicyVersion(5L);

        XXPolicyExportAudit x = svc.callMapViewToEntityBean(v, new XXPolicyExportAudit());
        VXPolicyExportAudit back = svc.callMapEntityToViewBean(new VXPolicyExportAudit(), x);
        assertEquals(v.getRepositoryName(), back.getRepositoryName());
        assertEquals(v.getHttpRetCode(), back.getHttpRetCode());
    }
}
