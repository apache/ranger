/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGdsDataShareDao;
import org.apache.ranger.db.XXGdsDatasetDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXGdsDataShare;
import org.apache.ranger.entity.XXGdsDataShareInDataset;
import org.apache.ranger.entity.XXGdsDataset;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.plugin.model.RangerGds.GdsShareStatus;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShareInDataset;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.HashSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.startsWith;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsDataShareInDatasetService
 */

public class TestRangerGdsDataShareInDatasetService {
    @InjectMocks private RangerGdsDataShareInDatasetService svc = spy(new RangerGdsDataShareInDatasetService());

    @Mock private RangerDaoManager                 daoMgr;
    @Mock private XXGdsDataShareDao                xxGdsDataShareDao;
    @Mock private XXGdsDatasetDao                  xxGdsDatasetDao;
    @Mock private XXPortalUserDao                  xxPortalUserDao;
    @Mock private RESTErrorUtil                    restErrorUtil;
    @Mock private GUIDUtil                         guidUtil;
    @Mock private BaseDao<XXGdsDataShareInDataset> entityDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoMgr.getXXGdsDataShare()).thenReturn(xxGdsDataShareDao);
        when(daoMgr.getXXGdsDataset()).thenReturn(xxGdsDatasetDao);
    }

    @Test
    void testMapViewToEntityBean_success() {
        RangerDataShareInDataset v = new RangerDataShareInDataset();
        v.setGuid("g");
        v.setIsEnabled(true);
        v.setDescription("d");
        v.setDataShareId(10L);
        v.setDatasetId(20L);
        v.setStatus(GdsShareStatus.ACTIVE);
        v.setValiditySchedule(new RangerValiditySchedule());
        v.setProfiles(new HashSet<>(Collections.singletonList("p1")));
        v.setOptions(Collections.singletonMap("k", "v"));
        v.setAdditionalInfo(Collections.singletonMap("a", "b"));
        v.setApprover("user1");

        when(xxGdsDataShareDao.getById(10L)).thenReturn(new XXGdsDataShare());
        when(xxGdsDatasetDao.getById(20L)).thenReturn(new XXGdsDataset());
        XXPortalUser u = new XXPortalUser();
        u.setId(7L);
        when(xxPortalUserDao.findByLoginId("user1")).thenReturn(u);

        XXGdsDataShareInDataset x = svc.mapViewToEntityBean(v, new XXGdsDataShareInDataset(), RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        assertEquals("g", x.getGuid());
        assertEquals(Long.valueOf(10L), x.getDataShareId());
        assertEquals(Long.valueOf(20L), x.getDatasetId());
        assertEquals(Short.valueOf((short) v.getStatus().ordinal()), x.getStatus());
        assertEquals(Long.valueOf(7L), x.getApproverId());
        assertNotNull(x.getValidityPeriod());
        assertNotNull(x.getProfiles());
        assertNotNull(x.getOptions());
        assertNotNull(x.getAdditionalInfo());
    }

    @Test
    void testMapViewToEntityBean_missingDataShare_throws() {
        RangerDataShareInDataset v = new RangerDataShareInDataset();
        v.setDataShareId(1L);
        v.setDatasetId(2L);
        when(xxGdsDataShareDao.getById(1L)).thenReturn(null);
        when(restErrorUtil.createRESTException(startsWith("No data share"), eq(MessageEnums.INVALID_INPUT_DATA))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> svc.mapViewToEntityBean(v, new XXGdsDataShareInDataset(), RangerBaseModelService.OPERATION_CREATE_CONTEXT));
    }

    @Test
    void testMapEntityToViewBean_roundTrip() {
        XXGdsDataShareInDataset x = new XXGdsDataShareInDataset();
        x.setGuid("g");
        x.setIsEnabled(true);
        x.setVersion(3L);
        x.setDescription("d");
        x.setDataShareId(10L);
        x.setDatasetId(20L);
        x.setStatus((short) GdsShareStatus.ACTIVE.ordinal());
        x.setValidityPeriod(JsonUtils.objectToJson(new RangerValiditySchedule()));
        x.setProfiles(JsonUtils.objectToJson(new HashSet<String>(Collections.singletonList("p1"))));
        x.setOptions(JsonUtils.mapToJson(Collections.singletonMap("k", "v")));
        x.setAdditionalInfo(JsonUtils.mapToJson(Collections.singletonMap("a", "b")));
        x.setApproverId(7L);

        doReturn("user1").when(svc).getUserName(7L);
        RangerDataShareInDataset v = svc.mapEntityToViewBean(new RangerDataShareInDataset(), x);
        assertEquals("g", v.getGuid());
        assertEquals(3L, v.getVersion());
        assertEquals(GdsShareStatus.ACTIVE, v.getStatus());
        assertEquals("user1", v.getApprover());
        assertNotNull(v.getValiditySchedule());
        assertTrue(v.getProfiles().contains("p1"));
        assertEquals("v", v.getOptions().get("k"));
        assertEquals("b", v.getAdditionalInfo().get("a"));
    }

    @Test
    void testValidateForCreate_errorsAndDefaults() {
        RangerDataShareInDataset v = new RangerDataShareInDataset();
        when(restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new RuntimeException("e"));
        assertThrows(RuntimeException.class, () -> svc.validateForCreate(v));

        RangerDataShareInDataset v2 = new RangerDataShareInDataset();
        v2.setDataShareId(10L);
        v2.setDatasetId(20L);
        when(xxGdsDataShareDao.getById(10L)).thenReturn(new XXGdsDataShare());
        when(xxGdsDatasetDao.getById(20L)).thenReturn(new XXGdsDataset());
        when(guidUtil.genGUID()).thenReturn("gen");
        svc.validateForCreate(v2);
        assertEquals("gen", v2.getGuid());
        assertTrue(v2.getIsEnabled());
    }

    @Test
    void testPreDelete_usesBaseDao() {
        XXGdsDataShareInDataset ent = new XXGdsDataShareInDataset();
        ent.setId(5L);
        when(entityDao.getById(5L)).thenReturn(ent);
        XXGdsDataShareInDataset out = svc.preDelete(5L);
        assertEquals(5L, out.getId());
    }

    @Test
    void testPostCreateAndPostUpdate_returnPopulated() {
        XXGdsDataShareInDataset  x = new XXGdsDataShareInDataset();
        RangerDataShareInDataset v = new RangerDataShareInDataset();
        doReturn(v).when(svc).populateViewBean(x);
        assertSame(v, svc.postCreate(x));
        assertSame(v, svc.postUpdate(x));
    }
}
