/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.common.AppConstants;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.db.XXAuditMapDao;
import org.apache.ranger.db.XXPermMapDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.entity.XXAuditMap;
import org.apache.ranger.entity.XXPermMap;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResource;
import org.apache.ranger.security.handler.RangerDomainObjectSecurityHandler;
import org.apache.ranger.view.VXAuditMap;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXResource;
import org.apache.ranger.view.VXResourceList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XResourceServiceAdditional
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXResourceServiceAdditional {
    @Mock private RangerDaoManager                  daoManager;
    @Mock private XXResourceDao                     xxResourceDao;
    @Mock private XXAssetDao                        xxAssetDao;
    @Mock private XXAuditMapDao                     xxAuditMapDao;
    @Mock private XXPermMapDao                      xxPermMapDao;
    @Mock private XXPortalUserDao                   xxPortalUserDao;
    @Mock private XAuditMapService                  xAuditMapService;
    @Mock private XPermMapService                   xPermMapService;
    @Mock private RESTErrorUtil                     restErrorUtil;
    @Mock private RangerDomainObjectSecurityHandler objectSecurityHandler;
    @Mock private BaseDao<XXResource>               entityDao;
    @Mock private RangerBizUtil                     xaBizUtil;

    @Test
    public void testA_populateAssetProperties_viaPopulateViewBean() {
        XResourceService svc = createService();
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        when(daoManager.getXXPermMap()).thenReturn(xxPermMapDao);
        when(daoManager.getXXAuditMap()).thenReturn(xxAuditMapDao);
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
        XXPortalUser u = new XXPortalUser();
        u.setLoginId("u");
        when(xxPortalUserDao.getById(anyLong())).thenReturn(u);
        XXResource x = new XXResource();
        x.setAssetId(5L);
        x.setAddedByUserId(1L);
        XXAsset asset = new XXAsset();
        asset.setName("repo");
        asset.setAssetType(7);
        when(xxAssetDao.getById(5L)).thenReturn(asset);
        when(xxPermMapDao.findByResourceId(anyLong())).thenReturn(Collections.emptyList());
        when(xxAuditMapDao.findByResourceId(anyLong())).thenReturn(Collections.emptyList());
        VXResource v = svc.populateViewBean(x);
        assertNotNull(v);
        assertEquals("repo", v.getAssetName());
        assertEquals(Integer.valueOf(7), v.getAssetType());
    }

    @Test
    public void testB_populateAssetAndLists_viaReflection() throws Exception {
        XResourceService svc = createService();
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        when(daoManager.getXXPermMap()).thenReturn(xxPermMapDao);
        when(daoManager.getXXAuditMap()).thenReturn(xxAuditMapDao);
        VXResource v = new VXResource();
        v.setId(9L);
        v.setAssetId(11L);
        XXAsset asset = new XXAsset();
        asset.setName("a");
        asset.setAssetType(1);
        when(xxAssetDao.getById(11L)).thenReturn(asset);
        XXPermMap xperm = new XXPermMap();
        when(xxPermMapDao.findByResourceId(9L)).thenReturn(Collections.singletonList(xperm));
        when(xPermMapService.populateViewBean(any(XXPermMap.class))).thenReturn(new VXPermMap());
        XXAuditMap xam = new XXAuditMap();
        when(xxAuditMapDao.findByResourceId(9L)).thenReturn(Collections.singletonList(xam));
        when(xAuditMapService.populateViewBean(any(XXAuditMap.class))).thenReturn(new VXAuditMap());

        Method popAsset = XResourceService.class.getDeclaredMethod("populateAssetProperties", VXResource.class);
        popAsset.setAccessible(true);
        popAsset.invoke(svc, v);
        assertEquals("a", v.getAssetName());

        Method popPerm = XResourceService.class.getDeclaredMethod("populatePermList", VXResource.class);
        popPerm.setAccessible(true);
        popPerm.invoke(svc, v);
        assertNotNull(v.getPermMapList());

        Method popAudit = XResourceService.class.getDeclaredMethod("populateAuditList", VXResource.class);
        popAudit.setAccessible(true);
        popAudit.invoke(svc, v);
        assertNotNull(v.getAuditList());
    }

    @Test
    public void testD_validateForUpdate_branches() {
        XResourceService svc = createService();
        // HDFS empty name -> throws
        VXResource v = new VXResource();
        v.setAssetType(AppConstants.ASSET_HDFS);
        when(restErrorUtil.createRESTException(any(), any(MessageEnums.class))).thenThrow(new RuntimeException("bad"));
        assertThrows(RuntimeException.class, () -> svc.validateForUpdate(v, new XXResource()));
        // changed fields path -> call validateForCreate
        VXResource v2 = new VXResource();
        v2.setAssetType(AppConstants.ASSET_HDFS);
        v2.setName("n");
        v2.setIsRecursive(1);
        v2.setResourceType(1);
        v2.setAssetId(10L);
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        XXAsset a = new XXAsset();
        a.setId(10L);
        when(xxAssetDao.getById(10L)).thenReturn(a);
        svc.validateForUpdate(v2, new XXResource());
    }

    @Test
    public void testE_populatePageList_viaReflection() throws Exception {
        XResourceService svc = createService();
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
        when(daoManager.getXXPermMap()).thenReturn(xxPermMapDao);
        when(xxPermMapDao.findByResourceId(anyLong())).thenReturn(Collections.emptyList());
        XXPortalUser u = new XXPortalUser();
        u.setLoginId("u");
        when(xxPortalUserDao.getById(anyLong())).thenReturn(u);
        XXResource x1 = new XXResource();
        x1.setAddedByUserId(1L);
        XXResource x2 = new XXResource();
        x2.setAddedByUserId(1L);
        XXResource x3 = new XXResource();
        x3.setAddedByUserId(1L);
        List<XXResource> list  = Arrays.asList(x1, x2, x3);
        VXResourceList   vlist = new VXResourceList();
        Method                     m     = XResourceService.class.getDeclaredMethod("populatePageList", java.util.List.class, int.class, int.class, VXResourceList.class);
        m.setAccessible(true);
        m.invoke(svc, list, 1, 1, vlist);
        assertEquals(1, vlist.getResultSize());
        assertEquals(1, vlist.getStartIndex());
        assertEquals(3L, vlist.getTotalCount());
    }

    @Test
    public void testF_mapEntityToViewBean_setsOwnerAndAssetProps() {
        XResourceService svc = createService();
        when(daoManager.getXXAsset()).thenReturn(xxAssetDao);
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
        XXResource x = new XXResource();
        x.setAddedByUserId(7L);
        x.setAssetId(2L);
        XXAsset a = new XXAsset();
        a.setName("repo");
        a.setAssetType(3);
        when(xxAssetDao.getById(2L)).thenReturn(a);
        XXPortalUser u = new XXPortalUser();
        u.setLoginId("alice");
        when(xxPortalUserDao.getById(7L)).thenReturn(u);

        VXResource out = svc.mapEntityToViewBean(new VXResource(), x);
        assertEquals("alice", out.getOwner());
        assertEquals("repo", out.getAssetName());
    }

    @Test
    public void testG_mapViewToEntityBean_fillsAddedUpdatedBy() {
        XResourceService svc = createService();
        when(daoManager.getXXPortalUser()).thenReturn(xxPortalUserDao);
        VXResource v = new VXResource();
        v.setOwner("own");
        v.setUpdatedBy("upd");
        XXPortalUser u = new XXPortalUser();
        u.setId(9L);
        when(xxPortalUserDao.findByLoginId("own")).thenReturn(u);
        when(xxPortalUserDao.findByLoginId("upd")).thenReturn(u);
        XXResource ret = svc.mapViewToEntityBean(v, new XXResource(), 0);
        assertEquals(Long.valueOf(9L), ret.getAddedByUserId());
        assertEquals(Long.valueOf(9L), ret.getUpdatedByUserId());
    }

    private XResourceService createService() {
        XResourceService svc = new XResourceService();
        svc.daoManager            = daoManager;
        svc.restErrorUtil         = restErrorUtil;
        svc.objectSecurityHandler = objectSecurityHandler;
        svc.entityDao             = entityDao;
        svc.stringUtil            = new StringUtil();
        svc.xAuditMapService      = xAuditMapService;
        svc.xPermMapService       = xPermMapService;
        svc.xaBizUtil             = xaBizUtil;
        return svc;
    }
}
