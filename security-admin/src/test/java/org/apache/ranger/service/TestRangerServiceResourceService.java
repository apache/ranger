/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceResourceDao;
import org.apache.ranger.db.XXServiceVersionInfoDao;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServiceResourceService
 */

public class TestRangerServiceResourceService {
    @InjectMocks private RangerServiceResourceService svc = spy(new RangerServiceResourceService());

    @Mock private RangerDaoManager         daoMgr;
    @Mock private XXServiceResourceDao     xxServiceResourceDao;
    @Mock private XXServiceVersionInfoDao  xxServiceVersionInfoDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoMgr.getXXServiceResource()).thenReturn(xxServiceResourceDao);
        when(daoMgr.getXXServiceVersionInfo()).thenReturn(xxServiceVersionInfoDao);
    }

    @Test
    void testConstructor_initializesSearchAndSortFields() {
        RangerServiceResourceService local = new RangerServiceResourceService();
        assertFalse(local.searchFields.isEmpty());
        assertFalse(local.sortFields.isEmpty());
    }

    @Test
    void testGetPopulatedViewObject_usesPopulateViewBean() {
        XXServiceResource                        x        = new XXServiceResource();
        RangerServiceResource                    expected = new RangerServiceResource();
        RangerServiceResourceService             spySvc   = spy(new RangerServiceResourceService());
        doReturn(expected).when(spySvc).populateViewBean(any(XXServiceResource.class));

        RangerServiceResource out = spySvc.getPopulatedViewObject(x);
        assertSame(expected, out);
    }

    @Test
    void testGetServiceResourceByGuid_returnsPopulatedWhenFound_andNullWhenMissing() {
        XXServiceResource x = new XXServiceResource();
        when(xxServiceResourceDao.findByGuid("g")).thenReturn(x);

        RangerServiceResourceService spySvc = spy(svc);
        RangerServiceResource expected = new RangerServiceResource();
        doReturn(expected).when(spySvc).populateViewBean(any(XXServiceResource.class));

        RangerServiceResource out1 = spySvc.getServiceResourceByGuid("g");
        assertSame(expected, out1);

        when(xxServiceResourceDao.findByGuid("missing")).thenReturn(null);
        RangerServiceResource out2 = spySvc.getServiceResourceByGuid("missing");
        assertNull(out2);
    }

    @Test
    void testGetByServiceId_populatesAll() {
        XXServiceResource a = new XXServiceResource();
        XXServiceResource b = new XXServiceResource();
        when(xxServiceResourceDao.findByServiceId(5L)).thenReturn(Arrays.asList(a, b));

        RangerServiceResourceService spySvc = spy(svc);
        doAnswer(inv -> new RangerServiceResource()).when(spySvc).populateViewBean(any(XXServiceResource.class));

        List<RangerServiceResource> out = spySvc.getByServiceId(5L);
        assertNotNull(out);
        assertEquals(2, out.size());
    }

    @Test
    void testGetServiceResourceElements_returnsEmptyMap() {
        Map<String, RangerPolicy.RangerPolicyResource> out = svc.getServiceResourceElements(new XXServiceResource());
        assertNotNull(out);
        assertTrue(out.isEmpty());
    }
}
