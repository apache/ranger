/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.entity.XXTagDef;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerTagDefServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerTagDefServiceBase {
    @Mock public RangerDaoManager daoMgr;
    @InjectMocks
    RangerTagDefService rangerTagDefService = new RangerTagDefService();

    Long   id   = 1L;
    String guid = "989898_01_1";
    String name = "test";

    @Test
    public void test1mapViewToEntityBean() {
        RangerTagDef rangerTagDef = new RangerTagDef();
        rangerTagDef.setId(id);
        rangerTagDef.setGuid(guid);
        XXTagDef xxTagDef = new XXTagDef();
        xxTagDef.setId(id);
        xxTagDef.setGuid(guid);
        xxTagDef.setName(name);
        int      operationContext = 1;
        XXTagDef result           = rangerTagDefService.mapViewToEntityBean(rangerTagDef, xxTagDef, operationContext);
        assertNotNull(result);
        assertEquals(result, xxTagDef);
        assertEquals(result.getGuid(), xxTagDef.getGuid());
        assertEquals(result.getName(), xxTagDef.getName());
        assertEquals(result.getId(), xxTagDef.getId());
    }

    @Test
    public void testA_mapViewToEntityBean() {
        TestSvc      svc = createSvc();
        RangerTagDef v   = new RangerTagDef();
        v.setGuid("g");
        v.setVersion(5L);
        v.setName("n");
        v.setSource("s");
        XXTagDef x = new XXTagDef();
        x = svc.mapViewToEntityBean(v, x, 0);
        assertEquals("g", x.getGuid());
        assertEquals(Long.valueOf(5L), x.getVersion());
        assertEquals("n", x.getName());
        assertEquals("s", x.getSource());
    }

    private TestSvc createSvc() {
        TestSvc svc = new TestSvc();
        svc.daoMgr = daoMgr;
        return svc;
    }

    public static class TestSvc extends RangerTagDefServiceBase<XXTagDef, RangerTagDef> {
        @Override
        protected void validateForCreate(RangerTagDef vObj) {}

        @Override
        protected void validateForUpdate(RangerTagDef vObj, XXTagDef t) {}

        @Override
        protected XXTagDef mapViewToEntityBean(RangerTagDef vObj, XXTagDef xObj, int operationContext) {
            xObj.setGuid(vObj.getGuid());
            xObj.setVersion(vObj.getVersion());
            xObj.setName(vObj.getName());
            xObj.setSource(vObj.getSource());
            return xObj;
        }

        @Override
        protected RangerTagDef mapEntityToViewBean(RangerTagDef vObj, XXTagDef xObj) {
            vObj.setGuid(xObj.getGuid());
            vObj.setVersion(xObj.getVersion());
            vObj.setName(xObj.getName());
            vObj.setSource(xObj.getSource());
            return vObj;
        }
    }
}
