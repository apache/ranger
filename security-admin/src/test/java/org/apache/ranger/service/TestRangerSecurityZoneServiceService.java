/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.GdsDBStore;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.db.RangerTransactionSynchronizationAdapter;
import org.apache.ranger.common.view.VTrxLogAttr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.entity.XXSecurityZone;
import org.apache.ranger.entity.XXServiceVersionInfo;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZone.RangerSecurityZoneService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyCollection;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerSecurityZoneServiceService
 */

public class TestRangerSecurityZoneServiceService {
    @InjectMocks private RangerSecurityZoneServiceService svc = spy(new RangerSecurityZoneServiceService());

    @Mock private ServiceDBStore                                      serviceDBStore;
    @Mock private GdsDBStore                                          gdsStore;
    @Mock private RangerDaoManager                                    daoMgr;
    @Mock private org.apache.ranger.common.db.BaseDao<XXSecurityZone> entityDao;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testInitService_readsConfig() {
        try {
            java.lang.reflect.Field f = RangerSecurityZoneServiceService.class.getDeclaredField("compressJsonData");
            f.setAccessible(true);
            f.setBoolean(svc, true);
            svc.initService();
        } catch (Exception ignored) {
        }
    }

    @Test
    void testPostCreate_success_invokesPoliciesAndUpdates() throws Exception {
        XXSecurityZone x = new XXSecurityZone();
        x.setId(1L);
        RangerSecurityZone                     zone     = new RangerSecurityZone();
        Map<String, RangerSecurityZoneService> services = new HashMap<>();
        services.put("svcA", new RangerSecurityZoneService());
        zone.setServices(services);
        zone.setTagServices(Collections.singletonList("tagA"));
        doReturn(zone).when(svc).populateViewBean(any(XXSecurityZone.class));

        org.apache.ranger.db.XXServiceVersionInfoDao svDao = mock(org.apache.ranger.db.XXServiceVersionInfoDao.class);
        when(daoMgr.getXXServiceVersionInfo()).thenReturn(svDao);
        when(svDao.findByServiceName(anyString())).thenReturn(new XXServiceVersionInfo());
        RangerTransactionSynchronizationAdapter adapter = mock(RangerTransactionSynchronizationAdapter.class);
        when(daoMgr.getRangerTransactionSynchronizationAdapter()).thenReturn(adapter);

        RangerSecurityZone out = svc.postCreate(x);
        verify(serviceDBStore).createZoneDefaultPolicies(eq(services.keySet()), eq(zone));
        verify(serviceDBStore).createZoneDefaultPolicies(eq(zone.getTagServices()), eq(zone));
        assertNotNull(out);
    }

    @Test
    void testPostCreate_exception_returnsNull() throws Exception {
        XXSecurityZone x = new XXSecurityZone();
        x.setId(1L);
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(Collections.singletonMap("svcA", new RangerSecurityZoneService()));
        zone.setTagServices(Collections.singletonList("tagA"));
        doReturn(zone).when(svc).populateViewBean(any(XXSecurityZone.class));
        doThrow(new RuntimeException("boom")).when(serviceDBStore).createZoneDefaultPolicies(anyCollection(), any(RangerSecurityZone.class));
        RangerSecurityZone out = svc.postCreate(x);
        assertNull(out);
    }

    @Test
    void testPostUpdate_success_flows() throws Exception {
        XXSecurityZone x = new XXSecurityZone();
        x.setId(10L);
        XXSecurityZone existing = new XXSecurityZone();
        existing.setId(10L);
        RangerSecurityZone existingView = new RangerSecurityZone();
        existingView.setServices(Collections.singletonMap("oldSvc", new RangerSecurityZoneService()));
        existingView.setTagServices(Collections.singletonList("oldTag"));
        doReturn(existingView).when(svc).mapEntityToViewBean(any(RangerSecurityZone.class), eq(existing));
        svc.validateForUpdate(new RangerSecurityZone(), existing);

        RangerSecurityZone updated = new RangerSecurityZone();
        updated.setServices(Collections.singletonMap("newSvc", new RangerSecurityZoneService()));
        updated.setTagServices(Collections.singletonList("newTag"));
        doReturn(updated).when(svc).populateViewBean(any(XXSecurityZone.class));

        org.apache.ranger.db.XXServiceVersionInfoDao svDao = mock(org.apache.ranger.db.XXServiceVersionInfoDao.class);
        when(daoMgr.getXXServiceVersionInfo()).thenReturn(svDao);
        when(svDao.findByServiceName(anyString())).thenReturn(new XXServiceVersionInfo());
        RangerTransactionSynchronizationAdapter adapter = mock(RangerTransactionSynchronizationAdapter.class);
        when(daoMgr.getRangerTransactionSynchronizationAdapter()).thenReturn(adapter);

        RangerSecurityZone out = svc.postUpdate(x);
        verify(serviceDBStore).createZoneDefaultPolicies(anyCollection(), eq(updated));
        assertNotNull(out);
    }

    @Test
    void testPreDelete_success_deletesPoliciesAndUpdates() throws Exception {
        XXSecurityZone x = new XXSecurityZone();
        x.setId(5L);
        when(entityDao.getById(5L)).thenReturn(x);
        RangerSecurityZone view = new RangerSecurityZone();
        view.setServices(Collections.singletonMap("svc", new RangerSecurityZoneService()));
        view.setTagServices(Collections.singletonList("tag"));
        doReturn(view).when(svc).mapEntityToViewBean(any(RangerSecurityZone.class), eq(x));
        XXServiceVersionInfo vinfo = new XXServiceVersionInfo();
        vinfo.setServiceId(1L);
        org.apache.ranger.db.XXServiceVersionInfoDao svDao = mock(org.apache.ranger.db.XXServiceVersionInfoDao.class);
        when(daoMgr.getXXServiceVersionInfo()).thenReturn(svDao);
        when(svDao.findByServiceName(anyString())).thenReturn(vinfo);
        RangerTransactionSynchronizationAdapter adapter = mock(RangerTransactionSynchronizationAdapter.class);
        when(daoMgr.getRangerTransactionSynchronizationAdapter()).thenReturn(adapter);

        XXSecurityZone out = svc.preDelete(5L);
        verify(serviceDBStore).deleteZonePolicies(anyCollection(), eq(5L));
        verify(gdsStore).deleteAllGdsObjectsForSecurityZone(eq(5L));
        assertNotNull(out);
    }

    @Test
    void testPreDelete_exception_returnsNull() throws Exception {
        XXSecurityZone x = new XXSecurityZone();
        x.setId(6L);
        when(entityDao.getById(6L)).thenReturn(x);
        RangerSecurityZone view = new RangerSecurityZone();
        view.setServices(Collections.singletonMap("svc", new RangerSecurityZoneService()));
        doReturn(view).when(svc).mapEntityToViewBean(any(RangerSecurityZone.class), eq(x));
        doThrow(new RuntimeException("boom")).when(serviceDBStore).deleteZonePolicies(anyCollection(), anyLong());
        XXSecurityZone out = svc.preDelete(6L);
        assertNull(out);
    }

    @Test
    void testGetTrxLogAttrValue_compressedSummary() throws Exception {
        java.lang.reflect.Field f = RangerSecurityZoneServiceService.class.getDeclaredField("compressJsonData");
        f.setAccessible(true);
        f.setBoolean(svc, true);

        RangerSecurityZone            zone     = new RangerSecurityZone();
        RangerSecurityZoneService     s        = new RangerSecurityZoneService();
        HashMap<String, List<String>> resEntry = new HashMap<>();
        resEntry.put("path", Collections.singletonList("/a"));
        s.getResources().add(resEntry);
        zone.setServices(Collections.singletonMap("svc", s));

        VTrxLogAttr attr = new VTrxLogAttr("services", "Services");
        String      json = svc.getTrxLogAttrValue(zone, attr);
        assertNotNull(json);
        assertTrue(json.contains("resourceCount"));
    }

    @Test
    void testMapViewToEntityBean_compressesOrFallbacks() throws Exception {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setName("z");
        zone.setServices(Collections.emptyMap());
        zone.setAdminUsers(Collections.emptyList());
        zone.setAdminUserGroups(Collections.emptyList());
        zone.setAdminRoles(Collections.emptyList());
        zone.setAuditUsers(Collections.emptyList());
        zone.setAuditUserGroups(Collections.emptyList());
        zone.setAuditRoles(Collections.emptyList());
        zone.setTagServices(Collections.emptyList());
        XXSecurityZone          x = new XXSecurityZone();
        java.lang.reflect.Field f = RangerSecurityZoneServiceService.class.getDeclaredField("compressJsonData");
        f.setAccessible(true);
        f.setBoolean(svc, true);
        XXSecurityZone out = svc.mapViewToEntityBean(zone, x, 0);
        assertNull(out.getJsonData());
        f.setBoolean(svc, false);
        XXSecurityZone out2 = svc.mapViewToEntityBean(zone, new XXSecurityZone(), 0);
        assertNotNull(out2.getJsonData());
    }
}
