/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.entity.XXGroupPermission;
import org.apache.ranger.view.VXGroupPermission;
import org.apache.ranger.view.VXGroupPermissionList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;

import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupPermissionServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXGroupPermissionServiceBase {
    @Test
    public void mapViewToEntityBean_mapsFields() {
        TestSvc           svc = new TestSvc();
        VXGroupPermission v   = new VXGroupPermission();
        v.setGroupId(7L);
        v.setModuleId(3L);
        v.setIsAllowed(1);
        XXGroupPermission x = new XXGroupPermission();

        x = svc.callMapViewToEntityBean(v, x);

        assertEquals(7L, x.getGroupId());
        assertEquals(3L, x.getModuleId());
        assertEquals(Integer.valueOf(1), x.getIsAllowed());
    }

    @Test
    public void mapEntityToViewBean_mapsFields() {
        TestSvc           svc = new TestSvc();
        XXGroupPermission x   = new XXGroupPermission();
        x.setGroupId(9L);
        x.setModuleId(2L);
        x.setIsAllowed(0);
        VXGroupPermission v = new VXGroupPermission();

        v = svc.callMapEntityToViewBean(v, x);

        assertEquals(9L, v.getGroupId());
        assertEquals(2L, v.getModuleId());
        assertEquals(Integer.valueOf(0), v.getIsAllowed());
    }

    @Test
    public void searchXGroupPermission_buildsList() {
        TestSvc           svc      = Mockito.spy(new TestSvc());
        SearchCriteria    criteria = new SearchCriteria();
        XXGroupPermission x        = new XXGroupPermission();
        x.setGroupId(1L);
        x.setModuleId(2L);
        x.setIsAllowed(1);
        List<XXGroupPermission> results = Collections.singletonList(x);
        VXGroupPermission       vOut    = new VXGroupPermission();
        vOut.setGroupId(1L);
        vOut.setModuleId(2L);
        vOut.setIsAllowed(1);

        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        Mockito.doReturn(vOut).when(svc).populateViewBean(Mockito.any(XXGroupPermission.class));

        VXGroupPermissionList list = svc.searchXGroupPermission(criteria);
        org.junit.jupiter.api.Assertions.assertEquals(1, list.getvXGroupPermission().size());
        org.junit.jupiter.api.Assertions.assertEquals(1L, list.getvXGroupPermission().get(0).getGroupId());
        org.junit.jupiter.api.Assertions.assertEquals(2L, list.getvXGroupPermission().get(0).getModuleId());
        org.junit.jupiter.api.Assertions.assertEquals(1, list.getvXGroupPermission().get(0).getIsAllowed());
    }

    @Test
    public void searchXGroupPermission_emptyReturnsEmptyList() {
        TestSvc                 svc      = Mockito.spy(new TestSvc());
        SearchCriteria          criteria = new SearchCriteria();
        List<XXGroupPermission> results  = emptyList();

        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());

        VXGroupPermissionList list = svc.searchXGroupPermission(criteria);
        assertTrue(list.getvXGroupPermission().isEmpty());
    }

    @Test
    public void searchXGroupPermission_multipleResults_mapsAll() {
        TestSvc           svc      = Mockito.spy(new TestSvc());
        SearchCriteria    criteria = new SearchCriteria();
        XXGroupPermission x1       = new XXGroupPermission();
        x1.setGroupId(10L);
        x1.setModuleId(20L);
        x1.setIsAllowed(1);
        XXGroupPermission x2 = new XXGroupPermission();
        x2.setGroupId(11L);
        x2.setModuleId(21L);
        x2.setIsAllowed(0);
        List<XXGroupPermission> results = asList(x1, x2);
        VXGroupPermission       v1      = new VXGroupPermission();
        v1.setGroupId(10L);
        v1.setModuleId(20L);
        v1.setIsAllowed(1);
        VXGroupPermission v2 = new VXGroupPermission();
        v2.setGroupId(11L);
        v2.setModuleId(21L);
        v2.setIsAllowed(0);

        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        Mockito.doReturn(v1).when(svc).populateViewBean(x1);
        Mockito.doReturn(v2).when(svc).populateViewBean(x2);

        VXGroupPermissionList list = svc.searchXGroupPermission(criteria);
        assertEquals(2, list.getvXGroupPermission().size());
        assertEquals(10L, list.getvXGroupPermission().get(0).getGroupId());
        assertEquals(21L, list.getvXGroupPermission().get(1).getModuleId());
    }

    static class TestSvc extends XGroupPermissionServiceBase<XXGroupPermission, VXGroupPermission> {
        @Override
        protected void validateForCreate(VXGroupPermission vObj) {}

        @Override
        protected void validateForUpdate(VXGroupPermission vObj, XXGroupPermission entityObj) {}

        XXGroupPermission callMapViewToEntityBean(VXGroupPermission v, XXGroupPermission x) {
            return super.mapViewToEntityBean(v, x, 0);
        }

        VXGroupPermission callMapEntityToViewBean(VXGroupPermission v, XXGroupPermission x) {
            return super.mapEntityToViewBean(v, x);
        }
    }
}
