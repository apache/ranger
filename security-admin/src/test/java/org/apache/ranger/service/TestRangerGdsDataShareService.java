/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXSecurityZoneDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXSecurityZone;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShare;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsDataShareService
 */

@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerGdsDataShareService {
    @InjectMocks
    RangerGdsDataShareService svc;

    @Mock
    RESTErrorUtil restErrorUtil;

    @Mock
    RangerDaoManager daoMgr;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void test1_validateForCreate_missingService_throws() {
        RangerDataShare v = new RangerDataShare();
        v.setName("ds1");
        v.setService("svc");
        XXServiceDao svcDao = mock(XXServiceDao.class);
        when(daoMgr.getXXService()).thenReturn(svcDao);
        when(svcDao.findByName("svc")).thenReturn(null);
        when(restErrorUtil.createRESTException(any(VXResponse.class))).thenThrow(new RuntimeException("bad"));
        RuntimeException ex = assertThrows(RuntimeException.class, () -> svc.validateForCreate(v));
        assertEquals("bad", ex.getMessage());
    }

    @Test
    public void test2_mapViewToEntityBean_resolvesServiceAndZone() {
        RangerDataShare v = new RangerDataShare();
        v.setService("svc");
        v.setZone("zone1");
        XXService xs = new XXService();
        xs.setId(9L);
        xs.setName("svc");
        XXSecurityZone xz = new XXSecurityZone();
        xz.setId(3L);
        xz.setName("zone1");
        XXServiceDao      svcDao  = mock(XXServiceDao.class);
        XXSecurityZoneDao zoneDao = mock(XXSecurityZoneDao.class);
        when(daoMgr.getXXService()).thenReturn(svcDao);
        when(daoMgr.getXXSecurityZoneDao()).thenReturn(zoneDao);
        when(svcDao.findByName("svc")).thenReturn(xs);
        when(zoneDao.findByZoneName("zone1")).thenReturn(xz);

        org.apache.ranger.entity.XXGdsDataShare x = new org.apache.ranger.entity.XXGdsDataShare();
        svc.mapViewToEntityBean(v, x, RangerBaseModelService.OPERATION_CREATE_CONTEXT);
        org.junit.jupiter.api.Assertions.assertEquals(Long.valueOf(9L), x.getServiceId());
        org.junit.jupiter.api.Assertions.assertEquals(Long.valueOf(3L), x.getZoneId());
    }
}
