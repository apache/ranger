/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.common.db.RangerTransactionSynchronizationAdapter;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXGroupUserDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXGroupUser;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.ugsyncutil.model.GroupUserInfo;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupUserService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXGroupUserServiceGroupUserMappingUpdator {
    @InjectMocks
    XGroupUserService svc;

    @Mock
    RangerDaoManager                        daoMgr;
    @Mock
    BaseDao<XXGroupUser>                    entityDao;
    @Mock
    RangerTransactionSynchronizationAdapter txAdapter;

    @Test
    public void testCreateOrDeleteXGroupUsersSchedulesCreateAndDelete() {
        GroupUserInfo info = new GroupUserInfo();
        info.setGroupName("group1");
        info.setAddUsers(new HashSet<>(Collections.singletonList("u1")));
        info.setDelUsers(new HashSet<>(Collections.singletonList("u2")));

        XXGroupDao xGroupDao = mock(XXGroupDao.class);
        XXGroup    xg        = new XXGroup();
        xg.setId(5L);
        when(daoMgr.getXXGroup()).thenReturn(xGroupDao);
        when(xGroupDao.findByGroupName("group1")).thenReturn(xg);

        XXGroupUserDao xGroupUserDao = mock(XXGroupUserDao.class);
        when(daoMgr.getXXGroupUser()).thenReturn(xGroupUserDao);
        when(xGroupUserDao.findUsersByGroupName("group1")).thenReturn(Collections.emptyMap());

        XXPortalUserDao xPortalUserDao = mock(XXPortalUserDao.class);
        when(daoMgr.getXXPortalUser()).thenReturn(xPortalUserDao);
        XXPortalUser u = new XXPortalUser();
        u.setId(1L);
        when(xPortalUserDao.getById(1L)).thenReturn(u);

        when(entityDao.create(any(XXGroupUser.class))).thenAnswer(inv -> inv.getArgument(0));

        doAnswer(inv -> {
            Runnable r = inv.getArgument(0);
            r.run();
            return null;
        })
                .when(txAdapter).executeOnTransactionCommit(any(Runnable.class));

        // inject the mocked BaseDao into service
        BaseDao<XXGroupUser> previousDao = svc.entityDao;
        svc.entityDao = entityDao;
        try {
            svc.transactionSynchronizationAdapter = txAdapter;
            Map<String, Long> users = new HashMap<>();
            users.put("u1", 11L);
            users.put("u2", 22L);
            svc.createOrDeleteXGroupUsers(info, users);
            verify(entityDao).create(any(XXGroupUser.class));
        } finally {
            svc.entityDao = previousDao;
        }
    }
}
