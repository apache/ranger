/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.entity.XXGroupGroup;
import org.apache.ranger.view.VXGroupGroup;
import org.apache.ranger.view.VXGroupGroupList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupGroupServiceBase
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXGroupGroupServiceBase {
    @Test
    public void mapViewToEntityBean_mapsFields() {
        TestSvc      svc = new TestSvc();
        VXGroupGroup v   = new VXGroupGroup();
        v.setName("team");
        v.setParentGroupId(1L);
        v.setGroupId(2L);
        XXGroupGroup x = new XXGroupGroup();
        x = svc.callMapViewToEntityBean(v, x);
        assertEquals("team", x.getName());
        assertEquals(1L, x.getParentGroupId());
        assertEquals(2L, x.getGroupId());
    }

    @Test
    public void mapEntityToViewBean_mapsFields() {
        TestSvc      svc = new TestSvc();
        XXGroupGroup x   = new XXGroupGroup();
        x.setName("team");
        x.setParentGroupId(3L);
        x.setGroupId(4L);
        VXGroupGroup v = new VXGroupGroup();
        v = svc.callMapEntityToViewBean(v, x);
        assertEquals("team", v.getName());
        assertEquals(3L, v.getParentGroupId());
        assertEquals(4L, v.getGroupId());
    }

    @Test
    public void searchXGroupGroups_emptyList() {
        TestSvc        svc      = Mockito.spy(new TestSvc());
        SearchCriteria criteria = new SearchCriteria();
        Mockito.doReturn(java.util.Collections.emptyList()).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        VXGroupGroupList list = svc.searchXGroupGroups(criteria);
        assertTrue(list.getVXGroupGroups().isEmpty());
    }

    @Test
    public void searchXGroupGroups_mapsResults() {
        TestSvc                      svc      = Mockito.spy(new TestSvc());
        SearchCriteria               criteria = new SearchCriteria();
        XXGroupGroup                 x        = new XXGroupGroup();
        java.util.List<XXGroupGroup> results  = Collections.singletonList(x);
        VXGroupGroup                 vOut     = new VXGroupGroup();
        vOut.setName("g");
        Mockito.doReturn(results).when(svc).searchResources(Mockito.eq(criteria), Mockito.anyList(), Mockito.anyList(), Mockito.any());
        Mockito.doReturn(vOut).when(svc).populateViewBean(x);
        VXGroupGroupList list = svc.searchXGroupGroups(criteria);
        assertEquals(1, list.getVXGroupGroups().size());
        assertEquals("g", list.getVXGroupGroups().get(0).getName());
    }

    static class TestSvc extends XGroupGroupServiceBase<XXGroupGroup, VXGroupGroup> {
        @Override
        protected void validateForCreate(VXGroupGroup vObj)                         {}

        @Override
        protected void validateForUpdate(VXGroupGroup vObj, XXGroupGroup entityObj) {}

        XXGroupGroup callMapViewToEntityBean(VXGroupGroup v, XXGroupGroup x) {
            return super.mapViewToEntityBean(v, x, 0);
        }

        VXGroupGroup callMapEntityToViewBean(VXGroupGroup v, XXGroupGroup x) {
            return super.mapEntityToViewBean(v, x);
        }
    }
}
