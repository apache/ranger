/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXTrxLogV2Dao;
import org.apache.ranger.entity.XXTrxLogV2;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.apache.ranger.view.VXTrxLogV2;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerTrxLogV2Service
 */

public class TestRangerTrxLogV2Service {
    @InjectMocks
    private RangerTrxLogV2Service svc = new RangerTrxLogV2Service();

    @Mock private RangerDaoManager daoManager;
    @Mock private XXTrxLogV2Dao    xxTrxLogV2Dao;
    @Mock private SearchUtil       searchUtil;
    @Mock private EntityManager    em;
    @Mock private Query            query;

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
        when(daoManager.getXXTrxLogV2()).thenReturn(xxTrxLogV2Dao);
        when(daoManager.getEntityManager()).thenReturn(em);
        when(searchUtil.createSearchQuery(eq(em), anyString(), any(), any(SearchCriteria.class), anyList(), eq(false), anyBoolean())).thenReturn(query);
        RangerContextHolder.setSecurityContext(new RangerSecurityContext());
    }

    @Test
    void testFindByTransactionId_nonAdmin_returnsAll() {
        when(xxTrxLogV2Dao.findByTransactionId("t-1")).thenReturn(Arrays.asList(new XXTrxLogV2(), new XXTrxLogV2()));
        List<VXTrxLogV2> ret = svc.findByTransactionId("t-1");
        assertNotNull(ret);
        assertEquals(2, ret.size());
    }

    @Test
    void testCreateReadUpdateDelete_flow() {
        VXTrxLogV2 v = new VXTrxLogV2();
        XXTrxLogV2 x = new XXTrxLogV2();
        x.setId(9L);
        when(xxTrxLogV2Dao.create(any(XXTrxLogV2.class))).thenReturn(x);
        when(xxTrxLogV2Dao.getById(9L)).thenReturn(x);
        when(xxTrxLogV2Dao.update(any(XXTrxLogV2.class))).thenReturn(x);
        when(xxTrxLogV2Dao.remove(9L)).thenReturn(true);

        VXTrxLogV2 created = svc.createResource(v);
        assertNotNull(created);

        VXTrxLogV2 read = svc.readResource(9L);
        assertNotNull(read);

        VXTrxLogV2 updated = svc.updateResource(v);
        assertNotNull(updated);

        assertTrue(svc.deleteResource(9L));
    }

    @Test
    void testApplyKeyAdminAccessFilters_populatesParams() {
        org.apache.ranger.entity.XXPortalUser u1 = new org.apache.ranger.entity.XXPortalUser();
        u1.setId(1L);
        org.apache.ranger.entity.XXPortalUser u2 = new org.apache.ranger.entity.XXPortalUser();
        u2.setId(2L);
        org.apache.ranger.db.XXPortalUserDao portalDao = mock(org.apache.ranger.db.XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        when(portalDao.findByRole(anyString())).thenReturn(new java.util.ArrayList<>(java.util.Arrays.asList(u1, u2)));

        org.apache.ranger.db.XXServiceDefDao svcDefDao = mock(org.apache.ranger.db.XXServiceDefDao.class);
        when(daoManager.getXXServiceDef()).thenReturn(svcDefDao);
        org.apache.ranger.entity.XXServiceDef sd = new org.apache.ranger.entity.XXServiceDef();
        sd.setId(5L);
        when(svcDefDao.findByName(anyString())).thenReturn(sd);

        org.apache.ranger.db.XXServiceDao svcDao = mock(org.apache.ranger.db.XXServiceDao.class);
        when(daoManager.getXXService()).thenReturn(svcDao);
        org.apache.ranger.entity.XXService s1 = new org.apache.ranger.entity.XXService();
        s1.setId(100L);
        org.apache.ranger.entity.XXService s2 = new org.apache.ranger.entity.XXService();
        s2.setId(200L);
        when(svcDao.findByServiceDefId(5L)).thenReturn(java.util.Arrays.asList(s1, s2));

        java.util.Map<String, Object> params = new java.util.HashMap<>();
        String                        clause = svc.applyKeyAdminAccessFilters(params);
        assertNotNull(clause);
        assertTrue(params.containsKey("addedByUserId"));
        assertTrue(params.containsKey("parentObjectName"));
        assertTrue(params.containsKey("parentObjectId"));
    }

    @Test
    void testGetValidTrxLogsForKeyAdminAndAuditor_trueWhenMatches() {
        org.apache.ranger.entity.XXPortalUser u = new org.apache.ranger.entity.XXPortalUser();
        u.setId(11L);
        org.apache.ranger.db.XXPortalUserDao portalDao = mock(org.apache.ranger.db.XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        when(portalDao.findByRole(anyString())).thenReturn(java.util.Collections.singletonList(u));
        org.apache.ranger.db.XXServiceDefDao svcDefDao = mock(org.apache.ranger.db.XXServiceDefDao.class);
        when(daoManager.getXXServiceDef()).thenReturn(svcDefDao);
        when(svcDefDao.findByName(anyString())).thenReturn(null);

        XXTrxLogV2 log = new XXTrxLogV2();
        log.setAddedByUserId(11L);
        log.setParentObjectName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_KMS_NAME);
    }
}
