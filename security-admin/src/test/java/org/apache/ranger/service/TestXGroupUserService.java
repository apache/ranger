/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.service;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.common.db.BaseDao;
import org.apache.ranger.common.db.RangerTransactionSynchronizationAdapter;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXGroupUserDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXGroupUser;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.ugsyncutil.model.GroupUserInfo;
import org.apache.ranger.view.VXGroupUser;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import static org.apache.ranger.service.RangerBaseModelService.OPERATION_CREATE_CONTEXT;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupUserService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXGroupUserService {
    @InjectMocks
    XGroupUserService xGroupUserService;

    @Mock
    RangerDaoManager daoManager;

    @Mock
    XXGroupUserDao xXGroupUserDao;

    @Mock
    XXGroupDao xXGroupDao;

    @Mock
    XXDBBase gjObj;

    @Mock
    XXPortalUserDao xXPortalUserDao;

    @Mock
    XXPortalUser tUser;

    @Mock
    XXUserDao xXUserDao;

    @InjectMocks
    XGroupUserService svc;

    @Mock
    BaseDao<XXGroupUser>                    entityDao;
    @Mock
    RangerTransactionSynchronizationAdapter txAdapter;

    @Test
    public void test1CreateXGroupUserWithOutLogin() {
        XXGroupUser resource = createXXGroupUser();
        Mockito.when(daoManager.getXXGroupUser()).thenReturn(xXGroupUserDao);
        Mockito.when(xXGroupUserDao.findByGroupNameAndUserId(resource.getName(), resource.getId()))
                .thenReturn(resource);
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup     xGroup      = createXXGroup();
        VXGroupUser vxGroupUser = createVXGroupUser();
        Mockito.when(xXGroupDao.findByGroupName(vxGroupUser.getName())).thenReturn(xGroup);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.getById(vxGroupUser.getId())).thenReturn(tUser);
        Mockito.when(entityDao.update(resource)).thenReturn(resource);
        xGroupUserService.createXGroupUserWithOutLogin(vxGroupUser);
    }

    @Test
    public void test2GetTransactionLog() {
        // ensure bizUtil is available to avoid NPE inside createTransactionLog
        xGroupUserService.bizUtil = mock(RangerBizUtil.class);

        VXGroupUser vXGroupUser = createVXGroupUser();
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup xGroup = createXXGroup();
        Mockito.when(xXGroupDao.getById(1L)).thenReturn(xGroup);
        Mockito.when(daoManager.getXXUser()).thenReturn(xXUserDao);
        XXUser xUser = createXXUser();
        Mockito.when(xXUserDao.getById(1L)).thenReturn(xUser);
        xGroupUserService.createTransactionLog(vXGroupUser, null, OPERATION_CREATE_CONTEXT);
    }

    @Test
    public void test3GetTransactionLog() {
        // ensure bizUtil is available to avoid NPE inside createTransactionLog
        xGroupUserService.bizUtil = mock(RangerBizUtil.class);

        VXGroupUser vObj = createVXGroupUser();
        Mockito.when(daoManager.getXXGroup()).thenReturn(xXGroupDao);
        XXGroup xGroup = createXXGroup();
        Mockito.when(xXGroupDao.getById(1L)).thenReturn(xGroup);
        Mockito.when(daoManager.getXXUser()).thenReturn(xXUserDao);
        XXUser xUser = createXXUser();
        Mockito.when(xXUserDao.getById(1L)).thenReturn(xUser);
        xGroupUserService.createTransactionLog(vObj, null, OPERATION_CREATE_CONTEXT);
    }

    @Test
    public void createOrDeleteXGroupUsers_schedulesCreateAndDelete() {
        GroupUserInfo info = new GroupUserInfo();
        info.setGroupName("group1");
        info.setAddUsers(new HashSet<>(Collections.singletonList("u1")));
        info.setDelUsers(new HashSet<>(Collections.singletonList("u2")));

        XXGroupDao xGroupDao = mock(XXGroupDao.class);
        XXGroup    xg        = new XXGroup();
        xg.setId(5L);
        // use the same daoManager mock that is injected into service
        when(daoManager.getXXGroup()).thenReturn(xGroupDao);
        when(xGroupDao.findByGroupName("group1")).thenReturn(xg);

        XXGroupUserDao xGroupUserDao = mock(XXGroupUserDao.class);
        when(daoManager.getXXGroupUser()).thenReturn(xGroupUserDao);
        when(xGroupUserDao.findUsersByGroupName("group1")).thenReturn(Collections.emptyMap());

        XXPortalUserDao xPortalUserDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(xPortalUserDao);
        XXPortalUser u = new XXPortalUser();
        u.setId(1L);
        when(xPortalUserDao.getById(1L)).thenReturn(u);

        when(entityDao.create(any(XXGroupUser.class))).thenAnswer(inv -> inv.getArgument(0));

        doAnswer(inv -> {
            Runnable r = inv.getArgument(0);
            r.run();
            return null;
        })
                .when(txAdapter).executeOnTransactionCommit(any(Runnable.class));

        // inject the mocked BaseDao into service
        BaseDao<XXGroupUser> previousDao = svc.entityDao;
        svc.entityDao = entityDao;
        try {
            svc.transactionSynchronizationAdapter = txAdapter;
            Map<String, Long> users = new HashMap<>();
            users.put("u1", 11L);
            users.put("u2", 22L);
            svc.createOrDeleteXGroupUsers(info, users);
            verify(entityDao).create(any(XXGroupUser.class));
        } finally {
            svc.entityDao = previousDao;
        }
    }

    private XXGroup createXXGroup() {
        XXGroup xXGroup = new XXGroup();
        Date    date    = new Date();
        xXGroup.setAddedByUserId(1L);
        xXGroup.setCreateTime(date);
        xXGroup.setCredStoreId(1L);
        xXGroup.setDescription("this is test description");
        xXGroup.setGroupSource(0);
        xXGroup.setGroupType(1);
        xXGroup.setId(1L);
        xXGroup.setIsVisible(1);
        xXGroup.setName("testName");
        xXGroup.setUpdateTime(date);

        return xXGroup;
    }

    private VXGroupUser createVXGroupUser() {
        VXGroupUser vxGroupUser = new VXGroupUser();
        Date        date        = new Date();
        vxGroupUser.setCreateDate(date);
        vxGroupUser.setId(1L);
        vxGroupUser.setMObj(gjObj);
        vxGroupUser.setName("testGroupUser");
        vxGroupUser.setOwner("admin");
        vxGroupUser.setParentGroupId(1L);
        vxGroupUser.setUpdateDate(date);
        vxGroupUser.setUpdatedBy("admin");
        vxGroupUser.setUserId(1L);
        return vxGroupUser;
    }

    private XXGroupUser createXXGroupUser() {
        XXGroupUser xXGroupUser = new XXGroupUser();
        xXGroupUser.setAddedByUserId(1L);
        Date date = new Date();
        xXGroupUser.setCreateTime(date);
        xXGroupUser.setId(1L);
        xXGroupUser.setName("testGroupUser");
        xXGroupUser.setParentGroupId(1L);
        xXGroupUser.setUpdatedByUserId(1L);
        xXGroupUser.setUpdateTime(date);
        xXGroupUser.setUserId(1L);
        return xXGroupUser;
    }

    private XXUser createXXUser() {
        XXUser xUser = new XXUser();
        xUser.setAddedByUserId(1L);
        Date date = new Date();
        xUser.setCreateTime(date);
        xUser.setCredStoreId(1L);
        xUser.setDescription("this is test xUser");
        xUser.setId(1L);
        xUser.setIsVisible(1);
        xUser.setName("testUser");
        xUser.setStatus(1);
        xUser.setUpdatedByUserId(1L);
        xUser.setUpdateTime(date);
        return xUser;
    }
}
