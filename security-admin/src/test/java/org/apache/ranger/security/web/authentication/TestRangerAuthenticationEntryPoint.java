/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.web.authentication;

import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.AuthenticationException;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerAuthenticationEntryPoint class>
*/
@ExtendWith(MockitoExtension.class)
public class TestRangerAuthenticationEntryPoint {
    @InjectMocks
    private RangerAuthenticationEntryPoint entryPoint = new RangerAuthenticationEntryPoint("/login.jsp");

    @Mock
    private JSONUtil jsonUtil;
    @Mock
    private HttpServletRequest      request;
    @Mock
    private HttpServletResponse     response;
    @Mock
    private AuthenticationException authException;

    private StringWriter responseBuffer;

    @BeforeEach
    public void setup() throws Exception {
        responseBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(responseBuffer));
        PropertiesUtil.getPropertiesMap().put("ranger.servlet.mapping.url.pattern", "service");
    }

    @Test
    public void testCommence_AJAX_Writes419AndReturns() throws IOException, ServletException {
        when(request.getHeader("X-Requested-With")).thenReturn("XMLHttpRequest");
        when(request.getRequestURI()).thenReturn("/service/plugins/policies");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Session Timeout\"}");

        entryPoint.commence(request, response, authException);

        verify(response).setStatus(RangerAuthenticationEntryPoint.SC_AUTHENTICATION_TIMEOUT);
        assertThat(responseBuffer.toString(), containsString("Session Timeout"));
        verify(response, never()).sendError(anyInt(), anyString());
    }

    @Test
    public void testCommence_NonAJAX_UnauthorizedJson() throws IOException, ServletException {
        when(request.getHeader("X-Requested-With")).thenReturn(null);
        when(request.getRequestURI()).thenReturn("/service/plugins/policies");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Authentication Failed\"}");

        entryPoint.commence(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("Authentication Failed"));
    }

    @Test
    public void testCommence_AjaxHeaderIgnoreCase_triggersSendErrorAfterJson() throws IOException, ServletException {
        StringWriter localBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(localBuffer));
        PropertiesUtil.getPropertiesMap().put("ranger.servlet.mapping.url.pattern", "service");

        when(request.getHeader("X-Requested-With")).thenReturn("xmlhttprequest");
        when(request.getRequestURI()).thenReturn("/service/plugins/policies");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Authentication Failed\"}");

        entryPoint.commence(request, response, authException);

        verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, "");
        assertThat(localBuffer.toString(), containsString("Authentication Failed"));
    }

    @Test
    public void testCommence_NonAjax_LocalLogin_setsAttributesAndCallsParent() throws IOException, ServletException {
        StringWriter localBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(localBuffer));
        PropertiesUtil.getPropertiesMap().put("ranger.servlet.mapping.url.pattern", "service");

        HttpSession     session = Mockito.mock(HttpSession.class);
        ServletContext  context = Mockito.mock(ServletContext.class);
        when(request.getSession()).thenReturn(session);
        when(request.getServletContext()).thenReturn(context);
        when(request.getContextPath()).thenReturn("");
        when(request.getScheme()).thenReturn("http");
        when(request.getServerName()).thenReturn("localhost");
        when(request.getServerPort()).thenReturn(80);
        when(session.getId()).thenReturn("sid");

        when(request.getHeader("X-Requested-With")).thenReturn(null);
        when(request.getRequestURI()).thenReturn("/locallogin");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Authentication Failed\"}");

        entryPoint.commence(request, response, authException);

        verify(session).setAttribute("locallogin", "true");
        verify(context).setAttribute("sid", "locallogin");
    }

    @Test
    public void testCommence_NonAjax_NotService_NoLocalLogin_doesNotSendError() throws IOException, ServletException {
        StringWriter localBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(localBuffer));
        PropertiesUtil.getPropertiesMap().put("ranger.servlet.mapping.url.pattern", "service");

        when(request.getHeader("X-Requested-With")).thenReturn(null);
        when(request.getRequestURI()).thenReturn("/home");
        when(request.getContextPath()).thenReturn("");
        when(request.getScheme()).thenReturn("http");
        when(request.getServerName()).thenReturn("localhost");
        when(request.getServerPort()).thenReturn(80);
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Authentication Failed\"}");

        entryPoint.commence(request, response, authException);

        verify(response, never()).sendError(anyInt(), anyString());
    }
}
