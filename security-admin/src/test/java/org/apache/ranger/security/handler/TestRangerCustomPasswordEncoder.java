/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.handler;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.codec.Hex;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerCustomPasswordEncoder class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerCustomPasswordEncoder {
    @Test
    public void encode_withSha256AndSalt_producesExpectedHex() throws NoSuchAlgorithmException {
        String salt = "user";
        String raw  = "password";

        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder(salt, "SHA-256");
        String                      actual  = encoder.encode(raw);

        String        salted   = raw + "{" + salt + "}";
        MessageDigest digest   = MessageDigest.getInstance("SHA-256");
        String        expected = new String(Hex.encode(digest.digest(salted.getBytes(StandardCharsets.UTF_8))));

        assertEquals(expected, actual);
    }

    @Test
    public void matches_returnsTrueForCorrectPassword() {
        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder("salt", "MD5");
        String                      encoded = encoder.encode("secret");

        assertTrue(encoder.matches("secret", encoded));
        assertFalse(encoder.matches("wrong", encoded));
    }

    @Test
    public void encode_withNullSalt_hashesPlainText() throws NoSuchAlgorithmException {
        String                      raw     = "abc";
        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder(null, "MD5");
        String                      actual  = encoder.encode(raw);

        MessageDigest digest   = MessageDigest.getInstance("MD5");
        String        expected = new String(Hex.encode(digest.digest(raw.getBytes(StandardCharsets.UTF_8))));

        assertEquals(expected, actual);
    }

    @Test
    public void encode_withUnsupportedAlgorithm_throwsRuntimeException() {
        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder("salt", "SHA-999");
        RuntimeException            ex      = assertThrows(RuntimeException.class, () -> encoder.encode("pwd"));
        assertTrue(ex.getMessage().contains("Algorithm SHA-999 not supported"));
    }

    @Test
    public void mergeTextAndSalt_nullInputs_and_withSalt() throws Exception {
        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder(null, "MD5");
        Method m = RangerCustomPasswordEncoder.class.getDeclaredMethod("mergeTextAndSalt", CharSequence.class, Object.class, boolean.class);
        m.setAccessible(true);

        String merged1 = (String) m.invoke(encoder, null, null, false);
        assertEquals("", merged1);

        String merged2 = (String) m.invoke(encoder, "a", "b", false);
        assertEquals("a{b}", merged2);
    }

    @Test
    public void mergeTextAndSalt_strictTrue_rejectsBracesInSalt() throws Exception {
        RangerCustomPasswordEncoder encoder = new RangerCustomPasswordEncoder("{salt}", "MD5");
        Method m = RangerCustomPasswordEncoder.class.getDeclaredMethod("mergeTextAndSalt", CharSequence.class, Object.class, boolean.class);
        m.setAccessible(true);

        assertThrows(IllegalArgumentException.class, () -> {
            try {
                m.invoke(encoder, "x", "{bad}", true);
            } catch (InvocationTargetException ite) {
                throw ite.getCause();
            }
        });
    }
}
