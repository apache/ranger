/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.handler;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
* @generated by Cursor
* @description <Unit Test for TestPermission class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPermission {
    @Test
    public void getPermission_mapsStringsToEnum() {
        assertEquals(Permission.PermissionType.CREATE, Permission.getPermission("CREATE"));
        assertEquals(Permission.PermissionType.READ, Permission.getPermission("READ"));
        assertEquals(Permission.PermissionType.UPDATE, Permission.getPermission("UPDATE"));
        assertEquals(Permission.PermissionType.DELETE, Permission.getPermission("DELETE"));
    }

    @Test
    public void getPermission_returnsNullForUnknown() {
        assertNull(Permission.getPermission("EXECUTE"));
        assertNull(Permission.getPermission(""));
    }

    @Test
    public void getPermission_acceptsNonStringInputs() {
        Object in = new Object() {
            @Override
            public String toString() {
                return "READ";
            }
        };
        assertEquals(Permission.PermissionType.READ, Permission.getPermission(in));
    }

    @Test
    public void enum_containsExpectedValuesAndValueOfWorks() {
        assertArrayEquals(new Permission.PermissionType[] {Permission.PermissionType.CREATE, Permission.PermissionType.READ, Permission.PermissionType.UPDATE, Permission.PermissionType.DELETE}, Permission.PermissionType.values());
        assertEquals(Permission.PermissionType.CREATE, Permission.PermissionType.valueOf("CREATE"));
        assertEquals(Permission.PermissionType.READ, Permission.PermissionType.valueOf("READ"));
        assertEquals(Permission.PermissionType.UPDATE, Permission.PermissionType.valueOf("UPDATE"));
        assertEquals(Permission.PermissionType.DELETE, Permission.PermissionType.valueOf("DELETE"));
    }
}
