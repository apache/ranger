/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.security.web.filter;

import org.apache.ranger.common.PropertiesUtil;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.MDC;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerMDCFilter class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerMDCFilter {
    @Test
    public void testRequestContainRequestIdHeader() throws ServletException, IOException {
        HttpServletRequest  mockReq   = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse mockRes   = Mockito.mock(HttpServletResponse.class);
        FilterChain         mockChain = Mockito.mock(FilterChain.class);
        RangerMDCFilter     filter    = new RangerMDCFilter();

        filter.doFilter(mockReq, mockRes, mockChain);

        Mockito.verify(mockChain).doFilter(mockReq, mockRes);
    }

    @Test
    public void testRequestNotContainRequestIdHeader() throws ServletException, IOException {
        HttpServletRequest  mockReq   = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse mockRes   = Mockito.mock(HttpServletResponse.class);
        FilterChain         mockChain = Mockito.mock(FilterChain.class);
        RangerMDCFilter     filter    = new RangerMDCFilter();

        filter.doFilter(mockReq, mockRes, mockChain);

        Mockito.verify(mockChain).doFilter(mockReq, mockRes);
    }

    @Test
    public void testInitAndDoFilter_enabled_setsAndClearsMDC() throws Exception {
        PropertiesUtil.getPropertiesMap().put("ranger.admin.mdc-filter.enabled", "true");
        PropertiesUtil.getPropertiesMap().put("ranger.admin.mdc-filter.requestHeader.name", "x-request-id");
        PropertiesUtil.getPropertiesMap().put("ranger.admin.mdc-filter.mdcKey", "RID");

        RangerMDCFilter filter = new RangerMDCFilter();
        FilterConfig config = mock(FilterConfig.class);
        filter.init(config);

        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getHeader("x-request-id")).thenReturn("abc-123");

        ServletResponse response = mock(ServletResponse.class);

        FilterChain chain = new FilterChain() {
            @Override
            public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {
                assertEquals("abc-123", MDC.get("RID"));
            }
        };

        filter.doFilter(request, response, chain);

        assertNull(MDC.get("RID"));
    }

    @Test
    public void testDoFilter_disabled_bypasses() throws Exception {
        PropertiesUtil.getPropertiesMap().put("ranger.admin.mdc-filter.enabled", "false");

        RangerMDCFilter filter = new RangerMDCFilter();
        filter.init(mock(FilterConfig.class));

        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletResponse response = mock(ServletResponse.class);

        FilterChain chain = new FilterChain() {
            @Override
            public void doFilter(ServletRequest req, ServletResponse res) {
                // MDC should not be set
                assertNull(MDC.get(RangerMDCFilter.DEFAULT_MDC_KEY));
            }
        };

        filter.doFilter(request, response, chain);
    }
}
