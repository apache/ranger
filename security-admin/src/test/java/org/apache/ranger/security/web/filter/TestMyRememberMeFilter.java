/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.security.web.filter;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.RememberMeServices;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
 * @generated by Cursor
 * @description <Unit Test for TestMyRememberMeFilter class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestMyRememberMeFilter {
    private MyRememberMeFilter createFilter() {
        AuthenticationManager authenticationManager = Mockito.mock(AuthenticationManager.class);
        RememberMeServices rememberMeServices = Mockito.mock(RememberMeServices.class);
        return new MyRememberMeFilter(authenticationManager, rememberMeServices);
    }

    @Test
    public void testDoFilterSetsXFrameOptions() throws IOException, ServletException {
        MyRememberMeFilter filter = createFilter();
        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        FilterChain chain = Mockito.mock(FilterChain.class);

        filter.doFilter(req, res, chain);

        verify(res, atLeastOnce()).setHeader("X-Frame-Options", "DENY");
        verify(chain, times(1)).doFilter(any(ServletRequest.class), any(ServletResponse.class));
    }

    @Test
    public void testOnSuccessfulAuthenticationSetsHeader() {
        MyRememberMeFilter filter = createFilter();
        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        Authentication auth = Mockito.mock(Authentication.class);

        filter.onSuccessfulAuthentication(req, res, auth);

        verify(res, atLeastOnce()).setHeader("X-Frame-Options", "DENY");
    }

    @Test
    public void testOnUnsuccessfulAuthenticationSetsHeader() {
        MyRememberMeFilter filter = createFilter();
        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        AuthenticationException ex = Mockito.mock(AuthenticationException.class);

        filter.onUnsuccessfulAuthentication(req, res, ex);

        verify(res, atLeastOnce()).setHeader("X-Frame-Options", "DENY");
    }
}
