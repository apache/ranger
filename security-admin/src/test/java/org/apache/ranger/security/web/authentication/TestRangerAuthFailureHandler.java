/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.web.authentication;

import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.context.WebApplicationContext;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Locale;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerAuthFailureHandler class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAuthFailureHandler {
    @InjectMocks
    private RangerAuthFailureHandler handler = new RangerAuthFailureHandler();

    @Mock
    private JSONUtil jsonUtil;
    @Mock
    private HttpServletRequest      request;
    @Mock
    private HttpServletResponse     response;
    @Mock
    private AuthenticationException authException;
    @Mock
    private HttpSession             httpSession;
    @Mock
    private ServletContext          servletContext;

    private StringWriter responseBuffer;

    @BeforeEach
    public void setup() throws Exception {
        responseBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(responseBuffer));
        when(request.getSession()).thenReturn(httpSession);
        when(httpSession.getServletContext()).thenReturn(servletContext);
    }

    @Test
    public void testOnAuthenticationFailure_dbError() {
        when(authException.getMessage()).thenReturn("Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Unable to connect to DB.\"}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("Unable to connect to DB"));
    }

    @Test
    public void testOnAuthenticationFailure_commLinkFailure() {
        when(authException.getMessage()).thenReturn("Communications link failure");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"Unable to connect to DB.\"}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("Unable to connect to DB"));
    }

    @Test
    public void testOnAuthenticationFailure_genericMessage_setsUnauthorized() {
        when(authException.getMessage()).thenReturn("some other error");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"statusCode\":401}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    }

    @Test
    public void testOnAuthenticationFailure_badCredentials_message() throws Exception {
        WebApplicationContext appCtx = Mockito.mock(WebApplicationContext.class);
        when(servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)).thenReturn(appCtx);
        when(appCtx.getMessage(eq("AbstractUserDetailsAuthenticationProvider.badCredentials"), any(Object[].class), any(Locale.class)))
                .thenReturn("badCredMsg");
        when(authException.getMessage()).thenReturn("badCredMsg");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"The username or password you entered is incorrect.\"}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("incorrect"));
    }

    @Test
    public void testOnAuthenticationFailure_disabled_message() throws Exception {
        WebApplicationContext appCtx = Mockito.mock(WebApplicationContext.class);
        when(servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)).thenReturn(appCtx);
        when(appCtx.getMessage(eq("AbstractUserDetailsAuthenticationProvider.disabled"), any(Object[].class), any(Locale.class)))
                .thenReturn("disabledMsg");
        when(authException.getMessage()).thenReturn("disabledMsg");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"The username or password you entered is disabled.\"}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("disabled"));
    }

    @Test
    public void testOnAuthenticationFailure_locked_message() throws Exception {
        WebApplicationContext appCtx = Mockito.mock(WebApplicationContext.class);
        when(servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)).thenReturn(appCtx);
        when(appCtx.getMessage(eq("AbstractUserDetailsAuthenticationProvider.locked"), any(Object[].class), any(Locale.class)))
                .thenReturn("lockedMsg");
        when(authException.getMessage()).thenReturn("lockedMsg");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"msgDesc\":\"The user account is locked.\"}");

        handler.onAuthenticationFailure(request, response, authException);

        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        assertThat(responseBuffer.toString(), containsString("locked"));
    }
}
