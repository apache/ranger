/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.security.web.filter;

import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.context.SecurityContextHolder;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for TestRangerJwtAuthWrapper class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerJwtAuthWrapper {
    @AfterEach
    public void tearDown() {
        SecurityContextHolder.clearContext();
        RangerContextHolder.resetSecurityContext();
        RangerContextHolder.resetOpContext();
        PropertiesUtil.getPropertiesMap().remove("ranger.sso.enabled");
    }

    @Test
    public void testDoFilter_redirectsToLoginForBrowserWhenNotAuthenticated() throws IOException, ServletException {
        System.setProperty("ranger.default.browser-useragents", "Mozilla,Chrome,Opera");
        SecurityContextHolder.clearContext();
        PropertiesUtil.getPropertiesMap().put("ranger.sso.enabled", "false");

        RangerJwtAuthWrapper wrapper = Mockito.spy(new RangerJwtAuthWrapper());
        wrapper.initialize();
        RangerJwtAuthFilter jwtFilter = Mockito.mock(RangerJwtAuthFilter.class);
        wrapper.rangerJwtAuthFilter = jwtFilter;

        // Set context with SSO disabled
        RangerSecurityContext context = new RangerSecurityContext();
        UserSessionBase sessionBase = new UserSessionBase();
        sessionBase.setSSOEnabled(Boolean.FALSE);
        context.setUserSession(sessionBase);
        RangerContextHolder.setSecurityContext(context);

        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        FilterChain chain = Mockito.mock(FilterChain.class);

        when(req.getHeader("User-Agent")).thenReturn("Mozilla/5.0");
        doNothing().when(res).sendRedirect(any(String.class));

        // Ensure canAuthenticateRequest evaluates true by stubbing Authorization header
        when(req.getHeader("Authorization")).thenReturn("Bearer sometoken");

        wrapper.doFilter(req, res, chain);

        verify(jwtFilter, times(1)).doFilter(any(ServletRequest.class), any(ServletResponse.class),
                any(FilterChain.class));
        verify(res, atLeastOnce()).sendRedirect(any(String.class));
        verify(chain, times(1)).doFilter(req, res);
    }

    @Test
    public void testDoFilter_skipsJwtWhenSsoEnabled() throws IOException, ServletException {
        System.setProperty("ranger.default.browser-useragents", "Mozilla,Chrome,Opera");

        RangerJwtAuthWrapper wrapper = Mockito.spy(new RangerJwtAuthWrapper());
        wrapper.initialize();
        RangerJwtAuthFilter jwtFilter = Mockito.mock(RangerJwtAuthFilter.class);
        wrapper.rangerJwtAuthFilter = jwtFilter;

        // SSO enabled in context
        RangerSecurityContext context = new RangerSecurityContext();
        UserSessionBase sessionBase = new UserSessionBase();
        sessionBase.setSSOEnabled(Boolean.TRUE);
        context.setUserSession(sessionBase);
        RangerContextHolder.setSecurityContext(context);

        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);
        FilterChain chain = Mockito.mock(FilterChain.class);

        wrapper.doFilter(req, res, chain);

        verify(jwtFilter, never()).doFilter(any(ServletRequest.class), any(ServletResponse.class), any(FilterChain.class));
        verify(chain, times(1)).doFilter(req, res);
    }
}
