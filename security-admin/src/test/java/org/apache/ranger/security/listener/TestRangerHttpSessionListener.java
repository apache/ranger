/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.security.listener;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionEvent;

import java.util.concurrent.CopyOnWriteArrayList;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerHttpSessionListener class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHttpSessionListener {
    @Test
    public void test01_getActiveSessionOnServer_returnsSameBackedList() {
        // ensure clean state
        CopyOnWriteArrayList<HttpSession> sessions = RangerHttpSessionListener.getActiveSessionOnServer();
        sessions.clear();

        Assertions.assertNotNull(sessions);
        Assertions.assertEquals(0, sessions.size());
    }

    @Test
    public void test02_sessionCreated_addsSession() {
        RangerHttpSessionListener.getActiveSessionOnServer().clear();

        RangerHttpSessionListener listener = new RangerHttpSessionListener();
        HttpSession session = Mockito.mock(HttpSession.class);
        HttpSessionEvent event = new HttpSessionEvent(session);

        listener.sessionCreated(event);

        CopyOnWriteArrayList<HttpSession> sessions = RangerHttpSessionListener.getActiveSessionOnServer();
        Assertions.assertEquals(1, sessions.size());
        Assertions.assertTrue(sessions.contains(session));
    }

    @Test
    public void test03_sessionDestroyed_removesExistingSession() {
        CopyOnWriteArrayList<HttpSession> sessions = RangerHttpSessionListener.getActiveSessionOnServer();
        sessions.clear();

        RangerHttpSessionListener listener = new RangerHttpSessionListener();
        HttpSession session = Mockito.mock(HttpSession.class);
        HttpSessionEvent event = new HttpSessionEvent(session);

        listener.sessionCreated(event);
        Assertions.assertTrue(sessions.contains(session));

        listener.sessionDestroyed(event);
        Assertions.assertFalse(sessions.contains(session));
        Assertions.assertEquals(0, sessions.size());
    }

    @Test
    public void test04_sessionDestroyed_whenListEmpty_noError() {
        RangerHttpSessionListener.getActiveSessionOnServer().clear();

        RangerHttpSessionListener listener = new RangerHttpSessionListener();
        HttpSession session = Mockito.mock(HttpSession.class);
        HttpSessionEvent event = new HttpSessionEvent(session);

        // should not throw
        listener.sessionDestroyed(event);

        Assertions.assertEquals(0, RangerHttpSessionListener.getActiveSessionOnServer().size());
    }
}
