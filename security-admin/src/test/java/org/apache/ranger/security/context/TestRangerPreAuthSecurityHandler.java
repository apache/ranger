/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.security.context;

import org.apache.ranger.biz.SessionMgr;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.common.UserSessionBase.RangerUserPermission;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerPreAuthSecurityHandler class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPreAuthSecurityHandler {
    private static void setCurrentUserSession(UserSessionBase userSession) {
        RangerSecurityContext ctx = new RangerSecurityContext();
        ctx.setUserSession(userSession);
        RangerContextHolder.setSecurityContext(ctx);
    }

    @Test
    public void test01_isAPIAccessible_nullMethod_returnsFalse() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();

        Assertions.assertFalse(handler.isAPIAccessible((String) null));
    }

    @Test
    public void test02_isAPIAccessible_noUserSession_returnsFalse() {
        RangerContextHolder.resetSecurityContext();
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = new RangerAPIMapping();

        Assertions.assertFalse(handler.isAPIAccessible("SomeAPI"));
    }

    @Test
    public void test03_isAPIAccessible_userAdmin_returnsTrue() {
        UserSessionBase user = new UserSessionBase();
        user.setUserAdmin(true);
        setCurrentUserSession(user);

        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = new RangerAPIMapping();

        Assertions.assertTrue(handler.isAPIAccessible("AnyAPI"));
    }

    @Test
    public void test04_isAPIAccessible_emptyAssociatedTabs_returnsTrue() {
        UserSessionBase user = new UserSessionBase();
        setCurrentUserSession(user);

        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = Mockito.mock(RangerAPIMapping.class);

        Mockito.when(handler.rangerAPIMapping.getAssociatedTabsWithAPI("NoTabsAPI")).thenReturn(Collections.emptySet());

        Assertions.assertTrue(handler.isAPIAccessible("NoTabsAPI"));
    }

    @Test
    public void test05_isAPIAccessible_permissionsTab_withAuditUserAdmin_returnsTrue() {
        UserSessionBase user = new UserSessionBase();
        user.setAuditUserAdmin(true);
        setCurrentUserSession(user);

        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = Mockito.mock(RangerAPIMapping.class);

        Set<String> tabs = new HashSet<>();
        tabs.add(RangerAPIMapping.TAB_PERMISSIONS);
        Mockito.when(handler.rangerAPIMapping.getAssociatedTabsWithAPI("PermAPI")).thenReturn(tabs);

        Assertions.assertTrue(handler.isAPIAccessible("PermAPI"));
    }

    @Test
    public void test06_isAPIAccessible_withAccessibleModule_returnsTrue() {
        UserSessionBase user = new UserSessionBase();
        RangerUserPermission rup = new RangerUserPermission();
        CopyOnWriteArraySet<String> modules = new CopyOnWriteArraySet<>();
        modules.add(RangerAPIMapping.TAB_AUDIT);
        rup.setUserPermissions(modules);
        user.setRangerUserPermission(rup);
        setCurrentUserSession(user);

        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = Mockito.mock(RangerAPIMapping.class);

        Set<String> tabs = new HashSet<>();
        tabs.add(RangerAPIMapping.TAB_AUDIT);
        Mockito.when(handler.rangerAPIMapping.getAssociatedTabsWithAPI("AuditAPI")).thenReturn(tabs);

        Mockito.doNothing().when(handler.sessionMgr).refreshPermissionsIfNeeded(ArgumentMatchers.eq(user));

        Assertions.assertTrue(handler.isAPIAccessible("AuditAPI"));
    }

    @Test
    public void test07_isAPIAccessible_throwsWhenNotAccessible() {
        UserSessionBase user = new UserSessionBase();
        RangerUserPermission rup = new RangerUserPermission();
        CopyOnWriteArraySet<String> modules = new CopyOnWriteArraySet<>();
        modules.add(RangerAPIMapping.TAB_AUDIT);
        rup.setUserPermissions(modules);
        user.setRangerUserPermission(rup);
        setCurrentUserSession(user);

        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.sessionMgr = Mockito.mock(SessionMgr.class);
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);
        handler.rangerAPIMapping = Mockito.mock(RangerAPIMapping.class);

        Set<String> tabs = new HashSet<>();
        tabs.add(RangerAPIMapping.TAB_PERMISSIONS);
        Mockito.when(handler.rangerAPIMapping.getAssociatedTabsWithAPI("PermAPI")).thenReturn(tabs);

        WebApplicationException ex = new WebApplicationException();
        Mockito.when(handler.restErrorUtil.generateRESTException(ArgumentMatchers.any())).thenReturn(ex);

        Assertions.assertThrows(WebApplicationException.class, () -> handler.isAPIAccessible("PermAPI"));
    }

    @Test
    public void test08_isAPISpnegoAccessible_trueForSpnegoEnabled_orAdmins() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        UserSessionBase spnego = new UserSessionBase();
        spnego.setSpnegoEnabled(Boolean.TRUE);
        setCurrentUserSession(spnego);
        Assertions.assertTrue(handler.isAPISpnegoAccessible());

        UserSessionBase admin = new UserSessionBase();
        admin.setUserAdmin(true);
        setCurrentUserSession(admin);
        Assertions.assertTrue(handler.isAPISpnegoAccessible());

        UserSessionBase keyAdmin = new UserSessionBase();
        keyAdmin.setKeyAdmin(true);
        setCurrentUserSession(keyAdmin);
        Assertions.assertTrue(handler.isAPISpnegoAccessible());
    }

    @Test
    public void test09_isAPISpnegoAccessible_throwsWhenNotAccessible() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        WebApplicationException ex = new WebApplicationException();
        Mockito.when(handler.restErrorUtil.generateRESTException(ArgumentMatchers.any())).thenReturn(ex);

        UserSessionBase user = new UserSessionBase();
        setCurrentUserSession(user);
        Assertions.assertThrows(WebApplicationException.class, handler::isAPISpnegoAccessible);
    }

    @Test
    public void test10_isAdminOrKeyAdminRole_trueForEitherRole() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        UserSessionBase user = new UserSessionBase();
        user.setKeyAdmin(true);
        setCurrentUserSession(user);
        Assertions.assertTrue(handler.isAdminOrKeyAdminRole());

        UserSessionBase user2 = new UserSessionBase();
        user2.setUserAdmin(true);
        setCurrentUserSession(user2);
        Assertions.assertTrue(handler.isAdminOrKeyAdminRole());
    }

    @Test
    public void test11_isAdminOrKeyAdminRole_throwsWhenNotAuthorized() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        WebApplicationException ex = new WebApplicationException();
        Mockito.when(handler.restErrorUtil.generateRESTException(ArgumentMatchers.any())).thenReturn(ex);

        UserSessionBase user = new UserSessionBase();
        setCurrentUserSession(user);
        Assertions.assertThrows(WebApplicationException.class, handler::isAdminOrKeyAdminRole);
    }

    @Test
    public void test12_isAdminRole_trueForAdmin() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        UserSessionBase user = new UserSessionBase();
        user.setUserAdmin(true);
        setCurrentUserSession(user);
        Assertions.assertTrue(handler.isAdminRole());
    }

    @Test
    public void test13_isAdminRole_throwsWhenNotAdmin() {
        RangerPreAuthSecurityHandler handler = new RangerPreAuthSecurityHandler();
        handler.restErrorUtil = Mockito.mock(RESTErrorUtil.class);

        WebApplicationException ex = new WebApplicationException();
        Mockito.when(handler.restErrorUtil.generateRESTException(ArgumentMatchers.any())).thenReturn(ex);

        UserSessionBase user = new UserSessionBase();
        setCurrentUserSession(user);
        Assertions.assertThrows(WebApplicationException.class, handler::isAdminRole);
    }
}
