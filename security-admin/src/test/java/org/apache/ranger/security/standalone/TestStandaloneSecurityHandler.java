/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.security.standalone;

import org.apache.ranger.biz.SessionMgr;
import org.apache.ranger.entity.XXAuthSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.context.ApplicationContext;
import org.springframework.security.access.vote.AffirmativeBased;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.lang.reflect.Field;

/**
* @generated by Cursor
* @description <Unit Test for TestStandaloneSecurityHandler class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestStandaloneSecurityHandler {
    @Test
    public void testLoginSuccessFlow() throws Exception {
        StandaloneSecurityHandler handler = new StandaloneSecurityHandler();

        SessionMgr sessionMgr = Mockito.mock(SessionMgr.class);
        setField(handler, "sessionMgr", sessionMgr);

        ApplicationContext context = Mockito.mock(ApplicationContext.class);
        AuthenticationManager authenticationManager = Mockito.mock(AuthenticationManager.class);
        AffirmativeBased accessDecisionManager = Mockito.mock(AffirmativeBased.class);
        Authentication authenticatedToken = Mockito.mock(Authentication.class);

        Mockito.when(context.getBean(StandaloneSecurityHandler.AUTH_MANAGER_BEAN_NAME)).thenReturn(authenticationManager);
        Mockito.when(context.getBean(StandaloneSecurityHandler.ACCESS_DECISION_MANAGER_BEAN_NAME)).thenReturn(accessDecisionManager);
        Mockito.when(authenticationManager.authenticate(ArgumentMatchers.any(Authentication.class))).thenReturn(authenticatedToken);

        handler.login("alice", "secret", context);

        Mockito.verify(authenticationManager).authenticate(ArgumentMatchers.any(Authentication.class));
        Mockito.verify(accessDecisionManager).decide(ArgumentMatchers.eq(authenticatedToken), ArgumentMatchers.isNull(),
                ArgumentMatchers.anyCollection());
        Mockito.verify(sessionMgr).processStandaloneSuccessLogin(ArgumentMatchers.eq(XXAuthSession.AUTH_TYPE_PASSWORD),
                ArgumentMatchers.anyString());

        Authentication current = SecurityContextHolder.getContext().getAuthentication();
        Assertions.assertSame(authenticatedToken, current);

        // cleanup security context to avoid cross-test pollution
        SecurityContextHolder.clearContext();
    }

    private static void setField(Object target, String fieldName, Object value) throws Exception {
        Field f = target.getClass().getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }
}
