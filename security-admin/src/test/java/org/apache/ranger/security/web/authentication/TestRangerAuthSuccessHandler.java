/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.web.authentication;

import org.apache.ranger.biz.SessionMgr;
import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.entity.XXAuthSession;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.PrintWriter;
import java.io.StringWriter;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerAuthSuccessHandler class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAuthSuccessHandler {
    @InjectMocks
    private RangerAuthSuccessHandler handler = new RangerAuthSuccessHandler();

    @Mock
    private SessionMgr sessionMgr;
    @Mock
    private JSONUtil   jsonUtil;
    @Mock
    private XUserMgr   xUserMgr;
    @Mock
    private HttpServletRequest  request;
    @Mock
    private HttpServletResponse response;
    @Mock
    private Authentication      authentication;

    private StringWriter responseBuffer;

    @BeforeEach
    public void setup() throws Exception {
        responseBuffer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(responseBuffer));
        when(authentication.getName()).thenReturn("test-user");
        when(request.getHeader("User-Agent")).thenReturn("JUnit");

        // default property
        PropertiesUtil.getPropertiesMap().put("ranger.authentication.method", "NONE");
    }

    @Test
    public void testOnAuthenticationSuccess_userNotValid_writesPreconditionAndUnauthenticated() throws Exception {
        when(sessionMgr.isValidXAUser("test-user")).thenReturn(false);
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"statusCode\":412}");

        handler.onAuthenticationSuccess(request, response, authentication);

        verify(sessionMgr, times(1)).processFailureLogin(eq(XXAuthSession.AUTH_STATUS_USER_NOT_FOUND), eq(XXAuthSession.AUTH_TYPE_PASSWORD), eq("test-user"), anyString(), anyString(), eq("JUnit"));
        verify(authentication, times(1)).setAuthenticated(false);
        verify(response).setStatus(HttpServletResponse.SC_PRECONDITION_FAILED);
        assertThat(responseBuffer.toString(), containsString("412"));
    }

    @Test
    public void testOnAuthenticationSuccess_validAjax_writesOkJson() throws Exception {
        when(sessionMgr.isValidXAUser("test-user")).thenReturn(true);
        when(request.getHeader("X-Requested-With")).thenReturn("XMLHttpRequest");
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"statusCode\":200}");

        handler.onAuthenticationSuccess(request, response, authentication);

        verify(response).setStatus(HttpServletResponse.SC_OK);
        assertThat(responseBuffer.toString(), containsString("200"));
    }

    @Test
    public void testOnAuthenticationSuccess_createServiceUserWhenConfigured() throws Exception {
        // simulate property not NONE to create service config user
        PropertiesUtil.getPropertiesMap().put("ranger.authentication.method", "PASSWORD");
        when(sessionMgr.isValidXAUser("test-user")).thenReturn(false).thenReturn(true);
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"statusCode\":200}");

        handler.onAuthenticationSuccess(request, response, authentication);

        verify(xUserMgr, times(1)).createServiceConfigUser("test-user");
        verify(sessionMgr, times(2)).isValidXAUser("test-user");
        verify(response).setStatus(HttpServletResponse.SC_OK);
        assertThat(responseBuffer.toString(), containsString("200"));
    }

    @Test
    public void testOnAuthenticationSuccess_nonAjax_writesOk() throws Exception {
        when(sessionMgr.isValidXAUser("user")).thenReturn(true);
        when(jsonUtil.writeObjectAsString(any(VXResponse.class))).thenReturn("{\"statusCode\":200}");
        when(request.getHeader("X-Requested-With")).thenReturn(null);

        handler.onAuthenticationSuccess(request, response, authentication);

        verify(response).setStatus(HttpServletResponse.SC_OK);
        assertThat(responseBuffer.toString(), containsString("200"));
    }
}
