/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.security.web.filter;

import org.apache.hadoop.security.authentication.server.AuthenticationToken;
import org.apache.ranger.authz.handler.RangerAuth;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import java.io.IOException;
import java.util.Collection;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;

/**
 * @generated by Cursor
 * @description <Unit Test for TestRangerJwtAuthFilter class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerJwtAuthFilter {
    @AfterEach
    public void cleanup() {
        SecurityContextHolder.clearContext();
    }

    @Test
    public void testInit_noopDoesNotThrow() {
        RangerJwtAuthFilter filter = new RangerJwtAuthFilter();
        FilterConfig cfg = Mockito.mock(FilterConfig.class);
        assertDoesNotThrow(() -> filter.init(cfg));
    }

    @Test
    public void testDestroy_noopDoesNotThrow() {
        RangerJwtAuthFilter filter = new RangerJwtAuthFilter();
        assertDoesNotThrow(() -> filter.destroy());
    }

    @Test
    public void testInitialize_doesNotThrow() {
        RangerJwtAuthFilter filter = new RangerJwtAuthFilter();
        assertDoesNotThrow(() -> filter.initialize());
    }

    @Test
    public void testDoFilter_setsAuthenticationWhenAuthenticateSucceeds() throws ServletException, IOException {
        RangerJwtAuthFilter filter = Mockito.spy(new RangerJwtAuthFilter());

        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        ServletResponse res = Mockito.mock(ServletResponse.class);
        FilterChain chain = Mockito.mock(FilterChain.class);

        AuthenticationToken token = new AuthenticationToken("alice", "alice", "ranger-jwt");
        RangerAuth rangerAuth = new RangerAuth(token, RangerAuth.AuthType.JWT_JWKS);

        doReturn(rangerAuth).when(filter).authenticate(any(HttpServletRequest.class));

        filter.doFilter(req, res, chain);

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        assertNotNull(auth);
        assertTrue(auth.getPrincipal() instanceof User);
        User user = (User) auth.getPrincipal();
        assertEquals("alice", user.getUsername());

        Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
        assertNotNull(authorities);
        assertFalse(authorities.isEmpty());
    }

    @Test
    public void testDoFilter_leavesAuthenticationNullWhenAuthenticateReturnsNull()
            throws ServletException, IOException {
        RangerJwtAuthFilter filter = Mockito.spy(new RangerJwtAuthFilter());

        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
        ServletResponse res = Mockito.mock(ServletResponse.class);
        FilterChain chain = Mockito.mock(FilterChain.class);

        doReturn(null).when(filter).authenticate(any(HttpServletRequest.class));

        filter.doFilter(req, res, chain);

        assertNull(SecurityContextHolder.getContext().getAuthentication());
    }
}
