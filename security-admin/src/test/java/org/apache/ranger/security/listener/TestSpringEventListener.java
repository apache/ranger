/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.security.listener;

import org.apache.ranger.biz.SessionMgr;
import org.apache.ranger.entity.XXAuthSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.LockedException;
import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
import org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent;
import org.springframework.security.authentication.event.AuthenticationFailureLockedEvent;
import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

/**
* @generated by Cursor
* @description <Unit Test for TestSpringEventListener class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSpringEventListener {
    @Test
    public void test01_processSuccess_withDetails_doesNotCallFailure() {
        SpringEventListener listener = new SpringEventListener();
        SessionMgr sessionMgr = Mockito.mock(SessionMgr.class);
        listener.sessionMgr = sessionMgr;

        Authentication authentication = Mockito.mock(Authentication.class);
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getRemoteAddr()).thenReturn("10.0.0.1");
        WebAuthenticationDetails details = new WebAuthenticationDetails(request);
        Mockito.when(authentication.getDetails()).thenReturn(details);
        Mockito.when(authentication.getName()).thenReturn("alice");

        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(authentication);

        listener.process(event);

        Mockito.verify(sessionMgr, Mockito.never()).processFailureLogin(Mockito.anyInt(), Mockito.anyInt(),
                Mockito.anyString(), Mockito.any(), Mockito.any(), Mockito.any());
    }

    @Test
    public void test02_processBadCredentials_withUserAgentHeader_callsFailure() {
        SpringEventListener listener = new SpringEventListener();
        SessionMgr sessionMgr = Mockito.mock(SessionMgr.class);
        listener.sessionMgr = sessionMgr;

        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(mockRequestWithUserAgent("UA-1")));

        Authentication authentication = Mockito.mock(Authentication.class);
        Mockito.when(authentication.getDetails()).thenReturn(null);
        Mockito.when(authentication.getName()).thenReturn("bob");

        AuthenticationFailureBadCredentialsEvent event = new AuthenticationFailureBadCredentialsEvent(authentication,
                new BadCredentialsException("bad"));

        listener.process(event);

        ArgumentCaptor<Integer> status = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<Integer> type = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<String> user = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> remote = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> sessionId = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> userAgent = ArgumentCaptor.forClass(String.class);

        Mockito.verify(sessionMgr).processFailureLogin(status.capture(), type.capture(), user.capture(),
                remote.capture(), sessionId.capture(), userAgent.capture());

        Assertions.assertEquals(XXAuthSession.AUTH_STATUS_WRONG_PASSWORD, status.getValue().intValue());
        Assertions.assertEquals(XXAuthSession.AUTH_TYPE_PASSWORD, type.getValue().intValue());
        Assertions.assertEquals("bob", user.getValue());
        Assertions.assertEquals("UA-1", userAgent.getValue());

        RequestContextHolder.resetRequestAttributes();
    }

    @Test
    public void test03_processLocked_withDetailsAndUserAgent_callsFailure() {
        SpringEventListener listener = new SpringEventListener();
        SessionMgr sessionMgr = Mockito.mock(SessionMgr.class);
        listener.sessionMgr = sessionMgr;

        HttpServletRequest req = mockRequestWithUserAgent("UA-2");
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(req));

        Authentication authentication = Mockito.mock(Authentication.class);
        Mockito.when(authentication.getName()).thenReturn("carol");
        WebAuthenticationDetails details = new WebAuthenticationDetails(req);
        Mockito.when(authentication.getDetails()).thenReturn(details);

        AuthenticationFailureLockedEvent event = new AuthenticationFailureLockedEvent(authentication,
                new LockedException("locked"));

        listener.process(event);

        ArgumentCaptor<Integer> status = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<Integer> type = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<String> user = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> userAgent = ArgumentCaptor.forClass(String.class);

        Mockito.verify(sessionMgr).processFailureLogin(status.capture(), type.capture(), user.capture(), Mockito.any(),
                Mockito.any(), userAgent.capture());

        Assertions.assertEquals(XXAuthSession.AUTH_STATUS_LOCKED, status.getValue().intValue());
        Assertions.assertEquals(XXAuthSession.AUTH_TYPE_PASSWORD, type.getValue().intValue());
        Assertions.assertEquals("carol", user.getValue());
        Assertions.assertEquals("UA-2", userAgent.getValue());

        RequestContextHolder.resetRequestAttributes();
    }

    @Test
    public void test04_processDisabled_withoutRequestAttributes_usesUnknownUserAgent() {
        SpringEventListener listener = new SpringEventListener();
        SessionMgr sessionMgr = Mockito.mock(SessionMgr.class);
        listener.sessionMgr = sessionMgr;

        RequestContextHolder.resetRequestAttributes();

        Authentication authentication = Mockito.mock(Authentication.class);
        Mockito.when(authentication.getDetails()).thenReturn(null);
        Mockito.when(authentication.getName()).thenReturn("dave");

        AuthenticationFailureDisabledEvent event = new AuthenticationFailureDisabledEvent(authentication,
                new DisabledException("disabled"));

        listener.process(event);

        ArgumentCaptor<Integer> status = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<Integer> type = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<String> user = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> userAgent = ArgumentCaptor.forClass(String.class);

        Mockito.verify(sessionMgr).processFailureLogin(status.capture(), type.capture(), user.capture(), Mockito.any(),
                Mockito.any(), userAgent.capture());

        Assertions.assertEquals(XXAuthSession.AUTH_STATUS_DISABLED, status.getValue().intValue());
        Assertions.assertEquals(XXAuthSession.AUTH_TYPE_PASSWORD, type.getValue().intValue());
        Assertions.assertEquals("dave", user.getValue());
        Assertions.assertEquals("Unknown", userAgent.getValue());
    }

    @Test
    public void test05_getUserAgent_withHeader() {
        SpringEventListener listener = new SpringEventListener();

        HttpServletRequest req = mockRequestWithUserAgent("Agent-X");
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(req));

        String ua = listener.getUserAgent();
        Assertions.assertEquals("Agent-X", ua);

        RequestContextHolder.resetRequestAttributes();
    }

    @Test
    public void test06_getUserAgent_withoutAttributes_returnsUnknown() {
        SpringEventListener listener = new SpringEventListener();
        RequestContextHolder.resetRequestAttributes();
        Assertions.assertEquals("Unknown", listener.getUserAgent());
    }

    @Test
    public void test07_onApplicationEvent_dispatchesAndCatchesExceptions() {
        class ThrowingSpringEventListener extends SpringEventListener {
            @Override
            protected void process(AuthenticationSuccessEvent authSuccessEvent) {
                throw new RuntimeException("boom");
            }
        }

        SpringEventListener listener = new ThrowingSpringEventListener();
        Authentication authentication = Mockito.mock(Authentication.class);
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(authentication);

        // should not propagate exception
        listener.onApplicationEvent(event);
    }

    private static HttpServletRequest mockRequestWithUserAgent(String userAgent) {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getHeader("User-Agent")).thenReturn(userAgent);

        return request;
    }
}
