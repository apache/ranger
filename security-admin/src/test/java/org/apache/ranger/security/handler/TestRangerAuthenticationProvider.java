/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.security.handler;

import org.apache.ranger.biz.SessionMgr;
import org.apache.ranger.biz.UserMgr;
import org.apache.ranger.common.PropertiesUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.ldap.authentication.LdapAuthenticator;
import org.springframework.security.provisioning.JdbcUserDetailsManager;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerAuthenticationProvider class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAuthenticationProvider {
    private RangerAuthenticationProvider provider;
    private UserMgr                      userMgr;
    private SessionMgr                   sessionMgr;
    private JdbcUserDetailsManager       userDetailsManager;

    @BeforeEach
    public void setUp() throws Exception {
        provider           = new RangerAuthenticationProvider();
        userMgr            = mock(UserMgr.class);
        sessionMgr         = mock(SessionMgr.class);
        userDetailsManager = mock(JdbcUserDetailsManager.class);

        provider.userMgr    = userMgr;
        provider.sessionMgr = sessionMgr;
        setPrivateField(provider, "userDetailsService", userDetailsManager);

        PropertiesUtil.getPropertiesMap().clear();
    }

    @Test
    public void supports_usernamePasswordToken() {
        assertTrue(provider.supports(UsernamePasswordAuthenticationToken.class));
        assertFalse(provider.supports(Authentication.class));
    }

    @Test
    public void authenticate_jdbc_sha256_success() {
        String username = "alice";
        String rawPwd   = "pwd";
        String encoded  = new RangerCustomPasswordEncoder(username, "SHA-256").encode(rawPwd);

        when(sessionMgr.isLoginIdLocked(username)).thenReturn(false);
        when(userDetailsManager.loadUserByUsername(username))
                .thenReturn(User.withUsername(username).password(encoded).roles("USER").build());

        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken(username, rawPwd);
        Authentication                      result = provider.authenticate(input);

        assertNotNull(result);
        assertTrue(result.isAuthenticated());
        assertEquals(username, ((UserDetails) result.getPrincipal()).getUsername());
    }

    @Test
    public void authenticate_jdbc_md5_fallback_updatesPassword() {
        String username = "bob";
        String rawPwd   = "secret";
        String md5Enc   = new RangerCustomPasswordEncoder(username, "MD5").encode(rawPwd);

        when(sessionMgr.isLoginIdLocked(username)).thenReturn(false);
        when(userDetailsManager.loadUserByUsername(username))
                .thenReturn(User.withUsername(username).password(md5Enc).roles("USER").build());

        PropertiesUtil.getPropertiesMap().put("ranger.sha256Password.update.disable", "false");

        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken(username, rawPwd);
        try {
            Authentication result = provider.authenticate(input);
            assertNotNull(result);
            assertTrue(result.isAuthenticated());
        } finally {
            ArgumentCaptor<String> userCaptor = ArgumentCaptor.forClass(String.class);
            ArgumentCaptor<String> pwdCaptor  = ArgumentCaptor.forClass(String.class);
            verify(userMgr, atLeastOnce()).updatePasswordInSHA256(userCaptor.capture(), pwdCaptor.capture(), eq(false));
            assertEquals(username, userCaptor.getValue());
            assertEquals(rawPwd, pwdCaptor.getValue());
        }
    }

    @Test
    public void getAuthenticationWithGrantedAuthority_usesRolesFromUserMgr() {
        when(userMgr.getRolesByLoginId("carol")).thenReturn(Arrays.asList("ROLE_A", "ROLE_B"));

        UsernamePasswordAuthenticationToken input =
                new UsernamePasswordAuthenticationToken(
                        new User("carol", "x", Collections.emptyList()),
                        "x",
                        Collections.singletonList(new SimpleGrantedAuthority("ROLE_PRE")));

        Authentication out = provider.getAuthenticationWithGrantedAuthority(input);
        assertInstanceOf(UsernamePasswordAuthenticationToken.class, out);
        Collection<? extends GrantedAuthority> auths = out.getAuthorities();
        assertEquals(2, auths.size());
        assertTrue(auths.stream().anyMatch(a -> a.getAuthority().equals("ROLE_A")));
        assertTrue(auths.stream().anyMatch(a -> a.getAuthority().equals("ROLE_B")));
    }

    @Test
    public void settersAndGetters_work() {
        provider.setRangerAuthenticationMethod("LDAP");
        assertEquals("LDAP", provider.getRangerAuthenticationMethod());

        LdapAuthenticator authenticator = mock(LdapAuthenticator.class);
        provider.setAuthenticator(authenticator);
        assertSame(authenticator, provider.getAuthenticator());

        provider.setSsoEnabled(true);
        assertTrue(provider.isSsoEnabled());
    }

    @Test
    public void ssoEnabled_authenticateReturnsSameToken() {
        provider.setSsoEnabled(true);
        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken("u", "p");
        Authentication                      result = provider.authenticate(input);
        assertSame(input, result);
    }

    @Test
    public void getADAuthentication_skipsWhenNoPassword() {
        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken("u", "");
        Authentication                      result = provider.getADAuthentication(input);
        assertSame(input, result);
    }

    @Test
    public void getPamAuthentication_skipsWhenNoPassword() {
        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken("u", "");
        Authentication                      result = provider.getPamAuthentication(input);
        assertSame(input, result);
    }

    @Test
    public void getUnixAuthentication_skipsWhenNoPassword() {
        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken("u", "");
        Authentication                      result = provider.getUnixAuthentication(input);
        assertSame(input, result);
    }

    @Test
    public void getLdapAuthentication_skipsWhenNoPassword() throws Exception {
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("u", "");
        Method                              m     = provider.getClass().getDeclaredMethod("getLdapAuthentication", Authentication.class);
        m.setAccessible(true);
        Authentication result = (Authentication) m.invoke(provider, input);
        assertSame(input, result);
    }

    @Test
    public void getADBindAuthentication_skipsWhenNoPassword() throws Exception {
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("u", "");
        Method                              m     = provider.getClass().getDeclaredMethod("getADBindAuthentication", Authentication.class);
        m.setAccessible(true);
        Authentication result = (Authentication) m.invoke(provider, input);
        assertSame(input, result);
    }

    @Test
    public void getLdapBindAuthentication_skipsWhenNoPassword() throws Exception {
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("u", "");
        Method                              m     = provider.getClass().getDeclaredMethod("getLdapBindAuthentication", Authentication.class);
        m.setAccessible(true);
        Authentication result = (Authentication) m.invoke(provider, input);
        assertSame(input, result);
    }

    @Test
    public void getADAuthentication_withCredentials_handlesFailureGracefully() {
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.url", "ldap://127.0.0.1:0");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.domain", "example.com");
        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken("user", "pass");
        Authentication                      result = provider.getADAuthentication(input);
        assertNotNull(result);
    }

    @Test
    public void getLdapAuthentication_withStartTlsAndGroupProps_handlesFailureGracefully() throws Exception {
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.url", "ldap://127.0.0.1:0");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.user.dnpattern", "uid={0}");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.searchbase", "ou=groups,dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.searchfilter", "(member={0})");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.roleattribute", "cn");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.starttls", "true");

        Method m = provider.getClass().getDeclaredMethod("getLdapAuthentication", Authentication.class);
        m.setAccessible(true);
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("user", "pass");
        Authentication result = (Authentication) m.invoke(provider, input);
        assertNotNull(result);
    }

    @Test
    public void getADBindAuthentication_withEmptyFilter_usesDefaultAndHandlesFailure() throws Exception {
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.url", "ldap://127.0.0.1:0");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.base.dn", "dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.bind.dn", "cn=admin,dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.bind.password", "secret");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.ad.user.searchfilter", " ");

        Method m = provider.getClass().getDeclaredMethod("getADBindAuthentication", Authentication.class);
        m.setAccessible(true);
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("user", "pass");
        Authentication result = (Authentication) m.invoke(provider, input);
        assertNotNull(result);
    }

    @Test
    public void getLdapBindAuthentication_withProps_handlesFailureGracefully() throws Exception {
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.url", "ldap://127.0.0.1:0");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.user.dnpattern", "uid={0}");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.searchbase", "ou=groups,dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.searchfilter", "(member={0})");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.group.roleattribute", "cn");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.base.dn", "dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.bind.dn", "cn=admin,dc=example,dc=com");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.bind.password", "secret");
        PropertiesUtil.getPropertiesMap().put("ranger.ldap.user.searchfilter", "(uid={0})");

        Method m = provider.getClass().getDeclaredMethod("getLdapBindAuthentication", Authentication.class);
        m.setAccessible(true);
        UsernamePasswordAuthenticationToken input = new UsernamePasswordAuthenticationToken("user", "pass");
        Authentication result = (Authentication) m.invoke(provider, input);
        assertNotNull(result);
    }

    @Test
    public void authenticate_activeDirectory_thenJdbc_successful() {
        provider.setRangerAuthenticationMethod("ACTIVE_DIRECTORY");
        String username = "dave";
        String rawPwd   = "pw";
        String encoded  = new RangerCustomPasswordEncoder(username, "SHA-256").encode(rawPwd);
        when(sessionMgr.isLoginIdLocked(username)).thenReturn(false);
        when(userDetailsManager.loadUserByUsername(username))
                .thenReturn(User.withUsername(username).password(encoded).roles("USER").build());

        UsernamePasswordAuthenticationToken input  = new UsernamePasswordAuthenticationToken(username, rawPwd);
        Authentication                      result = provider.authenticate(input);

        assertNotNull(result);
        assertTrue(result.isAuthenticated());
    }

    private static void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field f = target.getClass().getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }
}
