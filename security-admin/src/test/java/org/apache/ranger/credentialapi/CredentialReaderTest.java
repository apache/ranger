/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.credentialapi;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.security.alias.CredentialProvider;
import org.apache.hadoop.security.alias.CredentialProviderFactory;
import org.apache.hadoop.security.alias.JavaKeyStoreProvider;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

import static org.apache.hadoop.security.alias.CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for CredentialReader
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class CredentialReaderTest {
    @Test
    public void returnsNull_whenPathOrAliasIsNullOrEmpty() {
        assertNull(CredentialReader.getDecryptedString(null, "alias", null));
        assertNull(CredentialReader.getDecryptedString("path", null, null));
        assertNull(CredentialReader.getDecryptedString("  ", "alias", null));
        assertNull(CredentialReader.getDecryptedString("path", "   ", null));
    }

    @Test
    public void usesProvidedSchemeAsIs_whenPathPrefixedWithSupportedSchemes() {
        AtomicReference<Configuration> captured = new AtomicReference<>();

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenAnswer(inv -> {
                        Configuration conf = inv.getArgument(0);
                        captured.set(conf);
                        return Collections.emptyList();
                    });

            assertNull(CredentialReader.getDecryptedString("jceks://file/var/ks.jceks", "a", null));
            assertEquals("jceks://file/var/ks.jceks", captured.get().get(CREDENTIAL_PROVIDER_PATH));

            assertNull(CredentialReader.getDecryptedString("localjceks://file/var/ks.jceks", "a", null));
            assertEquals("localjceks://file/var/ks.jceks", captured.get().get(CREDENTIAL_PROVIDER_PATH));

            assertNull(CredentialReader.getDecryptedString("bcfks://file/var/ks.bcfks", "a", null));
            assertEquals("bcfks://file/var/ks.bcfks", captured.get().get(CREDENTIAL_PROVIDER_PATH));

            assertNull(CredentialReader.getDecryptedString("localbcfks://file/var/ks.bcfks", "a", null));
            assertEquals("localbcfks://file/var/ks.bcfks", captured.get().get(CREDENTIAL_PROVIDER_PATH));
        }
    }

    @Test
    public void wrapsAbsolutePathWithJceksScheme_whenStoreTypeIsNotBcfks() {
        AtomicReference<Configuration> captured = new AtomicReference<>();

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenAnswer(inv -> {
                        Configuration conf = inv.getArgument(0);
                        captured.set(conf);
                        return Collections.emptyList();
                    });

            String input = "/var/opt/ks.jceks";
            assertNull(CredentialReader.getDecryptedString(input, "a", null));
            assertEquals(JavaKeyStoreProvider.SCHEME_NAME + "://file" + input, captured.get().get(CREDENTIAL_PROVIDER_PATH));
        }
    }

    @Test
    public void usesAbsolutePathAsIs_whenStoreTypeIsBcfks() {
        AtomicReference<Configuration> captured = new AtomicReference<>();

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenAnswer(inv -> {
                        Configuration conf = inv.getArgument(0);
                        captured.set(conf);
                        return Collections.emptyList();
                    });

            String input = "/var/opt/ks.bcfks";
            assertNull(CredentialReader.getDecryptedString(input, "a", "bcfks"));
            assertEquals(input, captured.get().get(CREDENTIAL_PROVIDER_PATH));
        }
    }

    @Test
    public void wrapsRelativePathWithJceksScheme() {
        AtomicReference<Configuration> captured = new AtomicReference<>();

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenAnswer(inv -> {
                        Configuration conf = inv.getArgument(0);
                        captured.set(conf);
                        return Collections.emptyList();
                    });

            String input = "conf/ks.jceks";
            assertNull(CredentialReader.getDecryptedString(input, "a", null));
            assertEquals(JavaKeyStoreProvider.SCHEME_NAME + "://file/" + input, captured.get().get(CREDENTIAL_PROVIDER_PATH));
        }
    }

    @Test
    public void returnsCredential_whenAliasFound_caseInsensitive() throws Exception {
        CredentialProvider provider = mock(CredentialProvider.class);
        @SuppressWarnings("unchecked")
        List<String> aliases = Collections.singletonList("secret_alias");
        when(provider.getAliases()).thenReturn(aliases);

        CredentialProvider.CredentialEntry entry = mock(CredentialProvider.CredentialEntry.class);
        when(entry.getCredential()).thenReturn("s3cr3t".toCharArray());
        when(provider.getCredentialEntry("secret_alias")).thenReturn(entry);

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenReturn(Collections.singletonList(provider));

            String value = CredentialReader.getDecryptedString("jceks://file/var/ks.jceks", "SeCrEt_AlIaS", null);
            assertEquals("s3cr3t", value);
        }
    }

    @Test
    public void returnsNull_whenAliasMissing_orEmptyCredential() throws Exception {
        CredentialProvider provider1 = mock(CredentialProvider.class);
        when(provider1.getAliases()).thenReturn(Collections.singletonList("another"));

        CredentialProvider provider2 = mock(CredentialProvider.class);
        when(provider2.getAliases()).thenReturn(Collections.singletonList("found"));
        CredentialProvider.CredentialEntry emptyEntry = mock(CredentialProvider.CredentialEntry.class);
        when(emptyEntry.getCredential()).thenReturn(new char[0]);
        when(provider2.getCredentialEntry("found")).thenReturn(emptyEntry);

        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenReturn(Arrays.asList(provider1, provider2));

            String value = CredentialReader.getDecryptedString("jceks://file/var/ks.jceks", "notfound", null);
            assertNull(value);

            value = CredentialReader.getDecryptedString("jceks://file/var/ks.jceks", "found", null);
            assertNull(value);
        }
    }

    @Test
    public void returnsNull_whenExceptionThrown() {
        try (MockedStatic<CredentialProviderFactory> mocked = mockStatic(CredentialProviderFactory.class)) {
            mocked.when(() -> CredentialProviderFactory.getProviders(any(Configuration.class)))
                    .thenThrow(new RuntimeException("boom"));

            String out = CredentialReader.getDecryptedString("jceks://file/var/ks.jceks", "alias", null);
            assertNull(out);
        }
    }
}
