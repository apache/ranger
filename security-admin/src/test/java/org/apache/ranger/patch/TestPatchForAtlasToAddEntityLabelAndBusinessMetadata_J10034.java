/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAccessTypeDefDao;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.db.XXServiceConfigMapDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXAccessTypeDef;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceConfigMap;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testAddResourceEntityLabelAndEntityBusinessMetadataInServiceDef_success() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerResourceDef> resources = new ArrayList<>();
            RangerServiceDef.RangerResourceDef r = new RangerServiceDef.RangerResourceDef();
            r.setName("entity-label");
            resources.add(r);
            embedded.setResources(resources);
            List<RangerServiceDef.RangerAccessTypeDef> ats = new ArrayList<>();
            RangerServiceDef.RangerAccessTypeDef a = new RangerServiceDef.RangerAccessTypeDef();
            a.setName("entity-add-label");
            ats.add(a);
            embedded.setAccessTypes(ats);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString()))
                    .thenReturn(new XXServiceDef());

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);

            Method m = PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034.class
                    .getDeclaredMethod("addResourceEntityLabelAndEntityBusinessMetadataInServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(svcStore, Mockito.times(1)).updateServiceDef(Mockito.any(RangerServiceDef.class));
        }
    }

    @Test
    public void testAddResourceEntityLabelAndEntityBusinessMetadataInServiceDef_retNull_throws() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setResources(new ArrayList<>());
            embedded.setAccessTypes(new ArrayList<>());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString()))
                    .thenReturn(new XXServiceDef());

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(null);

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);

            Method m = PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034.class
                    .getDeclaredMethod("addResourceEntityLabelAndEntityBusinessMetadataInServiceDef");
            m.setAccessible(true);
            Assertions.assertThrows(RuntimeException.class, () -> {
                try {
                    m.invoke(patch);
                } catch (Exception e) {
                    throw (RuntimeException) e.getCause();
                }
            });
        }
    }

    @Test
    public void testAddResourceEntityLabelAndEntityBusinessMetadataInServiceDef_embeddedNull_noAction()
            throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);

            Method m = PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034.class
                    .getDeclaredMethod("addResourceEntityLabelAndEntityBusinessMetadataInServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(daoMgr, Mockito.never()).getXXServiceDef();
            Mockito.verify(svcStore, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testAddResourceEntityLabelAndEntityBusinessMetadataInServiceDef_serviceDefMissing_returns()
            throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setResources(new ArrayList<>());
            embedded.setAccessTypes(new ArrayList<>());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);

            Method m = PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034.class
                    .getDeclaredMethod("addResourceEntityLabelAndEntityBusinessMetadataInServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(svcStore, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testCreateDefaultPolicyForEntityLabelAndEntityBusinessMetadata_branching() throws Exception {
        PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034 patch = new PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        XXResourceDefDao xResDao = Mockito.mock(XXResourceDefDao.class);
        XXAccessTypeDefDao xAccDao = Mockito.mock(XXAccessTypeDefDao.class);
        XXPortalUserDao xPortalDao = Mockito.mock(XXPortalUserDao.class);
        XXServiceConfigMapDao xCfgDao = Mockito
                .mock(XXServiceConfigMapDao.class);

        setIfPresent(patch, "daoMgr", daoMgr);

        // service-def missing -> return
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

        Method m = PatchForAtlasToAddEntityLabelAndBusinessMetadata_J10034.class
                .getDeclaredMethod("createDefaultPolicyForEntityLabelAndEntityBusinessMetadata");
        m.setAccessible(true);
        m.invoke(patch);

        // service-def present, no existing special policies -> should create two
        // policies (label + business-metadata)
        XXServiceDef sd = new XXServiceDef();
        sd.setId(5L);
        Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(sd);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        XXService svc = new XXService();
        svc.setId(10L);
        svc.setName("atlas1");
        svc.setAddedByUserId(100L);
        List<XXService> services = new ArrayList<>();
        services.add(svc);
        Mockito.when(xxServiceDao.findByServiceDefId(Mockito.eq(5L)))
                .thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        Mockito.when(xxPolicyDao.findByServiceId(Mockito.eq(10L))).thenReturn(new ArrayList<>());

        // stub resource and access-type lookups used for policy construction
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(xResDao);
        Mockito.when(xResDao.findByNameAndServiceDefId(Mockito.anyString(), Mockito.eq(5L))).thenAnswer(inv -> {
            String name = inv.getArgument(0);
            XXResourceDef rd = new XXResourceDef();
            rd.setName(name);
            return rd;
        });
        Mockito.when(daoMgr.getXXAccessTypeDef()).thenReturn(xAccDao);
        Mockito.when(xAccDao.findByNameAndServiceId(Mockito.anyString(), Mockito.eq(10L))).thenAnswer(inv -> {
            String name = inv.getArgument(0);
            XXAccessTypeDef at = new XXAccessTypeDef();
            at.setName(name);
            return at;
        });

        // users resolution from service creator and config-map username
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xPortalDao);
        XXPortalUser creator = new XXPortalUser();
        creator.setLoginId("creator");
        Mockito.when(xPortalDao.getById(Mockito.eq(100L))).thenReturn(creator);
        Mockito.when(daoMgr.getXXServiceConfigMap()).thenReturn(xCfgDao);
        XXServiceConfigMap cfg = new XXServiceConfigMap();
        cfg.setConfigvalue("user1");
        Mockito.when(xCfgDao.findByServiceNameAndConfigKey(Mockito.eq("atlas1"), Mockito.eq("username")))
                .thenReturn(cfg);
        XXPortalUser cfgUser = new XXPortalUser();
        cfgUser.setLoginId("user1");
        Mockito.when(xPortalDao.findByLoginId(Mockito.eq("user1"))).thenReturn(cfgUser);

        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        GUIDUtil guidUtil = Mockito.mock(GUIDUtil.class);
        Mockito.when(guidUtil.genGUID()).thenReturn("guid");
        setIfPresent(patch, "svcDBStore", svcStore);
        setIfPresent(patch, "guidUtil", guidUtil);
        Mockito.when(svcStore.createPolicy(Mockito.any(RangerPolicy.class))).thenReturn(new RangerPolicy());

        m.invoke(patch);
        Mockito.verify(svcStore, Mockito.times(2)).createPolicy(Mockito.any(RangerPolicy.class));

        // existing both policies -> should not create any
        List<XXPolicy> existing = new ArrayList<>();
        XXPolicy p1 = new XXPolicy();
        p1.setName("all - entity-type, entity-classification, entity, entity-label");
        existing.add(p1);
        XXPolicy p2 = new XXPolicy();
        p2.setName("all - entity-type, entity-classification, entity, entity-business-metadata");
        existing.add(p2);
        Mockito.when(xxPolicyDao.findByServiceId(Mockito.eq(10L))).thenReturn(existing);

        m.invoke(patch);
        Mockito.verify(svcStore, Mockito.times(2)).createPolicy(Mockito.any(RangerPolicy.class));
    }
}
