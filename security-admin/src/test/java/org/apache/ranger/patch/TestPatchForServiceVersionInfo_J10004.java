/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceVersionInfoDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceVersionInfo;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForServiceVersionInfo_J10004 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForServiceVersionInfo_J10004 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForServiceVersionInfo_J10004 patch = new PatchForServiceVersionInfo_J10004();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.getAll()).thenReturn(Collections.emptyList());
            setIfPresent(patch, "daoManager", daoMgr);
            setIfPresent(patch, "svcDBStore", Mockito.mock(ServiceDBStore.class));
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", Mockito.mock(ServiceDBStore.class));

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testCopyVersions_createPath_setsDefaultsAndIncrements() {
        PatchForServiceVersionInfo_J10004 patch = new PatchForServiceVersionInfo_J10004();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceVersionInfoDao xxSvcVerDao = Mockito.mock(XXServiceVersionInfoDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceVersionInfo()).thenReturn(xxSvcVerDao);

        XXService svc = new XXService();
        svc.setId(5L);
        svc.setName("s");
        svc.setPolicyVersion(null);
        svc.setTagVersion(1L);
        Mockito.when(xxServiceDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        Mockito.when(xxSvcVerDao.findByServiceId(Mockito.eq(5L))).thenReturn(null);

        setIfPresent(patch, "daoManager", daoMgr);

        patch.copyVersionsFromServiceToServiceVersionInfo();

        Mockito.verify(xxSvcVerDao, Mockito.times(1)).create(Mockito.any(XXServiceVersionInfo.class));
        Mockito.verify(xxServiceDao, Mockito.times(1)).update(Mockito.argThat(updated -> updated.getPolicyVersion() != null && updated.getPolicyVersion() == 2L));
    }

    @Test
    public void testCopyVersions_updatePath_updatesExistingAndIncrements() {
        PatchForServiceVersionInfo_J10004 patch = new PatchForServiceVersionInfo_J10004();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceVersionInfoDao xxSvcVerDao = Mockito.mock(XXServiceVersionInfoDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceVersionInfo()).thenReturn(xxSvcVerDao);

        XXService svc = new XXService();
        svc.setId(6L);
        svc.setName("s2");
        svc.setPolicyVersion(10L);
        svc.setTagVersion(3L);
        Mockito.when(xxServiceDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        XXServiceVersionInfo existing = new XXServiceVersionInfo();
        existing.setServiceId(6L);
        Mockito.when(xxSvcVerDao.findByServiceId(Mockito.eq(6L))).thenReturn(existing);

        setIfPresent(patch, "daoManager", daoMgr);

        patch.copyVersionsFromServiceToServiceVersionInfo();

        Mockito.verify(xxSvcVerDao, Mockito.times(1)).update(Mockito.any(XXServiceVersionInfo.class));
        Mockito.verify(xxServiceDao, Mockito.times(1)).update(Mockito.argThat(updated -> updated.getPolicyVersion() == 11L && updated.getTagVersion() == 4L));
    }
}
