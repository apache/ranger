/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerConstants;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXModuleDefDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXPortalUserRoleDao;
import org.apache.ranger.entity.XXModuleDef;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.service.RangerPolicyService;
import org.apache.ranger.service.XPortalUserService;
import org.apache.ranger.view.VXPortalUser;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchGrantAuditPermissionToKeyRoleUser_J10014 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchGrantAuditPermissionToKeyRoleUser_J10014 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "daoManager", Mockito.mock(RangerDaoManager.class));
        setIfPresent(patch, "svcDBStore", svcStore);
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
        setIfPresent(patch, "stringUtil", new StringUtil());
        setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
        setIfPresent(patch, "svcStore", svcStore);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testExecLoad_NoModulesFound_ReturnsEarly() {
        RangerDaoManager daoManager = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao moduleDao = Mockito.mock(XXModuleDefDao.class);
        Mockito.when(daoManager.getXXModuleDef()).thenReturn(moduleDao);
        Mockito.when(moduleDao.findByModuleName(Mockito.anyString())).thenReturn(null);

        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        setIfPresent(patch, "daoManager", daoManager);

        patch.execLoad();
    }

    @Test
    public void testExecLoad_NoKeyAdminUsers() {
        RangerDaoManager daoManager = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao moduleDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoManager.getXXModuleDef()).thenReturn(moduleDao);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(userDao);
        Mockito.when(moduleDao.findByModuleName(Mockito.anyString())).thenReturn(new XXModuleDef(), new XXModuleDef());
        Mockito.when(userDao.findByRole(Mockito.eq(RangerConstants.ROLE_KEY_ADMIN)))
                .thenReturn(Collections.emptyList());

        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        setIfPresent(patch, "daoManager", daoManager);

        patch.execLoad();
    }

    @Test
    public void testExecLoad_UserUpdated_AuditOnly() {
        RangerDaoManager daoManager = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao moduleDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class);
        XXPortalUserRoleDao roleDao = Mockito.mock(XXPortalUserRoleDao.class);
        Mockito.when(daoManager.getXXModuleDef()).thenReturn(moduleDao);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(userDao);
        Mockito.when(daoManager.getXXPortalUserRole()).thenReturn(roleDao);

        XXModuleDef auditMod = new XXModuleDef();
        auditMod.setId(1L);
        auditMod.setModule("AUDIT");
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_AUDIT))).thenReturn(auditMod);
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_USER_GROUPS))).thenReturn(null);

        XXPortalUser xUser = new XXPortalUser();
        xUser.setId(5L);
        xUser.setLoginId("u1");
        List<XXPortalUser> users = new ArrayList<>();
        users.add(xUser);
        Mockito.when(userDao.findByRole(Mockito.eq(RangerConstants.ROLE_KEY_ADMIN))).thenReturn(users);
        Mockito.when(roleDao.findXPortalUserRolebyXPortalUserId(Mockito.eq(5L))).thenReturn(Collections.emptyList());

        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        VXPortalUser vUser = new VXPortalUser();
        vUser.setId(5L);
        Mockito.when(xPortalUserService.populateViewBean(Mockito.eq(xUser))).thenReturn(vUser);

        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        setIfPresent(patch, "daoManager", daoManager);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.execLoad();

        Mockito.verify(xUserMgr, Mockito.times(1)).createOrUpdateUserPermisson(Mockito.eq(vUser), Mockito.eq(1L),
                Mockito.eq(true));
    }

    @Test
    public void testExecLoad_UserUpdated_UserGroupOnly() {
        RangerDaoManager daoManager = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao moduleDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class);
        XXPortalUserRoleDao roleDao = Mockito.mock(XXPortalUserRoleDao.class);
        Mockito.when(daoManager.getXXModuleDef()).thenReturn(moduleDao);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(userDao);
        Mockito.when(daoManager.getXXPortalUserRole()).thenReturn(roleDao);

        XXModuleDef userGroupMod = new XXModuleDef();
        userGroupMod.setId(2L);
        userGroupMod.setModule("USER-GROUP");
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_AUDIT))).thenReturn(null);
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_USER_GROUPS)))
                .thenReturn(userGroupMod);

        XXPortalUser xUser = new XXPortalUser();
        xUser.setId(6L);
        xUser.setLoginId("u2");
        List<XXPortalUser> users = new ArrayList<>();
        users.add(xUser);
        Mockito.when(userDao.findByRole(Mockito.eq(RangerConstants.ROLE_KEY_ADMIN))).thenReturn(users);
        Mockito.when(roleDao.findXPortalUserRolebyXPortalUserId(Mockito.eq(6L))).thenReturn(Collections.emptyList());

        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        VXPortalUser vUser = new VXPortalUser();
        vUser.setId(6L);
        Mockito.when(xPortalUserService.populateViewBean(Mockito.eq(xUser))).thenReturn(vUser);

        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        setIfPresent(patch, "daoManager", daoManager);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.execLoad();

        Mockito.verify(xUserMgr, Mockito.times(1)).createOrUpdateUserPermisson(Mockito.eq(vUser), Mockito.eq(2L),
                Mockito.eq(true));
    }

    @Test
    public void testExecLoad_PopulateViewBeanReturnsNull_NoUpdate() {
        RangerDaoManager daoManager = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao moduleDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoManager.getXXModuleDef()).thenReturn(moduleDao);
        Mockito.when(daoManager.getXXPortalUser()).thenReturn(userDao);

        XXModuleDef auditMod = new XXModuleDef();
        auditMod.setId(3L);
        auditMod.setModule("AUDIT");
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_AUDIT))).thenReturn(auditMod);
        Mockito.when(moduleDao.findByModuleName(Mockito.eq(RangerConstants.MODULE_USER_GROUPS))).thenReturn(null);

        XXPortalUser xUser = new XXPortalUser();
        xUser.setId(7L);
        List<XXPortalUser> users = new ArrayList<>();
        users.add(xUser);
        Mockito.when(userDao.findByRole(Mockito.eq(RangerConstants.ROLE_KEY_ADMIN))).thenReturn(users);

        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        Mockito.when(xPortalUserService.populateViewBean(Mockito.eq(xUser))).thenReturn(null);

        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        PatchGrantAuditPermissionToKeyRoleUser_J10014 patch = new PatchGrantAuditPermissionToKeyRoleUser_J10014();
        setIfPresent(patch, "daoManager", daoManager);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.execLoad();

        Mockito.verifyNoInteractions(xUserMgr);
    }
}
