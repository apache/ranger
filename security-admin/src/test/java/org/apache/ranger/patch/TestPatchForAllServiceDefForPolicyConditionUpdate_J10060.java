/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForAllServiceDefForPolicyConditionUpdate_J10060 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForAllServiceDefForPolicyConditionUpdate_J10060 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            PatchForAllServiceDefForPolicyConditionUpdate_J10060 patch = new PatchForAllServiceDefForPolicyConditionUpdate_J10060();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_PropagatesUiHintAndUpdatesServiceDef() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            // Embedded service-def with existing policyCondition having uiHint
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerPolicyConditionDef> oldConds = new ArrayList<>();
            RangerServiceDef.RangerPolicyConditionDef old1 = new RangerServiceDef.RangerPolicyConditionDef();
            old1.setItemId(1L);
            old1.setUiHint("hint-1");
            oldConds.add(old1);
            embedded.setPolicyConditions(oldConds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            // DB service-def with policyConditions to be updated
            RangerServiceDef inputSvcDef = new RangerServiceDef();
            inputSvcDef.setName("svc");
            List<RangerServiceDef.RangerPolicyConditionDef> newConds = new ArrayList<>();
            RangerServiceDef.RangerPolicyConditionDef new1 = new RangerServiceDef.RangerPolicyConditionDef();
            new1.setItemId(1L); // matches old -> should get uiHint "hint-1"
            RangerServiceDef.RangerPolicyConditionDef new2 = new RangerServiceDef.RangerPolicyConditionDef();
            new2.setItemId(2L); // no match -> uiHint should remain null
            newConds.add(new1);
            newConds.add(new2);
            inputSvcDef.setPolicyConditions(newConds);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcStore.getServiceDefs(Mockito.any())).thenReturn(Collections.singletonList(inputSvcDef));
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            PatchForAllServiceDefForPolicyConditionUpdate_J10060 patch = new PatchForAllServiceDefForPolicyConditionUpdate_J10060();
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();

            Mockito.verify(svcStore, Mockito.times(1)).updateServiceDef(Mockito.any());
            // Assert uiHint propagation to matching itemId only
            Assertions.assertEquals("hint-1", inputSvcDef.getPolicyConditions().get(0).getUiHint());
            Assertions.assertNull(inputSvcDef.getPolicyConditions().get(1).getUiHint());
        }
    }

    @Test
    public void testExecLoad_NoServiceDefs_NoAction() throws Exception {
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        Mockito.when(svcStore.getServiceDefs(Mockito.any())).thenReturn(Collections.emptyList());
        PatchForAllServiceDefForPolicyConditionUpdate_J10060 patch = new PatchForAllServiceDefForPolicyConditionUpdate_J10060();
        setIfPresent(patch, "svcStore", svcStore);
        Assertions.assertDoesNotThrow(() -> patch.execLoad());
    }

    @Test
    public void testExecLoad_ServiceDefWithNoPolicyConditions_SkipsUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef def = new RangerServiceDef();
            def.setName("svc");
            def.setPolicyConditions(new ArrayList<>());
            Mockito.when(svcStore.getServiceDefs(Mockito.any())).thenReturn(Collections.singletonList(def));

            PatchForAllServiceDefForPolicyConditionUpdate_J10060 patch = new PatchForAllServiceDefForPolicyConditionUpdate_J10060();
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();

            Mockito.verify(svcStore, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testExecLoad_EmbeddedServiceDefNull_SkipsUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef def = new RangerServiceDef();
            def.setName("svc");
            List<RangerServiceDef.RangerPolicyConditionDef> newConds = new ArrayList<>();
            RangerServiceDef.RangerPolicyConditionDef c = new RangerServiceDef.RangerPolicyConditionDef();
            c.setItemId(7L);
            newConds.add(c);
            def.setPolicyConditions(newConds);
            Mockito.when(svcStore.getServiceDefs(Mockito.any())).thenReturn(Collections.singletonList(def));

            PatchForAllServiceDefForPolicyConditionUpdate_J10060 patch = new PatchForAllServiceDefForPolicyConditionUpdate_J10060();
            setIfPresent(patch, "svcStore", svcStore);

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
            Mockito.verify(svcStore, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }
}
