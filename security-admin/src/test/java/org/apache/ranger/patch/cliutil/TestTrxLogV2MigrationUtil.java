/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch.cliutil;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXTrxLogV2Dao;
import org.apache.ranger.entity.XXTrxLog;
import org.apache.ranger.entity.XXTrxLogV2;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

/**
* @generated by Cursor
* @description <Unit Test for TrxLogV2MigrationUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestTrxLogV2MigrationUtil {
    @Mock
    RangerDaoManager daoMgr;
    @Mock
    EntityManager entityManager;
    @Mock
    XXTrxLogV2Dao xXTrxLogV2Dao;
    @Mock
    TypedQuery<String> namedQuery;
    @Mock
    TypedQuery<Object[]> objectArrayNamedQuery;
    @Mock
    Query nativeQuery;
    @Mock
    PlatformTransactionManager txManager;
    @Mock
    TransactionStatus txStatus;

    @InjectMocks
    private TrxLogV2MigrationUtil util = new TrxLogV2MigrationUtil();

    @Test
    public void testCreateTrxLogAndToJsonMapping() throws Exception {
        XXTrxLog v1 = new XXTrxLog();
        v1.setId(100L);
        v1.setCreateTime(new Date());
        v1.setAddedByUserId(1L);
        v1.setObjectClassType(8);
        v1.setObjectId(5L);
        v1.setObjectName("obj");
        v1.setParentObjectClassType(0);
        v1.setParentObjectId(0L);
        v1.setParentObjectName("-");
        v1.setAttributeName("a");
        v1.setPreviousValue("b");
        v1.setNewValue("c");
        v1.setTransactionId("t1");
        v1.setAction("create");
        v1.setRequestId("req");
        v1.setSessionId("sid");
        v1.setSessionType("ui");

        Mockito.when(daoMgr.getXXTrxLogV2()).thenReturn(xXTrxLogV2Dao);
        Mockito.when(daoMgr.getEntityManager()).thenReturn(entityManager);
        Mockito.when(entityManager.createNativeQuery(Mockito.anyString())).thenReturn(nativeQuery);
        Mockito.when(nativeQuery.getResultList()).thenReturn(Collections.singletonList(1));
        Mockito.when(entityManager.createNamedQuery(Mockito.anyString(), Mockito.eq(String.class))).thenReturn(namedQuery);
        Mockito.when(entityManager.createNamedQuery(Mockito.eq("XXTrxLog.findByTrxIdForMigration"),
                Mockito.eq(Object[].class))).thenReturn(objectArrayNamedQuery);
        List<Object[]> rows = new ArrayList<>();
        rows.add(new Object[] {v1.getId(), v1.getCreateTime(), v1.getAddedByUserId(), v1.getObjectClassType(),
                v1.getObjectId(), v1.getObjectName(), v1.getParentObjectClassType(), v1.getParentObjectId(),
                v1.getParentObjectName(), v1.getAttributeName(), v1.getPreviousValue(), v1.getNewValue(),
                v1.getTransactionId(), v1.getAction(), v1.getRequestId(), v1.getSessionId(), v1.getSessionType() });
        Mockito.when(namedQuery.getResultList()).thenReturn(Collections.singletonList("t1"));
        Mockito.when(objectArrayNamedQuery.getResultList()).thenReturn(rows);
        Mockito.when(objectArrayNamedQuery.setParameter(Mockito.anyString(), Mockito.any())).thenReturn(objectArrayNamedQuery);
        Mockito.when(xXTrxLogV2Dao.findByTransactionId("t1")).thenReturn(Collections.emptyList());
        Mockito.when(txManager.getTransaction(Mockito.any())).thenReturn(txStatus);

        util.init();
        util.execLoad();

        Mockito.verify(xXTrxLogV2Dao, Mockito.atLeastOnce()).create(Mockito.any(XXTrxLogV2.class));
    }

    @Test
    public void testStats_incrementsAndLog_withValues() {
        TrxLogV2MigrationUtil.Stats stats = new TrxLogV2MigrationUtil.Stats();

        stats.incrMigratedCount(100L, new Date());
        stats.incrFailedCount();
        stats.incrAlreadyMigratedCount();

        stats.logStats();
    }

    @Test
    public void testStats_log_withoutValues() {
        TrxLogV2MigrationUtil.Stats stats = new TrxLogV2MigrationUtil.Stats();
        stats.logStats();
    }
}
