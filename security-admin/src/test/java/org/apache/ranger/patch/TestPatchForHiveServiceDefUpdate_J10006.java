/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.security.Permission;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHiveServiceDefUpdate_J10006 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHiveServiceDefUpdate_J10006 {
    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testJsonStringToMap_withJson() {
        PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
        patch.jsonUtil = new JSONUtil();
        Map<String, String> result = patch.jsonStringToMap("{\"a\":\"1\",\"b\":\"2\"}");
        Assertions.assertEquals("1", result.get("a"));
        Assertions.assertEquals("2", result.get("b"));
    }

    @Test
    public void testJsonStringToMap_withLegacyFormat() {
        PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
        patch.jsonUtil = new JSONUtil();
        Map<String, String> result = patch.jsonStringToMap("a=1;b=2;c=\n");
        Assertions.assertEquals("1", result.get("a"));
        Assertions.assertEquals("2", result.get("b"));
        Assertions.assertTrue(result.containsKey("c"));
    }

    @Test
    public void testJsonStringToMap_nullOrEmpty() {
        PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
        patch.jsonUtil = new JSONUtil();
        Assertions.assertNull(patch.jsonStringToMap(null));
        Assertions.assertNull(patch.jsonStringToMap(""));
    }

    @Test
    public void testMapToJsonString_nullMap() {
        PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
        patch.jsonUtil = new JSONUtil();
        Assertions.assertNull(getMapToJsonString(patch, null));
    }

    @Test
    public void testMapToJsonString_exceptionPath() {
        PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
        JSONUtil jsonUtil = Mockito.mock(JSONUtil.class);
        Mockito.when(jsonUtil.readMapToString(Mockito.anyMap())).thenThrow(new RuntimeException("boom"));
        patch.jsonUtil = jsonUtil;
        String res = getMapToJsonString(patch, new HashMap<String, String>());
        Assertions.assertNull(res);
    }

    @Test
    public void testUpdateHiveServiceDef_optionRestorePaths() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setDataMaskDef(new RangerServiceDef.RangerDataMaskDef());
            embedded.setRowFilterDef(new RangerServiceDef.RangerRowFilterDef());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            patch.daoMgr = daoMgr;

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            patch.svcDBStore = svcStore;
            patch.svcStore = svcStore;

            // pre-update options missing key, post has the key -> should remove/restore
            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(patch.jsonUtil.readMapToString(new HashMap<String, String>()));
            XXServiceDef xxAfter = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "true");
            xxAfter.setDefOptions(patch.jsonUtil.readMapToString(post));

            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx, xxAfter);

            RangerServiceDef db = new RangerServiceDef();
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(db);

            patch.execLoad();
            Mockito.verify(sdefDao, Mockito.atLeastOnce()).update(Mockito.any());
            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.<RangerServiceDef>any(),
                    Mockito.eq(RangerValidator.Action.UPDATE));
        }
    }

    @Test
    public void testExecLoad_UpdateReturnsNull_TriggersExitOne() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setDataMaskDef(new RangerServiceDef.RangerDataMaskDef());
            embedded.setRowFilterDef(new RangerServiceDef.RangerRowFilterDef());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForHiveServiceDefUpdate_J10006 patch = new PatchForHiveServiceDefUpdate_J10006();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
            patch.daoMgr = daoMgr;

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef db = new RangerServiceDef();
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcStore.updateServiceDef(Mockito.any(RangerServiceDef.class))).thenReturn(null);
            patch.svcDBStore = svcStore;
            patch.svcStore = svcStore;

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            patch.validatorFactory = vf;

            AtomicReference<Integer> exitStatus = new AtomicReference<>();
            SecurityManager originalSm = System.getSecurityManager();
            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    exitStatus.set(status);
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                Method m = PatchForHiveServiceDefUpdate_J10006.class.getDeclaredMethod("updateHiveServiceDef");
                m.setAccessible(true);
                try {
                    m.invoke(patch);
                } catch (Exception ignored) {
                    // SecurityException is caught inside method; ignore wrapper
                }
            } finally {
                System.setSecurityManager(originalSm);
            }

            Assertions.assertEquals(Integer.valueOf(1), exitStatus.get());
            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.any(RangerServiceDef.class),
                    Mockito.eq(RangerValidator.Action.UPDATE));
        }
    }

    private String getMapToJsonString(PatchForHiveServiceDefUpdate_J10006 patch, Map<String, String> map) {
        // use reflection helper from same package if needed; call method directly by
        // access
        try {
            Method m = PatchForHiveServiceDefUpdate_J10006.class.getDeclaredMethod("mapToJsonString", Map.class);
            m.setAccessible(true);
            return (String) m.invoke(patch, map);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
