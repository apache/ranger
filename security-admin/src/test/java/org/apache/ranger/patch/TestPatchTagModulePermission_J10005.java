/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXModuleDefDao;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXPortalUserRoleDao;
import org.apache.ranger.entity.XXModuleDef;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.service.XPortalUserService;
import org.apache.ranger.view.VXPortalUser;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchTagModulePermission_J10005 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchTagModulePermission_J10005 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao xxModuleDefDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XXPortalUserRoleDao xxPortalUserRoleDao = Mockito.mock(XXPortalUserRoleDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXModuleDef()).thenReturn(xxModuleDefDao);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(daoMgr.getXXPortalUserRole()).thenReturn(xxPortalUserRoleDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXModuleDef moduleDef = new XXModuleDef();
        moduleDef.setId(1L);
        moduleDef.setModule("tag");
        Mockito.when(xxModuleDefDao.findByModuleName(Mockito.anyString())).thenReturn(moduleDef);
        Mockito.when(xxPortalUserDao.findByRole(Mockito.anyString()))
                .thenReturn(Collections.singletonList(new XXPortalUser()));
        Mockito.when(xxPortalUserRoleDao.findXPortalUserRolebyXPortalUserId(Mockito.anyLong()))
                .thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyDao.getAll()).thenReturn(Collections.emptyList());

        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);
        Mockito.when(xPortalUserService.populateViewBean(Mockito.any(XXPortalUser.class)))
                .thenReturn(new VXPortalUser());

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testAssignPermissionOnTagModuleToAdminUsers_xModDefNull_returns() {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao xxModuleDefDao = Mockito.mock(XXModuleDefDao.class);
        Mockito.when(daoMgr.getXXModuleDef()).thenReturn(xxModuleDefDao);
        Mockito.when(xxModuleDefDao.findByModuleName(Mockito.anyString())).thenReturn(null);
        setIfPresent(patch, "daoManager", daoMgr);

        patch.assignPermissionOnTagModuleToAdminUsers();
    }

    @Test
    public void testAssignPermissionOnTagModuleToAdminUsers_adminUsersEmpty_noUserMgrCalls() {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao xxModuleDefDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        XXModuleDef moduleDef = new XXModuleDef();
        moduleDef.setId(5L);
        moduleDef.setModule("tag");

        Mockito.when(daoMgr.getXXModuleDef()).thenReturn(xxModuleDefDao);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(xxModuleDefDao.findByModuleName(Mockito.anyString())).thenReturn(moduleDef);
        Mockito.when(xxPortalUserDao.findByRole(Mockito.anyString())).thenReturn(Collections.emptyList());

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.assignPermissionOnTagModuleToAdminUsers();

        Mockito.verifyNoInteractions(xUserMgr);
    }

    @Test
    public void testAssignPermissionOnTagModuleToAdminUsers_vPortalUserNull_skips() {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao xxModuleDefDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        XXModuleDef moduleDef = new XXModuleDef();
        moduleDef.setId(6L);
        moduleDef.setModule("tag");
        XXPortalUser admin = new XXPortalUser();

        Mockito.when(daoMgr.getXXModuleDef()).thenReturn(xxModuleDefDao);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(xxModuleDefDao.findByModuleName(Mockito.anyString())).thenReturn(moduleDef);
        Mockito.when(xxPortalUserDao.findByRole(Mockito.anyString())).thenReturn(Collections.singletonList(admin));
        Mockito.when(xPortalUserService.populateViewBean(Mockito.any(XXPortalUser.class))).thenReturn(null);

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.assignPermissionOnTagModuleToAdminUsers();

        Mockito.verifyNoInteractions(xUserMgr);
    }

    @Test
    public void testAssignPermissionOnTagModuleToAdminUsers_success_invokesUserMgr() {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXModuleDefDao xxModuleDefDao = Mockito.mock(XXModuleDefDao.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XXPortalUserRoleDao xxPortalUserRoleDao = Mockito.mock(XXPortalUserRoleDao.class);
        XPortalUserService xPortalUserService = Mockito.mock(XPortalUserService.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);

        XXModuleDef moduleDef = new XXModuleDef();
        moduleDef.setId(9L);
        moduleDef.setModule("tag");

        XXPortalUser admin1 = new XXPortalUser();
        admin1.setId(100L);
        XXPortalUser admin2 = new XXPortalUser();
        admin2.setId(200L);

        Mockito.when(daoMgr.getXXModuleDef()).thenReturn(xxModuleDefDao);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(daoMgr.getXXPortalUserRole()).thenReturn(xxPortalUserRoleDao);
        Mockito.when(xxModuleDefDao.findByModuleName(Mockito.anyString())).thenReturn(moduleDef);
        Mockito.when(xxPortalUserDao.findByRole(Mockito.anyString())).thenReturn(Arrays.asList(admin1, admin2));
        Mockito.when(xxPortalUserRoleDao.findXPortalUserRolebyXPortalUserId(Mockito.anyLong()))
                .thenReturn(Collections.emptyList());

        VXPortalUser v1 = new VXPortalUser();
        v1.setId(100L);
        VXPortalUser v2 = new VXPortalUser();
        v2.setId(200L);
        Mockito.when(xPortalUserService.populateViewBean(admin1)).thenReturn(v1);
        Mockito.when(xPortalUserService.populateViewBean(admin2)).thenReturn(v2);

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "xPortalUserService", xPortalUserService);
        setIfPresent(patch, "xUserMgr", xUserMgr);

        patch.assignPermissionOnTagModuleToAdminUsers();

        Mockito.verify(xUserMgr, Mockito.times(2)).createOrUpdateUserPermisson(Mockito.any(VXPortalUser.class),
                Mockito.eq(moduleDef.getId()), Mockito.eq(false));
    }

    @Test
    public void testTrimPolicyName_trimsAndUpdates() throws Exception {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXPolicy p1 = new XXPolicy();
        p1.setName(" policy-one ");
        List<XXPolicy> policies = new ArrayList<>();
        policies.add(p1);
        Mockito.when(xxPolicyDao.getAll()).thenReturn(policies);

        setIfPresent(patch, "daoManager", daoMgr);

        Method m = PatchTagModulePermission_J10005.class.getDeclaredMethod("trimPolicyName");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(xxPolicyDao, Mockito.times(1))
                .update(Mockito.argThat(updated -> "policy-one".equals(((XXPolicy) updated).getName())));
    }

    @Test
    public void testTrimPolicyName_noLeadingTrailingSpaces_noUpdate() throws Exception {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXPolicy p = new XXPolicy();
        p.setName("policy");
        Mockito.when(xxPolicyDao.getAll()).thenReturn(Collections.singletonList(p));

        setIfPresent(patch, "daoManager", daoMgr);

        Method m = PatchTagModulePermission_J10005.class.getDeclaredMethod("trimPolicyName");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(xxPolicyDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testTrimPolicyName_updateThrows_isCaught() throws Exception {
        PatchTagModulePermission_J10005 patch = new PatchTagModulePermission_J10005();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXPolicy p = new XXPolicy();
        p.setName(" name ");
        Mockito.when(xxPolicyDao.getAll()).thenReturn(Collections.singletonList(p));
        Mockito.when(xxPolicyDao.update(Mockito.any())).thenThrow(new RuntimeException("boom"));

        setIfPresent(patch, "daoManager", daoMgr);

        Method m = PatchTagModulePermission_J10005.class.getDeclaredMethod("trimPolicyName");
        m.setAccessible(true);
        // should not throw
        m.invoke(patch);
    }
}
