/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.biz.TagDBStore;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceResourceDao;
import org.apache.ranger.db.XXServiceResourceElementDao;
import org.apache.ranger.db.XXServiceResourceElementValueDao;
import org.apache.ranger.db.XXTagAttributeDao;
import org.apache.ranger.db.XXTagAttributeDefDao;
import org.apache.ranger.db.XXTagDao;
import org.apache.ranger.db.XXTagDefDao;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.entity.XXServiceResourceElement;
import org.apache.ranger.entity.XXServiceResourceElementValue;
import org.apache.ranger.entity.XXTag;
import org.apache.ranger.entity.XXTagAttribute;
import org.apache.ranger.entity.XXTagAttributeDef;
import org.apache.ranger.entity.XXTagDef;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.service.RangerServiceResourceService;
import org.apache.ranger.service.RangerTagDefService;
import org.apache.ranger.service.RangerTagService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionTemplate;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForUpdatingTagsJson_J10020 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForUpdatingTagsJson_J10020 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        TagDBStore tagStore = Mockito.mock(TagDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        RangerTagDefService tagDefService = Mockito.mock(RangerTagDefService.class);
        RangerTagService tagService = Mockito.mock(RangerTagService.class);
        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);

        Mockito.when(svcStore.getServices(Mockito.any())).thenReturn(Collections.emptyList());

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "tagStore", tagStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "tagDefService", tagDefService);
        setIfPresent(patch, "tagService", tagService);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testExecLoad_WithService_NoMissingJsons() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        TagDBStore tagStore = Mockito.mock(TagDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        RangerTagDefService tagDefService = Mockito.mock(RangerTagDefService.class);
        RangerTagService tagService = Mockito.mock(RangerTagService.class);
        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);

        // Transaction behavior
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        // One service
        RangerService rangerService = new RangerService();
        rangerService.setId(1L);
        rangerService.setName("svc1");
        Mockito.when(svcStore.getServices(Mockito.any())).thenReturn(Collections.singletonList(rangerService));

        // Backing XX service
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        XXService xService = new XXService();
        xService.setId(1L);
        xService.setName("svc1");
        Mockito.when(xxServiceDao.getById(1L)).thenReturn(xService);

        // Prepare DAO mocks that are used in retriever flows
        XXServiceResourceDao xSvcResDao = Mockito.mock(XXServiceResourceDao.class);
        XXServiceResourceElementDao xSvcResElemDao = Mockito.mock(XXServiceResourceElementDao.class);
        XXServiceResourceElementValueDao xSvcResElemValDao = Mockito.mock(XXServiceResourceElementValueDao.class);
        XXTagDefDao xTagDefDao = Mockito.mock(XXTagDefDao.class);
        XXTagAttributeDefDao xTagAttrDefDao = Mockito.mock(XXTagAttributeDefDao.class);
        XXTagDao xTagDao = Mockito.mock(XXTagDao.class);
        XXTagAttributeDao xTagAttrDao = Mockito.mock(XXTagAttributeDao.class);

        Mockito.when(daoMgr.getXXServiceResource()).thenReturn(xSvcResDao);
        Mockito.when(daoMgr.getXXServiceResourceElement()).thenReturn(xSvcResElemDao);
        Mockito.when(daoMgr.getXXServiceResourceElementValue()).thenReturn(xSvcResElemValDao);
        Mockito.when(daoMgr.getXXTagDef()).thenReturn(xTagDefDao);
        Mockito.when(daoMgr.getXXTagAttributeDef()).thenReturn(xTagAttrDefDao);
        Mockito.when(daoMgr.getXXTag()).thenReturn(xTagDao);
        Mockito.when(daoMgr.getXXTagAttribute()).thenReturn(xTagAttrDao);

        // For TagRetriever contexts, provide empty lists to avoid NPEs and exercise
        // hasProcessedAll() true paths
        Mockito.when(xSvcResDao.findByServiceId(1L)).thenReturn(new ArrayList<XXServiceResource>());
        Mockito.when(xSvcResElemDao.findTaggedResourcesInServiceId(1L))
                .thenReturn(new ArrayList<XXServiceResourceElement>());
        Mockito.when(xSvcResElemValDao.findTaggedResourcesInServiceId(1L))
                .thenReturn(new ArrayList<XXServiceResourceElementValue>());
        Mockito.when(xTagDefDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTagDef>());
        Mockito.when(xTagAttrDefDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTagAttributeDef>());
        Mockito.when(xTagDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTag>());
        Mockito.when(xTagAttrDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTagAttribute>());

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "tagStore", tagStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "tagDefService", tagDefService);
        setIfPresent(patch, "tagService", tagService);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);

        patch.execLoad();
    }

    @Test
    public void testExecLoad_WithService_WithMissingJsons_TriggersUpdates() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        TagDBStore tagStore = Mockito.mock(TagDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        RangerTagDefService tagDefService = Mockito.mock(RangerTagDefService.class);
        RangerTagService tagService = Mockito.mock(RangerTagService.class);
        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);

        // Transaction behavior
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        // One service
        RangerService rangerService = new RangerService();
        rangerService.setId(1L);
        rangerService.setName("svc1");
        Mockito.when(svcStore.getServices(Mockito.any())).thenReturn(Collections.singletonList(rangerService));

        // Backing XX service
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        XXService xService = new XXService();
        xService.setId(1L);
        xService.setName("svc1");
        Mockito.when(xxServiceDao.getById(1L)).thenReturn(xService);

        // DAOs used in retriever
        XXServiceResourceDao xSvcResDao = Mockito.mock(XXServiceResourceDao.class);
        XXServiceResourceElementDao xSvcResElemDao = Mockito.mock(XXServiceResourceElementDao.class);
        XXServiceResourceElementValueDao xSvcResElemValDao = Mockito.mock(XXServiceResourceElementValueDao.class);
        XXTagDefDao xTagDefDao = Mockito.mock(XXTagDefDao.class);
        XXTagAttributeDefDao xTagAttrDefDao = Mockito.mock(XXTagAttributeDefDao.class);
        XXTagDao xTagDao = Mockito.mock(XXTagDao.class);
        XXTagAttributeDao xTagAttrDao = Mockito.mock(XXTagAttributeDao.class);

        Mockito.when(daoMgr.getXXServiceResource()).thenReturn(xSvcResDao);
        Mockito.when(daoMgr.getXXServiceResourceElement()).thenReturn(xSvcResElemDao);
        Mockito.when(daoMgr.getXXServiceResourceElementValue()).thenReturn(xSvcResElemValDao);
        Mockito.when(daoMgr.getXXTagDef()).thenReturn(xTagDefDao);
        Mockito.when(daoMgr.getXXTagAttributeDef()).thenReturn(xTagAttrDefDao);
        Mockito.when(daoMgr.getXXTag()).thenReturn(xTagDao);
        Mockito.when(daoMgr.getXXTagAttribute()).thenReturn(xTagAttrDao);

        // Provide non-empty results to trigger threads
        List<XXTagDef> tagDefs = new ArrayList<>();
        XXTagDef xTagDef = new XXTagDef();
        xTagDef.setId(10L);
        xTagDef.setName("td");
        tagDefs.add(xTagDef);
        Mockito.when(xTagDefDao.findByServiceId(1L)).thenReturn(tagDefs);
        Mockito.when(xTagAttrDefDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTagAttributeDef>());
        // xTagDef by id is present with empty attr json -> will update
        Mockito.when(xTagDefDao.getById(10L)).thenReturn(xTagDef);

        List<XXTag> tags = new ArrayList<>();
        XXTag xTag = new XXTag();
        xTag.setId(20L);
        tags.add(xTag);
        Mockito.when(xTagDao.findByServiceId(1L)).thenReturn(tags);
        Mockito.when(xTagAttrDao.findByServiceId(1L)).thenReturn(new ArrayList<XXTagAttribute>());
        Mockito.when(xTagDao.getById(20L)).thenReturn(xTag);

        List<XXServiceResource> svcResources = new ArrayList<>();
        XXServiceResource xRes = new XXServiceResource();
        xRes.setId(30L);
        svcResources.add(xRes);
        Mockito.when(xSvcResDao.findByServiceId(1L)).thenReturn(svcResources);
        Mockito.when(xSvcResElemDao.findTaggedResourcesInServiceId(1L))
                .thenReturn(new ArrayList<XXServiceResourceElement>());
        Mockito.when(xSvcResElemValDao.findTaggedResourcesInServiceId(1L))
                .thenReturn(new ArrayList<XXServiceResourceElementValue>());
        Mockito.when(xSvcResDao.getById(30L)).thenReturn(xRes);

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "tagStore", tagStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "tagDefService", tagDefService);
        setIfPresent(patch, "tagService", tagService);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);

        patch.execLoad();
        Mockito.verify(tagDefService, Mockito.atLeastOnce()).update(Mockito.any());
        Mockito.verify(tagService, Mockito.atLeastOnce()).update(Mockito.any());
        Mockito.verify(serviceResourceService, Mockito.atLeastOnce()).update(Mockito.any(RangerServiceResource.class));
        Mockito.verify(tagStore, Mockito.atLeastOnce()).refreshServiceResource(Mockito.eq(30L));
    }

    @Test
    public void testRunThread_ServiceResourceUpdateExceptionCaptured() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();

        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);
        // Force exception during update to exercise error branch
        Mockito.doThrow(new RuntimeException("boom")).when(serviceResourceService)
                .update(Mockito.any(RangerServiceResource.class));
        setIfPresent(patch, "serviceResourceService", serviceResourceService);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
        TransactionTemplate template = new TransactionTemplate(txManager);

        RangerServiceResource svcRes = new RangerServiceResource();
        svcRes.setId(99L);

        Class<?> inner = Class.forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$TagsUpdaterThread");
        Constructor<?> ctor = inner.getDeclaredConstructor(PatchForUpdatingTagsJson_J10020.class,
                TransactionTemplate.class, RangerServiceResource.class, RangerTag.class, RangerTagDef.class);
        ctor.setAccessible(true);
        Object threadObj = ctor.newInstance(patch, template, svcRes, null, null);

        Method runThread = PatchForUpdatingTagsJson_J10020.class.getDeclaredMethod("runThread", inner);
        runThread.setAccessible(true);
        String err = (String) runThread.invoke(patch, threadObj);
        Assertions.assertNotNull(err);
        Assertions.assertTrue(err.contains("RuntimeException"));
    }

    @Test
    public void testRunThread_TagDefSuccess_NoError() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();
        RangerTagDefService tagDefService = Mockito.mock(RangerTagDefService.class);
        setIfPresent(patch, "tagDefService", tagDefService);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
        TransactionTemplate template = new TransactionTemplate(txManager);

        RangerTagDef tagDef = new RangerTagDef();
        tagDef.setId(1L);

        Class<?> inner = Class.forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$TagsUpdaterThread");
        Constructor<?> ctor = inner.getDeclaredConstructor(PatchForUpdatingTagsJson_J10020.class,
                TransactionTemplate.class, RangerServiceResource.class, RangerTag.class, RangerTagDef.class);
        ctor.setAccessible(true);
        Object threadObj = ctor.newInstance(patch, template, null, null, tagDef);

        Method runThread = PatchForUpdatingTagsJson_J10020.class.getDeclaredMethod("runThread", inner);
        runThread.setAccessible(true);
        String err = (String) runThread.invoke(patch, threadObj);
        Assertions.assertNull(err);
        Mockito.verify(tagDefService, Mockito.times(1)).update(Mockito.eq(tagDef));
    }

    @Test
    public void testRunThread_TagSuccess_NoError() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();
        RangerTagService tagService = Mockito.mock(RangerTagService.class);
        setIfPresent(patch, "tagService", tagService);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
        TransactionTemplate template = new TransactionTemplate(txManager);

        RangerTag tag = new RangerTag();
        tag.setId(2L);

        Class<?> inner = Class.forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$TagsUpdaterThread");
        Constructor<?> ctor = inner.getDeclaredConstructor(PatchForUpdatingTagsJson_J10020.class,
                TransactionTemplate.class, RangerServiceResource.class, RangerTag.class, RangerTagDef.class);
        ctor.setAccessible(true);
        Object threadObj = ctor.newInstance(patch, template, null, tag, null);

        Method runThread = PatchForUpdatingTagsJson_J10020.class.getDeclaredMethod("runThread", inner);
        runThread.setAccessible(true);
        String err = (String) runThread.invoke(patch, threadObj);
        Assertions.assertNull(err);
        Mockito.verify(tagService, Mockito.times(1)).update(Mockito.eq(tag));
    }

    @Test
    public void testRunThread_ServiceResourceSuccess_NoError() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();
        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);
        TagDBStore tagStore = Mockito.mock(TagDBStore.class);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);
        setIfPresent(patch, "tagStore", tagStore);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
        TransactionTemplate template = new TransactionTemplate(txManager);

        RangerServiceResource svcRes = new RangerServiceResource();
        svcRes.setId(77L);

        Class<?> inner = Class.forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$TagsUpdaterThread");
        Constructor<?> ctor = inner.getDeclaredConstructor(PatchForUpdatingTagsJson_J10020.class,
                TransactionTemplate.class, RangerServiceResource.class, RangerTag.class, RangerTagDef.class);
        ctor.setAccessible(true);
        Object threadObj = ctor.newInstance(patch, template, svcRes, null, null);

        Method runThread = PatchForUpdatingTagsJson_J10020.class.getDeclaredMethod("runThread", inner);
        runThread.setAccessible(true);
        String err = (String) runThread.invoke(patch, threadObj);
        Assertions.assertNull(err);
        Mockito.verify(serviceResourceService, Mockito.times(1)).update(Mockito.eq(svcRes));
        Mockito.verify(tagStore, Mockito.times(1)).refreshServiceResource(Mockito.eq(77L));
    }

    @Test
    public void testRetrieverLookupCache_userAndResourceNames_cached() throws Exception {
        // Build retriever with null txManager and null service to avoid DB traversals
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class);
        XXResourceDefDao resDao = Mockito.mock(XXResourceDefDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(userDao);
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(resDao);

        Class<?> retrieverCls = Class
                .forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$RangerTagDBRetriever");
        Constructor<?> ctor = retrieverCls.getDeclaredConstructor(RangerDaoManager.class,
                PlatformTransactionManager.class, XXService.class);
        ctor.setAccessible(true);
        Object retriever = ctor.newInstance(daoMgr, null, null);

        Field f = retrieverCls.getDeclaredField("lookupCache");
        f.setAccessible(true);
        Object lookupCache = f.get(retriever);

        // user screen name resolution: no public name -> firstName + lastName
        XXPortalUser user = new XXPortalUser();
        user.setId(5L);
        user.setPublicScreenName("");
        user.setFirstName("John");
        user.setLastName("Doe");
        Mockito.when(userDao.getById(5L)).thenReturn(user);

        Method getUserScreenName = lookupCache.getClass().getDeclaredMethod("getUserScreenName", Long.class);
        getUserScreenName.setAccessible(true);
        Object name1 = getUserScreenName.invoke(lookupCache, 5L);
        Assertions.assertEquals("John Doe", name1);
        // second call should be served from cache (no extra DAO calls)
        Object name2 = getUserScreenName.invoke(lookupCache, 5L);
        Assertions.assertEquals("John Doe", name2);
        Mockito.verify(userDao, Mockito.times(1)).getById(5L);

        // resource name caching
        XXResourceDef xres = new XXResourceDef();
        xres.setId(9L);
        xres.setName("database");
        Mockito.when(resDao.getById(9L)).thenReturn(xres);
        Method getResourceName = lookupCache.getClass().getDeclaredMethod("getResourceName", Long.class);
        getResourceName.setAccessible(true);
        Object rname1 = getResourceName.invoke(lookupCache, 9L);
        Assertions.assertEquals("database", rname1);
        Object rname2 = getResourceName.invoke(lookupCache, 9L);
        Assertions.assertEquals("database", rname2);
        Mockito.verify(resDao, Mockito.times(1)).getById(9L);
    }

    @Test
    public void testRunThread_ServiceResourceRefreshExceptionCaptured() throws Exception {
        PatchForUpdatingTagsJson_J10020 patch = new PatchForUpdatingTagsJson_J10020();
        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);
        TagDBStore tagStore = Mockito.mock(TagDBStore.class);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);
        setIfPresent(patch, "tagStore", tagStore);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
        TransactionTemplate template = new TransactionTemplate(txManager);

        RangerServiceResource svcRes = new RangerServiceResource();
        svcRes.setId(101L);
        Mockito.doThrow(new RuntimeException("refresh-fail")).when(tagStore).refreshServiceResource(101L);

        Class<?> inner = Class.forName("org.apache.ranger.patch.PatchForUpdatingTagsJson_J10020$TagsUpdaterThread");
        Constructor<?> ctor = inner.getDeclaredConstructor(PatchForUpdatingTagsJson_J10020.class,
                TransactionTemplate.class, RangerServiceResource.class, RangerTag.class, RangerTagDef.class);
        ctor.setAccessible(true);
        Object threadObj = ctor.newInstance(patch, template, svcRes, null, null);

        Method runThread = PatchForUpdatingTagsJson_J10020.class.getDeclaredMethod("runThread", inner);
        runThread.setAccessible(true);
        String err = (String) runThread.invoke(patch, threadObj);
        Assertions.assertNotNull(err);
        Assertions.assertTrue(err.contains("RuntimeException"));
    }
}
