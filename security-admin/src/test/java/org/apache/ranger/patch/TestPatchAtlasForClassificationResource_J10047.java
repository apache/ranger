/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchAtlasForClassificationResource_J10047 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchAtlasForClassificationResource_J10047 {
    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchAtlasForClassificationResource_J10047 patch = new PatchAtlasForClassificationResource_J10047();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

            setIfPresent(patch, "daoMgr", daoMgr);
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testHelperMethods_Branches() throws Exception {
        PatchAtlasForClassificationResource_J10047 patch = new PatchAtlasForClassificationResource_J10047();

        // checkResourcePresent true/false
        RangerServiceDef.RangerResourceDef res1 = new RangerServiceDef.RangerResourceDef();
        res1.setName("classification");
        RangerServiceDef.RangerResourceDef res2 = new RangerServiceDef.RangerResourceDef();
        res2.setName("other");
        List<RangerServiceDef.RangerResourceDef> list1 = new ArrayList<>();
        list1.add(res2);
        Assertions.assertFalse(invokeCheckResourcePresent(patch, list1));
        list1.add(res1);
        Assertions.assertTrue(invokeCheckResourcePresent(patch, list1));

        // checkAccessPresent true/false
        RangerServiceDef.RangerAccessTypeDef a1 = new RangerServiceDef.RangerAccessTypeDef();
        a1.setName("entity-add-classification");
        RangerServiceDef.RangerAccessTypeDef a2 = new RangerServiceDef.RangerAccessTypeDef();
        a2.setName("other");
        List<RangerServiceDef.RangerAccessTypeDef> acc = new ArrayList<>();
        acc.add(a2);
        Assertions.assertFalse(invokeCheckAccessPresent(patch, acc));
        acc.add(a1);
        Assertions.assertTrue(invokeCheckAccessPresent(patch, acc));

        // updateTypeResourceWithIgnoreCase for matching names
        List<RangerServiceDef.RangerResourceDef> typeRes = new ArrayList<>();
        RangerServiceDef.RangerResourceDef t1 = new RangerServiceDef.RangerResourceDef();
        t1.setName("type");
        t1.setMatcherOptions(new HashMap<>());
        RangerServiceDef.RangerResourceDef t2 = new RangerServiceDef.RangerResourceDef();
        t2.setName("entity");
        t2.setMatcherOptions(new HashMap<>());
        typeRes.add(t1);
        typeRes.add(t2);
        invokeUpdateTypeResourceWithIgnoreCase(patch, typeRes);
        Assertions.assertEquals("false", t1.getMatcherOptions().get("ignoreCase"));
        Assertions.assertNull(t2.getMatcherOptions().get("ignoreCase"));

        // removeEntityResourceAccessTypeRestrictions
        List<RangerServiceDef.RangerResourceDef> entRes = new ArrayList<>();
        RangerServiceDef.RangerResourceDef e1 = new RangerServiceDef.RangerResourceDef();
        e1.setName("entity");
        e1.setAccessTypeRestrictions(
                new HashSet<String>(Arrays.asList("entity-remove-classification", "entity-add-classification", "foo")));
        entRes.add(e1);
        invokeRemoveEntityResourceAccessTypeRestrictions(patch, entRes);
        Assertions.assertFalse(e1.getAccessTypeRestrictions().contains("entity-add-classification"));
        Assertions.assertTrue(e1.getAccessTypeRestrictions().contains("foo"));

        // isEntityResource true/false
        Map<String, RangerPolicyResource> resMap = new HashMap<>();
        resMap.put("entity-type", new RangerPolicyResource());
        resMap.put("entity-classification", new RangerPolicyResource());
        resMap.put("entity", new RangerPolicyResource());
        Assertions.assertTrue(invokeIsEntityResource(patch, resMap));
        resMap.remove("entity");
        Assertions.assertFalse(invokeIsEntityResource(patch, resMap));

        // checkAndFilterNonClassificationAccessTypeFromPolicy
        RangerPolicyItem it1 = new RangerPolicyItem();
        List<RangerPolicyItemAccess> its = new ArrayList<>();
        its.add(new RangerPolicyItemAccess("entity-add-classification", true));
        its.add(new RangerPolicyItemAccess("random", true));
        it1.setAccesses(its);
        List<RangerPolicyItem> items = new ArrayList<>();
        items.add(it1);
        boolean exists = invokeCheckAndFilter(patch, items);
        Assertions.assertTrue(exists);
        Assertions.assertEquals(1, items.get(0).getAccesses().size());
        Assertions.assertEquals("entity-add-classification", items.get(0).getAccesses().get(0).getType());

        // when no access remains, item removed
        RangerPolicyItem it2 = new RangerPolicyItem();
        it2.setAccesses(new ArrayList<>(Collections.singletonList(new RangerPolicyItemAccess("random", true))));
        List<RangerPolicyItem> items2 = new ArrayList<>();
        items2.add(it2);
        boolean exists2 = invokeCheckAndFilter(patch, items2);
        Assertions.assertFalse(exists2);
        Assertions.assertTrue(items2.isEmpty());
    }

    @Test
    public void testUpdateResourceInServiceDef_branches() throws Exception {
        PatchAtlasForClassificationResource_J10047 patch = new PatchAtlasForClassificationResource_J10047();

        RangerServiceDef embedded = new RangerServiceDef();
        RangerServiceDef.RangerResourceDef rr = new RangerServiceDef.RangerResourceDef();
        rr.setName("classification");
        embedded.setResources(new ArrayList<>(Collections.singletonList(rr)));
        RangerServiceDef.RangerAccessTypeDef at = new RangerServiceDef.RangerAccessTypeDef();
        at.setName("entity-add-classification");
        embedded.setAccessTypes(new ArrayList<>(Collections.singletonList(at)));

        RangerServiceDef db = new RangerServiceDef();
        // db initially without classification resource
        RangerServiceDef.RangerResourceDef rOther = new RangerServiceDef.RangerResourceDef();
        rOther.setName("other");
        db.setResources(new ArrayList<>(Collections.singletonList(rOther)));
        db.setAccessTypes(new ArrayList<>());

        invokeUpdateResourceInServiceDef(patch, embedded, db);

        Assertions.assertTrue(db.getResources().stream().anyMatch(r -> "classification".equals(r.getName())));
        Assertions.assertTrue(
                db.getAccessTypes().stream().anyMatch(a -> "entity-add-classification".equals(a.getName())));

        // call again to hit "resource already present" branch
        invokeUpdateResourceInServiceDef(patch, embedded, db);
    }

    @Test
    public void testExecLoad_throwsOnUpdateFailure() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            RangerServiceDef.RangerResourceDef rr = new RangerServiceDef.RangerResourceDef();
            rr.setName("classification");
            embedded.setResources(new ArrayList<>(Collections.singletonList(rr)));
            RangerServiceDef.RangerAccessTypeDef at = new RangerServiceDef.RangerAccessTypeDef();
            at.setName("entity-add-classification");
            embedded.setAccessTypes(new ArrayList<>(Collections.singletonList(at)));
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchAtlasForClassificationResource_J10047 patch = new PatchAtlasForClassificationResource_J10047();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<>());
            db.setAccessTypes(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(null);

            Assertions.assertThrows(RuntimeException.class, patch::execLoad);
        }
    }

    @Test
    public void testCreateAdditionalPolicyWithClassification_createsPolicy() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchAtlasForClassificationResource_J10047 patch = new PatchAtlasForClassificationResource_J10047();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            XXServiceDef xsd = new XXServiceDef();
            xsd.setId(1L);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xsd);

            XXServiceDao svcDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(svcDao);
            XXService xsvc = new XXService();
            xsvc.setId(10L);
            Mockito.when(svcDao.findByServiceDefId(Mockito.eq(1L)))
                    .thenReturn(new ArrayList<>(Collections.singletonList(xsvc)));

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "svcStore", svcStore);
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));

            // Prepare a policy that qualifies for duplication with classification resource
            RangerPolicy policy = new RangerPolicy();
            policy.setName("p");
            Map<String, RangerPolicyResource> resMap = new HashMap<>();
            resMap.put("entity-type", new RangerPolicyResource());
            resMap.put("entity-classification", new RangerPolicyResource());
            resMap.put("entity", new RangerPolicyResource());
            policy.setResources(resMap);
            RangerPolicyItem item = new RangerPolicyItem();
            List<RangerPolicyItemAccess> accesses = new ArrayList<>();
            accesses.add(new RangerPolicyItemAccess("entity-add-classification", true));
            item.setAccesses(accesses);
            policy.setPolicyItems(new ArrayList<>(Collections.singletonList(item)));
            policy.setDenyPolicyItems(new ArrayList<>());

            Mockito.when(svcStore.getServicePolicies(Mockito.eq(10L), Mockito.any()))
                    .thenReturn(new ArrayList<>(Collections.singletonList(policy)));

            // invoke private method
            Method m = PatchAtlasForClassificationResource_J10047.class
                    .getDeclaredMethod("createAdditionalPolicyWithClassificationForExistingEntityClassificationPolicy");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(svcStore, Mockito.atLeastOnce()).createPolicy(Mockito.any());
        }
    }

    // reflection helpers for private methods
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static boolean invokeCheckResourcePresent(PatchAtlasForClassificationResource_J10047 p,
            List<RangerServiceDef.RangerResourceDef> list) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class.getDeclaredMethod("checkResourcePresent", List.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, list);
    }

    private static boolean invokeCheckAccessPresent(PatchAtlasForClassificationResource_J10047 p,
            List<RangerServiceDef.RangerAccessTypeDef> list) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("checkAccessPresent", List.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, list);
    }

    private static void invokeUpdateTypeResourceWithIgnoreCase(PatchAtlasForClassificationResource_J10047 p,
            List<RangerServiceDef.RangerResourceDef> list) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("updateTypeResourceWithIgnoreCase", List.class);
        m.setAccessible(true);
        m.invoke(p, list);
    }

    private static void invokeRemoveEntityResourceAccessTypeRestrictions(PatchAtlasForClassificationResource_J10047 p,
            List<RangerServiceDef.RangerResourceDef> list) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("removeEntityResourceAccessTypeRestrictions", List.class);
        m.setAccessible(true);
        m.invoke(p, list);
    }

    private static boolean invokeIsEntityResource(PatchAtlasForClassificationResource_J10047 p,
            Map<String, RangerPolicyResource> map) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("isEntityResource", Map.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, map);
    }

    private static boolean invokeCheckAndFilter(PatchAtlasForClassificationResource_J10047 p,
            List<RangerPolicyItem> list) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("checkAndFilterNonClassificationAccessTypeFromPolicy", List.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, list);
    }

    // reflection helper for private method updateResourceInServiceDef
    private static void invokeUpdateResourceInServiceDef(PatchAtlasForClassificationResource_J10047 p,
            RangerServiceDef embedded, RangerServiceDef db) throws Exception {
        Method m = PatchAtlasForClassificationResource_J10047.class
                .getDeclaredMethod("updateResourceInServiceDef", RangerServiceDef.class, RangerServiceDef.class);
        m.setAccessible(true);
        m.invoke(p, embedded, db);
    }
}
