/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHBaseDefaultPolicyUpdate_J10045 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHBaseDefaultPolicyUpdate_J10045 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef hbaseDef = new RangerServiceDef();
            hbaseDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(hbaseDef);

            PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.anyLong()))
                    .thenReturn(Collections.<XXService>emptyList());

            setIfPresent(patch, "daoMgr", daoMgr);
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateDefaultHBasePolicy_addsPolicyItemAndUpdates() throws Exception {
        PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcStore);

        RangerPolicy policy = new RangerPolicy();
        policy.setName(PatchForHBaseDefaultPolicyUpdate_J10045.DEFAULT_HBASE_POLICY_NAME);
        policy.setPolicyItems(new ArrayList<>());
        Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateDefaultHBasePolicy",
                List.class, String.class);
        m.setAccessible(true);
        List<RangerPolicy> list = new ArrayList<>();
        list.add(policy);

        m.invoke(patch, list, "huser");

        Mockito.verify(svcStore, Mockito.times(1)).updatePolicy(Mockito.eq(policy));
        Assertions.assertEquals(1, policy.getPolicyItems().size());
        RangerPolicy.RangerPolicyItem item = policy.getPolicyItems().get(0);
        Assertions.assertEquals(Collections.singletonList("huser"), item.getUsers());
        Assertions.assertTrue(item.getDelegateAdmin());
        // expect 5 accesses
        Assertions.assertEquals(5, item.getAccesses().size());
    }

    @Test
    public void testUpdateHBaseDefaultPolicy_embeddedMissing_returnsFalse() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
            Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateHBaseDefaultPolicy");
            m.setAccessible(true);
            Boolean ret = (Boolean) m.invoke(patch);
            Assertions.assertFalse(ret);
        }
    }

    @Test
    public void testUpdateDefaultHBasePolicy_noPoliciesOrNameMismatch_noUpdate() throws Exception {
        PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcStore);

        Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateDefaultHBasePolicy",
                List.class, String.class);
        m.setAccessible(true);

        m.invoke(patch, new Object[] {null, "user"});
        m.invoke(patch, new Object[] {new ArrayList<RangerPolicy>(), "user"});

        ArrayList<RangerPolicy> list = new ArrayList<>();
        RangerPolicy p = new RangerPolicy();
        p.setName("not-default");
        list.add(p);
        m.invoke(patch, list, "user");

        Mockito.verifyNoInteractions(svcStore);
    }

    @Test
    public void testUpdateHBaseDefaultPolicy_servicesPresent_serviceNull_skips() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef hbaseDef = new RangerServiceDef();
            hbaseDef.setId(7L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(hbaseDef);

            PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            XXService xxService = new XXService();
            xxService.setId(22L);
            xxService.setName("svc");
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.eq(7L)))
                    .thenReturn(new ArrayList<>(Collections.singletonList(xxService)));
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            Mockito.when(svcStore.getServiceByName(Mockito.anyString())).thenReturn(null);

            Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateHBaseDefaultPolicy");
            m.setAccessible(true);
            Boolean res = (Boolean) m.invoke(patch);
            Assertions.assertTrue(res);
            Mockito.verify(svcStore, Mockito.never()).updatePolicy(Mockito.any());
        }
    }

    @Test
    public void testUpdateHBaseDefaultPolicy_success_withDefaultUser() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef hbaseDef = new RangerServiceDef();
            hbaseDef.setId(3L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(hbaseDef);

            PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            XXService s = new XXService();
            s.setId(9L);
            s.setName("svc");
            List<XXService> services = new ArrayList<>();
            services.add(s);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.eq(3L))).thenReturn(services);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore store = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", store);
            RangerService rangerService = new RangerService();
            Map<String, String> cfg = new HashMap<>();
            // no username in config -> default is used
            rangerService.setConfigs(cfg);
            Mockito.when(store.getServiceByName(Mockito.anyString())).thenReturn(rangerService);
            Mockito.when(store.getServicePolicies(Mockito.eq(9L), Mockito.any(SearchFilter.class)))
                    .thenReturn(new ArrayList<>());

            Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateHBaseDefaultPolicy");
            m.setAccessible(true);
            Boolean res = (Boolean) m.invoke(patch);
            Assertions.assertTrue(res);
        }
    }

    @Test
    public void testUpdateHBaseDefaultPolicy_success_withProvidedUser() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef hbaseDef = new RangerServiceDef();
            hbaseDef.setId(5L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(hbaseDef);

            PatchForHBaseDefaultPolicyUpdate_J10045 patch = new PatchForHBaseDefaultPolicyUpdate_J10045();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            XXService s = new XXService();
            s.setId(12L);
            s.setName("svc");
            List<XXService> services = new ArrayList<>();
            services.add(s);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.eq(5L))).thenReturn(services);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore store = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", store);
            RangerService rangerService = new RangerService();
            Map<String, String> cfg = new HashMap<>();
            cfg.put(PatchForHBaseDefaultPolicyUpdate_J10045.SERVICE_CONFIG_USER_NAME_PARAM, "userA");
            rangerService.setConfigs(cfg);
            Mockito.when(store.getServiceByName(Mockito.anyString())).thenReturn(rangerService);
            List<RangerPolicy> pols = new ArrayList<>();
            RangerPolicy p = new RangerPolicy();
            p.setName(PatchForHBaseDefaultPolicyUpdate_J10045.DEFAULT_HBASE_POLICY_NAME);
            pols.add(p);
            Mockito.when(store.getServicePolicies(Mockito.eq(12L), Mockito.any(SearchFilter.class))).thenReturn(pols);

            Method m = PatchForHBaseDefaultPolicyUpdate_J10045.class.getDeclaredMethod("updateHBaseDefaultPolicy");
            m.setAccessible(true);
            Boolean res = (Boolean) m.invoke(patch);
            Assertions.assertTrue(res);
            Mockito.verify(store, Mockito.times(1)).updatePolicy(Mockito.eq(p));
        }
    }
}
