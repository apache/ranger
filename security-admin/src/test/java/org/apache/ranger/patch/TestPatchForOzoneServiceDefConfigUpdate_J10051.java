/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForOzoneServiceDefConfigUpdate_J10051 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForOzoneServiceDefConfigUpdate_J10051 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);
            setIfPresent(patch, "daoMgr", daoMgr);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testJsonStringToMap_legacyAndJson() throws Exception {
        PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("jsonStringToMap", String.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, String> a = (Map<String, String>) m.invoke(patch, "k=v;x=y");
        Assertions.assertEquals("v", a.get("k"));
        @SuppressWarnings("unchecked")
        Map<String, String> b = (Map<String, String>) m.invoke(patch, "{\"a\":\"b\"}");
        Assertions.assertEquals("b", b.get("a"));
    }

    @Test
    public void testUpdateFlow_trueFalse_andConfigChange() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            // embedded present
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
            RangerServiceDef.RangerServiceConfigDef c = new RangerServiceDef.RangerServiceConfigDef();
            c.setName("hadoop.security.authorization");
            cfg.add(c);
            embedded.setConfigs(cfg);
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            // DAO missing -> true
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);
            Method u = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            u.setAccessible(true);
            Assertions.assertTrue((boolean) u.invoke(patch));

            // DAO present + DB present -> validate and update
            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(new JSONUtil().readMapToString(new HashMap<String, String>()));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);
            RangerServiceDef db = new RangerServiceDef();
            db.setConfigs(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            Assertions.assertTrue((boolean) u.invoke(patch));
            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.<RangerServiceDef>any(), Mockito.any());
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_embeddedNull_returnsFalse() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);
            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertFalse((boolean) m.invoke(patch));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_daoNull_returnsTrue() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setConfigs(new ArrayList<>());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertTrue((boolean) m.invoke(patch));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_dbNull_returnsFalse() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setConfigs(new ArrayList<>());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);
            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(null);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(null);

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertFalse((boolean) m.invoke(patch));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_happyPath_andOptionsRestore_andPostDaoMissing() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
            RangerServiceDef.RangerServiceConfigDef c = new RangerServiceDef.RangerServiceConfigDef();
            c.setName("hadoop.security.authorization");
            cfg.add(c);
            embedded.setConfigs(cfg);
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            XXServiceDef xxPre = new XXServiceDef();
            HashMap<String, String> pre = new HashMap<>();
            pre.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "on");
            xxPre.setDefOptions(new JSONUtil().readMapToString(pre));
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setConfigs(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertTrue((boolean) m.invoke(patch));
            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.<RangerServiceDef>any(), Mockito.any());
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(Mockito.any());

            // when post DAO is missing in the same invocation, method returns false
            Mockito.reset(sdefDao);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, null);
            Assertions.assertFalse((boolean) m.invoke(patch));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_retNull_throws() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
            RangerServiceDef.RangerServiceConfigDef c = new RangerServiceDef.RangerServiceConfigDef();
            c.setName("hadoop.security.authorization");
            cfg.add(c);
            embedded.setConfigs(cfg);
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(new JSONUtil().readMapToString(new HashMap<String, String>()));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            RangerServiceDef db = new RangerServiceDef();
            db.setConfigs(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(null);

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertThrows(Exception.class, () -> m.invoke(patch));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_optionRestore_removeWhenPreMissing() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
            RangerServiceDef.RangerServiceConfigDef c = new RangerServiceDef.RangerServiceConfigDef();
            c.setName("hadoop.security.authorization");
            cfg.add(c);
            embedded.setConfigs(cfg);
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            XXServiceDef xxPre = new XXServiceDef();
            xxPre.setDefOptions(null);
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setConfigs(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertTrue((boolean) m.invoke(patch));

            ArgumentCaptor<XXServiceDef> captor = ArgumentCaptor.forClass(XXServiceDef.class);
            Mockito.verify(sdefDao, Mockito.atLeastOnce()).update(captor.capture());
            XXServiceDef updated = captor.getValue();
            Map<String, String> updatedMap = new JSONUtil().jsonToMap(updated.getDefOptions());
            Assertions.assertTrue(updatedMap == null
                    || !updatedMap.containsKey(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES));
        }
    }

    @Test
    public void testUpdateOzoneServiceDef_setsMandatoryFalseOnConfig() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForOzoneServiceDefConfigUpdate_J10051 patch = new PatchForOzoneServiceDefConfigUpdate_J10051();
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
            RangerServiceDef.RangerServiceConfigDef c = new RangerServiceDef.RangerServiceConfigDef();
            c.setName("hadoop.security.authorization");
            c.setMandatory(true);
            cfg.add(c);
            embedded.setConfigs(cfg);
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(new JSONUtil().readMapToString(new HashMap<String, String>()));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            RangerServiceDef db = new RangerServiceDef();
            db.setConfigs(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

            Method m = PatchForOzoneServiceDefConfigUpdate_J10051.class.getDeclaredMethod("updateOzoneServiceDef");
            m.setAccessible(true);
            Assertions.assertTrue((boolean) m.invoke(patch));

            ArgumentCaptor<RangerServiceDef> captor = ArgumentCaptor.forClass(RangerServiceDef.class);
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(captor.capture());
            RangerServiceDef updated = captor.getValue();
            boolean found = false;
            for (RangerServiceDef.RangerServiceConfigDef cd : updated.getConfigs()) {
                if ("hadoop.security.authorization".equals(cd.getName())) {
                    found = true;
                    Assertions.assertFalse(Boolean.TRUE.equals(cd.getMandatory()));
                }
            }
            Assertions.assertTrue(found);
        }
    }
}
