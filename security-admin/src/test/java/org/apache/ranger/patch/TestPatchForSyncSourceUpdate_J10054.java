/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;

import java.lang.reflect.Field;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForSyncSourceUpdate_J10054 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForSyncSourceUpdate_J10054 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        PatchForSyncSourceUpdate_J10054 patch = new PatchForSyncSourceUpdate_J10054();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXUserDao xxUserDao = Mockito.mock(XXUserDao.class);
        XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class);
        Mockito.when(daoMgr.getXXUser()).thenReturn(xxUserDao);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);
        Mockito.when(xxUserDao.getAll()).thenReturn(Collections.<XXUser>emptyList());
        Mockito.when(xxGroupDao.getAll()).thenReturn(Collections.<XXGroup>emptyList());

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "svcDBStore", svcStore);
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
        setIfPresent(patch, "stringUtil", new StringUtil());
        setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
        setIfPresent(patch, "svcStore", svcStore);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testUpdateSyncSourceForUsers_updatesSyncAndPortalUserSource() {
        PatchForSyncSourceUpdate_J10054 patch = new PatchForSyncSourceUpdate_J10054();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXUserDao xxUserDao = Mockito.mock(XXUserDao.class);
        Mockito.when(daoMgr.getXXUser()).thenReturn(xxUserDao);
        XXPortalUser xPortal = new XXPortalUser();
        xPortal.setUserSource(0);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(xxPortalUserDao.findByLoginId(Mockito.anyString())).thenReturn(xPortal);

        XXUser xUser = new XXUser();
        xUser.setName("u1");
        xUser.setSyncSource("");
        xUser.setOtherAttributes("{\"sync_source\":\"ldap\"}");
        Mockito.when(xxUserDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(xUser)));

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", txManager);

        boolean result = patch.updateSyncSourceForUsers();
        Assertions.assertTrue(result);
        Assertions.assertEquals("ldap", xUser.getSyncSource());
        Assertions.assertEquals(1, xPortal.getUserSource());
    }

    @Test
    public void testUpdateSyncSourceForGroups_updatesSyncAndGroupSource() {
        PatchForSyncSourceUpdate_J10054 patch = new PatchForSyncSourceUpdate_J10054();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);

        XXGroup xGroup = new XXGroup();
        xGroup.setName("g1");
        xGroup.setGroupSource(0);
        xGroup.setSyncSource("");
        xGroup.setOtherAttributes("{\"sync_source\":\"ldap\"}");
        Mockito.when(xxGroupDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(xGroup)));

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", txManager);

        boolean result = patch.updateSyncSourceForGroups();
        Assertions.assertTrue(result);
        Assertions.assertEquals("ldap", xGroup.getSyncSource());
        Assertions.assertEquals(1, xGroup.getGroupSource());
    }

    @Test
    public void testUpdateSyncSourceForUsers_skipWhenSyncPresentOrNoOtherAttrs() {
        PatchForSyncSourceUpdate_J10054 patch = new PatchForSyncSourceUpdate_J10054();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXUserDao xxUserDao = Mockito.mock(XXUserDao.class);
        Mockito.when(daoMgr.getXXUser()).thenReturn(xxUserDao);

        XXUser u1 = new XXUser();
        u1.setName("u1");
        u1.setSyncSource("file");
        u1.setOtherAttributes("{\"sync_source\":\"ldap\"}");

        XXUser u2 = new XXUser();
        u2.setName("u2");
        u2.setSyncSource("");
        u2.setOtherAttributes("");

        Mockito.when(xxUserDao.getAll()).thenReturn(new ArrayList<>(Arrays.asList(u1, u2)));
        setIfPresent(patch, "daoManager", daoMgr);

        boolean result = patch.updateSyncSourceForUsers();
        Assertions.assertTrue(result);
        Assertions.assertEquals("file", u1.getSyncSource());
        Assertions.assertEquals("", u2.getSyncSource());
    }

    @Test
    public void testUpdateSyncSourceForGroups_skipWhenSyncPresentOrNoOtherAttrs() {
        PatchForSyncSourceUpdate_J10054 patch = new PatchForSyncSourceUpdate_J10054();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);

        XXGroup g1 = new XXGroup();
        g1.setName("g1");
        g1.setSyncSource("file");
        g1.setOtherAttributes("{\"sync_source\":\"ldap\"}");

        XXGroup g2 = new XXGroup();
        g2.setName("g2");
        g2.setSyncSource("");
        g2.setOtherAttributes("");

        Mockito.when(xxGroupDao.getAll()).thenReturn(new ArrayList<>(Arrays.asList(g1, g2)));
        setIfPresent(patch, "daoManager", daoMgr);

        boolean result = patch.updateSyncSourceForGroups();
        Assertions.assertTrue(result);
        Assertions.assertEquals("file", g1.getSyncSource());
        Assertions.assertEquals("", g2.getSyncSource());
    }

    @Test
    public void testExecLoad_failurePath_exits() {
        PatchForSyncSourceUpdate_J10054 patch = Mockito.spy(new PatchForSyncSourceUpdate_J10054());
        Mockito.doReturn(false).when(patch).updateSyncSourceForUsers();

        SecurityManager original = System.getSecurityManager();
        try {
            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkPermission(Permission perm) {
                }

                @Override
                public void checkExit(int status) {
                    throw new SecurityException("exit");
                }
            });
            Assertions.assertThrows(SecurityException.class, patch::execLoad);
        } finally {
            System.setSecurityManager(original);
        }
    }
}
