/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForTagServiceDefUpdate_J10008 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForTagServiceDefUpdate_J10008 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateTagServiceDef_missingPolicyConditions() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setPolicyConditions(null);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            patch.execLoad();
        }
    }

    @Test
    public void testUpdateTagServiceDef_missingScriptCondition() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerPolicyConditionDef> conds = new ArrayList<>();
            RangerPolicyConditionDef c = new RangerPolicyConditionDef();
            c.setName("not-expression");
            conds.add(c);
            embedded.setPolicyConditions(conds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            patch.execLoad();
        }
    }

    @Test
    public void testUpdateTagServiceDef_missingServiceDefDao() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerPolicyConditionDef> conds = new ArrayList<>();
            RangerPolicyConditionDef c = new RangerPolicyConditionDef();
            c.setName("expression");
            conds.add(c);
            embedded.setPolicyConditions(conds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);

            patch.execLoad();
        }
    }

    @Test
    public void testUpdateTagServiceDef_success_optionRestore() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerPolicyConditionDef> conds = new ArrayList<>();
            RangerPolicyConditionDef c = new RangerPolicyConditionDef();
            c.setName("expression");
            conds.add(c);
            embedded.setPolicyConditions(conds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            XXServiceDef xxPre = new XXServiceDef();
            HashMap<String, String> pre = new HashMap<>();
            pre.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "on");
            xxPre.setDefOptions(new JSONUtil().readMapToString(pre));
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setPolicyConditions(new ArrayList<RangerPolicyConditionDef>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            patch.execLoad();
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(Mockito.any());
            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.<RangerServiceDef>any(), Mockito.any());
        }
    }

    @Test
    public void testUpdateTagServiceDef_embeddedNull() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            patch.execLoad();
        }
    }

    @Test
    public void testUpdateTagServiceDef_dbServiceDefNull_noUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerPolicyConditionDef> conds = new ArrayList<>();
            RangerPolicyConditionDef c = new RangerPolicyConditionDef();
            c.setName("expression");
            conds.add(c);
            embedded.setPolicyConditions(conds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(null);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(null);

            patch.execLoad();
            Mockito.verify(svcDB, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testUpdateTagServiceDef_optionRestore_removeWhenPreMissing() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerPolicyConditionDef> conds = new ArrayList<>();
            RangerPolicyConditionDef c = new RangerPolicyConditionDef();
            c.setName("expression");
            conds.add(c);
            embedded.setPolicyConditions(conds);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            // Pre with no option, Post with option present -> should remove
            XXServiceDef xxPre = new XXServiceDef();
            xxPre.setDefOptions(null);
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setPolicyConditions(new ArrayList<RangerPolicyConditionDef>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            patch.execLoad();

            ArgumentCaptor<XXServiceDef> captor = ArgumentCaptor.forClass(XXServiceDef.class);
            Mockito.verify(sdefDao, Mockito.atLeastOnce()).update(captor.capture());
            XXServiceDef updated = captor.getValue();
            Map<String, String> updatedMap = new JSONUtil().jsonToMap(updated.getDefOptions());
            Assertions.assertTrue(updatedMap == null
                    || !updatedMap.containsKey(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES));
        }
    }

    @Test
    public void testCheckScriptPolicyCondPresent_trueFalse() throws Exception {
        PatchForTagServiceDefUpdate_J10008 patch = new PatchForTagServiceDefUpdate_J10008();
        Method m = PatchForTagServiceDefUpdate_J10008.class.getDeclaredMethod("checkScriptPolicyCondPresent",
                List.class);
        m.setAccessible(true);
        List<RangerPolicyConditionDef> conds = new ArrayList<>();
        RangerPolicyConditionDef c1 = new RangerPolicyConditionDef();
        c1.setName("nope");
        conds.add(c1);
        Assertions.assertFalse((boolean) m.invoke(patch, conds));
        RangerPolicyConditionDef c2 = new RangerPolicyConditionDef();
        c2.setName("expression");
        conds.add(c2);
        Assertions.assertTrue((boolean) m.invoke(patch, conds));
    }
}
