/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPolicyResourceDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.entity.XXPolicyResource;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator.Action;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForNifiResourceUpdateExclude_J10011 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForNifiResourceUpdateExclude_J10011 {
    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateNifiServiceDef_togglesExcludesAndDisablesPolicies() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(10L);
            RangerResourceDef res = new RangerResourceDef();
            res.setName("resourceA");
            res.setExcludesSupported(true);
            svcDef.setResources(new ArrayList<>(Collections.singletonList(res)));

            Mockito.when(patch.svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(svcDef);

            XXResourceDef xResDef = new XXResourceDef();
            xResDef.setId(77L);
            XXResourceDefDao xxResourceDefDao = Mockito.mock(XXResourceDefDao.class);
            Mockito.when(patch.daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);
            Mockito.when(xxResourceDefDao.findByNameAndServiceDefId(Mockito.eq("resourceA"), Mockito.eq(10L)))
                    .thenReturn(xResDef);

            XXPolicyResource xPolicyRes = new XXPolicyResource();
            xPolicyRes.setIsExcludes(true);
            xPolicyRes.setPolicyId(888L);
            XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
            Mockito.when(patch.daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
            Mockito.when(xxPolicyResourceDao.findByResDefId(Mockito.eq(77L)))
                    .thenReturn(new ArrayList<>(Collections.singletonList(xPolicyRes)));

            RangerPolicy policy = new RangerPolicy();
            policy.setIsEnabled(true);
            Mockito.when(patch.svcDBStore.getPolicy(Mockito.eq(888L))).thenReturn(policy);

            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.when(patch.svcStore.updateServiceDef(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

            patch.execLoad();

            Assertions.assertFalse(res.getExcludesSupported());
            Mockito.verify(patch.svcStore, Mockito.times(1)).updatePolicy(Mockito.argThat(p -> !p.getIsEnabled()));
        }
    }

    @Test
    public void testUpdateNifiServiceDef_noToggles_noPolicies_noUpdateCalls() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(10L);
            RangerResourceDef res = new RangerResourceDef();
            res.setName("resourceA");
            res.setExcludesSupported(false); // already false
            svcDef.setResources(new ArrayList<>(Collections.singletonList(res)));
            Mockito.when(patch.svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(svcDef);

            XXResourceDef xResDef = new XXResourceDef();
            xResDef.setId(77L);
            XXResourceDefDao xxResourceDefDao = Mockito.mock(XXResourceDefDao.class);
            Mockito.when(patch.daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);
            Mockito.when(xxResourceDefDao.findByNameAndServiceDefId(Mockito.eq("resourceA"), Mockito.eq(10L)))
                    .thenReturn(xResDef);

            XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
            Mockito.when(patch.daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
            Mockito.when(xxPolicyResourceDao.findByResDefId(Mockito.eq(77L))).thenReturn(new ArrayList<>());

            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.when(patch.svcStore.updateServiceDef(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

            patch.execLoad();

            Mockito.verify(patch.svcStore, Mockito.never()).updatePolicy(Mockito.any());
            Mockito.verify(patch.svcStore, Mockito.times(1)).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testUpdateNifiServiceDef_serviceDefNull_noActions() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            Mockito.when(patch.svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(null);

            patch.execLoad();

            Mockito.verify(patch.validatorFactory, Mockito.never()).getServiceDefValidator(Mockito.any());
            Mockito.verify(patch.svcStore, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testUpdateNifiServiceDef_validatorThrows_caughtAndNoCrash() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setResources(new ArrayList<>());
            Mockito.when(patch.svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(svcDef);

            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.doThrow(new RuntimeException("valerr")).when(validator)
                    .validate(Mockito.any(RangerServiceDef.class), Mockito.any(Action.class));

            patch.execLoad();
        }
    }

    @Test
    public void testUpdateNifiServiceDef_updateReturnsNull_logsError() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForNifiResourceUpdateExclude_J10011 patch = new PatchForNifiResourceUpdateExclude_J10011();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            svcDef.setResources(new ArrayList<>());
            Mockito.when(patch.svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(svcDef);

            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            Mockito.when(patch.svcStore.updateServiceDef(Mockito.any())).thenReturn(null);

            patch.execLoad();
            Mockito.verify(patch.svcStore, Mockito.times(1)).updateServiceDef(Mockito.eq(svcDef));
        }
    }
}
