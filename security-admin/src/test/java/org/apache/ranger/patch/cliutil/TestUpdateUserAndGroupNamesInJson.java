/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch.cliutil;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.biz.SecurityZoneDBStore;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerDataMaskPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerRowFilterPolicyItem;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.ArrayList;
import java.util.Collections;

/**
* @generated by Cursor
* @description <Unit Test for UpdateUserAndGroupNamesInJson class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUpdateUserAndGroupNamesInJson {
    @Mock
    RangerDaoManager daoMgr;
    @Mock
    ServiceDBStore svcStore;
    @Mock
    PlatformTransactionManager txManager;
    @Mock
    SecurityZoneDBStore securityZoneStore;
    @Mock
    XXServiceDao xXServiceDao;
    @Mock
    XXPolicyDao xXPolicyDao;
    @Mock
    XXUserDao xXUserDao;
    @Mock
    XXGroupDao xXGroupDao;

    @InjectMocks
    private UpdateUserAndGroupNamesInJson util = new UpdateUserAndGroupNamesInJson();

    @Test
    public void testExecLoad_updatesUsersGroupsInPoliciesAndZones() throws Exception {
        // Prepare services
        RangerService svc = new RangerService();
        svc.setId(10L);
        Mockito.when(svcStore.getServices(Mockito.any(SearchFilter.class))).thenReturn(Collections.singletonList(svc));

        XXService xxService = new XXService();
        xxService.setId(10L);
        xxService.setName("s1");
        Mockito.when(daoMgr.getXXService()).thenReturn(xXServiceDao);
        Mockito.when(xXServiceDao.getById(10L)).thenReturn(xxService);

        // Users/groups maps
        XXUser u = new XXUser();
        u.setName("Alice");
        XXGroup g = new XXGroup();
        g.setName("Admins");
        Mockito.when(daoMgr.getXXUser()).thenReturn(xXUserDao);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xXGroupDao);
        Mockito.when(xXUserDao.getAll()).thenReturn(Collections.singletonList(u));
        Mockito.when(xXGroupDao.getAll()).thenReturn(Collections.singletonList(g));

        // Policies
        XXPolicy xpolicy = new XXPolicy();
        xpolicy.setId(7L);
        RangerPolicy rp = new RangerPolicy();
        RangerPolicyItem item = new RangerPolicyItem();
        item.setUsers(new ArrayList<>(Collections.singletonList("alice")));
        item.setGroups(new ArrayList<>(Collections.singletonList("admins")));
        rp.setPolicyItems(Collections.singletonList(item));
        rp.setDenyPolicyItems(Collections.singletonList(new RangerPolicyItem()));
        rp.setAllowExceptions(Collections.singletonList(new RangerPolicyItem()));
        rp.setDenyExceptions(Collections.singletonList(new RangerPolicyItem()));
        rp.setDataMaskPolicyItems(Collections.singletonList(new RangerDataMaskPolicyItem()));
        rp.setRowFilterPolicyItems(Collections.singletonList(new RangerRowFilterPolicyItem()));
        xpolicy.setPolicyText(JsonUtils.objectToJson(rp));
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xXPolicyDao);
        Mockito.when(xXPolicyDao.findByServiceId(10L)).thenReturn(Collections.singletonList(xpolicy));

        // Zones
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setId(1L);
        zone.setAdminUsers(new ArrayList<>(Collections.singletonList("alice")));
        zone.setAdminUserGroups(new ArrayList<>(Collections.singletonList("admins")));
        zone.setAuditUsers(new ArrayList<>(Collections.singletonList("alice")));
        zone.setAuditUserGroups(new ArrayList<>(Collections.singletonList("admins")));
        Mockito.when(securityZoneStore.getSecurityZones(Mockito.any(SearchFilter.class))).thenReturn(Collections.singletonList(zone));

        util.execLoad();

        Mockito.verify(xXPolicyDao, Mockito.atLeastOnce()).update(Mockito.any(XXPolicy.class));
    }
}
