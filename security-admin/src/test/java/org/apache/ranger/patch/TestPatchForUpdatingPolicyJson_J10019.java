/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.PolicyRefUpdater;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAccessTypeDefDao;
import org.apache.ranger.db.XXDataMaskTypeDefDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPolicyConditionDefDao;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXPolicyItemAccessDao;
import org.apache.ranger.db.XXPolicyItemConditionDao;
import org.apache.ranger.db.XXPolicyItemDao;
import org.apache.ranger.db.XXPolicyItemDataMaskInfoDao;
import org.apache.ranger.db.XXPolicyItemGroupPermDao;
import org.apache.ranger.db.XXPolicyItemRowFilterInfoDao;
import org.apache.ranger.db.XXPolicyItemUserPermDao;
import org.apache.ranger.db.XXPolicyLabelMapDao;
import org.apache.ranger.db.XXPolicyRefAccessTypeDao;
import org.apache.ranger.db.XXPolicyRefConditionDao;
import org.apache.ranger.db.XXPolicyRefDataMaskTypeDao;
import org.apache.ranger.db.XXPolicyRefGroupDao;
import org.apache.ranger.db.XXPolicyRefResourceDao;
import org.apache.ranger.db.XXPolicyRefUserDao;
import org.apache.ranger.db.XXPolicyResourceDao;
import org.apache.ranger.db.XXPolicyResourceMapDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXAccessTypeDef;
import org.apache.ranger.entity.XXDataMaskTypeDef;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXPolicyConditionDef;
import org.apache.ranger.entity.XXPolicyRefAccessType;
import org.apache.ranger.entity.XXPolicyRefCondition;
import org.apache.ranger.entity.XXPolicyRefDataMaskType;
import org.apache.ranger.entity.XXPolicyRefGroup;
import org.apache.ranger.entity.XXPolicyRefUser;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.service.RangerDataHistService;
import org.apache.ranger.util.CLIUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForUpdatingPolicyJson_J10019 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForUpdatingPolicyJson_J10019 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        PolicyRefUpdater policyRefUpdater = Mockito.mock(PolicyRefUpdater.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);
        RangerDataHistService dataHistService = Mockito.mock(RangerDataHistService.class);

        Mockito.when(svcStore.getServices(Mockito.any())).thenReturn(Collections.emptyList());

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "policyRefUpdater", policyRefUpdater);
        setIfPresent(patch, "xUserMgr", xUserMgr);
        setIfPresent(patch, "dataHistService", dataHistService);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testPortPolicy_emptyJsonThrows() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyDao policyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(policyDao);
        XXPolicy x = new XXPolicy();
        x.setId(1L);
        Mockito.when(policyDao.getById(1L)).thenReturn(x);
        setIfPresent(patch, "daoMgr", daoMgr);

        Method port = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("portPolicy", String.class,
                RangerPolicy.class);
        port.setAccessible(true);
        RangerPolicy policy = new RangerPolicy();
        policy.setId(1L);
        policy.setName("p");
        assertThrows(Exception.class, () -> {
            try {
                port.invoke(patch, "hive", policy);
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testAddAccessDefRef_unknownAccess_throws() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXAccessTypeDefDao atDao = Mockito.mock(XXAccessTypeDefDao.class);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(5L);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXAccessTypeDef()).thenReturn(atDao);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        Mockito.when(atDao.findByServiceDefId(5L)).thenReturn(Collections.singletonList(new XXAccessTypeDef()));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method addAccess = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addAccessDefRef", String.class,
                Long.class, Set.class);
        addAccess.setAccessible(true);
        Set<String> accesses = new HashSet<>(Collections.singletonList("unknown"));
        assertThrows(Exception.class, () -> {
            try {
                addAccess.invoke(patch, "hive", 1L, accesses);
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testAddResourceDefRef_unknownResource_throws() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXResourceDefDao rdefDao = Mockito.mock(XXResourceDefDao.class);
        XXPolicyRefResourceDao refDao = Mockito.mock(XXPolicyRefResourceDao.class);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(6L);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(rdefDao);
        Mockito.when(daoMgr.getXXPolicyRefResource()).thenReturn(refDao);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        Mockito.when(rdefDao.findByServiceDefId(6L)).thenReturn(Collections.singletonList(new XXResourceDef()));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method addRes = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addResourceDefRef", String.class,
                RangerPolicy.class);
        addRes.setAccessible(true);
        RangerPolicy pol = new RangerPolicy();
        pol.setId(10L);
        pol.setName("p");
        pol.setResources(Collections.singletonMap("db", new RangerPolicy.RangerPolicyResource("db1")));
        assertThrows(Exception.class, () -> {
            try {
                addRes.invoke(patch, "hive", pol);
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testAddUserNameRef_createUserPath_andFailure() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyRefUserDao refUserDao = Mockito.mock(XXPolicyRefUserDao.class);
        XXUserDao userDao = Mockito.mock(XXUserDao.class);
        XUserMgr xUserMgr = Mockito.mock(XUserMgr.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        Mockito.when(daoMgr.getXXPolicyRefUser()).thenReturn(refUserDao);
        Mockito.when(daoMgr.getXXUser()).thenReturn(userDao);
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "xUserMgr", xUserMgr);
        setIfPresent(patch, "txManager", txManager);

        Method addUser = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addUserNameRef", Long.class,
                Set.class);
        addUser.setAccessible(true);

        // create path: first null then return user
        XXUser found = new XXUser();
        found.setId(7L);
        Mockito.when(userDao.findByUserName("u1")).thenReturn(null, found);
        addUser.invoke(patch, 1L, new HashSet<>(Collections.singleton("u1")));
        Mockito.verify(refUserDao, Mockito.times(1)).create(Mockito.any(XXPolicyRefUser.class));

        // failure path: still null after create attempt
        Mockito.reset(userDao);
        Mockito.when(userDao.findByUserName("u2")).thenReturn(null);
        assertThrows(Exception.class, () -> {
            try {
                addUser.invoke(patch, 1L, new HashSet<>(Collections.singleton("u2")));
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testBuildLists_andBuildList() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        Method buildLists = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("buildLists", List.class,
                Set.class, Set.class, Set.class, Set.class);
        buildLists.setAccessible(true);
        Method buildList = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("buildList", List.class,
                Set.class);
        buildList.setAccessible(true);

        RangerPolicy.RangerPolicyItem item = new RangerPolicy.RangerPolicyItem();
        item.setUsers(new ArrayList<>(Arrays.asList("u1", "u2")));
        item.setGroups(new ArrayList<>(Collections.singletonList("g1")));
        List<RangerPolicy.RangerPolicyItemAccess> accesses = new ArrayList<>();
        accesses.add(new RangerPolicy.RangerPolicyItemAccess("read"));
        item.setAccesses(accesses);
        List<RangerPolicy.RangerPolicyItemCondition> conditions = new ArrayList<>();
        RangerPolicy.RangerPolicyItemCondition c = new RangerPolicy.RangerPolicyItemCondition("cond",
                new ArrayList<>(Collections.singletonList("v")));
        conditions.add(c);
        item.setConditions(conditions);

        Set<String> acc = new HashSet<>();
        Set<String> conds = new HashSet<>();
        Set<String> users = new HashSet<>();
        Set<String> groups = new HashSet<>();
        buildLists.invoke(patch, new ArrayList<>(Collections.singletonList(item)), acc, conds, users, groups);
        assertTrue(acc.contains("read"));
        assertTrue(conds.contains("cond"));
        assertTrue(users.contains("u1") && users.contains("u2"));
        assertTrue(groups.contains("g1"));

        RangerPolicy.RangerDataMaskPolicyItem dm = new RangerPolicy.RangerDataMaskPolicyItem();
        RangerPolicy.RangerPolicyItemDataMaskInfo dmi = new RangerPolicy.RangerPolicyItemDataMaskInfo("MASK", null,
                null);
        dm.setDataMaskInfo(dmi);
        Set<String> dms = new HashSet<>();
        buildList.invoke(patch, new ArrayList<>(Collections.singletonList(dm)), dms);
        assertTrue(dms.contains("MASK"));
    }

    @Test
    public void testInit_DoesNothing() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        Assertions.assertDoesNotThrow(() -> patch.init());
    }

    @Test
    public void testMain_Success_ExitZero() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
            patch.setMoreToProcess(false);
            cliMock.when(() -> CLIUtil.getBean(PatchForUpdatingPolicyJson_J10019.class)).thenReturn(patch);
            CLIUtil cli = Mockito.mock(CLIUtil.class);
            cliMock.when(() -> CLIUtil.getBean(CLIUtil.class)).thenReturn(cli);

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForUpdatingPolicyJson_J10019.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertNotNull(se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMain_Failure_ExitOne() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            cliMock.when(() -> CLIUtil.getBean(PatchForUpdatingPolicyJson_J10019.class))
                    .thenThrow(new RuntimeException("boom"));

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForUpdatingPolicyJson_J10019.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertEquals("1", se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testAddGroupNameRef_success_andUnknown() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPolicyRefGroupDao refGroupDao = Mockito.mock(XXPolicyRefGroupDao.class);
        XXGroupDao groupDao = Mockito.mock(XXGroupDao.class);
        Mockito.when(daoMgr.getXXPolicyRefGroup()).thenReturn(refGroupDao);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(groupDao);
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addGroupNameRef", Long.class, Set.class);
        m.setAccessible(true);

        XXGroup g = new XXGroup();
        g.setId(5L);
        Mockito.when(groupDao.findByGroupName("g1")).thenReturn(g);
        m.invoke(patch, 1L, new HashSet<>(Collections.singleton("g1")));
        Mockito.verify(refGroupDao, Mockito.times(1)).create(Mockito.any(XXPolicyRefGroup.class));

        Mockito.reset(groupDao);
        Mockito.when(groupDao.findByGroupName("g2")).thenReturn(null);
        assertThrows(Exception.class, () -> {
            try {
                m.invoke(patch, 1L, new HashSet<>(Collections.singleton("g2")));
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testAddDataMaskDefRef_success_andUnknown() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXPolicyRefDataMaskTypeDao refDao = Mockito.mock(XXPolicyRefDataMaskTypeDao.class);
        XXDataMaskTypeDefDao dataMaskTypeDefDao = Mockito.mock(XXDataMaskTypeDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXPolicyRefDataMaskType()).thenReturn(refDao);
        Mockito.when(daoMgr.getXXDataMaskTypeDef()).thenReturn(dataMaskTypeDefDao);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(2L);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        XXDataMaskTypeDef def = new XXDataMaskTypeDef();
        def.setId(9L);
        def.setName("MASK");
        Mockito.when(dataMaskTypeDefDao.findByServiceDefId(2L)).thenReturn(Collections.singletonList(def));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addDataMaskDefRef", String.class,
                Long.class, Set.class);
        m.setAccessible(true);
        m.invoke(patch, "hive", 1L, new HashSet<>(Collections.singleton("MASK")));
        Mockito.verify(refDao, Mockito.times(1)).create(Mockito.any(XXPolicyRefDataMaskType.class));

        assertThrows(Exception.class, () -> {
            try {
                m.invoke(patch, "hive", 1L, new HashSet<>(Collections.singleton("UNKNOWN")));
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testAddPolicyConditionDefRef_success_andUnknown() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXPolicyRefConditionDao refDao = Mockito.mock(XXPolicyRefConditionDao.class);
        XXPolicyConditionDefDao condDao = Mockito.mock(XXPolicyConditionDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXPolicyRefCondition()).thenReturn(refDao);
        Mockito.when(daoMgr.getXXPolicyConditionDef()).thenReturn(condDao);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(3L);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        XXPolicyConditionDef cond = new XXPolicyConditionDef();
        cond.setId(11L);
        cond.setName("cond");
        Mockito.when(condDao.findByServiceDefId(3L)).thenReturn(Collections.singletonList(cond));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addPolicyConditionDefRef", String.class,
                Long.class, Set.class);
        m.setAccessible(true);
        m.invoke(patch, "hive", 1L, new HashSet<>(Collections.singleton("cond")));
        Mockito.verify(refDao, Mockito.times(1)).create(Mockito.any(XXPolicyRefCondition.class));

        assertThrows(Exception.class, () -> {
            try {
                m.invoke(patch, "hive", 1L, new HashSet<>(Collections.singleton("bad")));
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testUpdateRangerPolicyTableWithPolicyJson_nonEmptyServices_emptyPolicies() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "txManager", null);

        RangerService svc = new RangerService();
        svc.setId(1L);
        Mockito.when(svcStore.getServices(Mockito.any(SearchFilter.class))).thenReturn(Collections.singletonList(svc));

        XXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xServiceDao);
        XXService xsvc = new XXService();
        xsvc.setId(1L);
        xsvc.setName("svc1");
        Mockito.when(xServiceDao.getById(1L)).thenReturn(xsvc);

        XXPolicyDao policyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(policyDao);
        Mockito.when(policyDao.findByServiceId(1L)).thenReturn(Collections.emptyList());

        // mock all other DAOs used by RetrieverContext to return empty lists
        XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
        XXPolicyResourceMapDao xxPolicyResourceMapDao = Mockito.mock(XXPolicyResourceMapDao.class);
        XXPolicyItemDao xxPolicyItemDao = Mockito.mock(XXPolicyItemDao.class);
        XXPolicyItemUserPermDao xxPolicyItemUserPermDao = Mockito.mock(XXPolicyItemUserPermDao.class);
        XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);
        XXPolicyItemAccessDao xxPolicyItemAccessDao = Mockito.mock(XXPolicyItemAccessDao.class);
        XXPolicyItemConditionDao xxPolicyItemConditionDao = Mockito.mock(XXPolicyItemConditionDao.class);
        XXPolicyItemDataMaskInfoDao xxPolicyItemDataMaskInfoDao = Mockito.mock(XXPolicyItemDataMaskInfoDao.class);
        XXPolicyItemRowFilterInfoDao xxPolicyItemRowFilterInfoDao = Mockito.mock(XXPolicyItemRowFilterInfoDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = Mockito.mock(XXPolicyLabelMapDao.class);

        Mockito.when(daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
        Mockito.when(daoMgr.getXXPolicyResourceMap()).thenReturn(xxPolicyResourceMapDao);
        Mockito.when(daoMgr.getXXPolicyItem()).thenReturn(xxPolicyItemDao);
        Mockito.when(daoMgr.getXXPolicyItemUserPerm()).thenReturn(xxPolicyItemUserPermDao);
        Mockito.when(daoMgr.getXXPolicyItemGroupPerm()).thenReturn(xxPolicyItemGroupPermDao);
        Mockito.when(daoMgr.getXXPolicyItemAccess()).thenReturn(xxPolicyItemAccessDao);
        Mockito.when(daoMgr.getXXPolicyItemCondition()).thenReturn(xxPolicyItemConditionDao);
        Mockito.when(daoMgr.getXXPolicyItemDataMaskInfo()).thenReturn(xxPolicyItemDataMaskInfoDao);
        Mockito.when(daoMgr.getXXPolicyItemRowFilterInfo()).thenReturn(xxPolicyItemRowFilterInfoDao);
        Mockito.when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);

        Mockito.when(xxPolicyResourceDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyResourceMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemUserPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemGroupPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemAccessDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemConditionDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDataMaskInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemRowFilterInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyLabelMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("updateRangerPolicyTableWithPolicyJson");
        m.setAccessible(true);
        Assertions.assertDoesNotThrow(() -> {
            try {
                m.invoke(patch);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    @Test
    public void testAddAccessDefRef_success() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXAccessTypeDefDao atDao = Mockito.mock(XXAccessTypeDefDao.class);
        XXPolicyRefAccessTypeDao refDao = Mockito.mock(XXPolicyRefAccessTypeDao.class);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(100L);
        XXAccessTypeDef at = new XXAccessTypeDef();
        at.setId(200L);
        at.setName("read");
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXAccessTypeDef()).thenReturn(atDao);
        Mockito.when(daoMgr.getXXPolicyRefAccessType()).thenReturn(refDao);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        Mockito.when(atDao.findByServiceDefId(100L)).thenReturn(new ArrayList<>(Collections.singletonList(at)));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addAccessDefRef", String.class,
                Long.class, Set.class);
        m.setAccessible(true);
        m.invoke(patch, "hive", 1L, new HashSet<>(Collections.singleton("read")));
        Mockito.verify(refDao, Mockito.times(1)).create(Mockito.any(XXPolicyRefAccessType.class));
    }

    @Test
    public void testAddResourceDefRef_success() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXResourceDefDao rdefDao = Mockito.mock(XXResourceDefDao.class);
        XXPolicyRefResourceDao refDao = Mockito.mock(XXPolicyRefResourceDao.class);
        XXServiceDef sdef = new XXServiceDef();
        sdef.setId(300L);
        XXResourceDef rdef = new XXResourceDef();
        rdef.setId(400L);
        rdef.setName("database");
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(rdefDao);
        Mockito.when(daoMgr.getXXPolicyRefResource()).thenReturn(refDao);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(sdef);
        Mockito.when(rdefDao.findByServiceDefId(300L)).thenReturn(new ArrayList<>(Collections.singletonList(rdef)));
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("addResourceDefRef", String.class,
                RangerPolicy.class);
        m.setAccessible(true);
        RangerPolicy policy = new RangerPolicy();
        policy.setId(9L);
        policy.setName("p9");
        policy.setResources(Collections.singletonMap("database", new RangerPolicyResource("db1")));
        m.invoke(patch, "hive", policy);
        Mockito.verify(refDao, Mockito.times(1)).create(Mockito.any());
    }

    @Test
    public void testUpdateRangerPolicyTableWithPolicyJson_withPolicy_success() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        PolicyRefUpdater policyRefUpdater = Mockito.mock(PolicyRefUpdater.class);
        RangerDataHistService dataHistService = Mockito.mock(RangerDataHistService.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);

        // transaction mocking for thread
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        // one service
        RangerService svc = new RangerService();
        svc.setId(1L);
        svc.setName("svc1");
        svc.setType("hive");
        Mockito.when(svcStore.getServices(Mockito.any(SearchFilter.class))).thenReturn(Collections.singletonList(svc));

        XXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xServiceDao);
        XXService xsvc = new XXService();
        xsvc.setId(1L);
        xsvc.setName("svc1");
        Mockito.when(xServiceDao.getById(1L)).thenReturn(xsvc);

        // policy list
        XXPolicyDao policyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(policyDao);
        XXPolicy xpol = new XXPolicy();
        xpol.setId(10L);
        xpol.setName("p1");
        Mockito.when(policyDao.findByServiceId(1L)).thenReturn(new ArrayList<>(Collections.singletonList(xpol)));
        Mockito.when(policyDao.getById(10L)).thenReturn(xpol);

        // DAOs used by Retriever to build policy -> return empty lists
        XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
        XXPolicyResourceMapDao xxPolicyResourceMapDao = Mockito.mock(XXPolicyResourceMapDao.class);
        XXPolicyItemDao xxPolicyItemDao = Mockito.mock(XXPolicyItemDao.class);
        XXPolicyItemUserPermDao xxPolicyItemUserPermDao = Mockito.mock(XXPolicyItemUserPermDao.class);
        XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);
        XXPolicyItemAccessDao xxPolicyItemAccessDao = Mockito.mock(XXPolicyItemAccessDao.class);
        XXPolicyItemConditionDao xxPolicyItemConditionDao = Mockito.mock(XXPolicyItemConditionDao.class);
        XXPolicyItemDataMaskInfoDao xxPolicyItemDataMaskInfoDao = Mockito.mock(XXPolicyItemDataMaskInfoDao.class);
        XXPolicyItemRowFilterInfoDao xxPolicyItemRowFilterInfoDao = Mockito.mock(XXPolicyItemRowFilterInfoDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = Mockito.mock(XXPolicyLabelMapDao.class);
        Mockito.when(daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
        Mockito.when(daoMgr.getXXPolicyResourceMap()).thenReturn(xxPolicyResourceMapDao);
        Mockito.when(daoMgr.getXXPolicyItem()).thenReturn(xxPolicyItemDao);
        Mockito.when(daoMgr.getXXPolicyItemUserPerm()).thenReturn(xxPolicyItemUserPermDao);
        Mockito.when(daoMgr.getXXPolicyItemGroupPerm()).thenReturn(xxPolicyItemGroupPermDao);
        Mockito.when(daoMgr.getXXPolicyItemAccess()).thenReturn(xxPolicyItemAccessDao);
        Mockito.when(daoMgr.getXXPolicyItemCondition()).thenReturn(xxPolicyItemConditionDao);
        Mockito.when(daoMgr.getXXPolicyItemDataMaskInfo()).thenReturn(xxPolicyItemDataMaskInfoDao);
        Mockito.when(daoMgr.getXXPolicyItemRowFilterInfo()).thenReturn(xxPolicyItemRowFilterInfoDao);
        Mockito.when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);
        Mockito.when(xxPolicyResourceDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyResourceMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemUserPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemGroupPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemAccessDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemConditionDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDataMaskInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemRowFilterInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyLabelMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());

        // dao for serviceDef lookups inside add* methods
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(sdefDao.findByName("hive")).thenReturn(null);

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "policyRefUpdater", policyRefUpdater);
        setIfPresent(patch, "dataHistService", dataHistService);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("updateRangerPolicyTableWithPolicyJson");
        m.setAccessible(true);
        Assertions.assertDoesNotThrow(() -> {
            try {
                m.invoke(patch);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        Mockito.verify(policyRefUpdater, Mockito.atLeastOnce()).cleanupRefTables(Mockito.any(RangerPolicy.class));
        Mockito.verify(policyDao, Mockito.atLeastOnce()).update(Mockito.any(XXPolicy.class));
        Mockito.verify(dataHistService, Mockito.atLeastOnce()).createObjectDataHistory(Mockito.any(RangerPolicy.class),
                Mockito.anyString());
    }

    @Test
    public void testUpdateRangerPolicyTableWithPolicyJson_withPolicy_failureFromThread() throws Exception {
        PatchForUpdatingPolicyJson_J10019 patch = new PatchForUpdatingPolicyJson_J10019();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        PolicyRefUpdater policyRefUpdater = Mockito.mock(PolicyRefUpdater.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);

        // transaction mocking for thread
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);

        RangerService svc = new RangerService();
        svc.setId(1L);
        svc.setName("svc1");
        svc.setType("hive");
        Mockito.when(svcStore.getServices(Mockito.any(SearchFilter.class))).thenReturn(Collections.singletonList(svc));

        XXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xServiceDao);
        XXService xsvc = new XXService();
        xsvc.setId(1L);
        xsvc.setName("svc1");
        Mockito.when(xServiceDao.getById(1L)).thenReturn(xsvc);

        XXPolicyDao policyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(policyDao);
        XXPolicy xpol = new XXPolicy();
        xpol.setId(10L);
        xpol.setName("p1");
        Mockito.when(policyDao.findByServiceId(1L)).thenReturn(new ArrayList<>(Collections.singletonList(xpol)));
        Mockito.when(policyDao.getById(10L)).thenReturn(xpol);

        // Minimal empty lists for retriever DAOs
        XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
        XXPolicyResourceMapDao xxPolicyResourceMapDao = Mockito.mock(XXPolicyResourceMapDao.class);
        XXPolicyItemDao xxPolicyItemDao = Mockito.mock(XXPolicyItemDao.class);
        XXPolicyItemUserPermDao xxPolicyItemUserPermDao = Mockito.mock(XXPolicyItemUserPermDao.class);
        XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);
        XXPolicyItemAccessDao xxPolicyItemAccessDao = Mockito.mock(XXPolicyItemAccessDao.class);
        XXPolicyItemConditionDao xxPolicyItemConditionDao = Mockito.mock(XXPolicyItemConditionDao.class);
        XXPolicyItemDataMaskInfoDao xxPolicyItemDataMaskInfoDao = Mockito.mock(XXPolicyItemDataMaskInfoDao.class);
        XXPolicyItemRowFilterInfoDao xxPolicyItemRowFilterInfoDao = Mockito.mock(XXPolicyItemRowFilterInfoDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = Mockito.mock(XXPolicyLabelMapDao.class);
        Mockito.when(daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
        Mockito.when(daoMgr.getXXPolicyResourceMap()).thenReturn(xxPolicyResourceMapDao);
        Mockito.when(daoMgr.getXXPolicyItem()).thenReturn(xxPolicyItemDao);
        Mockito.when(daoMgr.getXXPolicyItemUserPerm()).thenReturn(xxPolicyItemUserPermDao);
        Mockito.when(daoMgr.getXXPolicyItemGroupPerm()).thenReturn(xxPolicyItemGroupPermDao);
        Mockito.when(daoMgr.getXXPolicyItemAccess()).thenReturn(xxPolicyItemAccessDao);
        Mockito.when(daoMgr.getXXPolicyItemCondition()).thenReturn(xxPolicyItemConditionDao);
        Mockito.when(daoMgr.getXXPolicyItemDataMaskInfo()).thenReturn(xxPolicyItemDataMaskInfoDao);
        Mockito.when(daoMgr.getXXPolicyItemRowFilterInfo()).thenReturn(xxPolicyItemRowFilterInfoDao);
        Mockito.when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);
        Mockito.when(xxPolicyResourceDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyResourceMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemUserPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemGroupPermDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemAccessDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemConditionDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemDataMaskInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyItemRowFilterInfoDao.findByServiceId(1L)).thenReturn(Collections.emptyList());
        Mockito.when(xxPolicyLabelMapDao.findByServiceId(1L)).thenReturn(Collections.emptyList());

        // Force failure inside thread before portPolicy
        Mockito.doThrow(new RuntimeException("boom")).when(policyRefUpdater)
                .cleanupRefTables(Mockito.any(RangerPolicy.class));

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "policyRefUpdater", policyRefUpdater);

        Method m = PatchForUpdatingPolicyJson_J10019.class.getDeclaredMethod("updateRangerPolicyTableWithPolicyJson");
        m.setAccessible(true);
        assertThrows(Exception.class, () -> {
            try {
                m.invoke(patch);
            } catch (Exception e) {
                // unwrap
                throw (Exception) e.getCause();
            }
        });
    }
}
