/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator.Action;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForTrinoSvcDefUpdate_J10062 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForTrinoSvcDefUpdate_J10062 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef dbSvcDef = new RangerServiceDef();
            dbSvcDef.setId(99L);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(dbSvcDef);
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.<Long>any())).thenReturn(Collections.emptyList());
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);
            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
            TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
            Mockito.when(txManager.getTransaction(Mockito.any())).thenReturn(txStatus);
            setIfPresent(patch, "txManager", txManager);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_EmbeddedMissing_throwsRuntime() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
            TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
            Mockito.when(txManager.getTransaction(Mockito.any())).thenReturn(txStatus);
            setIfPresent(patch, "txManager", txManager);

            Assertions.assertThrows(RuntimeException.class, patch::execLoad);
        }
    }

    @Test
    public void testExecLoad_DbServiceDefMissing_throwsRuntime() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            // return null to trigger error path
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(null);
            setIfPresent(patch, "svcDBStore", svcStore);

            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
            TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
            Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
            setIfPresent(patch, "txManager", txManager);

            Assertions.assertThrows(RuntimeException.class, patch::execLoad);
        }
    }

    @Test
    public void testUpdateTrinoSvcDef_SetsFieldsAndValidates() throws Exception {
        PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
        RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
        setIfPresent(patch, "svcDBStore", svcStore);
        setIfPresent(patch, "validatorFactory", validatorFactory);
        Mockito.when(validatorFactory.getServiceDefValidator(Mockito.eq(svcStore))).thenReturn(validator);
        Mockito.doNothing().when(validator).validate(Mockito.any(RangerServiceDef.class), Mockito.eq(Action.UPDATE));
        Mockito.when(svcStore.updateServiceDef(Mockito.any(RangerServiceDef.class))).thenReturn(new RangerServiceDef());

        RangerServiceDef embedded = new RangerServiceDef();
        RangerServiceDef db = new RangerServiceDef();
        List<RangerResourceDef> resources = new ArrayList<>();
        RangerResourceDef res = new RangerResourceDef();
        res.setName("schema");
        resources.add(res);
        embedded.setResources(resources);
        List<RangerAccessTypeDef> accessTypes = new ArrayList<>();
        RangerAccessTypeDef at = new RangerAccessTypeDef();
        at.setName("select");
        accessTypes.add(at);
        embedded.setAccessTypes(accessTypes);
        embedded.setConfigs(new ArrayList<>());

        Method m = PatchForTrinoSvcDefUpdate_J10062.class.getDeclaredMethod("updateTrinoSvcDef", RangerServiceDef.class,
                RangerServiceDef.class);
        m.setAccessible(true);
        Object ret = m.invoke(patch, embedded, db);

        Assertions.assertNotNull(ret);
        Mockito.verify(svcStore, Mockito.times(1)).updateServiceDef(Mockito.any(RangerServiceDef.class));
    }

    @Test
    public void testUpdateTrinoSvcDef_whenValidatorThrows_runtimePropagated() throws Exception {
        PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
        RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
        setIfPresent(patch, "svcDBStore", svcStore);
        setIfPresent(patch, "validatorFactory", validatorFactory);
        Mockito.when(validatorFactory.getServiceDefValidator(Mockito.eq(svcStore))).thenReturn(validator);
        Mockito.doThrow(new RuntimeException("validate error")).when(validator)
                .validate(Mockito.any(RangerServiceDef.class), Mockito.eq(Action.UPDATE));

        RangerServiceDef embedded = new RangerServiceDef();
        RangerServiceDef db = new RangerServiceDef();

        Method m = PatchForTrinoSvcDefUpdate_J10062.class.getDeclaredMethod("updateTrinoSvcDef", RangerServiceDef.class,
                RangerServiceDef.class);
        m.setAccessible(true);

        Assertions.assertThrows(RuntimeException.class, () -> {
            try {
                m.invoke(patch, embedded, db);
            } catch (Exception e) {
                throw (RuntimeException) e.getCause();
            }
        });
    }

    @Test
    public void testCreateDefaultPolicies_whenNoExistingPolicies_createsFourPolicies() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForTrinoSvcDefUpdate_J10062 patch = new PatchForTrinoSvcDefUpdate_J10062();

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "validatorFactory", validatorFactory);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            RangerServiceDef dbSvcDef = new RangerServiceDef();
            dbSvcDef.setId(88L);
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(dbSvcDef);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(dbSvcDef);

            GUIDUtil guidUtil = Mockito.mock(GUIDUtil.class);
            Mockito.when(guidUtil.genGUID()).thenReturn("guid");
            setIfPresent(patch, "guidUtil", guidUtil);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            XXService xSvc = new XXService();
            xSvc.setName("svc1");
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.anyLong()))
                    .thenReturn(new ArrayList<>(Collections.singletonList(xSvc)));
            setIfPresent(patch, "daoMgr", daoMgr);

            // No existing policies for each signature -> should create 4 policies
            Mockito.when(
                    svcStore.getPoliciesByResourceSignature(Mockito.anyString(), Mockito.anyString(), Mockito.eq(true)))
                    .thenReturn(new ArrayList<>());

            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
            TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
            Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(txStatus);
            setIfPresent(patch, "txManager", txManager);

            patch.execLoad();

            Mockito.verify(svcStore, Mockito.times(4)).createPolicy(Mockito.any(RangerPolicy.class));
        }
    }
}
