/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXSecurityZoneDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXSecurityZone;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchPreSql_057_ForUpdateToUniqueGUID_J10052 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchPreSql_057_ForUpdateToUniqueGUID_J10052 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        PatchPreSql_057_ForUpdateToUniqueGUID_J10052 patch = new PatchPreSql_057_ForUpdateToUniqueGUID_J10052();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        GUIDUtil guidUtil = Mockito.mock(GUIDUtil.class);
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);

        XXSecurityZoneDao xxSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);

        Mockito.when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(xxSecurityZoneDao.getAllZoneIdNames()).thenReturn(Collections.<XXSecurityZone>emptyList());
        Mockito.when(xxServiceDao.getAll()).thenReturn(Collections.<XXService>emptyList());

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "guidUtil", guidUtil);
        setIfPresent(patch, "txManager", txManager);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testUpdatePolicyGUIDToUniqueValue_noDuplicatesFlow() {
        PatchPreSql_057_ForUpdateToUniqueGUID_J10052 patch = new PatchPreSql_057_ForUpdateToUniqueGUID_J10052();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXSecurityZoneDao xxSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXSecurityZone zone = new XXSecurityZone();
        zone.setId(1L);
        zone.setName("z");
        XXService svc = new XXService();
        svc.setId(10L);
        svc.setName("s");
        Mockito.when(xxSecurityZoneDao.getAllZoneIdNames()).thenReturn(Arrays.asList(zone));
        Mockito.when(xxServiceDao.getAll()).thenReturn(Arrays.asList(svc));
        Mockito.when(xxPolicyDao.findDuplicateGUIDByServiceIdAndZoneId(Mockito.anyLong(), Mockito.anyLong()))
                .thenReturn(Collections.<String>emptyList());

        setIfPresent(patch, "daoMgr", daoMgr);

        patch.execLoad();
    }

    @Test
    public void testUpdatePolicyGUIDToUniqueValue_duplicatesButNoPolicies() {
        PatchPreSql_057_ForUpdateToUniqueGUID_J10052 patch = new PatchPreSql_057_ForUpdateToUniqueGUID_J10052();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXSecurityZoneDao xxSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXSecurityZone zone = new XXSecurityZone();
        zone.setId(1L);
        zone.setName("z");
        XXService svc = new XXService();
        svc.setId(10L);
        svc.setName("s");
        Mockito.when(xxSecurityZoneDao.getAllZoneIdNames()).thenReturn(Arrays.asList(zone));
        Mockito.when(xxServiceDao.getAll()).thenReturn(Arrays.asList(svc));
        Mockito.when(xxPolicyDao.findDuplicateGUIDByServiceIdAndZoneId(Mockito.anyLong(), Mockito.anyLong()))
                .thenReturn(Arrays.asList("g1"));
        Mockito.when(xxPolicyDao.findPolicyByGUIDAndServiceIdAndZoneId(Mockito.anyString(), Mockito.anyLong(),
                Mockito.anyLong())).thenReturn(Collections.<XXPolicy>emptyList());

        setIfPresent(patch, "daoMgr", daoMgr);

        patch.execLoad();
    }

    @Test
    public void testUpdatePolicyGUIDToUniqueValue_duplicatesWithPoliciesProcessed() {
        PatchPreSql_057_ForUpdateToUniqueGUID_J10052 patch = new PatchPreSql_057_ForUpdateToUniqueGUID_J10052();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXSecurityZoneDao xxSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);

        XXSecurityZone zone = new XXSecurityZone();
        zone.setId(1L);
        zone.setName("z");
        XXService svc = new XXService();
        svc.setId(10L);
        svc.setName("s");
        Mockito.when(xxSecurityZoneDao.getAllZoneIdNames()).thenReturn(Arrays.asList(zone));
        Mockito.when(xxServiceDao.getAll()).thenReturn(Arrays.asList(svc));
        Mockito.when(xxPolicyDao.findDuplicateGUIDByServiceIdAndZoneId(Mockito.anyLong(), Mockito.anyLong()))
                .thenReturn(Arrays.asList("g1"));

        XXPolicy p1 = new XXPolicy();
        p1.setId(5L);
        p1.setZoneId(1L);
        p1.setGuid("g1");
        RangerPolicy pol1 = new RangerPolicy();
        pol1.setGuid("g1");
        p1.setPolicyText(JsonUtils.objectToJson(pol1));
        XXPolicy p2 = new XXPolicy();
        p2.setId(6L);
        p2.setZoneId(1L);
        p2.setGuid("g1");
        RangerPolicy pol2 = new RangerPolicy();
        pol2.setGuid("g1");
        p2.setPolicyText(JsonUtils.objectToJson(pol2));
        Mockito.when(xxPolicyDao.findPolicyByGUIDAndServiceIdAndZoneId(Mockito.anyString(), Mockito.anyLong(),
                Mockito.anyLong())).thenReturn(Arrays.asList(p1, p2));

        GUIDUtil guidUtil = Mockito.mock(GUIDUtil.class);
        Mockito.when(guidUtil.genGUID()).thenReturn("newGuid");

        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "guidUtil", guidUtil);

        patch.execLoad();
        Mockito.verify(xxPolicyDao, Mockito.atLeastOnce()).update(Mockito.any(XXPolicy.class));
    }

    @Test
    public void testGetPolicy_nullAndWithZoneName() throws Exception {
        PatchPreSql_057_ForUpdateToUniqueGUID_J10052 patch = new PatchPreSql_057_ForUpdateToUniqueGUID_J10052();

        Method m = PatchPreSql_057_ForUpdateToUniqueGUID_J10052.class.getDeclaredMethod("getPolicy", XXPolicy.class);
        m.setAccessible(true);
        Assertions.assertNull(m.invoke(patch, new Object[] {null}));

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXSecurityZoneDao xxSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        setIfPresent(patch, "daoMgr", daoMgr);

        XXPolicy p = new XXPolicy();
        p.setId(7L);
        p.setGuid("g");
        p.setZoneId(1L);
        RangerPolicy rp = new RangerPolicy();
        rp.setGuid("g");
        p.setPolicyText(JsonUtils.objectToJson(rp));

        XXSecurityZone z = new XXSecurityZone();
        z.setId(1L);
        z.setName("zoneName");
        Mockito.when(xxSecurityZoneDao.findByZoneId(Mockito.anyLong())).thenReturn(z);

        RangerPolicy out = (RangerPolicy) m.invoke(patch, p);
        Assertions.assertEquals("zoneName", out.getZoneName());
    }
}
