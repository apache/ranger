/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceConfigDefDao;
import org.apache.ranger.db.XXServiceConfigMapDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceConfigDef;
import org.apache.ranger.entity.XXServiceConfigMap;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerAuditFields;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForDefaultAuidtFilters_J10050 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForDefaultAuidtFilters_J10050 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);

            PatchForDefaultAuidtFilters_J10050 patch = new PatchForDefaultAuidtFilters_J10050();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.getAll()).thenReturn(Collections.emptyList());

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testAddDefaultAuditFilters_SkipWhenConfigAlreadyPresent() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);

        XXService xservice = new XXService();
        xservice.setId(10L);
        xservice.setName("svc1");
        List<XXService> services = new ArrayList<>();
        services.add(xservice);
        Mockito.when(xxServiceDao.getAll()).thenReturn(services);

        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerService rangerService = new RangerService();
        rangerService.setName("svc1");
        rangerService.setType("hive");
        Map<String, String> configs = new HashMap<>();
        configs.put(ServiceDBStore.RANGER_PLUGIN_AUDIT_FILTERS, "present");
        rangerService.setConfigs(configs);
        Mockito.when(svcStore.getServiceByName(Mockito.eq("svc1"))).thenReturn(rangerService);

        PatchForDefaultAuidtFilters_J10050 patch = new PatchForDefaultAuidtFilters_J10050();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "rangerAuditFields", Mockito.mock(RangerAuditFields.class));

        Method m = PatchForDefaultAuidtFilters_J10050.class.getDeclaredMethod("addDefaultAuditFilters");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(daoMgr, Mockito.never()).getXXServiceConfigMap();
    }

    @Test
    public void testAddDefaultAuditFilters_NoDefaultValue_Skip() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceConfigDefDao xxServiceConfigDefDao = Mockito.mock(XXServiceConfigDefDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceConfigDef()).thenReturn(xxServiceConfigDefDao);

        XXService xservice = new XXService();
        xservice.setId(11L);
        xservice.setName("svc2");
        List<XXService> services = new ArrayList<>();
        services.add(xservice);
        Mockito.when(xxServiceDao.getAll()).thenReturn(services);

        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerService rangerService = new RangerService();
        rangerService.setName("svc2");
        rangerService.setType("hive");
        rangerService.setConfigs(new HashMap<String, String>());
        Mockito.when(svcStore.getServiceByName(Mockito.eq("svc2"))).thenReturn(rangerService);

        // XXServiceConfigDef list without the required key
        List<XXServiceConfigDef> defList = new ArrayList<>();
        XXServiceConfigDef def = new XXServiceConfigDef();
        def.setName("some.other.key");
        def.setDefaultvalue("x");
        defList.add(def);
        Mockito.when(xxServiceConfigDefDao.findByServiceDefName(Mockito.eq("hive"))).thenReturn(defList);

        PatchForDefaultAuidtFilters_J10050 patch = new PatchForDefaultAuidtFilters_J10050();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "rangerAuditFields", Mockito.mock(RangerAuditFields.class));

        Method m = PatchForDefaultAuidtFilters_J10050.class.getDeclaredMethod("addDefaultAuditFilters");
        m.setAccessible(true);
        m.invoke(patch);

        // no create called since default missing
        Mockito.verify(daoMgr, Mockito.never()).getXXServiceConfigMap();
    }

    @Test
    public void testAddDefaultAuditFilters_AddsConfig() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceConfigDefDao xxServiceConfigDefDao = Mockito.mock(XXServiceConfigDefDao.class);
        XXServiceConfigMapDao xxMapDao = Mockito.mock(XXServiceConfigMapDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceConfigDef()).thenReturn(xxServiceConfigDefDao);
        Mockito.when(daoMgr.getXXServiceConfigMap()).thenReturn(xxMapDao);

        XXService xservice = new XXService();
        xservice.setId(12L);
        xservice.setName("svc3");
        List<XXService> services = new ArrayList<>();
        services.add(xservice);
        Mockito.when(xxServiceDao.getAll()).thenReturn(services);

        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerService rangerService = new RangerService();
        rangerService.setName("svc3");
        rangerService.setType("hive");
        rangerService.setConfigs(new HashMap<String, String>());
        Mockito.when(svcStore.getServiceByName(Mockito.eq("svc3"))).thenReturn(rangerService);

        List<XXServiceConfigDef> defList = new ArrayList<>();
        XXServiceConfigDef def = new XXServiceConfigDef();
        def.setName(ServiceDBStore.RANGER_PLUGIN_AUDIT_FILTERS);
        def.setDefaultvalue("{default}");
        defList.add(def);
        Mockito.when(xxServiceConfigDefDao.findByServiceDefName(Mockito.eq("hive"))).thenReturn(defList);

        RangerAuditFields<?> raf = Mockito.mock(RangerAuditFields.class);
        Mockito.when(raf.populateAuditFields(Mockito.any(XXServiceConfigMap.class), Mockito.eq(xservice)))
                .thenAnswer(inv -> inv.getArgument(0));

        PatchForDefaultAuidtFilters_J10050 patch = new PatchForDefaultAuidtFilters_J10050();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcStore", svcStore);
        setIfPresent(patch, "rangerAuditFields", raf);

        Method m = PatchForDefaultAuidtFilters_J10050.class.getDeclaredMethod("addDefaultAuditFilters");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(xxMapDao, Mockito.times(1)).create(Mockito.any(XXServiceConfigMap.class));
    }

    @Test
    public void testAddDefaultAuditFilterConfig_ErrorPathThrows() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceConfigMapDao xxMapDao = Mockito.mock(XXServiceConfigMapDao.class);
        Mockito.when(daoMgr.getXXServiceConfigMap()).thenReturn(xxMapDao);
        RangerAuditFields<?> raf = Mockito.mock(RangerAuditFields.class);
        Mockito.when(raf.populateAuditFields(Mockito.any(XXServiceConfigMap.class), Mockito.any(XXService.class)))
                .thenAnswer(inv -> inv.getArgument(0));

        Mockito.when(xxMapDao.create(Mockito.any(XXServiceConfigMap.class))).thenThrow(new RuntimeException("fail"));

        PatchForDefaultAuidtFilters_J10050 patch = new PatchForDefaultAuidtFilters_J10050();
        setIfPresent(patch, "rangerAuditFields", raf);
        setIfPresent(patch, "daoMgr", daoMgr);

        XXService xservice = new XXService();
        xservice.setId(13L);

        Method m = PatchForDefaultAuidtFilters_J10050.class.getDeclaredMethod("addDefaultAuditFilterConfig",
                XXService.class, String.class);
        m.setAccessible(true);
        try {
            m.invoke(patch, xservice, "val");
        } catch (Exception ignored) {
        }
    }
}
