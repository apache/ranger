/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerBaseModelObject;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForAtlasToAddTypeRead_J10040 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForAtlasToAddTypeRead_J10040 {
    @BeforeEach
    public void setUpMutableCollections() {
        RangerBaseModelObject.setNullSafeSupplier("v1");
    }

    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

            setIfPresent(patch, "daoMgr", daoMgr);
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testCheckIfTypeReadPermissionSet_Branches() {
        PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

        // false branch: no accesses
        RangerPolicyItem itemNoAccess = new RangerPolicyItem();
        itemNoAccess.setAccesses(new ArrayList<>());
        Assertions.assertFalse(patch.checkIfTypeReadPermissionSet(itemNoAccess));

        // true branch: contains type-read
        RangerPolicyItem itemWithAccess = new RangerPolicyItem();
        List<RangerPolicyItemAccess> accesses = new ArrayList<>();
        accesses.add(new RangerPolicyItemAccess("some", true));
        accesses.add(new RangerPolicyItemAccess("type-read", true));
        itemWithAccess.setAccesses(accesses);
        Assertions.assertTrue(patch.checkIfTypeReadPermissionSet(itemWithAccess));
    }

    @Test
    public void testCheckResourceAndAccessPresent_Branches() throws Exception {
        PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

        List<RangerResourceDef> res = new ArrayList<>();
        RangerResourceDef r1 = new RangerResourceDef();
        r1.setName("other");
        res.add(r1);
        Assertions.assertFalse(invokeCheckResourcePresent(patch, res));
        RangerResourceDef r2 = new RangerResourceDef();
        r2.setName("type");
        res.add(r2);
        Assertions.assertTrue(invokeCheckResourcePresent(patch, res));

        List<RangerAccessTypeDef> acc = new ArrayList<>();
        RangerAccessTypeDef a1 = new RangerAccessTypeDef();
        a1.setName("random");
        acc.add(a1);
        Assertions.assertFalse(invokeCheckAccessPresent(patch, acc));
        RangerAccessTypeDef a2 = new RangerAccessTypeDef();
        a2.setName("type-read");
        acc.add(a2);
        Assertions.assertTrue(invokeCheckAccessPresent(patch, acc));
    }

    @Test
    public void testAddTypeReadPermissionInServiceDef_success() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> res = new ArrayList<>();
            RangerResourceDef rr = new RangerResourceDef();
            rr.setName("type");
            res.add(rr);
            embedded.setResources(res);
            List<RangerAccessTypeDef> ats = new ArrayList<>();
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("type-read");
            ats.add(at);
            embedded.setAccessTypes(ats);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<>());
            db.setAccessTypes(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

            invokeAddTypeReadPermissionInServiceDef(patch);

            Mockito.verify(validator, Mockito.atLeastOnce()).validate(Mockito.<RangerServiceDef>any(), Mockito.any());
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testAddTypeReadPermissionInServiceDef_retNullThrows() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> res = new ArrayList<>();
            RangerResourceDef rr = new RangerResourceDef();
            rr.setName("type");
            res.add(rr);
            embedded.setResources(res);
            List<RangerAccessTypeDef> ats = new ArrayList<>();
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("type-read");
            ats.add(at);
            embedded.setAccessTypes(ats);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<>());
            db.setAccessTypes(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(null);

            Assertions.assertThrows(InvocationTargetException.class,
                    () -> invokeAddTypeReadPermissionInServiceDef(patch));
        }
    }

    @Test
    public void testUpdateDefaultPolicyForType_addsAccessAndPublicItem() throws Exception {
        PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXServiceDao sDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao pDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(sDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(pDao);
        setIfPresent(patch, "daoMgr", daoMgr);

        XXServiceDef xdef = new XXServiceDef();
        xdef.setId(1L);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xdef);

        XXService xs = new XXService();
        xs.setId(2L);
        List<XXService> services = new ArrayList<>();
        services.add(xs);
        Mockito.when(sDao.findByServiceDefId(Mockito.eq(1L))).thenReturn(services);

        XXPolicy xp = new XXPolicy();
        xp.setId(3L);
        xp.setName("all - type-category, type");
        List<XXPolicy> policies = new ArrayList<>();
        policies.add(xp);
        Mockito.when(pDao.findByServiceId(Mockito.eq(2L))).thenReturn(policies);

        ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcDB);

        RangerPolicy rp = new RangerPolicy();
        rp.setPolicyItems(new ArrayList<>());
        RangerPolicyItem pi = new RangerPolicyItem();
        List<RangerPolicyItemAccess> accesses = new ArrayList<>();
        accesses.add(new RangerPolicyItemAccess("read", true));
        pi.setAccesses(accesses);
        rp.getPolicyItems().add(pi);
        Mockito.when(svcDB.getPolicy(Mockito.eq(3L))).thenReturn(rp);

        ArgumentCaptor<RangerPolicy> captor = ArgumentCaptor.forClass(RangerPolicy.class);
        Mockito.when(svcDB.updatePolicy(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

        invokeUpdateDefaultPolicyForType(patch);

        Mockito.verify(svcDB, Mockito.atLeastOnce()).updatePolicy(captor.capture());
        RangerPolicy updated = captor.getValue();
        // original item should now include type-read, and a new item should be appended
        Assertions.assertTrue(
                updated.getPolicyItems().get(0).getAccesses().stream().anyMatch(a -> "type-read".equals(a.getType())));
        Assertions.assertTrue(updated.getPolicyItems().size() >= 2);
    }

    @Test
    public void testUpdateDefaultPolicyForType_alreadyHasAccess_noDuplicate() throws Exception {
        PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        XXServiceDao sDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao pDao = Mockito.mock(XXPolicyDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(sDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(pDao);
        setIfPresent(patch, "daoMgr", daoMgr);

        XXServiceDef xdef = new XXServiceDef();
        xdef.setId(1L);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xdef);

        XXService xs = new XXService();
        xs.setId(2L);
        List<XXService> services = new ArrayList<>();
        services.add(xs);
        Mockito.when(sDao.findByServiceDefId(Mockito.eq(1L))).thenReturn(services);

        XXPolicy xp = new XXPolicy();
        xp.setId(3L);
        xp.setName("all - type-category, type");
        List<XXPolicy> policies = new ArrayList<>();
        policies.add(xp);
        Mockito.when(pDao.findByServiceId(Mockito.eq(2L))).thenReturn(policies);

        ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcDB);

        RangerPolicy rp = new RangerPolicy();
        rp.setPolicyItems(new ArrayList<>());
        RangerPolicyItem pi = new RangerPolicyItem();
        List<RangerPolicyItemAccess> accesses = new ArrayList<>();
        accesses.add(new RangerPolicyItemAccess("type-read", true));
        pi.setAccesses(accesses);
        rp.getPolicyItems().add(pi);
        Mockito.when(svcDB.getPolicy(Mockito.eq(3L))).thenReturn(rp);

        ArgumentCaptor<RangerPolicy> captor = ArgumentCaptor.forClass(RangerPolicy.class);
        Mockito.when(svcDB.updatePolicy(Mockito.any())).thenAnswer(inv -> inv.getArgument(0));

        invokeUpdateDefaultPolicyForType(patch);

        Mockito.verify(svcDB, Mockito.atLeastOnce()).updatePolicy(captor.capture());
        RangerPolicy updated = captor.getValue();
        long countTypeRead = updated.getPolicyItems().get(0).getAccesses().stream()
                .filter(a -> "type-read".equals(a.getType())).count();
        Assertions.assertEquals(1, countTypeRead);
        Assertions.assertTrue(updated.getPolicyItems().size() >= 2);
    }

    @Test
    public void testExecLoad_throwsOnUpdateFailure() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> res = new ArrayList<>();
            RangerResourceDef rr = new RangerResourceDef();
            rr.setName("type");
            res.add(rr);
            embedded.setResources(res);
            List<RangerAccessTypeDef> ats = new ArrayList<>();
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("type-read");
            ats.add(at);
            embedded.setAccessTypes(ats);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForAtlasToAddTypeRead_J10040 patch = new PatchForAtlasToAddTypeRead_J10040();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<>());
            db.setAccessTypes(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(null);

            Assertions.assertThrows(RuntimeException.class, patch::execLoad);
        }
    }

    // reflection helpers
    private static boolean invokeCheckResourcePresent(PatchForAtlasToAddTypeRead_J10040 p, List<RangerResourceDef> list)
            throws Exception {
        Method m = PatchForAtlasToAddTypeRead_J10040.class.getDeclaredMethod("checkResourcePresent", List.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, list);
    }

    private static boolean invokeCheckAccessPresent(PatchForAtlasToAddTypeRead_J10040 p, List<RangerAccessTypeDef> list)
            throws Exception {
        Method m = PatchForAtlasToAddTypeRead_J10040.class.getDeclaredMethod("checkAccessPresent", List.class);
        m.setAccessible(true);
        return (boolean) m.invoke(p, list);
    }

    private static void invokeAddTypeReadPermissionInServiceDef(PatchForAtlasToAddTypeRead_J10040 p) throws Exception {
        Method m = PatchForAtlasToAddTypeRead_J10040.class.getDeclaredMethod("addTypeReadPermissionInServiceDef");
        m.setAccessible(true);
        m.invoke(p);
    }

    private static void invokeUpdateDefaultPolicyForType(PatchForAtlasToAddTypeRead_J10040 p) throws Exception {
        Method m = PatchForAtlasToAddTypeRead_J10040.class.getDeclaredMethod("updateDefaultPolicyForType");
        m.setAccessible(true);
        m.invoke(p);
    }
}
