/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForKafkaServiceDefUpdate_J10015 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForKafkaServiceDefUpdate_J10015 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForKafkaServiceDefUpdate_J10015 patch = new PatchForKafkaServiceDefUpdate_J10015();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", Mockito.mock(ServiceDBStore.class));
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", Mockito.mock(ServiceDBStore.class));

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testJsonStringToMap_fallbackParsesPairs() throws Exception {
        PatchForKafkaServiceDefUpdate_J10015 patch = new PatchForKafkaServiceDefUpdate_J10015();
        Method m = PatchForKafkaServiceDefUpdate_J10015.class.getDeclaredMethod("jsonStringToMap", String.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        HashMap<String, String> res = (HashMap<String, String>) m.invoke(patch, "a=1;b=2");
        Assertions.assertEquals("1", res.get("a"));
        Assertions.assertEquals("2", res.get("b"));

        Object res2 = m.invoke(patch, new Object[] {null});
        Assertions.assertNull(res2);
    }

    @Test
    public void testMapToJsonString_handlesNullAndException() throws Exception {
        PatchForKafkaServiceDefUpdate_J10015 patch = new PatchForKafkaServiceDefUpdate_J10015();
        Method m = PatchForKafkaServiceDefUpdate_J10015.class.getDeclaredMethod("mapToJsonString", Map.class);
        m.setAccessible(true);
        Object resNull = m.invoke(patch, new Object[] {null});
        Assertions.assertNull(resNull);

        PatchForKafkaServiceDefUpdate_J10015 patch2 = new PatchForKafkaServiceDefUpdate_J10015();
        JSONUtil jsonUtil = Mockito.mock(JSONUtil.class);
        Mockito.when(jsonUtil.readMapToString(Mockito.anyMap())).thenThrow(new RuntimeException("bad"));
        setIfPresent(patch2, "jsonUtil", jsonUtil);
        Object resExc = m.invoke(patch2, new HashMap<String, String>());
        Assertions.assertNull(resExc);
    }

    @Test
    public void testCheckNewKafkaresourcePresent_trueAndFalse() throws Exception {
        PatchForKafkaServiceDefUpdate_J10015 patch = new PatchForKafkaServiceDefUpdate_J10015();
        Method m = PatchForKafkaServiceDefUpdate_J10015.class.getDeclaredMethod("checkNewKafkaresourcePresent", List.class);
        m.setAccessible(true);

        List<RangerServiceDef.RangerResourceDef> defs = new ArrayList<>();
        RangerServiceDef.RangerResourceDef r1 = new RangerServiceDef.RangerResourceDef();
        r1.setName("topic");
        defs.add(r1);
        Assertions.assertFalse((boolean) m.invoke(patch, defs));

        RangerServiceDef.RangerResourceDef r2 = new RangerServiceDef.RangerResourceDef();
        r2.setName(PatchForKafkaServiceDefUpdate_J10015.TRANSACTIONALID_RESOURCE_NAME);
        defs.add(r2);
        Assertions.assertTrue((boolean) m.invoke(patch, defs));
    }

    @Test
    public void testUpdateHiveServiceDef_fullFlow_andOptionsRestore() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerServiceDef.RangerResourceDef> resources = new ArrayList<>();
            RangerServiceDef.RangerResourceDef res = new RangerServiceDef.RangerResourceDef();
            res.setName(PatchForKafkaServiceDefUpdate_J10015.TRANSACTIONALID_RESOURCE_NAME);
            resources.add(res);
            embedded.setResources(resources);
            List<RangerServiceDef.RangerAccessTypeDef> access = new ArrayList<>();
            access.add(new RangerServiceDef.RangerAccessTypeDef());
            embedded.setAccessTypes(access);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForKafkaServiceDefUpdate_J10015 patch = new PatchForKafkaServiceDefUpdate_J10015();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            XXServiceDef xx = new XXServiceDef();
            xx.setDefOptions(null);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);
            setIfPresent(patch, "validatorFactory", vf);

            RangerServiceDef dbDef = new RangerServiceDef();
            dbDef.setResources(new ArrayList<>());
            dbDef.setAccessTypes(new ArrayList<>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(dbDef);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(dbDef);

            XXServiceDef xxAfter = new XXServiceDef();
            HashMap<String, String> postOptions = new HashMap<>();
            postOptions.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "true");
            String postStr = new JSONUtil().readMapToString(postOptions);
            xxAfter.setDefOptions(postStr);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx, xxAfter);

            Method m = PatchForKafkaServiceDefUpdate_J10015.class.getDeclaredMethod("updateHiveServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(svcDB, Mockito.times(1)).updateServiceDef(Mockito.any(RangerServiceDef.class));
            Mockito.verify(sdefDao, Mockito.times(1)).update(Mockito.any(XXServiceDef.class));
        }
    }
}
