/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHBaseServiceDefUpdate_J10035 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHBaseServiceDefUpdate_J10035 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);

            XXServiceDef xxServiceDef = new XXServiceDef();
            xxServiceDef.setDefOptions("{}");
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(xxServiceDef);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcDBStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testJsonStringToMap_fallbackAndEmpty() {
        PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        Map<String, String> map = patch.jsonStringToMap("a=b;;c=d;=;e=");
        Assertions.assertEquals(3, map.size());
        Assertions.assertEquals("b", map.get("a"));
        Assertions.assertEquals("d", map.get("c"));
        Assertions.assertNull(map.get("e"));
        Assertions.assertNull(patch.jsonStringToMap(""));
    }

    @Test
    public void testJsonStringToMap_jsonSuccess() {
        PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        Map<String, String> map = patch.jsonStringToMap("{\"a\":\"b\",\"c\":\"d\"}");
        Assertions.assertEquals("b", map.get("a"));
        Assertions.assertEquals("d", map.get("c"));
    }

    @Test
    public void testCheckNewHBaseAccessTypesPresent_trueFalse() throws Exception {
        PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
        Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("checkNewHBaseAccessTypesPresent",
                List.class);
        m.setAccessible(true);
        RangerServiceDef.RangerAccessTypeDef a1 = new RangerServiceDef.RangerAccessTypeDef();
        a1.setName(PatchForHBaseServiceDefUpdate_J10035.REFRESH_ACCESS_TYPE_NAME);
        List<RangerServiceDef.RangerAccessTypeDef> list1 = new ArrayList<>();
        list1.add(a1);
        Assertions.assertTrue((boolean) m.invoke(patch, list1));
        RangerServiceDef.RangerAccessTypeDef a2 = new RangerServiceDef.RangerAccessTypeDef();
        a2.setName("other");
        List<RangerServiceDef.RangerAccessTypeDef> list2 = new ArrayList<>();
        list2.add(a2);
        Assertions.assertFalse((boolean) m.invoke(patch, list2));
    }

    @Test
    public void testMapToJsonString_successAndException() throws Exception {
        PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
        setIfPresent(patch, "jsonUtil", new JSONUtil());
        Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("mapToJsonString", Map.class);
        m.setAccessible(true);
        Map<String, String> input = new HashMap<>();
        input.put("a", "b");
        String json = (String) m.invoke(patch, input);
        Assertions.assertNotNull(json);

        JSONUtil failing = Mockito.mock(JSONUtil.class);
        Mockito.when(failing.readMapToString(Mockito.anyMap())).thenThrow(new RuntimeException("boom"));
        setIfPresent(patch, "jsonUtil", failing);
        String nullJson = (String) m.invoke(patch, input);
        Assertions.assertNull(nullJson);
    }

    @Test
    public void testUpdateHBaseServiceDef_embeddedNull_returnsFalse() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            Boolean ret = (Boolean) m.invoke(patch);
            Assertions.assertFalse(ret);
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_dbServiceDefNull_returnsFalse() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            XXServiceDef xsd = new XXServiceDef();
            xsd.setDefOptions("{}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xsd);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(null);
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcDBStore);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            Boolean ret = (Boolean) m.invoke(patch);
            Assertions.assertFalse(ret);
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_daoServiceDefNull_returnsTrue() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);

            setIfPresent(patch, "daoMgr", daoMgr);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            Boolean ret = (Boolean) m.invoke(patch);
            Assertions.assertTrue(ret);
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_successAndUpdateNullThrows() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            XXServiceDef xsd = new XXServiceDef();
            xsd.setDefOptions("{}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xsd);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef db = new RangerServiceDef();
            // ensure dbServiceDef not null path
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", vf);
            setIfPresent(patch, "svcStore", svcDBStore);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            // success path when update returns non-null
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());
            Boolean ok = (Boolean) m.invoke(patch);
            Assertions.assertTrue(ok);

            // now simulate update returning null -> throws RuntimeException
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(null);
            Assertions.assertThrows(RuntimeException.class, () -> {
                try {
                    m.invoke(patch);
                } catch (InvocationTargetException ite) {
                    if (ite.getTargetException() instanceof RuntimeException) {
                        throw (RuntimeException) ite.getTargetException();
                    }
                    throw new RuntimeException(ite.getTargetException());
                }
            });
        }
    }

    @Test
    public void testExecLoad_exitOnFailure() throws Exception {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                new PatchForHBaseServiceDefUpdate_J10035().execLoad();
            } catch (SecurityException se) {
                Assertions.assertEquals("1", se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_preserveOptionValueWhenPresent_invokesDaoUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);

            // Pre-update without the option triggers update path
            XXServiceDef pre = new XXServiceDef();
            pre.setDefOptions("{}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(pre);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef db = new RangerServiceDef();
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", vf);
            setIfPresent(patch, "svcStore", svcDBStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            // Post-update service-def with option present
            XXServiceDef post = new XXServiceDef();
            post.setDefOptions("{\"enableDenyAndExceptionsInPolicies\":\"false\"}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(pre, post);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(sdefDao, Mockito.atLeastOnce()).update(Mockito.any());
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_preserveExistingOptionValue() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);

            // Pre-update has the option set to true
            XXServiceDef pre = new XXServiceDef();
            pre.setDefOptions("{\"enableDenyAndExceptionsInPolicies\":\"true\"}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(pre);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef db = new RangerServiceDef();
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", vf);
            setIfPresent(patch, "svcStore", svcDBStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            // Post-update contains the key so code path will see pre already has it and
            // skip dao update
            XXServiceDef post = new XXServiceDef();
            post.setDefOptions("{\"enableDenyAndExceptionsInPolicies\":\"false\"}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(pre, post);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            m.invoke(patch);
        }
    }

    @Test
    public void testUpdateHBaseServiceDef_updateReturnsNullThrows() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHBaseServiceDefUpdate_J10035 patch = new PatchForHBaseServiceDefUpdate_J10035();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            XXServiceDef pre = new XXServiceDef();
            pre.setDefOptions("{}");
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(pre);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef db = new RangerServiceDef();
            Mockito.when(svcDBStore.getServiceDefByName(Mockito.anyString())).thenReturn(db);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", vf);
            setIfPresent(patch, "svcStore", svcDBStore);

            Mockito.when(svcDBStore.updateServiceDef(Mockito.any())).thenReturn(null);

            Method m = PatchForHBaseServiceDefUpdate_J10035.class.getDeclaredMethod("updateHBaseServiceDef");
            m.setAccessible(true);
            Assertions.assertThrows(RuntimeException.class, () -> {
                try {
                    m.invoke(patch);
                } catch (InvocationTargetException ite) {
                    if (ite.getTargetException() instanceof RuntimeException) {
                        throw (RuntimeException) ite.getTargetException();
                    }
                    throw new RuntimeException(ite.getTargetException());
                }
            });
        }
    }
}
