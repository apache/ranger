/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHiveServiceDefUpdate_J10010 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHiveServiceDefUpdate_J10010 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", Mockito.mock(ServiceDBStore.class));
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "svcStore", Mockito.mock(ServiceDBStore.class));

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateServiceDef_trueAndFalse() throws Exception {
        PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
        RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
        RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
        setIfPresent(patch, "validatorFactory", vf);
        Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcStore", svcStore);
        Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

        Method m = PatchForHiveServiceDefUpdate_J10010.class.getDeclaredMethod("updateServiceDef",
                RangerServiceDef.class, RangerServiceDef.class);
        m.setAccessible(true);

        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
        RangerServiceDef embedded = new RangerServiceDef();
        embedded.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
        embedded.setResources(new ArrayList<RangerResourceDef>());

        // false: no hiveservice
        Assertions.assertFalse((boolean) m.invoke(patch, serviceDef, embedded));

        // true: with hiveservice resource present
        RangerResourceDef res = new RangerResourceDef();
        res.setName("hiveservice");
        List<RangerResourceDef> resDefs = new ArrayList<>();
        resDefs.add(res);
        embedded.setResources(resDefs);
        Assertions.assertTrue((boolean) m.invoke(patch, serviceDef, embedded));
    }

    @Test
    public void testUpdateHiveServiceDef_optionRestorePaths() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerValidatorFactory vf2 = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator2 = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf2);
            Mockito.when(vf2.getServiceDefValidator(Mockito.any())).thenReturn(validator2);

            // Embedded present
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> resDefs = new ArrayList<>();
            RangerResourceDef res = new RangerResourceDef();
            res.setName("hiveservice");
            resDefs.add(res);
            embedded.setResources(resDefs);
            embedded.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            // Pre/post service-def options
            XXServiceDef xxPre = new XXServiceDef();
            HashMap<String, String> pre = new HashMap<>();
            pre.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "on");
            xxPre.setDefOptions(new JSONUtil().readMapToString(pre));
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<RangerResourceDef>());
            db.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            patch.execLoad();
            Mockito.verify(svcDB, Mockito.atLeastOnce()).updateServiceDef(Mockito.<RangerServiceDef>any());
        }
    }

    @Test
    public void testUpdateHiveServiceDef_embeddedNull_noop() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
            patch.execLoad();
        }
    }

    @Test
    public void testUpdateHiveServiceDef_daoNull_noop() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setResources(new ArrayList<RangerResourceDef>());
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);

            patch.execLoad();
        }
    }

    @Test
    public void testUpdateHiveServiceDef_dbNull_noUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> resDefs = new ArrayList<>();
            RangerResourceDef res = new RangerResourceDef();
            res.setName("hiveservice");
            resDefs.add(res);
            embedded.setResources(resDefs);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);
            XXServiceDef xx = new XXServiceDef();
            HashMap<String, String> pre = new HashMap<>();
            pre.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "on");
            xx.setDefOptions(new JSONUtil().readMapToString(pre));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(null);

            patch.execLoad();
            Mockito.verify(svcDB, Mockito.never()).updateServiceDef(Mockito.any());
        }
    }

    @Test
    public void testUpdateHiveServiceDef_optionRestore_removeWhenPreEmpty() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForHiveServiceDefUpdate_J10010 patch = new PatchForHiveServiceDefUpdate_J10010();
            setIfPresent(patch, "jsonUtil", new JSONUtil());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            setIfPresent(patch, "validatorFactory", vf);
            Mockito.when(vf.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            RangerServiceDef embedded = new RangerServiceDef();
            List<RangerResourceDef> resDefs = new ArrayList<>();
            RangerResourceDef res = new RangerResourceDef();
            res.setName("hiveservice");
            resDefs.add(res);
            embedded.setResources(resDefs);
            embedded.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
            utilMock.when(() -> EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(Mockito.anyString()))
                    .thenReturn(embedded);

            XXServiceDef xxPre = new XXServiceDef();
            xxPre.setDefOptions(null);
            XXServiceDef xxPost = new XXServiceDef();
            HashMap<String, String> post = new HashMap<>();
            post.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "off");
            xxPost.setDefOptions(new JSONUtil().readMapToString(post));
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xxPre, xxPost);

            RangerServiceDef db = new RangerServiceDef();
            db.setResources(new ArrayList<RangerResourceDef>());
            db.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(db);
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(db);

            patch.execLoad();

            ArgumentCaptor<XXServiceDef> captor = ArgumentCaptor.forClass(XXServiceDef.class);
            Mockito.verify(sdefDao, Mockito.atLeastOnce()).update(captor.capture());
            XXServiceDef updated = captor.getValue();
            Map<String, String> updatedMap = new JSONUtil().jsonToMap(updated.getDefOptions());
            Assertions.assertTrue(updatedMap == null
                    || !updatedMap.containsKey(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES));
        }
    }
}
