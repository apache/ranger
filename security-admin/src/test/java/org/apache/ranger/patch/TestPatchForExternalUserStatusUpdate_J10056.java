/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerCommonEnums;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.support.SimpleTransactionStatus;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForExternalUserStatusUpdate_J10056 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForExternalUserStatusUpdate_J10056 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForExternalUserStatusUpdate_J10056 patch = new PatchForExternalUserStatusUpdate_J10056();
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
            Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
            Mockito.when(xxPortalUserDao.findByUserSourceAndStatus(Mockito.anyInt(), Mockito.anyInt()))
                    .thenReturn(Collections.emptyList());
            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);

            setIfPresent(patch, "daoManager", daoMgr);
            setIfPresent(patch, "txManager", txManager);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_UpdatesUsersViaTransaction() {
        PatchForExternalUserStatusUpdate_J10056 patch = new PatchForExternalUserStatusUpdate_J10056();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);

        // One disabled external user
        XXPortalUser user = new XXPortalUser();
        user.setLoginId("u1");
        user.setStatus(RangerCommonEnums.ACT_STATUS_DISABLED);
        Mockito.when(xxPortalUserDao.findByUserSourceAndStatus(Mockito.anyInt(), Mockito.anyInt()))
                .thenReturn(Collections.singletonList(user));

        // Mock tx template execute path via PlatformTransactionManager
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", txManager);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class)))
                .thenReturn(new SimpleTransactionStatus());

        // Capture update invocation executed inside lambda
        Mockito.doAnswer(inv -> null).when(xxPortalUserDao).update(Mockito.any(XXPortalUser.class), Mockito.eq(true));

        patch.execLoad();

        // status should be set to ACTIVE before dao.update
        Assertions.assertEquals(RangerCommonEnums.ACT_STATUS_ACTIVE, user.getStatus());
        Mockito.verify(xxPortalUserDao, Mockito.times(1)).update(Mockito.any(XXPortalUser.class), Mockito.eq(true));
    }

    @Test
    public void testExecLoad_TransactionThrowsRuntime() {
        PatchForExternalUserStatusUpdate_J10056 patch = new PatchForExternalUserStatusUpdate_J10056();

        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        XXPortalUser user = new XXPortalUser();
        user.setLoginId("u2");
        user.setStatus(RangerCommonEnums.ACT_STATUS_DISABLED);
        Mockito.when(xxPortalUserDao.findByUserSourceAndStatus(Mockito.anyInt(), Mockito.anyInt()))
                .thenReturn(Collections.singletonList(user));

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", txManager);
        Mockito.when(txManager.getTransaction(Mockito.any(TransactionDefinition.class)))
                .thenReturn(new SimpleTransactionStatus());

        // Simulate dao.update throwing
        Mockito.doThrow(new RuntimeException("db fail")).when(xxPortalUserDao).update(Mockito.any(XXPortalUser.class),
                Mockito.eq(true));

        Assertions.assertThrows(RuntimeException.class, patch::execLoad);
    }

    @Test
    public void testExecLoad_NoUsers_NoAction() {
        PatchForExternalUserStatusUpdate_J10056 patch = new PatchForExternalUserStatusUpdate_J10056();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(xxPortalUserDao.findByUserSourceAndStatus(Mockito.anyInt(), Mockito.anyInt()))
                .thenReturn(Collections.emptyList());
        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", Mockito.mock(PlatformTransactionManager.class));

        patch.execLoad();

        Mockito.verify(xxPortalUserDao, Mockito.never()).update(Mockito.any(XXPortalUser.class), Mockito.eq(true));
    }

    @Test
    public void testExecLoad_NullUserEntry_Skipped() {
        PatchForExternalUserStatusUpdate_J10056 patch = new PatchForExternalUserStatusUpdate_J10056();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(xxPortalUserDao.findByUserSourceAndStatus(Mockito.anyInt(), Mockito.anyInt()))
                .thenReturn(new ArrayList<XXPortalUser>() {
                    {
                        add(null);
                    }
                });
        setIfPresent(patch, "daoManager", daoMgr);
        setIfPresent(patch, "txManager", Mockito.mock(PlatformTransactionManager.class));

        patch.execLoad();

        Mockito.verify(xxPortalUserDao, Mockito.never()).update(Mockito.any(XXPortalUser.class), Mockito.eq(true));
    }
}
