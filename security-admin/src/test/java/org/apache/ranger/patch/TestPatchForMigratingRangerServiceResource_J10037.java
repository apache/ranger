/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceResourceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerServiceResourceService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForMigratingRangerServiceResource_J10037 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForMigratingRangerServiceResource_J10037 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForMigratingRangerServiceResource_J10037 patch = new PatchForMigratingRangerServiceResource_J10037();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.getAll()).thenReturn(Collections.emptyList());
            PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
            RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);

            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "txManager", txManager);
            setIfPresent(patch, "serviceResourceService", serviceResourceService);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_withServiceNoServiceResources() {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceResourceDao xxServiceResourceDao = Mockito.mock(XXServiceResourceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceResource()).thenReturn(xxServiceResourceDao);

        XXService svc = new XXService();
        svc.setId(1L);
        svc.setDisplayName("svc");
        Mockito.when(xxServiceDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        Mockito.when(xxServiceResourceDao.findServiceResourceGuidsInServiceId(Mockito.eq(1L)))
                .thenReturn(Collections.emptyList());

        PatchForMigratingRangerServiceResource_J10037 patch = new PatchForMigratingRangerServiceResource_J10037();
        setIfPresent(patch, "daoMgr", daoMgr);

        patch.execLoad();
    }

    @Test
    public void testUpdateRangerServiceResourceSignature_threadError_throws() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceResourceDao xxServiceResourceDao = Mockito.mock(XXServiceResourceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceResource()).thenReturn(xxServiceResourceDao);

        XXService svc = new XXService();
        svc.setId(1L);
        Mockito.when(xxServiceDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        List<String> guids = new ArrayList<>();
        guids.add("g1");
        Mockito.when(xxServiceResourceDao.findServiceResourceGuidsInServiceId(Mockito.eq(1L))).thenReturn(guids);
        Mockito.when(xxServiceResourceDao.findByGuid(Mockito.anyString())).thenThrow(new RuntimeException("boom"));

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any())).thenReturn(txStatus);

        PatchForMigratingRangerServiceResource_J10037 patch = new PatchForMigratingRangerServiceResource_J10037();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "serviceResourceService", Mockito.mock(RangerServiceResourceService.class));

        Method m = PatchForMigratingRangerServiceResource_J10037.class
                .getDeclaredMethod("updateRangerServiceResourceSignature");
        m.setAccessible(true);
        Assertions.assertThrows(Exception.class, () -> {
            try {
                m.invoke(patch);
            } catch (Exception e) {
                throw (Exception) e.getCause();
            }
        });
    }

    @Test
    public void testUpdateRangerServiceResourceSignature_successUpdatesEntities() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXServiceResourceDao xxServiceResourceDao = Mockito.mock(XXServiceResourceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXServiceResource()).thenReturn(xxServiceResourceDao);

        XXService svc = new XXService();
        svc.setId(7L);
        svc.setDisplayName("svc7");
        Mockito.when(xxServiceDao.getAll()).thenReturn(new ArrayList<>(Collections.singletonList(svc)));
        List<String> guids = new ArrayList<>();
        guids.add("g1");
        guids.add("g2");
        Mockito.when(xxServiceResourceDao.findServiceResourceGuidsInServiceId(Mockito.eq(7L))).thenReturn(guids);

        XXServiceResource entity1 = new XXServiceResource();
        XXServiceResource entity2 = new XXServiceResource();
        Mockito.when(xxServiceResourceDao.findByGuid(Mockito.eq("g1"))).thenReturn(entity1);
        Mockito.when(xxServiceResourceDao.findByGuid(Mockito.eq("g2"))).thenReturn(entity2);

        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class);
        TransactionStatus txStatus = Mockito.mock(TransactionStatus.class);
        Mockito.when(txManager.getTransaction(Mockito.any())).thenReturn(txStatus);

        RangerServiceResourceService serviceResourceService = Mockito.mock(RangerServiceResourceService.class);
        RangerServiceResource view = new RangerServiceResource();
        view.setResourceElements(new HashMap<>());
        Mockito.when(serviceResourceService.getPopulatedViewObject(Mockito.any(XXServiceResource.class)))
                .thenReturn(view);

        PatchForMigratingRangerServiceResource_J10037 patch = new PatchForMigratingRangerServiceResource_J10037();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "txManager", txManager);
        setIfPresent(patch, "serviceResourceService", serviceResourceService);

        Method m = PatchForMigratingRangerServiceResource_J10037.class
                .getDeclaredMethod("updateRangerServiceResourceSignature");
        m.setAccessible(true);
        m.invoke(patch);

        ArgumentCaptor<XXServiceResource> captor = ArgumentCaptor.forClass(XXServiceResource.class);
        Mockito.verify(xxServiceResourceDao, Mockito.times(2)).update(captor.capture());
        Assertions.assertEquals(2, captor.getAllValues().size());
    }

    @Test
    public void testExecLoad_whenServicesListNull() {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(xxServiceDao.getAll()).thenReturn(null);

        PatchForMigratingRangerServiceResource_J10037 patch = new PatchForMigratingRangerServiceResource_J10037();
        setIfPresent(patch, "daoMgr", daoMgr);

        patch.execLoad();
    }
}
