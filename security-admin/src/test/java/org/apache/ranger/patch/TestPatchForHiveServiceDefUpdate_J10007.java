/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.util.CLIUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHiveServiceDefUpdate_J10007 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHiveServiceDefUpdate_J10007 {
    @Test
    public void testJsonStringToMapJsonAndFallback() throws Exception {
        PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
        patch.jsonUtil = Mockito.mock(JSONUtil.class);
        Mockito.when(patch.jsonUtil.jsonToMap("{\"a\":\"b\"}")).thenReturn(new HashMap<String, String>() {
            {
                put("a", "b");
            }
        });
        Map<String, String> jsonParsed = patch.jsonStringToMap("{\"a\":\"b\"}");
        Assertions.assertEquals("b", jsonParsed.get("a"));

        Mockito.when(patch.jsonUtil.jsonToMap("k=v;x=y")).thenThrow(new RuntimeException("bad json"));
        Map<String, String> fallback = patch.jsonStringToMap("k=v;x=y");
        Assertions.assertEquals("v", fallback.get("k"));
        Assertions.assertEquals("y", fallback.get("x"));
    }

    @Test
    public void testPrivate_checkURLresourcePresent() throws Exception {
        PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
        RangerServiceDef.RangerResourceDef resDef = new RangerServiceDef.RangerResourceDef();
        resDef.setName("url");
        List<RangerServiceDef.RangerResourceDef> res = new ArrayList<>(Arrays.asList(resDef));
        Method m = PatchForHiveServiceDefUpdate_J10007.class.getDeclaredMethod("checkURLresourcePresent", List.class);
        m.setAccessible(true);
        Boolean present = (Boolean) m.invoke(patch, res);
        Assertions.assertTrue(present);
    }

    @Test
    public void testExecLoadUpdatesServiceDefAndPreservesOption() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);

        XXServiceDef xxServiceDef = Mockito.mock(XXServiceDef.class);
        Mockito.when(xxServiceDefDao.findByName("hive")).thenReturn(xxServiceDef);
        Mockito.when(xxServiceDef.getDefOptions()).thenReturn("{\"existing\":\"true\"}");

        ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
        RangerServiceDef dbDef = new RangerServiceDef();
        dbDef.setAccessTypes(new ArrayList<>(Arrays.asList()));
        dbDef.setResources(new ArrayList<>(Arrays.asList()));
        Mockito.when(svcDBStore.getServiceDefByName("hive")).thenReturn(dbDef);

        RangerServiceDef embedded = new RangerServiceDef();
        RangerServiceDef.RangerResourceDef resDef2 = new RangerServiceDef.RangerResourceDef();
        resDef2.setName("url");
        embedded.setResources(new ArrayList<>(Arrays.asList(resDef2)));
        embedded.setAccessTypes(new ArrayList<>(Arrays.asList(new RangerServiceDef.RangerAccessTypeDef("select"))));

        RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
        RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
        Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(embedded);

            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDBStore;
            patch.validatorFactory = validatorFactory;
            patch.svcStore = svcDBStore;
            patch.jsonUtil = new JSONUtil();
            patch.stringUtil = new StringUtil();

            patch.execLoad();

            Mockito.verify(validator).validate(Mockito.any(RangerServiceDef.class),
                    Mockito.eq(RangerValidator.Action.UPDATE));
            Mockito.verify(svcDBStore).updateServiceDef(Mockito.any(RangerServiceDef.class));
        }
    }

    @Test
    public void testInitAndPrintStats_DoNothing() throws Exception {
        PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
        Assertions.assertDoesNotThrow(() -> patch.init());
        Assertions.assertDoesNotThrow(() -> patch.printStats());
    }

    @Test
    public void testMain_Success_ExitZero() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.setMoreToProcess(false);
            cliMock.when(() -> CLIUtil.getBean(PatchForHiveServiceDefUpdate_J10007.class)).thenReturn(patch);
            CLIUtil cli = Mockito.mock(CLIUtil.class);
            cliMock.when(() -> CLIUtil.getBean(CLIUtil.class)).thenReturn(cli);

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForHiveServiceDefUpdate_J10007.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertNotNull(se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMain_Failure_ExitOne() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            cliMock.when(() -> CLIUtil.getBean(PatchForHiveServiceDefUpdate_J10007.class))
                    .thenThrow(new RuntimeException("boom"));

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForHiveServiceDefUpdate_J10007.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertEquals("1", se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMapToJsonString_NullAndWarn() throws Exception {
        PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
        patch.jsonUtil = Mockito.mock(JSONUtil.class);
        Method m = PatchForHiveServiceDefUpdate_J10007.class.getDeclaredMethod("mapToJsonString", Map.class);
        m.setAccessible(true);
        String nullVal = (String) m.invoke(patch, (Object) null);
        Assertions.assertNull(nullVal);
        Mockito.when(patch.jsonUtil.readMapToString(Mockito.anyMap())).thenThrow(new RuntimeException("bad"));
        String ret = (String) m.invoke(patch, new HashMap<String, String>() {
            {
                put("a", "b");
            }
        });
        Assertions.assertNull(ret);
    }

    @Test
    public void testExecLoad_EmbeddedNull_NoAction() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(null);

            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;
            patch.jsonUtil = new JSONUtil();
            patch.stringUtil = new StringUtil();

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
        }
    }

    @Test
    public void testExecLoad_UpdateReturnsNull_ErrorHandled() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            RangerServiceDef.RangerResourceDef resDef = new RangerServiceDef.RangerResourceDef();
            resDef.setName("url");
            embedded.setResources(new ArrayList<>(Arrays.asList(resDef)));
            embedded.setAccessTypes(new ArrayList<>(Arrays.asList(new RangerServiceDef.RangerAccessTypeDef("select"))));
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            XXServiceDef xxServiceDef = Mockito.mock(XXServiceDef.class);
            Mockito.when(xxServiceDefDao.findByName("hive")).thenReturn(xxServiceDef);
            Mockito.when(xxServiceDef.getDefOptions()).thenReturn(null);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef dbDef = new RangerServiceDef();
            dbDef.setAccessTypes(new ArrayList<>(Arrays.asList()));
            dbDef.setResources(new ArrayList<>(Arrays.asList()));
            Mockito.when(svcDBStore.getServiceDefByName("hive")).thenReturn(dbDef);
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any(RangerServiceDef.class))).thenReturn(null);

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDBStore;
            patch.validatorFactory = validatorFactory;
            patch.svcStore = svcDBStore;
            patch.jsonUtil = new JSONUtil();
            patch.stringUtil = new StringUtil();

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
        }
    }

    @Test
    public void testExecLoad_DbServiceDefNull_NoUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(new RangerServiceDef());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName("hive")).thenReturn(null);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDBStore.getServiceDefByName("hive")).thenReturn(null);

            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDBStore;
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = svcDBStore;
            patch.jsonUtil = new JSONUtil();
            patch.stringUtil = new StringUtil();

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
        }
    }

    @Test
    public void testExecLoad_UrlResourceAbsent_NoAccessTypesUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            // embedded resources without URL
            RangerServiceDef.RangerResourceDef res = new RangerServiceDef.RangerResourceDef();
            res.setName("db");
            embedded.setResources(new ArrayList<>(Arrays.asList(res)));
            embedded.setAccessTypes(new ArrayList<>(Arrays.asList(new RangerServiceDef.RangerAccessTypeDef("select"))));
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            XXServiceDef xxServiceDef = Mockito.mock(XXServiceDef.class);
            Mockito.when(xxServiceDefDao.findByName("hive")).thenReturn(xxServiceDef);
            Mockito.when(xxServiceDef.getDefOptions()).thenReturn(null);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef dbDef = new RangerServiceDef();
            dbDef.setResources(new ArrayList<>(Arrays.asList()));
            dbDef.setAccessTypes(new ArrayList<>(Arrays.asList()));
            Mockito.when(svcDBStore.getServiceDefByName("hive")).thenReturn(dbDef);

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDBStore;
            patch.validatorFactory = validatorFactory;
            patch.svcStore = svcDBStore;
            patch.jsonUtil = new JSONUtil();
            patch.stringUtil = new StringUtil();

            patch.execLoad();

            // validator should still be called with UPDATE on dbDef
            Mockito.verify(validator).validate(Mockito.any(RangerServiceDef.class), Mockito.eq(RangerValidator.Action.UPDATE));
            Mockito.verify(svcDBStore).updateServiceDef(Mockito.any(RangerServiceDef.class));
        }
    }

    @Test
    public void testJsonStringToMap_NullAndEmpty() {
        PatchForHiveServiceDefUpdate_J10007 patch = new PatchForHiveServiceDefUpdate_J10007();
        Map<String, String> nullMap = patch.jsonStringToMap(null);
        Assertions.assertNull(nullMap);
        Map<String, String> emptyMap = patch.jsonStringToMap("");
        Assertions.assertNull(emptyMap);
    }
}
