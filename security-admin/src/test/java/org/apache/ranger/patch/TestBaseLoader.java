/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.util.CLIUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

/**
 * @generated by Cursor
 * @description <Unit Test for BaseLoader class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestBaseLoader {
    static class DummyLoader extends BaseLoader {
        int execCalls;
        boolean throwError;

        @Override
        public void printStats() {
            // no-op for test
        }

        @Override
        public void execLoad() {
            execCalls++;
            if (throwError) {
                throw new RuntimeException("boom");
            }
        }
    }

    @Test
    public void testInitWithBatchSizeAndAuthenticate() throws Exception {
        CLIUtil cliUtil = Mockito.mock(CLIUtil.class);
        try (MockedStatic<CLIUtil> mocked = Mockito.mockStatic(CLIUtil.class)) {
            mocked.when(() -> CLIUtil.getBean(CLIUtil.class)).thenReturn(cliUtil);
            DummyLoader loader = new DummyLoader();
            loader.init(10);
            Mockito.verify(cliUtil, Mockito.times(1)).authenticate();
        }
    }

    @Test
    public void testLoadCompletesAndStopsProcessing() {
        DummyLoader loader = new DummyLoader();
        Assertions.assertTrue(loader.isMoreToProcess());
        loader.load();
        Assertions.assertFalse(loader.isMoreToProcess());
        Assertions.assertEquals(1, loader.execCalls);
    }

    @Test
    public void testLoadWhenExecThrows_setsMoreToProcessFalse() {
        DummyLoader loader = new DummyLoader();
        loader.throwError = true;
        loader.load();
        Assertions.assertFalse(loader.isMoreToProcess());
        Assertions.assertEquals(1, loader.execCalls);
    }

    @Test
    public void testLoadWithNonNegativeBatchSize_doesNotStopProcessing() throws Exception {
        CLIUtil cliUtil = Mockito.mock(CLIUtil.class);
        try (MockedStatic<CLIUtil> mocked = Mockito.mockStatic(CLIUtil.class)) {
            mocked.when(() -> CLIUtil.getBean(CLIUtil.class)).thenReturn(cliUtil);
            DummyLoader loader = new DummyLoader();
            loader.init(1);
            loader.load();
            Assertions.assertTrue(loader.isMoreToProcess());
        }
    }

    @Test
    public void testStartProgressMonitorAndNotifyExit() throws InterruptedException {
        DummyLoader loader = new DummyLoader();
        loader.startProgressMonitor();
        loader.setMoreToProcess(false);
        synchronized (loader.twoDForm) {
            loader.twoDForm.notifyAll();
        }
        // give monitor thread a moment to exit
        Thread.sleep(50);
        Assertions.assertFalse(loader.isMoreToProcess());
    }

    @Test
    public void testTimeTakenAndRateFormatting() throws InterruptedException {
        DummyLoader loader = new DummyLoader();
        String first = loader.timeTakenSoFar(5);
        Assertions.assertNotNull(first);
        Thread.sleep(2);
        String second = loader.timeTakenSoFar(10);
        Assertions.assertNotNull(second);
    }

    @Test
    public void testFormatTimeTakenVariants() {
        DummyLoader loader = new DummyLoader();
        Assertions.assertEquals("0ms", loader.formatTimeTaken(0));
        String secs = loader.formatTimeTaken(1500);
        Assertions.assertTrue(secs.contains("secs"));
        String mins = loader.formatTimeTaken(61_000);
        Assertions.assertTrue(mins.contains("mins"));
        String hrs = loader.formatTimeTaken(3_600_000);
        Assertions.assertTrue(hrs.contains("hrs"));
    }

    @Test
    public void testOnExitLogs() {
        DummyLoader loader = new DummyLoader();
        loader.onExit();
        Assertions.assertTrue(true);
    }
}
