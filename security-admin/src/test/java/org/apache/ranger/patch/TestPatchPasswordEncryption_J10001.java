/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAssetDao;
import org.apache.ranger.entity.XXAsset;
import org.apache.ranger.service.XAssetService;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchPasswordEncryption_J10001 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchPasswordEncryption_J10001 {
    @Test
    public void testExecLoadEncryptsPasswordsAndUpdates() {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXAssetDao xxAssetDao = Mockito.mock(XXAssetDao.class);
        Mockito.when(daoMgr.getXXAsset()).thenReturn(xxAssetDao);

        StringUtil stringUtil = Mockito.mock(StringUtil.class);
        XAssetService xAssetService = Mockito.mock(XAssetService.class);
        XXAsset asset1 = Mockito.mock(XXAsset.class);
        XXAsset asset2 = Mockito.mock(XXAsset.class);

        Mockito.when(xxAssetDao.getAll()).thenReturn(Arrays.asList(asset1, asset2));
        Mockito.when(stringUtil.isEmpty(Mockito.anyString())).thenAnswer(inv -> {
            String s = inv.getArgument(0);
            return s == null || s.isEmpty();
        });
        Mockito.when(asset1.getConfig()).thenReturn("conf1");
        Mockito.when(asset2.getConfig()).thenReturn("conf2");
        Mockito.when(asset1.getName()).thenReturn("a1");
        Mockito.when(asset2.getName()).thenReturn("a2");
        Mockito.when(xAssetService.getConfigWithEncryptedPassword("conf1", false)).thenReturn("enc1");
        Mockito.when(xAssetService.getConfigWithEncryptedPassword("conf2", false)).thenReturn("enc2");

        PatchPasswordEncryption_J10001 patch = new PatchPasswordEncryption_J10001();
        patch.xaDaoManager = daoMgr;
        patch.stringUtil = stringUtil;
        patch.xAssetService = xAssetService;

        patch.execLoad();

        Mockito.verify(asset1).setConfig("enc1");
        Mockito.verify(asset2).setConfig("enc2");
        Mockito.verify(xxAssetDao, Mockito.times(2)).update(Mockito.any(XXAsset.class));
    }

    @Test
    public void testExecLoadWithEmptyList() {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXAssetDao xxAssetDao = Mockito.mock(XXAssetDao.class);
        Mockito.when(daoMgr.getXXAsset()).thenReturn(xxAssetDao);
        Mockito.when(xxAssetDao.getAll()).thenReturn(Collections.emptyList());

        PatchPasswordEncryption_J10001 patch = new PatchPasswordEncryption_J10001();
        patch.xaDaoManager = daoMgr;
        patch.stringUtil = new StringUtil();
        patch.xAssetService = Mockito.mock(XAssetService.class);

        patch.execLoad();
        patch.printStats();
    }

    @Test
    public void testExecLoadSkipsWhenConfigEmptyOrNull() {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXAssetDao xxAssetDao = Mockito.mock(XXAssetDao.class);
        Mockito.when(daoMgr.getXXAsset()).thenReturn(xxAssetDao);

        XXAsset asset1 = Mockito.mock(XXAsset.class);
        XXAsset asset2 = Mockito.mock(XXAsset.class);
        Mockito.when(xxAssetDao.getAll()).thenReturn(Arrays.asList(asset1, asset2));

        Mockito.when(asset1.getConfig()).thenReturn("");
        Mockito.when(asset2.getConfig()).thenReturn(null);
        Mockito.when(asset1.getName()).thenReturn("a1");
        Mockito.when(asset2.getName()).thenReturn("a2");

        PatchPasswordEncryption_J10001 patch = new PatchPasswordEncryption_J10001();
        patch.xaDaoManager = daoMgr;
        patch.stringUtil = new StringUtil();
        patch.xAssetService = Mockito.mock(XAssetService.class);

        patch.execLoad();

        Mockito.verify(xxAssetDao, Mockito.never()).update(Mockito.any(XXAsset.class));
    }
}
