/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForPrestoToSupportPresto333_J10038 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForPrestoToSupportPresto333_J10038 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForPrestoToSupportPresto333_J10038 patch = new PatchForPrestoToSupportPresto333_J10038();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testAddPresto333Support_branchesAndFailure() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForPrestoToSupportPresto333_J10038 patch = new PatchForPrestoToSupportPresto333_J10038();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            RangerServiceDef embedded = new RangerServiceDef();
            RangerResourceDef res = new RangerResourceDef();
            res.setName("function");
            embedded.setResources(new ArrayList<>(Collections.singletonList(res)));
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("grant");
            embedded.setAccessTypes(new ArrayList<>(Collections.singletonList(at)));

            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);
            Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDB);
            setIfPresent(patch, "svcStore", svcDB);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(vf.getServiceDefValidator(Mockito.any()))
                    .thenReturn(Mockito.mock(RangerServiceDefValidator.class));
            setIfPresent(patch, "validatorFactory", vf);

            Method m = PatchForPrestoToSupportPresto333_J10038.class.getDeclaredMethod("addPresto333Support");
            m.setAccessible(true);
            m.invoke(patch);

            // Now make updateServiceDef return null to trigger exception in execLoad
            Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(null);
            Assertions.assertThrows(RuntimeException.class, patch::execLoad);
        }
    }

    @Test
    public void testHelperMethods_checkers() throws Exception {
        PatchForPrestoToSupportPresto333_J10038 patch = new PatchForPrestoToSupportPresto333_J10038();

        Method chkRes = PatchForPrestoToSupportPresto333_J10038.class.getDeclaredMethod("checkResourcePresent",
                List.class, List.class);
        chkRes.setAccessible(true);
        List<String> names = new ArrayList<>();
        names.add("function");
        List<RangerResourceDef> defs = new ArrayList<>();
        RangerResourceDef r1 = new RangerResourceDef();
        r1.setName("x");
        defs.add(r1);
        Assertions.assertFalse((boolean) chkRes.invoke(patch, names, defs));
        RangerResourceDef r2 = new RangerResourceDef();
        r2.setName("function");
        defs.add(r2);
        Assertions.assertTrue((boolean) chkRes.invoke(patch, names, defs));

        Method chkAcc = PatchForPrestoToSupportPresto333_J10038.class.getDeclaredMethod("checkAccessPresent",
                List.class, List.class);
        chkAcc.setAccessible(true);
        List<String> accNames = new ArrayList<>();
        accNames.add("grant");
        List<RangerAccessTypeDef> accDefs = new ArrayList<>();
        RangerAccessTypeDef a1 = new RangerAccessTypeDef();
        a1.setName("y");
        accDefs.add(a1);
        Assertions.assertFalse((boolean) chkAcc.invoke(patch, accNames, accDefs));
        RangerAccessTypeDef a2 = new RangerAccessTypeDef();
        a2.setName("grant");
        accDefs.add(a2);
        Assertions.assertTrue((boolean) chkAcc.invoke(patch, accNames, accDefs));
    }
}
