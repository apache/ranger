/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch.cliutil;

import org.apache.ranger.biz.AssetMgr;
import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.view.VXAccessAuditList;
import org.apache.ranger.view.VXGroupList;
import org.apache.ranger.view.VXUserList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
* @generated by Cursor
* @description <Unit Test for MetricUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestMetricUtil {
    @Mock
    XUserMgr xUserMgr;
    @Mock
    AssetMgr assetMgr;
    @Mock
    ServiceDBStore svcStore;
    @Mock
    RangerBizUtil xaBizUtil;
    @Mock
    RESTErrorUtil restErrorUtil;

    @InjectMocks
    private MetricUtil metricUtil = new MetricUtil();

    @Test
    public void testExecLoad_usergroup() {
        MetricUtil.metricType = "usergroup";

        VXGroupList groups = new VXGroupList();
        groups.setTotalCount(3L);
        Mockito.when(xUserMgr.searchXGroups(Mockito.any(SearchCriteria.class))).thenReturn(groups);

        VXUserList users = new VXUserList();
        users.setTotalCount(5L);
        Mockito.when(xUserMgr.searchXUsers(Mockito.any(SearchCriteria.class))).thenReturn(users);

        metricUtil.execLoad();

        Mockito.verify(xUserMgr).searchXGroups(Mockito.any(SearchCriteria.class));
        Mockito.verify(xUserMgr, Mockito.atLeastOnce()).searchXUsers(Mockito.any(SearchCriteria.class));
    }

    @Test
    public void testExecLoad_audits() throws Exception {
        MetricUtil.metricType = "audits";

        RangerServiceDef def = new RangerServiceDef();
        def.setId(1L);
        def.setName("hdfs");
        PList<RangerServiceDef> defs = new PList<>();
        defs.setList(Collections.singletonList(def));
        defs.setTotalCount(1L);
        Mockito.when(svcStore.getPaginatedServiceDefs(Mockito.any(SearchFilter.class))).thenReturn(defs);

        VXAccessAuditList allowed = new VXAccessAuditList();
        allowed.setTotalCount(10L);
        VXAccessAuditList denied = new VXAccessAuditList();
        denied.setTotalCount(2L);
        Mockito.when(assetMgr.getAccessLogs(Mockito.any(SearchCriteria.class))).thenReturn(denied).thenReturn(allowed);

        // Date parsing is delegated to RESTErrorUtil; return the input date
        ArgumentCaptor<String> df = ArgumentCaptor.forClass(String.class);
        Mockito.when(restErrorUtil.parseDate(df.capture(), Mockito.anyString(), Mockito.any(MessageEnums.class),
                Mockito.isNull(), Mockito.anyString(), Mockito.anyString())).thenAnswer(inv -> {
                    String s = (String) inv.getArguments()[0];
                    DateFormat f = new SimpleDateFormat("MM/dd/yyyy");
                    return f.parse(s);
                });

        metricUtil.execLoad();

        Mockito.verify(svcStore, Mockito.atLeastOnce()).getPaginatedServiceDefs(Mockito.any(SearchFilter.class));
        Mockito.verify(assetMgr, Mockito.atLeast(2)).getAccessLogs(Mockito.any(SearchCriteria.class));
    }

    @Test
    public void testExecLoad_services() throws Exception {
        MetricUtil.metricType = "services";

        RangerService svc1 = new RangerService();
        svc1.setType("hdfs");
        RangerService svc2 = new RangerService();
        svc2.setType("hive");
        PList<RangerService> page = new PList<>();
        page.setList(Arrays.asList(svc1, svc2));
        page.setTotalCount(3L);
        Mockito.when(svcStore.getPaginatedServices(Mockito.any(SearchFilter.class))).thenReturn(page);

        PList<RangerService> countHdfs = new PList<>();
        countHdfs.setTotalCount(2L);
        countHdfs.setList(Collections.singletonList(svc1));
        PList<RangerService> countHive = new PList<>();
        countHive.setTotalCount(1L);
        countHive.setList(Collections.singletonList(svc2));
        Mockito.when(svcStore
                .getPaginatedServices(Mockito.argThat(f -> f != null && f.getParam("serviceType") != null && "hdfs".equals(String.valueOf(f.getParam("serviceType"))))))
                .thenReturn(countHdfs);
        Mockito.when(svcStore
                .getPaginatedServices(Mockito.argThat(f -> f != null && f.getParam("serviceType") != null && "hive".equals(String.valueOf(f.getParam("serviceType"))))))
                .thenReturn(countHive);

        metricUtil.execLoad();

        Mockito.verify(svcStore, Mockito.atLeast(3)).getPaginatedServices(Mockito.any(SearchFilter.class));
    }

    @Test
    public void testExecLoad_policies() throws Exception {
        MetricUtil.metricType = "policies";

        // services used by getVXMetricServiceCount
        RangerService svc = new RangerService();
        svc.setType("hdfs");
        PList<RangerService> svcList = new PList<>();
        svcList.setList(Collections.singletonList(svc));
        svcList.setTotalCount(1L);
        Mockito.when(svcStore.getPaginatedServices(Mockito.any(SearchFilter.class))).thenReturn(svcList);

        // policies list total counts per filter
        PList<RangerPolicy> policies = new PList<>();
        policies.setTotalCount(4L);
        policies.setList(new ArrayList<RangerPolicy>());
        Mockito.when(svcStore.getPaginatedPolicies(Mockito.any(SearchFilter.class))).thenReturn(policies);

        metricUtil.execLoad();

        Mockito.verify(svcStore, Mockito.atLeast(1)).getPaginatedPolicies(Mockito.any(SearchFilter.class));
    }

    @Test
    public void testExecLoad_database() {
        MetricUtil.metricType = "database";

        Mockito.when(xaBizUtil.getDBVersion()).thenReturn("12.1");
        metricUtil.execLoad();

        Mockito.verify(xaBizUtil).getDBVersion();
    }

    @Test
    public void testExecLoad_contextEnrichers() throws Exception {
        MetricUtil.metricType = "contextenrichers";

        RangerServiceDef def = new RangerServiceDef();
        def.setId(1L);
        def.setName("hdfs");
        RangerServiceDef.RangerContextEnricherDef enricher = new RangerServiceDef.RangerContextEnricherDef();
        List<RangerServiceDef.RangerContextEnricherDef> enrichers = new ArrayList<>();
        enrichers.add(enricher);
        def.setContextEnrichers(enrichers);
        PList<RangerServiceDef> defs = new PList<>();
        defs.setList(Collections.singletonList(def));
        defs.setTotalCount(1L);
        Mockito.when(svcStore.getPaginatedServiceDefs(Mockito.any(SearchFilter.class))).thenReturn(defs);

        metricUtil.execLoad();

        Mockito.verify(svcStore).getPaginatedServiceDefs(Mockito.any(SearchFilter.class));
    }

    @Test
    public void testExecLoad_denyconditions() throws Exception {
        MetricUtil.metricType = "denyconditions";

        RangerServiceDef def = new RangerServiceDef();
        def.setId(1L);
        def.setName("hdfs");
        PList<RangerServiceDef> defs = new PList<>();
        defs.setList(Collections.singletonList(def));
        defs.setTotalCount(1L);
        Mockito.when(svcStore.getPaginatedServiceDefs(Mockito.any(SearchFilter.class))).thenReturn(defs);

        RangerPolicy policy = new RangerPolicy();
        policy.setDenyPolicyItems(Collections.singletonList(new RangerPolicy.RangerPolicyItem()));
        policy.setDenyExceptions(Collections.singletonList(new RangerPolicy.RangerPolicyItem()));
        PList<RangerPolicy> policyList = new PList<>();
        policyList.setList(Collections.singletonList(policy));
        policyList.setTotalCount(1L);
        Mockito.when(svcStore.getPaginatedPolicies(Mockito.any(SearchFilter.class))).thenReturn(policyList);

        metricUtil.execLoad();

        Mockito.verify(svcStore, Mockito.atLeast(1)).getPaginatedServiceDefs(Mockito.any(SearchFilter.class));
    }
}
