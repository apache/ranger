/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.GUIDUtil;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAccessTypeDefDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXPolicyItemAccessDao;
import org.apache.ranger.db.XXPolicyItemDao;
import org.apache.ranger.db.XXPolicyItemGroupPermDao;
import org.apache.ranger.db.XXPolicyResourceDao;
import org.apache.ranger.db.XXPolicyResourceMapDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXResourceDefDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXAccessTypeDef;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXPolicyItem;
import org.apache.ranger.entity.XXPolicyItemAccess;
import org.apache.ranger.entity.XXPolicyItemGroupPerm;
import org.apache.ranger.entity.XXPolicyResource;
import org.apache.ranger.entity.XXPolicyResourceMap;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXResourceDef;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.apache.ranger.util.CLIUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForAtlasResourceAndAccessTypeUpdate_J10016 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForAtlasResourceAndAccessTypeUpdate_J10016 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        RangerResourceDef resDef = new RangerResourceDef();
        resDef.setName("relationship-type");
        RangerAccessTypeDef accDef = new RangerAccessTypeDef("add-relationship");

        RangerServiceDef embedded = new RangerServiceDef();
        embedded.setResources(new ArrayList<>(Arrays.asList(resDef)));
        embedded.setAccessTypes(new ArrayList<>(Arrays.asList(accDef)));

        RangerServiceDef dbDef = new RangerServiceDef();
        dbDef.setResources(Collections.emptyList());
        dbDef.setAccessTypes(Collections.emptyList());

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(embedded);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDBStore.getServiceDefByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(dbDef);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any(ServiceDBStore.class))).thenReturn(validator);
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any(RangerServiceDef.class))).thenReturn(new RangerServiceDef());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            XXServiceDef xxServiceDef = new XXServiceDef();
            xxServiceDef.setId(1L);
            Mockito.when(xxServiceDefDao.findByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(xxServiceDef);

            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "guidUtil", Mockito.mock(GUIDUtil.class));
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcDBStore);
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_NoEmbeddedServiceDef_NoAction() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(null);

            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", Mockito.mock(ServiceDBStore.class));
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", Mockito.mock(ServiceDBStore.class));

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
        }
    }

    @Test
    public void testExecLoad_ServiceDefNotFound_ReturnsEarly() throws Exception {
        RangerServiceDef embedded = new RangerServiceDef();
        embedded.setResources(Collections.emptyList());
        embedded.setAccessTypes(Collections.emptyList());

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(null);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);

            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcDBStore);

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
            Mockito.verify(svcDBStore, Mockito.never()).getServiceDefByName(Mockito.anyString());
        }
    }

    @Test
    public void testExecLoad_UpdateServiceDefReturnsNull_ErrorHandled() throws Exception {
        RangerServiceDef embedded = new RangerServiceDef();
        embedded.setResources(Collections.emptyList());
        embedded.setAccessTypes(Collections.emptyList());

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            XXServiceDef xxServiceDef = new XXServiceDef();
            xxServiceDef.setId(1L);
            Mockito.when(xxServiceDefDao.findByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(xxServiceDef);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef dbDef = new RangerServiceDef();
            Mockito.when(svcDBStore.getServiceDefByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(dbDef);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any(ServiceDBStore.class))).thenReturn(validator);
            Mockito.when(svcDBStore.updateServiceDef(Mockito.any(RangerServiceDef.class))).thenReturn(null);

            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcDBStore);

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
        }
    }

    @Test
    public void testExecLoad_UpdatePolicyForRelationshipType_PublicGroupMissing() throws Exception {
        RangerResourceDef resDef = new RangerResourceDef();
        resDef.setName("relationship-type");
        RangerAccessTypeDef accDef = new RangerAccessTypeDef("add-relationship");

        RangerServiceDef embedded = new RangerServiceDef();
        embedded.setResources(new ArrayList<>(Arrays.asList(resDef)));
        embedded.setAccessTypes(new ArrayList<>(Arrays.asList(accDef)));

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(embedded);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);

            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);

            XXPortalUser user = new XXPortalUser();
            user.setId(99L);

            XXServiceDef xxServiceDefFirstNull = null; // for createDefaultPolicyToExistingService -> early return
            XXServiceDef xxServiceDef = new XXServiceDef();
            xxServiceDef.setId(1L);
            Mockito.when(xxServiceDefDao.findByName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_ATLAS_NAME)).thenReturn(xxServiceDefFirstNull, xxServiceDef);

            XXResourceDef xxResourceDef = new XXResourceDef();
            xxResourceDef.setId(7L);

            XXPolicyResource polRes = new XXPolicyResource();
            polRes.setPolicyId(5L);

            XXPolicy policy = new XXPolicy();
            policy.setId(5L);

            XXPolicyItem item = new XXPolicyItem();
            item.setId(10L);

            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            setIfPresent(patch, "daoMgr", daoMgr);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "guidUtil", Mockito.mock(GUIDUtil.class));
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcDBStore);
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));

            Assertions.assertDoesNotThrow(() -> patch.execLoad());
            Mockito.verify(xxPolicyItemGroupPermDao, Mockito.never()).create(Mockito.any());
        }
    }

    @Test
    public void testCreateDefaultPolicyToExistingService_CreatesPolicyAndResources() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
        XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        XXPolicyItemDao xxPolicyItemDao = Mockito.mock(XXPolicyItemDao.class);
        XXAccessTypeDefDao xxAccessTypeDefDao = Mockito.mock(XXAccessTypeDefDao.class);
        XXPolicyItemAccessDao xxPolicyItemAccessDao = Mockito.mock(XXPolicyItemAccessDao.class);
        XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class);
        XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);
        XXResourceDefDao xxResourceDefDao = Mockito.mock(XXResourceDefDao.class);
        XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
        XXPolicyResourceMapDao xxPolicyResourceMapDao = Mockito.mock(XXPolicyResourceMapDao.class);

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        Mockito.when(daoMgr.getXXPolicyItem()).thenReturn(xxPolicyItemDao);
        Mockito.when(daoMgr.getXXAccessTypeDef()).thenReturn(xxAccessTypeDefDao);
        Mockito.when(daoMgr.getXXPolicyItemAccess()).thenReturn(xxPolicyItemAccessDao);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);
        Mockito.when(daoMgr.getXXPolicyItemGroupPerm()).thenReturn(xxPolicyItemGroupPermDao);
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);
        Mockito.when(daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
        Mockito.when(daoMgr.getXXPolicyResourceMap()).thenReturn(xxPolicyResourceMapDao);

        XXPortalUser user = new XXPortalUser();
        user.setId(11L);
        Mockito.when(xxPortalUserDao.findByLoginId(Mockito.anyString())).thenReturn(user);

        XXServiceDef serviceDef = new XXServiceDef();
        serviceDef.setId(10L);
        Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(serviceDef);

        XXService service = new XXService();
        service.setId(5L);
        Mockito.when(xxServiceDao.findByServiceDefId(10L)).thenReturn(Collections.singletonList(service));

        XXPolicy existing = new XXPolicy();
        existing.setName("other");
        Mockito.when(xxPolicyDao.findByServiceId(5L)).thenReturn(Collections.singletonList(existing));

        XXPolicy createdPolicy = new XXPolicy();
        createdPolicy.setId(100L);
        createdPolicy.setService(5L);
        Mockito.when(xxPolicyDao.create(Mockito.any(XXPolicy.class))).thenReturn(createdPolicy);

        XXPolicyItem createdItem = new XXPolicyItem();
        createdItem.setId(200L);
        Mockito.when(xxPolicyItemDao.create(Mockito.any(XXPolicyItem.class))).thenReturn(createdItem);

        XXAccessTypeDef acc1 = new XXAccessTypeDef();
        acc1.setId(1L);
        XXAccessTypeDef acc2 = new XXAccessTypeDef();
        acc2.setId(2L);
        XXAccessTypeDef acc3 = new XXAccessTypeDef();
        acc3.setId(3L);
        Mockito.when(xxAccessTypeDefDao.findByNameAndServiceId(Mockito.eq("add-relationship"), Mockito.eq(5L))).thenReturn(acc1);
        Mockito.when(xxAccessTypeDefDao.findByNameAndServiceId(Mockito.eq("update-relationship"), Mockito.eq(5L))).thenReturn(acc2);
        Mockito.when(xxAccessTypeDefDao.findByNameAndServiceId(Mockito.eq("remove-relationship"), Mockito.eq(5L))).thenReturn(acc3);

        XXGroup pub = new XXGroup();
        pub.setId(7L);
        Mockito.when(xxGroupDao.findByGroupName(Mockito.eq("public"))).thenReturn(pub);

        XXResourceDef resDef = new XXResourceDef();
        resDef.setId(9L);
        Mockito.when(xxResourceDefDao.findByNameAndPolicyId(Mockito.anyString(), Mockito.eq(100L))).thenReturn(resDef);
        Mockito.when(xxPolicyResourceDao.create(Mockito.any(XXPolicyResource.class))).thenAnswer(inv -> inv.getArgument(0));
        Mockito.when(xxPolicyResourceMapDao.create(Mockito.any(XXPolicyResourceMap.class))).thenAnswer(inv -> inv.getArgument(0));

        GUIDUtil guidUtil = Mockito.mock(GUIDUtil.class);
        Mockito.when(guidUtil.genGUID()).thenReturn("g1");

        PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "guidUtil", guidUtil);

        Method m = PatchForAtlasResourceAndAccessTypeUpdate_J10016.class.getDeclaredMethod("createDefaultPolicyToExistingService");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(xxPolicyDao, Mockito.times(1)).create(Mockito.any(XXPolicy.class));
        Mockito.verify(xxPolicyItemDao, Mockito.times(1)).create(Mockito.any(XXPolicyItem.class));
        Mockito.verify(xxAccessTypeDefDao, Mockito.times(3)).findByNameAndServiceId(Mockito.anyString(), Mockito.eq(5L));
        Mockito.verify(xxPolicyItemAccessDao, Mockito.times(3)).create(Mockito.any(XXPolicyItemAccess.class));
        Mockito.verify(xxGroupDao, Mockito.times(1)).findByGroupName("public");
        Mockito.verify(xxPolicyItemGroupPermDao, Mockito.times(1)).create(Mockito.any(XXPolicyItemGroupPerm.class));
        Mockito.verify(xxResourceDefDao, Mockito.times(7)).findByNameAndPolicyId(Mockito.anyString(), Mockito.eq(100L));
        Mockito.verify(xxPolicyResourceDao, Mockito.times(7)).create(Mockito.any(XXPolicyResource.class));
        Mockito.verify(xxPolicyResourceMapDao, Mockito.times(7)).create(Mockito.any(XXPolicyResourceMap.class));
    }

    @Test
    public void testInit_DoesNothing() throws Exception {
        PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
        Assertions.assertDoesNotThrow(() -> patch.init());
    }

    @Test
    public void testMain_Success_ExitZero() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
            patch.setMoreToProcess(false);
            cliMock.when(() -> CLIUtil.getBean(PatchForAtlasResourceAndAccessTypeUpdate_J10016.class))
                    .thenReturn(patch);
            CLIUtil cli = Mockito.mock(CLIUtil.class);
            cliMock.when(() -> CLIUtil.getBean(CLIUtil.class)).thenReturn(cli);

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForAtlasResourceAndAccessTypeUpdate_J10016.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertNotNull(se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMain_Failure_ExitOne() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            cliMock.when(() -> CLIUtil.getBean(PatchForAtlasResourceAndAccessTypeUpdate_J10016.class))
                    .thenThrow(new RuntimeException("boom"));

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForAtlasResourceAndAccessTypeUpdate_J10016.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertEquals("1", se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testUpdatePolicyForRelationshipType_GroupPresent_CreatesPerm() throws Exception {
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXPortalUserDao xxPortalUserDao = Mockito.mock(XXPortalUserDao.class);
        XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
        XXResourceDefDao xxResourceDefDao = Mockito.mock(XXResourceDefDao.class);
        XXPolicyResourceDao xxPolicyResourceDao = Mockito.mock(XXPolicyResourceDao.class);
        XXPolicyDao xxPolicyDao = Mockito.mock(XXPolicyDao.class);
        XXPolicyItemDao xxPolicyItemDao = Mockito.mock(XXPolicyItemDao.class);
        XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class);
        XXPolicyItemGroupPermDao xxPolicyItemGroupPermDao = Mockito.mock(XXPolicyItemGroupPermDao.class);

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xxPortalUserDao);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        Mockito.when(daoMgr.getXXResourceDef()).thenReturn(xxResourceDefDao);
        Mockito.when(daoMgr.getXXPolicyResource()).thenReturn(xxPolicyResourceDao);
        Mockito.when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        Mockito.when(daoMgr.getXXPolicyItem()).thenReturn(xxPolicyItemDao);
        Mockito.when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);
        Mockito.when(daoMgr.getXXPolicyItemGroupPerm()).thenReturn(xxPolicyItemGroupPermDao);

        XXPortalUser user = new XXPortalUser();
        user.setId(123L);
        Mockito.when(xxPortalUserDao.findByLoginId(Mockito.eq("admin"))).thenReturn(user);

        XXServiceDef xSvcDef = new XXServiceDef();
        xSvcDef.setId(1L);
        Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(xSvcDef);

        XXResourceDef xResDef = new XXResourceDef();
        xResDef.setId(9L);
        Mockito.when(xxResourceDefDao.findByNameAndServiceDefId(Mockito.anyString(), Mockito.eq(1L)))
                .thenReturn(xResDef);

        XXPolicyResource xPolRes = new XXPolicyResource();
        xPolRes.setPolicyId(5L);
        Mockito.when(xxPolicyResourceDao.findByResDefId(Mockito.eq(9L))).thenReturn(Collections.singletonList(xPolRes));

        XXPolicy xPol = new XXPolicy();
        xPol.setId(5L);
        Mockito.when(xxPolicyDao.getById(Mockito.eq(5L))).thenReturn(xPol);

        XXPolicyItem xItem = new XXPolicyItem();
        xItem.setId(55L);
        Mockito.when(xxPolicyItemDao.findByPolicyId(Mockito.eq(5L))).thenReturn(Collections.singletonList(xItem));

        XXGroup xGrp = new XXGroup();
        xGrp.setId(7L);
        Mockito.when(xxGroupDao.findByGroupName(Mockito.eq("public"))).thenReturn(xGrp);

        PatchForAtlasResourceAndAccessTypeUpdate_J10016 patch = new PatchForAtlasResourceAndAccessTypeUpdate_J10016();
        setIfPresent(patch, "daoMgr", daoMgr);

        Method m = PatchForAtlasResourceAndAccessTypeUpdate_J10016.class
                .getDeclaredMethod("updatePolicyForRelationshipType");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(xxPolicyItemGroupPermDao, Mockito.times(1)).create(Mockito.any(XXPolicyItemGroupPerm.class));
    }
}
