/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef.AccessTypeCategory;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchSetAccessTypeCategory_J10061 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchSetAccessTypeCategory_J10061 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcStore.getServiceDefs(Mockito.any(SearchFilter.class))).thenReturn(Collections.emptyList());

            PatchSetAccessTypeCategory_J10061 patch = new PatchSetAccessTypeCategory_J10061();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateAllServiceDef_EmptyAccessTypes_SkipsUpdate() throws Exception {
        ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
        RangerServiceDef s1 = new RangerServiceDef();
        s1.setName("hive");
        s1.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
        Mockito.when(svcStore.getServiceDefs(Mockito.any(SearchFilter.class)))
                .thenReturn(new ArrayList<RangerServiceDef>() {
                    {
                        add(s1);
                    }
                });

        PatchSetAccessTypeCategory_J10061 patch = new PatchSetAccessTypeCategory_J10061();
        setIfPresent(patch, "svcStore", svcStore);

        Method m = PatchSetAccessTypeCategory_J10061.class.getDeclaredMethod("updateAllServiceDef");
        m.setAccessible(true);
        m.invoke(patch);

        Mockito.verify(svcStore, Mockito.never()).updateServiceDef(Mockito.any(RangerServiceDef.class));
    }

    @Test
    public void testUpdateAllServiceDef_EmbeddedMissingAndException_Skips() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef s1 = new RangerServiceDef();
            s1.setName("hive");
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("select");
            s1.setAccessTypes(new ArrayList<RangerAccessTypeDef>() {
                {
                    add(at);
                }
            });
            Mockito.when(svcStore.getServiceDefs(Mockito.any(SearchFilter.class)))
                    .thenReturn(new ArrayList<RangerServiceDef>() {
                        {
                            add(s1);
                        }
                    });

            // embedded null -> skip
            Mockito.when(util.getEmbeddedServiceDef(Mockito.eq("hive"))).thenReturn(null);

            PatchSetAccessTypeCategory_J10061 patch = new PatchSetAccessTypeCategory_J10061();
            setIfPresent(patch, "svcStore", svcStore);
            Method m = PatchSetAccessTypeCategory_J10061.class
                    .getDeclaredMethod("updateAllServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            // now exception path
            Mockito.when(util.getEmbeddedServiceDef(Mockito.eq("hive"))).thenAnswer(inv -> {
                throw new RuntimeException("boom");
            });
            m.invoke(patch);
        }
    }

    @Test
    public void testUpdateAllServiceDef_CategoriesAppliedAndUpdated() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            RangerServiceDef s1 = new RangerServiceDef();
            s1.setName("hive");
            RangerAccessTypeDef at = new RangerAccessTypeDef();
            at.setName("select");
            s1.setAccessTypes(new ArrayList<RangerAccessTypeDef>() {
                {
                    add(at);
                }
            });

            RangerServiceDef embedded = new RangerServiceDef();
            RangerAccessTypeDef eat = new RangerAccessTypeDef();
            eat.setName("select");
            eat.setCategory(AccessTypeCategory.READ);
            embedded.setAccessTypes(new ArrayList<RangerAccessTypeDef>() {
                {
                    add(eat);
                }
            });
            Mockito.when(util.getEmbeddedServiceDef(Mockito.eq("hive"))).thenReturn(embedded);

            Mockito.when(svcStore.getServiceDefs(Mockito.any(SearchFilter.class)))
                    .thenReturn(new ArrayList<RangerServiceDef>() {
                        {
                            add(s1);
                        }
                    });

            PatchSetAccessTypeCategory_J10061 patch = new PatchSetAccessTypeCategory_J10061();
            setIfPresent(patch, "svcStore", svcStore);

            Method m = PatchSetAccessTypeCategory_J10061.class
                    .getDeclaredMethod("updateAllServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            Mockito.verify(svcStore, Mockito.times(1)).updateServiceDef(Mockito.eq(s1));
            // category applied
            Assertions.assertEquals(AccessTypeCategory.READ,
                    s1.getAccessTypes().get(0).getCategory());
        }
    }

    @Test
    public void testUpdateAllServiceDef_TagServiceDefProcessing_Scenarios() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);

            // embedded map built from a service def entry
            RangerServiceDef svc = new RangerServiceDef();
            svc.setName("hive");
            RangerAccessTypeDef eat = new RangerAccessTypeDef();
            eat.setName("select");
            eat.setCategory(AccessTypeCategory.READ);
            // ensure service-def has non-empty access-types so embeddedCategories get built
            RangerAccessTypeDef svcAt = new RangerAccessTypeDef();
            svcAt.setName("select");
            svc.setAccessTypes(new ArrayList<RangerAccessTypeDef>() {
                {
                    add(svcAt);
                }
            });
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setAccessTypes(new ArrayList<RangerAccessTypeDef>() {
                {
                    add(eat);
                }
            });
            Mockito.when(util.getEmbeddedServiceDef(Mockito.eq("hive"))).thenReturn(embedded);
            Mockito.when(svcStore.getServiceDefs(Mockito.any(SearchFilter.class)))
                    .thenReturn(new ArrayList<RangerServiceDef>() {
                        {
                            add(svc);
                        }
                    });

            // tag service-def with various invalid names that should be skipped
            RangerServiceDef tagDef = new RangerServiceDef();
            tagDef.setName(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME);
            List<RangerAccessTypeDef> tagAccess = new ArrayList<>();
            RangerAccessTypeDef bad1 = new RangerAccessTypeDef();
            bad1.setName(":read"); // blank service name
            tagAccess.add(bad1);
            RangerAccessTypeDef bad2 = new RangerAccessTypeDef();
            bad2.setName("hive:"); // blank access type
            tagAccess.add(bad2);
            RangerAccessTypeDef missingSvc = new RangerAccessTypeDef();
            missingSvc.setName("unknown:read");
            tagAccess.add(missingSvc);
            RangerAccessTypeDef missingAcc = new RangerAccessTypeDef();
            missingAcc.setName("hive:unknown");
            tagAccess.add(missingAcc);
            RangerAccessTypeDef ok = new RangerAccessTypeDef();
            ok.setName("hive:select");
            tagAccess.add(ok);
            tagDef.setAccessTypes(tagAccess);
            Mockito.when(svcStore.getServiceDefByName(Mockito.eq(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME)))
                    .thenReturn(tagDef);

            PatchSetAccessTypeCategory_J10061 patch = new PatchSetAccessTypeCategory_J10061();
            setIfPresent(patch, "svcStore", svcStore);

            Method m = PatchSetAccessTypeCategory_J10061.class
                    .getDeclaredMethod("updateAllServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            // ensure update called for tag service-def
            Mockito.verify(svcStore, Mockito.times(1)).updateServiceDef(Mockito.eq(tagDef));
            // OK one should be updated to READ
            Assertions.assertEquals(AccessTypeCategory.READ, ok.getCategory());
        }
    }
}
