/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch.cliutil;

import org.apache.ranger.biz.UserMgr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.entity.XXPortalUser;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.security.Permission;

/**
 * @generated by Cursor
 * @description <Unit Test for ChangeUserNameUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestChangeUserNameUtil {
    @Mock
    RangerDaoManager daoMgr;
    @Mock
    UserMgr userMgr;
    @Mock
    XXPortalUserDao xXPortalUserDao;

    @InjectMocks
    private ChangeUserNameUtil util = new ChangeUserNameUtil();

    @Test
    public void testUpdateUserName_success() throws Exception {
        ChangeUserNameUtil.userLoginId = "alice";
        ChangeUserNameUtil.currentPassword = "Pass#123";
        ChangeUserNameUtil.newUserName = "alice2";

        XXPortalUser existing = new XXPortalUser();
        existing.setLoginId("alice");
        existing.setPassword("enc");

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.findByLoginId("alice2")).thenReturn(null);
        Mockito.when(xXPortalUserDao.findByLoginId("alice")).thenReturn(existing);
        Mockito.when(userMgr.encrypt("alice", "Pass#123")).thenReturn("enc");

        util.updateUserName();

        Mockito.verify(userMgr).updateOldUserName("alice", "alice2", "Pass#123");
    }

    @Test
    public void testUpdateUserName_duplicateNewUserName() {
        ChangeUserNameUtil.userLoginId = "bob";
        ChangeUserNameUtil.currentPassword = "Pass#123";
        ChangeUserNameUtil.newUserName = "existing";

        XXPortalUser dup = new XXPortalUser();
        dup.setLoginId("existing");

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.findByLoginId("existing")).thenReturn(dup);

        runIgnoringSystemExit(() -> util.updateUserName());

        Mockito.verify(userMgr, Mockito.never()).updateOldUserName(Mockito.anyString(), Mockito.anyString(),
                Mockito.anyString());
    }

    @Test
    public void testUpdateUserName_userNotFound_exit() {
        ChangeUserNameUtil.userLoginId = "nouser";
        ChangeUserNameUtil.currentPassword = "Pass#123";
        ChangeUserNameUtil.newUserName = "newname";

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.findByLoginId("newname")).thenReturn(null);
        Mockito.when(xXPortalUserDao.findByLoginId("nouser")).thenReturn(null);

        runIgnoringSystemExit(() -> util.updateUserName());

        Mockito.verify(userMgr, Mockito.never()).updateOldUserName(Mockito.anyString(), Mockito.anyString(),
                Mockito.anyString());
    }

    @Test
    public void testUpdateUserName_invalidPassword_exit() throws Exception {
        ChangeUserNameUtil.userLoginId = "charlie";
        ChangeUserNameUtil.currentPassword = "wrong";
        ChangeUserNameUtil.newUserName = "charlie2";

        XXPortalUser existing = new XXPortalUser();
        existing.setLoginId("charlie");
        existing.setPassword("enc1");

        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.findByLoginId("charlie2")).thenReturn(null);
        Mockito.when(xXPortalUserDao.findByLoginId("charlie")).thenReturn(existing);
        Mockito.when(userMgr.encrypt("charlie", "wrong")).thenReturn("enc2");

        runIgnoringSystemExit(() -> util.updateUserName());

        Mockito.verify(userMgr, Mockito.never()).updateOldUserName(Mockito.anyString(), Mockito.anyString(),
                Mockito.anyString());
    }

    @Test
    public void testPrintStats() {
        util.printStats();
    }

    @Test
    public void testInit() throws Exception {
        util.init();
    }

    @Test
    public void testExecLoad_invokesUpdateUserName() {
        ChangeUserNameUtil.userLoginId = "u1";
        ChangeUserNameUtil.currentPassword = "p1";
        ChangeUserNameUtil.newUserName = "u2";

        // Prepare minimal stubs for a successful path
        XXPortalUser existing = new XXPortalUser();
        existing.setLoginId("u1");
        existing.setPassword("enc");
        Mockito.when(daoMgr.getXXPortalUser()).thenReturn(xXPortalUserDao);
        Mockito.when(xXPortalUserDao.findByLoginId("u2")).thenReturn(null);
        Mockito.when(xXPortalUserDao.findByLoginId("u1")).thenReturn(existing);
        Mockito.when(userMgr.encrypt("u1", "p1")).thenReturn("enc");

        util.execLoad();

        Mockito.verify(userMgr).updateOldUserName("u1", "u2", "p1");
    }

    @Test
    public void testMain_incorrectArgs_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"only", "two"}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_validArgs_runs() {
        SecurityManager originalSm = System.getSecurityManager();
        try {
            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkPermission(Permission perm) {
                }

                @Override
                public void checkExit(int status) {
                    throw new SecurityException("Intercepted System.exit(" + status + ")");
                }
            });
            try {
                ChangeUserNameUtil.main(new String[] {"u", "p", "n"});
            } catch (SecurityException ignored) {
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMain_blankLogin_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"", "p", "n"}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_blankCurrent_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"u", "", "n"}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_blankNewUsername_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"u", "p", ""}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_zeroArgs_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_fourArgs_exits() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"a", "b", "c", "d"}));
        Assertions.assertEquals(1, status);
    }

    @Test
    public void testMain_validArgs_exit_withoutSpringContext() {
        Integer status = runAndCaptureExitCode(() -> ChangeUserNameUtil.main(new String[] {"u", "p", "n"}));
        Assertions.assertEquals(1, status);
    }

    private static void runIgnoringSystemExit(Runnable r) {
        SecurityManager originalSm = System.getSecurityManager();
        try {
            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkPermission(Permission perm) {
                }

                @Override
                public void checkExit(int status) {
                    throw new SecurityException("Intercepted System.exit(" + status + ")");
                }
            });
            try {
                r.run();
            } catch (SecurityException ignored) {
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    private static Integer runAndCaptureExitCode(Runnable r) {
        class ExitException extends SecurityException {
            final int code;

            ExitException(int code) {
                this.code = code;
            }
        }

        SecurityManager originalSm = System.getSecurityManager();
        try {
            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkPermission(Permission perm) {
                }

                @Override
                public void checkExit(int status) {
                    throw new ExitException(status);
                }
            });
            try {
                r.run();
            } catch (ExitException e) {
                return e.code;
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
        return null;
    }
}
