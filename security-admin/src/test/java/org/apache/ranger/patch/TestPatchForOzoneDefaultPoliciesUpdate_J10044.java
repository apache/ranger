/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForOzoneDefaultPoliciesUpdate_J10044 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForOzoneDefaultPoliciesUpdate_J10044 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.anyLong())).thenReturn(Collections.emptyList());
            setIfPresent(patch, "daoMgr", daoMgr);
            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDBStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcDBStore);

            SecurityManager original = System.getSecurityManager();
            try {
                System.setSecurityManager(new SecurityManager() {
                    @Override
                    public void checkPermission(Permission perm) {
                    }

                    @Override
                    public void checkExit(int status) {
                        throw new SecurityException("Intercepted System.exit");
                    }
                });
                patch.execLoad();
            } catch (SecurityException ignored) {
                // ignore System.exit interception
            } finally {
                System.setSecurityManager(original);
            }

            patch.printStats();
        }
    }

    @Test
    public void testExecLoad_EmbeddedMissing_FailsAndExits() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDBStore);

            SecurityManager original = System.getSecurityManager();
            try {
                System.setSecurityManager(new SecurityManager() {
                    @Override
                    public void checkPermission(Permission perm) {
                    }

                    @Override
                    public void checkExit(int status) {
                        throw new SecurityException("Intercepted System.exit");
                    }
                });
                patch.execLoad();
                Assertions.fail("Expected SecurityException");
            } catch (SecurityException ignored) {
            } finally {
                System.setSecurityManager(original);
            }
        }
    }

    @Test
    public void testUpdateDefaultOzonePolicies_addsOwnerAndUpdates() throws Exception {
        PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();
        ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcDB);

        // Build policies: one starting with all, one not
        RangerPolicy p1 = new RangerPolicy();
        p1.setName("all_buckets");
        RangerPolicy p2 = new RangerPolicy();
        p2.setName("read_buckets");
        List<RangerPolicy> policies = new ArrayList<>();
        policies.add(p1);
        policies.add(p2);

        // invoke private via reflection
        Method m = PatchForOzoneDefaultPoliciesUpdate_J10044.class.getDeclaredMethod("updateDefaultOzonePolicies",
                List.class);
        m.setAccessible(true);
        m.invoke(patch, policies);

        // verify update called twice
        Mockito.verify(svcDB, Mockito.times(2)).updatePolicy(Mockito.any(RangerPolicy.class));
        // verify policy starting with 'all' has a new policy item
        Assertions.assertFalse(p1.getPolicyItems().isEmpty());
    }

    @Test
    public void testUpdateDefaultOzonePolicies_noPolicies_noUpdate() throws Exception {
        PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();
        ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "svcDBStore", svcDB);

        Method m = PatchForOzoneDefaultPoliciesUpdate_J10044.class.getDeclaredMethod("updateDefaultOzonePolicies",
                List.class);
        m.setAccessible(true);

        m.invoke(patch, new Object[] {null});
        m.invoke(patch, new Object[] {new ArrayList<RangerPolicy>()});

        Mockito.verifyNoInteractions(svcDB);
    }

    @Test
    public void testUpdateOzoneDefaultPolicies_embeddedNull_returnsFalseViaPrivate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));

            Method m = PatchForOzoneDefaultPoliciesUpdate_J10044.class.getDeclaredMethod("updateOzoneDefaultPolicies");
            m.setAccessible(true);
            Boolean res = (Boolean) m.invoke(patch);
            Assertions.assertFalse(res);
        }
    }

    @Test
    public void testUpdateOzoneDefaultPolicies_withServices_updatesPolicies() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setId(9L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            PatchForOzoneDefaultPoliciesUpdate_J10044 patch = new PatchForOzoneDefaultPoliciesUpdate_J10044();

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDao xxServiceDao = Mockito.mock(XXServiceDao.class);
            Mockito.when(daoMgr.getXXService()).thenReturn(xxServiceDao);
            XXService svc = new XXService();
            svc.setId(101L);
            svc.setName("oz1");
            ArrayList<XXService> svcs = new ArrayList<>();
            svcs.add(svc);
            Mockito.when(xxServiceDao.findByServiceDefId(Mockito.eq(9L))).thenReturn(svcs);
            setIfPresent(patch, "daoMgr", daoMgr);

            ServiceDBStore svcDBStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcDBStore);

            ArrayList<RangerPolicy> policies = new ArrayList<>();
            RangerPolicy p1 = new RangerPolicy();
            p1.setName("all-oz");
            policies.add(p1);
            RangerPolicy p2 = new RangerPolicy();
            p2.setName("read-oz");
            policies.add(p2);
            Mockito.when(svcDBStore.getServicePolicies(Mockito.eq(101L), Mockito.any())).thenReturn(policies);

            Method m = PatchForOzoneDefaultPoliciesUpdate_J10044.class.getDeclaredMethod("updateOzoneDefaultPolicies");
            m.setAccessible(true);
            Boolean res = (Boolean) m.invoke(patch);
            Assertions.assertTrue(res);
            Mockito.verify(svcDBStore, Mockito.times(2)).updatePolicy(Mockito.any(RangerPolicy.class));
        }
    }
}
