/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceConfigDefDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceConfigDef;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerServiceConfigDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.apache.ranger.service.RangerServiceDefService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForAllServiceDefUpdateForDefaultAuditFilters_J10049 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcStore.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());
            Mockito.when(svcStore.updateServiceDef(Mockito.any())).thenReturn(new RangerServiceDef());

            RangerValidatorFactory validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(validatorFactory.getServiceDefValidator(Mockito.any())).thenReturn(validator);

            PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049 patch = new PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049();
            setIfPresent(patch, "daoMgr", Mockito.mock(RangerDaoManager.class));
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", validatorFactory);
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testGetDefaultAuditFiltersByServiceDef_foundAndNotFound() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef def = new RangerServiceDef();
            List<RangerServiceConfigDef> confs = new ArrayList<>();
            RangerServiceConfigDef cfg = new RangerServiceConfigDef();
            cfg.setName(ServiceDBStore.RANGER_PLUGIN_AUDIT_FILTERS);
            confs.add(cfg);
            def.setConfigs(confs);
            Mockito.when(util.getEmbeddedServiceDef("hive")).thenReturn(def);

            PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049 patch = new PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049();
            Method m = PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049.class.getDeclaredMethod("getDefaultAuditFiltersByServiceDef", String.class);
            m.setAccessible(true);
            Object found = m.invoke(patch, "hive");
            Assertions.assertNotNull(found);

            RangerServiceDef def2 = new RangerServiceDef();
            def2.setConfigs(Collections.emptyList());
            Mockito.when(util.getEmbeddedServiceDef("kafka")).thenReturn(def2);
            Object notFound = m.invoke(patch, "kafka");
            Assertions.assertNull(notFound);
        }
    }

    @Test
    public void testUpdateAllServiceDef_allBranches() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049 patch = new PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
            XXServiceConfigDefDao scDao = Mockito.mock(XXServiceConfigDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
            Mockito.when(daoMgr.getXXServiceConfigDef()).thenReturn(scDao);
            setIfPresent(patch, "daoMgr", daoMgr);

            Mockito.when(sdefDao.getAll()).thenReturn(Collections.emptyList());
            Method m = PatchForAllServiceDefUpdateForDefaultAuditFilters_J10049.class.getDeclaredMethod("updateAllServiceDef");
            m.setAccessible(true);
            m.invoke(patch);

            XXServiceDef xx = new XXServiceDef();
            xx.setName("svc1");
            Mockito.when(sdefDao.getAll()).thenReturn(Collections.singletonList(xx));
            RangerServiceDef embedded = new RangerServiceDef();
            embedded.setConfigs(Collections.emptyList());
            Mockito.when(util.getEmbeddedServiceDef("svc1")).thenReturn(embedded);
            m.invoke(patch);

            RangerServiceDef.RangerServiceConfigDef cfg = new RangerServiceDef.RangerServiceConfigDef();
            cfg.setName(ServiceDBStore.RANGER_PLUGIN_AUDIT_FILTERS);
            List<RangerServiceDef.RangerServiceConfigDef> cfgs = new ArrayList<>();
            cfgs.add(cfg);
            embedded.setConfigs(cfgs);
            ServiceDBStore store = Mockito.mock(ServiceDBStore.class);
            Mockito.when(store.getServiceDefByName("svc1")).thenReturn(null);
            setIfPresent(patch, "svcDBStore", store);
            m.invoke(patch);

            RangerServiceDef svcDef = new RangerServiceDef();
            List<RangerServiceConfigDef> svcConfs = new ArrayList<>();
            RangerServiceConfigDef present = new RangerServiceConfigDef();
            present.setName(ServiceDBStore.RANGER_PLUGIN_AUDIT_FILTERS);
            svcConfs.add(present);
            svcDef.setConfigs(svcConfs);
            Mockito.when(store.getServiceDefByName("svc1")).thenReturn(svcDef);
            m.invoke(patch);

            RangerServiceDef svcDefNo = new RangerServiceDef();
            ArrayList<RangerServiceConfigDef> emptyConfs = new ArrayList<>();
            svcDefNo.setConfigs(emptyConfs);
            Mockito.when(store.getServiceDefByName("svc1")).thenReturn(svcDefNo);

            RangerServiceDefService defService = Mockito.mock(RangerServiceDefService.class);
            setIfPresent(patch, "serviceDefService", defService);

            XXServiceConfigDef xCfg = new XXServiceConfigDef();
            Mockito.when(defService.populateRangerServiceConfigDefToXX(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.anyInt())).thenReturn(xCfg);

            m.invoke(patch);
            Mockito.verify(scDao, Mockito.atLeastOnce()).create(Mockito.any());
        }
    }
}
