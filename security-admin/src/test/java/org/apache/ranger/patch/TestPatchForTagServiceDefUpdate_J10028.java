/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.AbstractServiceStore;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.services.tag.RangerServiceTag;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForTagServiceDefUpdate_J10028 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForTagServiceDefUpdate_J10028 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            RangerServiceDef svcDef = new RangerServiceDef();
            svcDef.setId(1L);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(svcDef);

            PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);
            setIfPresent(patch, "daoMgr", daoMgr);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateTagServiceDef_embeddedMissing_returnsFalse() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("updateTagServiceDef");
            m.setAccessible(true);
            boolean result = (boolean) m.invoke(patch);
            Assertions.assertFalse(result);
        }
    }

    @Test
    public void testUpdateTagServiceDef_tagDaoMissing_returnsTrue() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(null);
        setIfPresent(patch, "daoMgr", daoMgr);

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("updateTagServiceDef");
            m.setAccessible(true);
            boolean result = (boolean) m.invoke(patch);
            Assertions.assertTrue(result);
        }
    }

    @Test
    public void testUpdateTagServiceDef_dbTagServiceMissing_returnsFalse() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(new XXServiceDef());
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcDBStore", Mockito.mock(ServiceDBStore.class));

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("updateTagServiceDef");
            m.setAccessible(true);
            boolean result = (boolean) m.invoke(patch);
            Assertions.assertFalse(result);
        }
    }

    @Test
    public void testUpdateTagServiceDef_updatesAndRestoresOption() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXServiceDefDao sdefDao = Mockito.mock(XXServiceDefDao.class);
        Mockito.when(daoMgr.getXXServiceDef()).thenReturn(sdefDao);
        XXServiceDef xx = new XXServiceDef();
        xx.setDefOptions(null);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx);

        ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
        setIfPresent(patch, "daoMgr", daoMgr);
        setIfPresent(patch, "svcDBStore", svcDB);
        setIfPresent(patch, "svcStore", svcDB);
        setIfPresent(patch, "jsonUtil", new JSONUtil());

        RangerServiceDef tagDef = new RangerServiceDef();
        List<RangerServiceDef.RangerResourceDef> resources = new ArrayList<>();
        RangerServiceDef.RangerResourceDef tagRes = new RangerServiceDef.RangerResourceDef();
        tagRes.setName(RangerServiceTag.TAG_RESOURCE_NAME);
        resources.add(tagRes);
        tagDef.setResources(resources);
        RangerServiceDef.RangerDataMaskDef dm = new RangerServiceDef.RangerDataMaskDef();
        List<RangerServiceDef.RangerAccessTypeDef> dmAccess = new ArrayList<>();
        dmAccess.add(new RangerServiceDef.RangerAccessTypeDef());
        dm.setAccessTypes(dmAccess);
        dm.setResources(new ArrayList<>());
        tagDef.setDataMaskDef(dm);

        Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(tagDef);
        Mockito.when(svcDB.updateServiceDef(Mockito.any())).thenReturn(tagDef);

        XXServiceDef xxAfter = new XXServiceDef();
        HashMap<String, String> postOptions = new HashMap<>();
        postOptions.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "true");
        String postStr = new JSONUtil().readMapToString(postOptions);
        xxAfter.setDefOptions(postStr);
        Mockito.when(sdefDao.findByName(Mockito.anyString())).thenReturn(xx, xxAfter);

        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("updateTagServiceDef");
            m.setAccessible(true);
            boolean result = (boolean) m.invoke(patch);
            Assertions.assertTrue(result);
            Mockito.verify(sdefDao, Mockito.times(2)).findByName(Mockito.anyString());
            Mockito.verify(sdefDao, Mockito.times(1)).update(Mockito.any(XXServiceDef.class));
        }
    }

    @Test
    public void testMapToJsonString_handlesNullAndException() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("mapToJsonString", Map.class);
        m.setAccessible(true);
        Object resNull = m.invoke(patch, new Object[] {null});
        Assertions.assertNull(resNull);

        PatchForTagServiceDefUpdate_J10028 patch2 = new PatchForTagServiceDefUpdate_J10028();
        JSONUtil jsonUtil = Mockito.mock(JSONUtil.class);
        Mockito.when(jsonUtil.readMapToString(Mockito.anyMap())).thenThrow(new RuntimeException("bad"));
        setIfPresent(patch2, "jsonUtil", jsonUtil);
        Object resExc = m.invoke(patch2, new HashMap<String, String>());
        Assertions.assertNull(resExc);
    }

    @Test
    public void testJsonStringToMap_fallbackParsesPairs() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("jsonStringToMap", String.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        HashMap<String, String> res = (HashMap<String, String>) m.invoke(patch, "a=1;" + RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES + "=true");
        Assertions.assertEquals("1", res.get("a"));
        Assertions.assertEquals("true", res.get(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES));

        Object res2 = m.invoke(patch, new Object[] {null});
        Assertions.assertNull(res2);
    }

    @Test
    public void testUpdateResourceInTagServiceDef_allBranches() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        RangerServiceDef tagDef = new RangerServiceDef();
        List<RangerServiceDef.RangerResourceDef> resources = new ArrayList<>();
        RangerServiceDef.RangerResourceDef tagRes = new RangerServiceDef.RangerResourceDef();
        tagRes.setName(RangerServiceTag.TAG_RESOURCE_NAME);
        resources.add(tagRes);
        tagDef.setResources(resources);

        RangerServiceDef.RangerDataMaskDef dm = new RangerServiceDef.RangerDataMaskDef();
        List<RangerServiceDef.RangerAccessTypeDef> dmAccess = new ArrayList<>();
        dmAccess.add(new RangerServiceDef.RangerAccessTypeDef());
        dm.setAccessTypes(dmAccess);
        dm.setResources(new ArrayList<>());
        tagDef.setDataMaskDef(dm);

        RangerServiceDef.RangerRowFilterDef rf = new RangerServiceDef.RangerRowFilterDef();
        rf.setAccessTypes(new ArrayList<>());
        List<RangerServiceDef.RangerResourceDef> rfRes = new ArrayList<>();
        rfRes.add(new RangerServiceDef.RangerResourceDef());
        rf.setResources(rfRes);
        tagDef.setRowFilterDef(rf);

        patch.config.set(AbstractServiceStore.AUTOPROPAGATE_ROWFILTERDEF_TO_TAG_PROP, "true");

        Method m = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("updateResourceInTagServiceDef", RangerServiceDef.class);
        m.setAccessible(true);
        boolean updated = (boolean) m.invoke(patch, tagDef);
        Assertions.assertTrue(updated);
        // RowFilterDef#setResources never leaves it null; ensure it's empty list
        Assertions.assertTrue(tagDef.getRowFilterDef().getResources().isEmpty());

        RangerServiceDef tagDefNoRes = new RangerServiceDef();
        tagDefNoRes.setResources(new ArrayList<>());
        boolean updated2 = (boolean) m.invoke(patch, tagDefNoRes);
        Assertions.assertFalse(updated2);
    }

    @Test
    public void testGetAndAddOrUpdateResourceDefForTagResource() throws Exception {
        PatchForTagServiceDefUpdate_J10028 patch = new PatchForTagServiceDefUpdate_J10028();
        Method get = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("getResourceDefForTagResource", List.class);
        get.setAccessible(true);
        Method addOrUpd = PatchForTagServiceDefUpdate_J10028.class.getDeclaredMethod("addOrUpdateResourceDefForTagResource", List.class, RangerServiceDef.RangerResourceDef.class);
        addOrUpd.setAccessible(true);

        List<RangerServiceDef.RangerResourceDef> defs = new ArrayList<>();
        Object found = get.invoke(patch, defs);
        Assertions.assertNull(found);

        RangerServiceDef.RangerResourceDef tagRes = new RangerServiceDef.RangerResourceDef();
        tagRes.setName(RangerServiceTag.TAG_RESOURCE_NAME);
        tagRes.setDescription("desc");
        List<RangerServiceDef.RangerResourceDef> target = new ArrayList<>();
        addOrUpd.invoke(patch, target, tagRes);
        Assertions.assertEquals(1, target.size());
        Assertions.assertEquals(RangerServiceTag.TAG_RESOURCE_NAME, target.get(0).getName());

        tagRes.setDescription("new-desc");
        addOrUpd.invoke(patch, target, tagRes);
        Assertions.assertEquals("new-desc", target.get(0).getDescription());
    }
}
