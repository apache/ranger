/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.validation.RangerServiceDefValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator.Action;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForHiveServiceDefUpdate_J10030 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForHiveServiceDefUpdate_J10030 {
    @Test
    public void testExecLoadAndPrintStats() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.policyService = Mockito.mock(RangerPolicyService.class);
            patch.stringUtil = new StringUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateServiceDef_trueAndFalseAndValidation() throws Exception {
        PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
        RangerValidatorFactory vf = Mockito.mock(RangerValidatorFactory.class);
        RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
        patch.validatorFactory = vf;
        patch.svcStore = Mockito.mock(ServiceDBStore.class);
        Mockito.when(vf.getServiceDefValidator(Mockito.eq(patch.svcStore))).thenReturn(validator);
        Mockito.doNothing().when(validator).validate(Mockito.any(RangerServiceDef.class), Mockito.eq(Action.UPDATE));
        Mockito.when(patch.svcStore.updateServiceDef(Mockito.any(RangerServiceDef.class)))
                .thenReturn(new RangerServiceDef());

        Method m = PatchForHiveServiceDefUpdate_J10030.class.getDeclaredMethod("updateServiceDef",
                RangerServiceDef.class, RangerServiceDef.class);
        m.setAccessible(true);

        RangerServiceDef serviceDef = new RangerServiceDef();
        RangerServiceDef embedded = new RangerServiceDef();

        // false: no matcher present
        embedded.setResources(new ArrayList<RangerResourceDef>());
        Assertions.assertFalse((boolean) m.invoke(patch, serviceDef, embedded));

        // true: matcher present at least once
        RangerResourceDef resWithMatcher = new RangerResourceDef();
        resWithMatcher.setMatcher("org.apache.ranger.plugin.resourcematcher.RangerURLResourceMatcher");
        List<RangerResourceDef> resDefs = new ArrayList<>();
        resDefs.add(resWithMatcher);
        embedded.setResources(resDefs);
        Assertions.assertTrue((boolean) m.invoke(patch, serviceDef, embedded));
    }

    @Test
    public void testMapToJsonString_nullMap() throws Exception {
        PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
        patch.jsonUtil = new JSONUtil();
        Method m = PatchForHiveServiceDefUpdate_J10030.class.getDeclaredMethod("mapToJsonString", Map.class);
        m.setAccessible(true);
        Assertions.assertNull(m.invoke(patch, new Object[] {null}));
    }

    @Test
    public void testUpdateHiveServiceDef_isUpdatedFalse_skipsPostUpdate() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            RangerServiceDef embedded = new RangerServiceDef();
            RangerResourceDef res = new RangerResourceDef();
            // no matcher -> updateServiceDef will return false
            res.setMatcher("OtherMatcher");
            embedded.setResources(new ArrayList<RangerResourceDef>() {
                {
                    add(res);
                }
            });
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            XXServiceDef xdef = Mockito.mock(XXServiceDef.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(xdef);
            Mockito.when(xdef.getDefOptions()).thenReturn("{}");

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDB;
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = svcDB;
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.eq(patch.svcStore)))
                    .thenReturn(validator);

            patch.execLoad();

            Mockito.verify(xxServiceDefDao, Mockito.never()).update(Mockito.any(XXServiceDef.class));
        }
    }

    @Test
    public void testUpdateHiveServiceDef_restoreOptions_removeKey() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            // embedded with URL matcher to force true path
            RangerServiceDef embedded = new RangerServiceDef();
            RangerResourceDef res = new RangerResourceDef();
            res.setMatcher("com.acme.RangerURLResourceMatcher");
            embedded.setResources(new ArrayList<RangerResourceDef>() {
                {
                    add(res);
                }
            });
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            XXServiceDef xdefPre = Mockito.mock(XXServiceDef.class);
            XXServiceDef xdefPost = Mockito.mock(XXServiceDef.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(xdefPre, xdefPost);
            Mockito.when(xdefPre.getDefOptions()).thenReturn("{}");
            Map<String, String> postMap = new HashMap<>();
            postMap.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "true");
            // when post-read, return map with the option set
            Mockito.when(xdefPost.getDefOptions()).thenReturn(new JSONUtil().readMapToString(postMap));

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDB;
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = svcDB;
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.eq(patch.svcStore)))
                    .thenReturn(validator);

            patch.execLoad();

            Mockito.verify(xxServiceDefDao, Mockito.times(1)).update(Mockito.eq(xdefPost));
        }
    }

    @Test
    public void testUpdateHiveServiceDef_restoreOptions_putKey() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            // embedded with URL matcher to force true path
            RangerServiceDef embedded = new RangerServiceDef();
            RangerResourceDef res = new RangerResourceDef();
            res.setMatcher("com.acme.RangerURLResourceMatcher");
            embedded.setResources(new ArrayList<RangerResourceDef>() {
                {
                    add(res);
                }
            });
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(embedded);

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            XXServiceDef xdefPre = Mockito.mock(XXServiceDef.class);
            XXServiceDef xdefPost = Mockito.mock(XXServiceDef.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(xdefPre, xdefPost);

            Map<String, String> preMap = new HashMap<>();
            preMap.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "abc");
            Mockito.when(xdefPre.getDefOptions()).thenReturn(new JSONUtil().readMapToString(preMap));

            Map<String, String> postMap = new HashMap<>();
            postMap.put(RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES, "xyz");
            Mockito.when(xdefPost.getDefOptions()).thenReturn(new JSONUtil().readMapToString(postMap));

            ServiceDBStore svcDB = Mockito.mock(ServiceDBStore.class);
            Mockito.when(svcDB.getServiceDefByName(Mockito.anyString())).thenReturn(new RangerServiceDef());

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = svcDB;
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = svcDB;
            RangerServiceDefValidator validator = Mockito.mock(RangerServiceDefValidator.class);
            Mockito.when(patch.validatorFactory.getServiceDefValidator(Mockito.eq(patch.svcStore)))
                    .thenReturn(validator);

            ArgumentCaptor<XXServiceDef> captor = ArgumentCaptor.forClass(XXServiceDef.class);

            patch.execLoad();

            Mockito.verify(xxServiceDefDao).update(captor.capture());
            XXServiceDef updated = captor.getValue();
            Mockito.verify(updated).setDefOptions(Mockito.argThat(json -> json
                    .contains("\"" + RangerServiceDef.OPTION_ENABLE_DENY_AND_EXCEPTIONS_IN_POLICIES + "\":\"abc\"")));
        }
    }

    @Test
    public void testUpdateHiveServiceDef_EmbeddedNull_Safe() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(null);

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = Mockito.mock(RangerDaoManager.class);
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
        }
    }

    @Test
    public void testUpdateHiveServiceDef_ServiceDefNotFound_SafeReturn() throws Exception {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);
            Mockito.when(util.getEmbeddedServiceDef(Mockito.anyString())).thenReturn(new RangerServiceDef());

            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXServiceDefDao xxServiceDefDao = Mockito.mock(XXServiceDefDao.class);
            Mockito.when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
            Mockito.when(xxServiceDefDao.findByName(Mockito.anyString())).thenReturn(null);

            PatchForHiveServiceDefUpdate_J10030 patch = new PatchForHiveServiceDefUpdate_J10030();
            patch.daoMgr = daoMgr;
            patch.svcDBStore = Mockito.mock(ServiceDBStore.class);
            patch.jsonUtil = new JSONUtil();
            patch.validatorFactory = Mockito.mock(RangerValidatorFactory.class);
            patch.svcStore = patch.svcDBStore;

            patch.execLoad();
        }
    }
}
