/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.patch;

import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.JSONUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGlobalStateDao;
import org.apache.ranger.entity.XXGlobalState;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.service.RangerPolicyService;
import org.apache.ranger.util.CLIUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.security.Permission;

/**
 * @generated by Cursor
 * @description <Unit Test for PatchForXGlobalState_J10036 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPatchForXGlobalState_J10036 {
    private static void setIfPresent(Object target, String fieldName, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(target, value);
        } catch (NoSuchFieldException ignored) {
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testExecLoadAndPrintStats() {
        try (MockedStatic<EmbeddedServiceDefsUtil> utilMock = Mockito.mockStatic(EmbeddedServiceDefsUtil.class)) {
            EmbeddedServiceDefsUtil util = Mockito.mock(EmbeddedServiceDefsUtil.class);
            utilMock.when(EmbeddedServiceDefsUtil::instance).thenReturn(util);

            PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
            RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
            XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
            Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
            Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(null);
            setIfPresent(patch, "daoManager", daoMgr);
            ServiceDBStore svcStore = Mockito.mock(ServiceDBStore.class);
            setIfPresent(patch, "svcDBStore", svcStore);
            setIfPresent(patch, "jsonUtil", new JSONUtil());
            setIfPresent(patch, "policyService", Mockito.mock(RangerPolicyService.class));
            setIfPresent(patch, "stringUtil", new StringUtil());
            setIfPresent(patch, "validatorFactory", Mockito.mock(RangerValidatorFactory.class));
            setIfPresent(patch, "svcStore", svcStore);

            patch.execLoad();
            patch.printStats();
        }
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_NoAppData() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(1L);
        st.setStateName("RangerRole");
        st.setAppData(null);
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);
        patch.updateRangerRoleVersionToVersion();
        Mockito.verify(xxGlobalStateDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_EmptyMapOrMissingKey() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(2L);
        st.setStateName("RangerRole");
        // appData without RangerRoleVersion key
        st.setAppData("{\"Version\":\"1\"}");
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);
        patch.updateRangerRoleVersionToVersion();
        Mockito.verify(xxGlobalStateDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_UpdatesAndRemovesKey() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(3L);
        st.setStateName("RangerRole");
        st.setAppData("{\"RangerRoleVersion\":\"5\"}");
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);

        patch.updateRangerRoleVersionToVersion();

        Mockito.verify(xxGlobalStateDao, Mockito.times(1)).update(Mockito.any());
        // after update, appData should contain Version and not RangerRoleVersion
        String updated = st.getAppData();
        Assertions.assertTrue(updated.contains("\"Version\":\"5\""));
        Assertions.assertFalse(updated.contains("RangerRoleVersion\""));
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_EmptyAppDataString() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(4L);
        st.setStateName("RangerRole");
        st.setAppData("");
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);
        patch.updateRangerRoleVersionToVersion();
        Mockito.verify(xxGlobalStateDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_EmptyMap() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(5L);
        st.setStateName("RangerRole");
        st.setAppData("{}");
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);
        patch.updateRangerRoleVersionToVersion();
        Mockito.verify(xxGlobalStateDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testUpdateRangerRoleVersionToVersion_EmptyRoleVersion_NoUpdate() {
        PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
        RangerDaoManager daoMgr = Mockito.mock(RangerDaoManager.class);
        XXGlobalStateDao xxGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        XXGlobalState st = new XXGlobalState();
        st.setId(6L);
        st.setStateName("RangerRole");
        st.setAppData("{\"RangerRoleVersion\":\"\"}");
        Mockito.when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
        Mockito.when(xxGlobalStateDao.findByStateName(Mockito.anyString())).thenReturn(st);
        setIfPresent(patch, "daoManager", daoMgr);
        patch.updateRangerRoleVersionToVersion();
        Mockito.verify(xxGlobalStateDao, Mockito.never()).update(Mockito.any());
    }

    @Test
    public void testMain_Success_ExitZero() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            PatchForXGlobalState_J10036 patch = new PatchForXGlobalState_J10036();
            patch.setMoreToProcess(false);
            cliMock.when(() -> CLIUtil.getBean(PatchForXGlobalState_J10036.class)).thenReturn(patch);

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForXGlobalState_J10036.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertNotNull(se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    public void testMain_Failure_ExitOne() {
        SecurityManager originalSm = System.getSecurityManager();
        try (MockedStatic<CLIUtil> cliMock = Mockito.mockStatic(CLIUtil.class)) {
            cliMock.when(() -> CLIUtil.getBean(PatchForXGlobalState_J10036.class))
                    .thenThrow(new RuntimeException("boom"));

            System.setSecurityManager(new SecurityManager() {
                @Override
                public void checkExit(int status) {
                    throw new SecurityException(String.valueOf(status));
                }

                @Override
                public void checkPermission(Permission perm) {
                }
            });

            try {
                PatchForXGlobalState_J10036.main(new String[] {});
            } catch (SecurityException se) {
                Assertions.assertEquals("1", se.getMessage());
            }
        } finally {
            System.setSecurityManager(originalSm);
        }
    }
}
