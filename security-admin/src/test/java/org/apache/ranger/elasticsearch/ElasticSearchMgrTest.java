/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.elasticsearch;

import org.apache.ranger.common.PropertiesUtil;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ElasticSearchMgr
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class ElasticSearchMgrTest {
    @Test
    public void getRestClientBuilder_withoutCredentials_returnsBuilder() {
        RestClientBuilder builder = ElasticSearchMgr.getRestClientBuilder("localhost", "http", "", "", 9200);
        assertNotNull(builder);
    }

    @Test
    public void constructor_and_connect_and_getClient_returnSameInstance_whenNoEndpoints() {
        ElasticSearchMgr    mgr     = new ElasticSearchMgr();
        Map<String, String> props   = PropertiesUtil.getPropertiesMap();
        String              pfx     = "ranger.audit.elasticsearch";
        String              oldUrls = props.get(pfx + ".urls");
        String              oldPort = props.get(pfx + ".port");
        String              oldUser = props.get(pfx + ".user");
        String              oldPwd  = props.get(pfx + ".password");
        try {
            props.put(pfx + ".urls", "NONE");
            props.put(pfx + ".port", "9200");
            props.put(pfx + ".user", "");
            props.put(pfx + ".password", "");
            RestHighLevelClient c1 = mgr.getClient();
            RestHighLevelClient c2 = mgr.getClient();
            assertSame(c1, c2);
        } finally {
            if (oldUrls != null) {
                props.put(pfx + ".urls", oldUrls);
            } else {
                props.remove(pfx + ".urls");
            }
            if (oldPort != null) {
                props.put(pfx + ".port", oldPort);
            } else {
                props.remove(pfx + ".port");
            }
            if (oldUser != null) {
                props.put(pfx + ".user", oldUser);
            } else {
                props.remove(pfx + ".user");
            }
            if (oldPwd != null) {
                props.put(pfx + ".password", oldPwd);
            } else {
                props.remove(pfx + ".password");
            }
        }
    }

    @Test
    void getRestClientBuilder_withBasicCredentials_returnsBuilder() {
        RestClientBuilder builder = ElasticSearchMgr.getRestClientBuilder("localhost", "http", "user", "pass", 9200);
        assertNotNull(builder);
    }
}
