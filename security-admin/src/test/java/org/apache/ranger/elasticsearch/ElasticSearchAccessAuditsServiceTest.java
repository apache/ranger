/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.elasticsearch;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.apache.ranger.AccessAuditsService;
import org.apache.ranger.audit.destination.ElasticSearchAuditDestination;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.view.VXAccessAuditList;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.get.MultiGetItemResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;

import static org.apache.ranger.audit.destination.ElasticSearchAuditDestination.CONFIG_PREFIX;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ElasticSearchAccessAuditsService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class ElasticSearchAccessAuditsServiceTest {
    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSearchAccessAuditsServiceTest.class);

    @Test
    @Disabled // For manual execution only
    public void testQuery() {
        ElasticSearchAccessAuditsService elasticSearchAccessAuditsService = new ElasticSearchAccessAuditsService();
        Map<String, String>              properties                       = PropertiesUtil.getPropertiesMap();
        properties.put("ranger.audit.elasticsearch.urls", "localhost");
        properties.put("ranger.audit.elasticsearch.protocol", "http");
        properties.put("ranger.audit.elasticsearch.user", "elastic");
        properties.put("ranger.audit.elasticsearch.password", "password1");
        properties.put("ranger.audit.elasticsearch.port", "9200");
        elasticSearchAccessAuditsService.elasticSearchMgr             = new ElasticSearchMgr();
        elasticSearchAccessAuditsService.elasticSearchUtil            = new ElasticSearchUtil();
        elasticSearchAccessAuditsService.elasticSearchUtil.stringUtil = new StringUtil();
        elasticSearchAccessAuditsService.setRestErrorUtil(new RESTErrorUtil());
        LOGGER.info("Running searchXAccessAudits:");
        VXAccessAuditList vxAccessAuditList = elasticSearchAccessAuditsService.searchXAccessAudits(getSearchCriteria());
        LOGGER.info(String.format("searchXAccessAudits results (%d items):", vxAccessAuditList.getListSize()));
        ObjectWriter writer = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT).writer();
        vxAccessAuditList.getVXAccessAudits().forEach(x -> {
            try {
                LOGGER.warn(writer.writeValueAsString(x));
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        });
    }

    @Test
    @Disabled // For manual execution only
    public void testWrite() {
        ElasticSearchAuditDestination elasticSearchAuditDestination = new ElasticSearchAuditDestination();
        Properties                    properties                    = new Properties();
        properties.put(CONFIG_PREFIX + "." + ElasticSearchAuditDestination.CONFIG_URLS, "localhost");
        properties.put(CONFIG_PREFIX + "." + ElasticSearchAuditDestination.CONFIG_USER, "elastic");
        properties.put(CONFIG_PREFIX + "." + ElasticSearchAuditDestination.CONFIG_PWRD, "password1");
        elasticSearchAuditDestination.init(properties, CONFIG_PREFIX);
        assertTrue(elasticSearchAuditDestination.log(Collections.singletonList(getAuthzAuditEvent())));
    }

    @Test
    public void searchXAccessAudits_hiveVisibilityAndDecoding() throws Exception {
        ElasticSearchAccessAuditsService service = new ElasticSearchAccessAuditsService();
        service.elasticSearchMgr  = mock(ElasticSearchMgr.class);
        service.elasticSearchUtil = mock(ElasticSearchUtil.class);
        service.setRestErrorUtil(new RESTErrorUtil());

        // mock daoManager to map repoType->hive
        RangerDaoManager daoManager = mock(RangerDaoManager.class);
        XXServiceDefDao  xxDao      = mock(XXServiceDefDao.class);
        XXServiceDef     xsd        = mock(XXServiceDef.class);
        when(daoManager.getXXServiceDef()).thenReturn(xxDao);
        when(xxDao.getById(1L)).thenReturn(xsd);
        when(xsd.getName()).thenReturn("hive");
        when(xsd.getDisplayName()).thenReturn("Hive");
        Field f = AccessAuditsService.class.getDeclaredField("daoManager");
        f.setAccessible(true);
        f.set(service, daoManager);

        RestHighLevelClient client = mock(RestHighLevelClient.class);
        when(service.elasticSearchMgr.getClient()).thenReturn(client);

        SearchResponse sr = mock(SearchResponse.class);
        SearchHits     sh = mock(SearchHits.class);
        when(sr.getHits()).thenReturn(sh);
        when(sh.getHits()).thenReturn(new SearchHit[] {mock(SearchHit.class)});
        when(service.elasticSearchUtil.searchResources(any(), anyList(), anyList(), eq(client), any())).thenReturn(sr);

        MultiGetItemResponse item = mock(MultiGetItemResponse.class);
        GetResponse          gr   = mock(GetResponse.class);
        Map<String, Object>  src  = new HashMap<>();
        src.put("id", "1");
        src.put("repoType", 1);
        src.put("access", "grant");
        src.put("reqData", "select%201");
        when(gr.getSource()).thenReturn(src);
        when(item.getResponse()).thenReturn(gr);
        when(service.elasticSearchUtil.fetch(eq(client), any(), any(SearchHit.class))).thenReturn(new MultiGetItemResponse[] {item});

        // ensure hive query visibility is true for decoding path
        String              k     = "ranger.audit.hive.query.visibility";
        Map<String, String> props = PropertiesUtil.getPropertiesMap();
        String              old   = props.get(k);
        props.put(k, "true");
        try {
            VXAccessAuditList list = service.searchXAccessAudits(new SearchCriteria());
            assertEquals(1, list.getVXAccessAudits().size());
            assertEquals("select 1", list.getVXAccessAudits().get(0).getRequestData());
        } finally {
            if (old != null) {
                props.put(k, old);
            } else {
                props.remove(k);
            }
        }
    }

    @Test
    public void getXAccessAuditSearchCount_returnsConstant() {
        ElasticSearchAccessAuditsService service = new ElasticSearchAccessAuditsService();
        assertEquals(100L, service.getXAccessAuditSearchCount(new SearchCriteria()).getValue());
    }

    // New JUnit 5 tests migrated from ElasticSearchAccessAuditsServiceJUnit5Test
    @Test
    void searchXAccessAudits_whenClientNull_throwsWebAppException() {
        ElasticSearchAccessAuditsService service = new ElasticSearchAccessAuditsService();
        service.elasticSearchMgr  = mock(ElasticSearchMgr.class);
        service.elasticSearchUtil = mock(ElasticSearchUtil.class);
        service.setRestErrorUtil(new RESTErrorUtil());

        when(service.elasticSearchMgr.getClient()).thenReturn(null);

        SearchCriteria criteria = new SearchCriteria();

        assertThrows(WebApplicationException.class, () -> service.searchXAccessAudits(criteria));
    }

    @Test
    void searchXAccessAudits_success_basicMappingAndCounts() throws Exception {
        ElasticSearchAccessAuditsService service = new ElasticSearchAccessAuditsService();
        service.elasticSearchMgr  = mock(ElasticSearchMgr.class);
        service.elasticSearchUtil = mock(ElasticSearchUtil.class);
        service.setRestErrorUtil(new RESTErrorUtil());

        RestHighLevelClient client = mock(RestHighLevelClient.class);
        when(service.elasticSearchMgr.getClient()).thenReturn(client);

        // mock search response and hits
        SearchResponse mockSearchResponse = mock(SearchResponse.class);
        SearchHits     mockSearchHits     = mock(SearchHits.class);
        when(mockSearchResponse.getHits()).thenReturn(mockSearchHits);
        // return 2 hits length, leave totalHits as null to avoid API differences across ES
        when(mockSearchHits.getHits()).thenReturn(new SearchHit[] {null, null});
        when(service.elasticSearchUtil.searchResources(any(), anyList(), anyList(), eq(client), any())).thenReturn(mockSearchResponse);

        // mock fetch docs
        MultiGetItemResponse mockItem        = mock(MultiGetItemResponse.class);
        GetResponse          mockGetResponse = mock(GetResponse.class);
        Map<String, Object>  source          = new HashMap<>();
        source.put("id", "abc123");
        source.put("cluster", "cl1");
        source.put("zoneName", "zn");
        source.put("agentHost", "host1");
        source.put("policyVersion", 7);
        source.put("access", "read");
        source.put("enforcer", "tag");
        source.put("agent", "agentA");
        source.put("sess", "s1");
        source.put("reqUser", "alice");
        source.put("reqData", "select 1");
        source.put("resource", "/path");
        source.put("cliIP", "1.2.3.4");
        source.put("result", 1);
        source.put("policy", 99);
        source.put("repoType", 1);
        source.put("resType", "table");
        source.put("reason", "ok");
        source.put("action", "ACCESS");
        source.put("evtTime", System.currentTimeMillis());
        source.put("seq_num", 10);
        source.put("event_count", 1);
        source.put("event_dur_ms", 2);
        source.put("tags", "t1");
        when(mockGetResponse.getSource()).thenReturn(source);
        when(mockItem.getResponse()).thenReturn(mockGetResponse);
        when(service.elasticSearchUtil.fetch(eq(client), anyString(), any(SearchHit.class))).thenReturn(new MultiGetItemResponse[] {mockItem});

        SearchCriteria criteria = new SearchCriteria();
        criteria.setMaxRows(25);
        criteria.setStartIndex(0);

        VXAccessAuditList list = service.searchXAccessAudits(criteria);
        assertNotNull(list);
        assertEquals(2, list.getResultSize());
        // totalCount may be unset when totalHits is null; just verify audits populated
        assertEquals(1, list.getVXAccessAudits().size());
        assertEquals("cl1", list.getVXAccessAudits().get(0).getClusterName());
        assertEquals("alice", list.getVXAccessAudits().get(0).getRequestUser());
    }

    private SearchCriteria getSearchCriteria() {
        SearchCriteria searchCriteria = new SearchCriteria();
        searchCriteria.setDistinct(false);
        searchCriteria.setGetChildren(false);
        searchCriteria.setGetCount(true);
        searchCriteria.setMaxRows(25);
        searchCriteria.setOwnerId(null);
        searchCriteria.setSortBy("eventTime");
        searchCriteria.setSortType("desc");
        searchCriteria.setStartIndex(0);
        Calendar calendar = Calendar.getInstance();
        calendar.set(2019, 11, 13);
        searchCriteria.getParamList().put("startDate", calendar.getTime());
        searchCriteria.getParamList().put("-repoType", 7);
        searchCriteria.getParamList().put("-requestUser", new ArrayList<>());
        searchCriteria.getParamList().put("requestUser", new ArrayList<>());
        searchCriteria.getParamList().put("zoneName", new ArrayList<>());
        return searchCriteria;
    }

    private AuthzAuditEvent getAuthzAuditEvent() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setAccessResult((short) 1);
        event.setAccessType("");
        event.setAclEnforcer("");
        event.setAction("");
        event.setAdditionalInfo("");
        event.setAgentHostname("");
        event.setAgentId("");
        event.setClientIP("");
        event.setClusterName("");
        event.setClientType("");
        event.setEventCount(1);
        event.setEventDurationMS(1);
        event.setEventId("");
        event.setEventTime(new Date());
        event.setLogType("");
        event.setPolicyId(1);
        event.setPolicyVersion(1L);
        event.setRepositoryName("");
        event.setRequestData("");
        event.setRepositoryName("");
        event.setRepositoryType(1);
        event.setResourcePath("");
        event.setResultReason("");
        event.setSeqNum(1);
        event.setSessionId("");
        event.setTags(new HashSet<>());
        event.setUser("");
        event.setZoneName("");
        return event;
    }
}
