/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.elasticsearch;

import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ElasticSearchUtil
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class ElasticSearchUtilQueryAccumulatorTest {
    ElasticSearchUtil util;

    @BeforeEach
    public void setUp() {
        util = new ElasticSearchUtil();
    }

    @Test
    public void queryAccumulator_setsFromAndToDates_forDateFields() throws Exception {
        SearchCriteria criteria = new SearchCriteria();
        Date           now      = new Date();
        criteria.getParamList().put("startDate", new Date(now.getTime() - 1000));
        criteria.getParamList().put("endDate", now);

        Class<?> innerClass = Arrays.stream(ElasticSearchUtil.class.getDeclaredClasses())
                .filter(c -> c.getSimpleName().equals("QueryAccumulator"))
                .findFirst()
                .orElseThrow(() -> new AssertionError("QueryAccumulator not found"));

        // Non-static inner class: first parameter must be outer class instance
        Constructor<?> ctor = innerClass.getDeclaredConstructor(ElasticSearchUtil.class, SearchCriteria.class);
        ctor.setAccessible(true);
        Object accumulator = ctor.newInstance(util, criteria);

        Method getQueryBuilder = innerClass.getDeclaredMethod("getQueryBuilder", SearchField.class);
        getQueryBuilder.setAccessible(true);

        SearchField start = new SearchField("startDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN);
        SearchField end   = new SearchField("endDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.LESS_EQUAL_THAN);

        Object qb1 = getQueryBuilder.invoke(accumulator, start);
        Object qb2 = getQueryBuilder.invoke(accumulator, end);

        assertNull(qb1);
        assertNull(qb2);

        Field fromDate      = innerClass.getDeclaredField("fromDate");
        Field toDate        = innerClass.getDeclaredField("toDate");
        Field dateFieldName = innerClass.getDeclaredField("dateFieldName");
        fromDate.setAccessible(true);
        toDate.setAccessible(true);
        dateFieldName.setAccessible(true);

        assertNotNull(fromDate.get(accumulator));
        assertNotNull(toDate.get(accumulator));
        assertEquals("evtTime", dateFieldName.get(accumulator));
    }

    @Test
    public void getQueryBuilder_overload_handlesNegativeField_andCollections_andPartial() throws Exception {
        SearchCriteria criteria = new SearchCriteria();
        Class<?> innerClass = Arrays.stream(ElasticSearchUtil.class.getDeclaredClasses())
                .filter(c -> c.getSimpleName().equals("QueryAccumulator"))
                .findFirst()
                .orElseThrow(() -> new AssertionError("QueryAccumulator not found"));

        Constructor<?> ctor = innerClass.getDeclaredConstructor(ElasticSearchUtil.class, SearchCriteria.class);
        ctor.setAccessible(true);
        Object accumulator = ctor.newInstance(util, criteria);

        Method overloaded = innerClass.getDeclaredMethod(
                "getQueryBuilder",
                SearchField.DATA_TYPE.class,
                SearchField.SEARCH_TYPE.class,
                String.class,
                Object.class);
        overloaded.setAccessible(true);

        Object q1 = overloaded.invoke(accumulator, SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL, "-user", "alice");
        Object q2 = overloaded.invoke(accumulator, SearchField.DATA_TYPE.STR_LIST, SearchField.SEARCH_TYPE.FULL, "user", Arrays.asList("a", "b"));
        Object q3 = overloaded.invoke(accumulator, SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.PARTIAL, "path", " ");

        assertNotNull(q1); // negative query builds bool mustNot
        assertNotNull(q2); // or-list query
        assertNull(q3);    // blank partial returns null
    }
}
