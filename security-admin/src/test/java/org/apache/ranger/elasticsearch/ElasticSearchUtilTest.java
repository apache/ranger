/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.elasticsearch;

import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.StringUtil;
import org.elasticsearch.action.get.MultiGetItemResponse;
import org.elasticsearch.action.get.MultiGetResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ElasticSearchUtil
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class ElasticSearchUtilTest {
    ElasticSearchUtil util;

    @Mock
    RestHighLevelClient client;

    @BeforeEach
    public void setUp() {
        util            = new ElasticSearchUtil();
        util.stringUtil = new StringUtil();
    }

    @Test
    public void constructor_setsTimezone_whenPropertyPresent() {
        String              key   = "xa.elasticSearch.timezone";
        Map<String, String> props = PropertiesUtil.getPropertiesMap();
        String              old   = props.get(key);
        try {
            props.put(key, "UTC");
            ElasticSearchUtil u = new ElasticSearchUtil();
            assertEquals("UTC", u.dateFormat.getTimeZone().getID());
        } finally {
            if (old != null) {
                props.put(key, old);
            } else {
                props.remove(key);
            }
        }
    }

    @Test
    public void orList_returnsNullForEmptyList_andQueryForValues() {
        assertNull(util.orList("field", Collections.emptyList()));
        QueryBuilder qb = util.orList("field", Arrays.asList("A", "B"));
        assertNotNull(qb);
    }

    @Test
    public void setDateRange_returnsBuilder() {
        QueryBuilder qb = util.setDateRange("evtTime", new Date(System.currentTimeMillis() - 1000), new Date());
        assertNotNull(qb);
    }

    @Test
    public void fetch_returnsEmptyWhenNoHits() throws Exception {
        assertEquals(0, util.fetch(client, "index").length);
    }

    @Test
    public void fetch_withHits_buildsMultiGetRequest_andReturnsResponses() throws Exception {
        SearchHit h1 = mock(SearchHit.class);
        SearchHit h2 = mock(SearchHit.class);
        when(h1.getId()).thenReturn("id1");
        when(h2.getId()).thenReturn("id2");

        MultiGetItemResponse r1               = mock(MultiGetItemResponse.class);
        MultiGetItemResponse r2               = mock(MultiGetItemResponse.class);
        MultiGetResponse     multiGetResponse = mock(MultiGetResponse.class);
        when(multiGetResponse.getResponses()).thenReturn(new MultiGetItemResponse[] {r1, r2});
        when(client.multiGet(any(), any(RequestOptions.class))).thenReturn(multiGetResponse);

        MultiGetItemResponse[] out = util.fetch(client, "index", h1, h2);
        assertNotNull(out);
        assertEquals(2, out.length);
    }

    @Test
    public void searchResources_invokesClientSearch() throws Exception {
        SearchCriteria criteria = new SearchCriteria();
        criteria.setStartIndex(0);
        criteria.setMaxRows(5);
        criteria.setSortBy("eventTime");
        criteria.setSortType("desc");

        List<SearchField> searchFields = Arrays.asList(
                new SearchField("requestUser", "reqUser", SearchField.DATA_TYPE.STR_LIST, SearchField.SEARCH_TYPE.FULL),
                new SearchField("startDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN));
        List<SortField> sortFields = Collections.singletonList(new SortField("eventTime", "evtTime", true, SortField.SORT_ORDER.DESC));

        SearchResponse mockResponse = mock(SearchResponse.class);
        when(client.search(any(), any(RequestOptions.class))).thenReturn(mockResponse);

        SearchResponse res = util.searchResources(criteria, searchFields, sortFields, client, "ranger_audits");
        assertNotNull(res);
    }

    @Test
    public void setSortClause_setsDefaultWhenMissing() {
        SearchCriteria      criteria   = new SearchCriteria();
        SearchSourceBuilder builder    = new SearchSourceBuilder();
        List<SortField>     sortFields = Collections.singletonList(new SortField("eventTime", "evtTime", true, SortField.SORT_ORDER.DESC));
        util.setSortClause(criteria, sortFields, builder);
        assertEquals("eventTime", criteria.getSortBy());
        assertEquals("DESC", criteria.getSortType());
    }
}
