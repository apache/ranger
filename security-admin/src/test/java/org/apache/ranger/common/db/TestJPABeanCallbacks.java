/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.common.db;

import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.entity.XXDBBase;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for JPABeanCallbacks
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestJPABeanCallbacks {
    @Test
    public void test1_onPrePersist_setsUpdateAndUserIds_fromContext() {
        JPABeanCallbacks cb = new JPABeanCallbacks();
        TestEntity       e  = new TestEntity();
        e.setCreateTime(null);
        e.setUpdateTime(null);
        e.setAddedByUserId(null);
        e.setUpdatedByUserId(null);

        RangerSecurityContext ctx  = new RangerSecurityContext();
        UserSessionBase       sess = new UserSessionBase();
        XXPortalUser          pu   = new XXPortalUser();
        pu.setId(42L);
        sess.setXXPortalUser(pu);
        ctx.setUserSession(sess);
        RangerContextHolder.setSecurityContext(ctx);

        try {
            Method m = JPABeanCallbacks.class.getDeclaredMethod("onPrePersist", Object.class);
            m.setAccessible(true);
            m.invoke(cb, e);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }

        assertNotNull(e.getUpdateTime());
        assertEquals(42L, (long) e.getAddedByUserId());
        assertEquals(42L, (long) e.getUpdatedByUserId());
    }

    @Test
    public void testOnPreUpdateSetsUpdateTime() {
        JPABeanCallbacks cb = new JPABeanCallbacks();
        TestEntity       e  = new TestEntity();
        e.setUpdateTime(null);
        try {
            Method m = JPABeanCallbacks.class.getDeclaredMethod("onPreUpdate", Object.class);
            m.setAccessible(true);
            m.invoke(cb, e);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
        assertNotNull(e.getUpdateTime());
    }

    public static class TestEntity extends XXDBBase {
        private Long id = 1L;

        @Override
        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public void setCreateTime(Date d) {
            this.createTime = d;
        }

        public void setUpdateTime(Date d) {
            this.updateTime = d;
        }
    }
}
