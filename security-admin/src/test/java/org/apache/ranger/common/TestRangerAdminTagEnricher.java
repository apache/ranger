/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.ServiceStore;
import org.apache.ranger.plugin.store.TagStore;
import org.apache.ranger.plugin.util.RangerReadWriteLock;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerAdminTagEnricher
 */

public class TestRangerAdminTagEnricher {
    @Test
    public void testCreateLockUsesTagStoreFlag() {
        TagStore tagStore = Mockito.mock(TagStore.class);
        when(tagStore.isInPlaceTagUpdateSupported()).thenReturn(true);
        RangerAdminTagEnricher.setTagStore(tagStore);

        RangerAdminTagEnricher enricher = new RangerAdminTagEnricher();
        RangerReadWriteLock    lock     = enricher.createLock();
        try (RangerReadWriteLock.RangerLock readLock = lock.getReadLock()) {
            Assertions.assertTrue(readLock.isLockingEnabled());
        }

        when(tagStore.isInPlaceTagUpdateSupported()).thenReturn(false);
        lock = enricher.createLock();
        try (RangerReadWriteLock.RangerLock readLock = lock.getReadLock()) {
            Assertions.assertFalse(readLock.isLockingEnabled());
        }
    }

    @Test
    public void testToStringContainsServiceNameAndIdAfterInit() throws Exception {
        TagStore     tagStore = Mockito.mock(TagStore.class);
        ServiceStore svcStore = Mockito.mock(ServiceStore.class);
        when(tagStore.getServiceStore()).thenReturn(svcStore);
        RangerService svc = new RangerService();
        svc.setId(77L);
        when(svcStore.getServiceByName("svc-name")).thenReturn(svc);

        RangerAdminTagEnricher.setTagStore(tagStore);
        RangerAdminTagEnricher enricher = new RangerAdminTagEnricher();
        enricher.setServiceName("svc-name");
        // set minimal serviceDef required by parent init paths
        RangerServiceDef svcDef = new RangerServiceDef();
        enricher.setServiceDef(svcDef);

        // init should attempt to wire and set serviceId; we don't assert side-effects beyond toString content
        enricher.init();

        String s = enricher.toString();
        Assertions.assertTrue(s.contains("svc-name"));
        Assertions.assertTrue(s.contains("serviceId=77"));
    }
}
