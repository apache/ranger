/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for AppConstants
 */
@ExtendWith(MockitoExtension.class)
public class TestAppConstants {
    @Test
    public void testGetLabelFor_PolicyType() {
        int inclusionValue = AppConstants.POLICY_INCLUSION;
        int exclusionValue = AppConstants.POLICY_EXCLUSION;

        AppConstants.getLabelFor_PolicyType(inclusionValue);
        AppConstants.getLabelFor_PolicyType(exclusionValue);
        AppConstants.getLabelFor_PolicyType(999);
        // No exceptions should be thrown
        assertEquals("Inclusion", AppConstants.getLabelFor_PolicyType(inclusionValue));
        assertEquals("Exclusion", AppConstants.getLabelFor_PolicyType(exclusionValue));
        assertNull(AppConstants.getLabelFor_PolicyType(999), "Expected null for unknown policy type");
    }

    @Test
    public void testGetLabelFor_AssetType_ValidValues() {
        assertEquals("Unknown", AppConstants.getLabelFor_AssetType(0));
        assertEquals("HDFS", AppConstants.getLabelFor_AssetType(1));
        assertEquals("HBase", AppConstants.getLabelFor_AssetType(2));
        assertEquals("Hive", AppConstants.getLabelFor_AssetType(3));
        assertEquals("XAAGENT", AppConstants.getLabelFor_AssetType(4));
        assertEquals("Knox", AppConstants.getLabelFor_AssetType(5));
        assertEquals("Storm", AppConstants.getLabelFor_AssetType(6));
    }

    @Test
    public void testGetLabelFor_AssetType_InvalidValue() {
        assertNull(AppConstants.getLabelFor_AssetType(99), "Expected null for unknown asset type");
    }

    @Test
    public void testGetLabelFor_XAAuditType_ValidValues() {
        assertEquals("Unknown", AppConstants.getLabelFor_XAAuditType(0));
        assertEquals("All", AppConstants.getLabelFor_XAAuditType(1));
        assertEquals("Read", AppConstants.getLabelFor_XAAuditType(2));
        assertEquals("Write", AppConstants.getLabelFor_XAAuditType(3));
        assertEquals("Create", AppConstants.getLabelFor_XAAuditType(4));
        assertEquals("Delete", AppConstants.getLabelFor_XAAuditType(5));
        assertEquals("Login", AppConstants.getLabelFor_XAAuditType(6));
    }

    @Test
    public void testGetLabelFor_XAAuditType_InvalidValue() {
        assertNull(AppConstants.getLabelFor_XAAuditType(99));
    }

    @Test
    public void testGetLabelFor_ResourceType_ValidValues() {
        assertEquals("Unknown", AppConstants.getLabelFor_ResourceType(0));
        assertEquals("Path", AppConstants.getLabelFor_ResourceType(1));
        assertEquals("Database", AppConstants.getLabelFor_ResourceType(2));
        assertEquals("Table", AppConstants.getLabelFor_ResourceType(3));
        assertEquals("Column Family", AppConstants.getLabelFor_ResourceType(4));
        assertEquals("Column", AppConstants.getLabelFor_ResourceType(5));
        assertEquals("VIEW", AppConstants.getLabelFor_ResourceType(6));
        assertEquals("UDF", AppConstants.getLabelFor_ResourceType(7));
        assertEquals("View Column", AppConstants.getLabelFor_ResourceType(8));
        assertEquals("Topology", AppConstants.getLabelFor_ResourceType(9));
        assertEquals("Service", AppConstants.getLabelFor_ResourceType(10));
    }

    @Test
    public void testGetLabelFor_ResourceType_InvalidValue() {
        assertNull(AppConstants.getLabelFor_ResourceType(-1));
        assertNull(AppConstants.getLabelFor_ResourceType(100));
    }

    @Test
    public void testGetLabelFor_XAGroupType() {
        assertEquals("Unknown", AppConstants.getLabelFor_XAGroupType(0));
        assertEquals("User", AppConstants.getLabelFor_XAGroupType(1));
        assertEquals("Group", AppConstants.getLabelFor_XAGroupType(2));
        assertEquals("Role", AppConstants.getLabelFor_XAGroupType(3));
        assertNull(AppConstants.getLabelFor_XAGroupType(99));
    }

    @Test
    public void testGetLabelFor_XAPermForType() {
        assertEquals("Unknown", AppConstants.getLabelFor_XAPermForType(0));
        assertEquals("Permission for Users", AppConstants.getLabelFor_XAPermForType(1));
        assertEquals("Permission for Groups", AppConstants.getLabelFor_XAPermForType(2));
        assertNull(AppConstants.getLabelFor_XAPermForType(99));
    }

    @Test
    public void testGetLabelFor_XAPermType() {
        assertEquals("Unknown", AppConstants.getLabelFor_XAPermType(0));
        assertEquals("reset", AppConstants.getLabelFor_XAPermType(1));
        assertEquals("read", AppConstants.getLabelFor_XAPermType(2));
        assertEquals("write", AppConstants.getLabelFor_XAPermType(3));
        assertEquals("create", AppConstants.getLabelFor_XAPermType(4));
        assertEquals("delete", AppConstants.getLabelFor_XAPermType(5));
        assertEquals("admin", AppConstants.getLabelFor_XAPermType(6));
        assertEquals("obfuscate", AppConstants.getLabelFor_XAPermType(7));
        assertEquals("mask", AppConstants.getLabelFor_XAPermType(8));
        assertEquals("execute", AppConstants.getLabelFor_XAPermType(9));
        assertEquals("select", AppConstants.getLabelFor_XAPermType(10));
        assertEquals("update", AppConstants.getLabelFor_XAPermType(11));
        assertEquals("drop", AppConstants.getLabelFor_XAPermType(12));
        assertEquals("alter", AppConstants.getLabelFor_XAPermType(13));
        assertEquals("index", AppConstants.getLabelFor_XAPermType(14));
        assertEquals("lock", AppConstants.getLabelFor_XAPermType(15));
        assertEquals("all", AppConstants.getLabelFor_XAPermType(16));
        assertEquals("allow", AppConstants.getLabelFor_XAPermType(17));
        assertEquals("submitTopology", AppConstants.getLabelFor_XAPermType(18));
        assertEquals("fileUpload", AppConstants.getLabelFor_XAPermType(19));
        assertEquals("getNimbusConf", AppConstants.getLabelFor_XAPermType(20));
        assertEquals("getClusterInfo", AppConstants.getLabelFor_XAPermType(21));
        assertEquals("fileDownload", AppConstants.getLabelFor_XAPermType(22));
        assertEquals("killTopology", AppConstants.getLabelFor_XAPermType(23));
        assertEquals("rebalance", AppConstants.getLabelFor_XAPermType(24));
        assertEquals("activate", AppConstants.getLabelFor_XAPermType(25));
        assertEquals("deactivate", AppConstants.getLabelFor_XAPermType(26));
        assertEquals("getTopologyConf", AppConstants.getLabelFor_XAPermType(27));
        assertEquals("getTopology", AppConstants.getLabelFor_XAPermType(28));
        assertEquals("getUserTopology", AppConstants.getLabelFor_XAPermType(29));
        assertEquals("getTopologyInfo", AppConstants.getLabelFor_XAPermType(30));
        assertEquals("uploadNewCredentials", AppConstants.getLabelFor_XAPermType(31));
        assertEquals("repladmin", AppConstants.getLabelFor_XAPermType(32));
        assertEquals("serviceadmin", AppConstants.getLabelFor_XAPermType(33));
        assertEquals("tempudfadmin", AppConstants.getLabelFor_XAPermType(34));
        assertEquals("idempotent_write", AppConstants.getLabelFor_XAPermType(35));
        assertEquals("describe_configs", AppConstants.getLabelFor_XAPermType(36));
        assertEquals("alter_configs", AppConstants.getLabelFor_XAPermType(37));
        assertEquals("cluster_action", AppConstants.getLabelFor_XAPermType(38));
        assertNull(AppConstants.getLabelFor_XAPermType(100));
    }

    @Test
    public void testGetEnumFor_AssetType() {
        assertEquals(AppConstants.ASSET_UNKNOWN, AppConstants.getEnumFor_AssetType("Unknown"));
        assertEquals(AppConstants.ASSET_HDFS, AppConstants.getEnumFor_AssetType("HDFS"));
        assertEquals(AppConstants.ASSET_HBASE, AppConstants.getEnumFor_AssetType("HBase"));
        assertEquals(AppConstants.ASSET_HIVE, AppConstants.getEnumFor_AssetType("Hive"));
        assertEquals(AppConstants.ASSET_KNOX, AppConstants.getEnumFor_AssetType("Knox"));
        assertEquals(AppConstants.ASSET_STORM, AppConstants.getEnumFor_AssetType("Storm"));

        assertEquals(0, AppConstants.getEnumFor_AssetType(""));         // Unknown
        assertEquals(0, AppConstants.getEnumFor_AssetType(null));       // Null input
        assertEquals(0, AppConstants.getEnumFor_AssetType("invalid"));  // Invalid input
    }

    @Test
    public void testGetBooleanFor_BooleanValue() {
        assertTrue(AppConstants.getBooleanFor_BooleanValue(1), "Expected true for value 1");
        assertFalse(AppConstants.getBooleanFor_BooleanValue(2), "Expected false for value 2");
        assertFalse(AppConstants.getBooleanFor_BooleanValue(0), "Expected false for value 0");
        assertFalse(AppConstants.getBooleanFor_BooleanValue(-1), "Expected false for value -1");
        assertFalse(AppConstants.getBooleanFor_BooleanValue(99), "Expected false for unrecognized value");
    }

    @Test
    public void testGetEnumFor_ResourceType() {
        assertEquals(AppConstants.RESOURCE_UNKNOWN, AppConstants.getEnumFor_ResourceType("Unknown"));
        assertEquals(AppConstants.RESOURCE_PATH, AppConstants.getEnumFor_ResourceType("Path"));
        assertEquals(AppConstants.RESOURCE_DB, AppConstants.getEnumFor_ResourceType("Database"));
        assertEquals(AppConstants.RESOURCE_TABLE, AppConstants.getEnumFor_ResourceType("Table"));
        assertEquals(AppConstants.RESOURCE_COL_FAM, AppConstants.getEnumFor_ResourceType("Column Family"));
        assertEquals(AppConstants.RESOURCE_COLUMN, AppConstants.getEnumFor_ResourceType("Column"));
        assertEquals(AppConstants.RESOURCE_VIEW, AppConstants.getEnumFor_ResourceType("VIEW"));
        assertEquals(AppConstants.RESOURCE_UDF, AppConstants.getEnumFor_ResourceType("UDF"));
        assertEquals(AppConstants.RESOURCE_VIEW_COL, AppConstants.getEnumFor_ResourceType("View Column"));
        assertEquals(AppConstants.RESOURCE_TOPOLOGY, AppConstants.getEnumFor_ResourceType("Topology"));
        assertEquals(AppConstants.RESOURCE_SERVICE_NAME, AppConstants.getEnumFor_ResourceType("Service"));

        // Case insensitive
        assertEquals(AppConstants.RESOURCE_TABLE, AppConstants.getEnumFor_ResourceType("table"));

        // Unknown input
        assertEquals(0, AppConstants.getEnumFor_ResourceType("Nonexistent"));
        assertEquals(0, AppConstants.getEnumFor_ResourceType(null));
    }

    @Test
    public void testGetEnumFor_PolicyType() {
        assertEquals(AppConstants.POLICY_INCLUSION, AppConstants.getEnumFor_PolicyType("Inclusion"));
        assertEquals(AppConstants.POLICY_EXCLUSION, AppConstants.getEnumFor_PolicyType("Exclusion"));
        assertEquals(AppConstants.POLICY_INCLUSION, AppConstants.getEnumFor_PolicyType("inclusion")); // case-insensitive
        assertEquals(0, AppConstants.getEnumFor_PolicyType("invalid"));
        assertEquals(0, AppConstants.getEnumFor_PolicyType(null));
    }

    @Test
    public void testGetEnumFor_DatabaseFlavor() {
        assertEquals(AppConstants.DB_FLAVOR_MYSQL, AppConstants.getEnumFor_DatabaseFlavor("MYSQL"));
        assertEquals(AppConstants.DB_FLAVOR_ORACLE, AppConstants.getEnumFor_DatabaseFlavor("ORACLE"));
        assertEquals(AppConstants.DB_FLAVOR_POSTGRES, AppConstants.getEnumFor_DatabaseFlavor("POSTGRES"));
        assertEquals(AppConstants.DB_FLAVOR_SQLSERVER, AppConstants.getEnumFor_DatabaseFlavor("MSSQL"));
        assertEquals(AppConstants.DB_FLAVOR_SQLANYWHERE, AppConstants.getEnumFor_DatabaseFlavor("SQLA"));
        assertEquals(AppConstants.DB_FLAVOR_UNKNOWN, AppConstants.getEnumFor_DatabaseFlavor("invalid"));
        assertEquals(AppConstants.DB_FLAVOR_UNKNOWN, AppConstants.getEnumFor_DatabaseFlavor(null));
    }

    @Test
    public void testGetLabelFor_DatabaseFlavor() {
        assertEquals("UNKNOWN", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_UNKNOWN));
        assertEquals("MYSQL", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_MYSQL));
        assertEquals("ORACLE", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_ORACLE));
        assertEquals("POSTGRES", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_POSTGRES));
        assertEquals("MSSQL", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_SQLSERVER));
        assertEquals("SQLA", AppConstants.getLabelFor_DatabaseFlavor(AppConstants.DB_FLAVOR_SQLANYWHERE));
        assertNull(AppConstants.getLabelFor_DatabaseFlavor(999)); // undefined flavor
    }

    @Test
    public void testGetEnumFor_XAPermType_ValidInputs() {
        assertEquals(AppConstants.XA_PERM_TYPE_UNKNOWN, AppConstants.getEnumFor_XAPermType("Unknown"));
        assertEquals(AppConstants.XA_PERM_TYPE_RESET, AppConstants.getEnumFor_XAPermType("Reset"));
        assertEquals(AppConstants.XA_PERM_TYPE_READ, AppConstants.getEnumFor_XAPermType("Read"));
        assertEquals(AppConstants.XA_PERM_TYPE_WRITE, AppConstants.getEnumFor_XAPermType("Write"));
        assertEquals(AppConstants.XA_PERM_TYPE_CREATE, AppConstants.getEnumFor_XAPermType("Create"));
        assertEquals(AppConstants.XA_PERM_TYPE_DELETE, AppConstants.getEnumFor_XAPermType("Delete"));
        assertEquals(AppConstants.XA_PERM_TYPE_ADMIN, AppConstants.getEnumFor_XAPermType("Admin"));
        assertEquals(AppConstants.XA_PERM_TYPE_OBFUSCATE, AppConstants.getEnumFor_XAPermType("Obfuscate"));
        assertEquals(AppConstants.XA_PERM_TYPE_MASK, AppConstants.getEnumFor_XAPermType("Mask"));
        assertEquals(AppConstants.XA_PERM_TYPE_EXECUTE, AppConstants.getEnumFor_XAPermType("Execute"));
        assertEquals(AppConstants.XA_PERM_TYPE_SELECT, AppConstants.getEnumFor_XAPermType("Select"));
        assertEquals(AppConstants.XA_PERM_TYPE_UPDATE, AppConstants.getEnumFor_XAPermType("Update"));
        assertEquals(AppConstants.XA_PERM_TYPE_DROP, AppConstants.getEnumFor_XAPermType("Drop"));
        assertEquals(AppConstants.XA_PERM_TYPE_ALTER, AppConstants.getEnumFor_XAPermType("Alter"));
        assertEquals(AppConstants.XA_PERM_TYPE_INDEX, AppConstants.getEnumFor_XAPermType("Index"));
        assertEquals(AppConstants.XA_PERM_TYPE_LOCK, AppConstants.getEnumFor_XAPermType("Lock"));
        assertEquals(AppConstants.XA_PERM_TYPE_ALL, AppConstants.getEnumFor_XAPermType("All"));
        assertEquals(AppConstants.XA_PERM_TYPE_ALLOW, AppConstants.getEnumFor_XAPermType("Allow"));
        assertEquals(AppConstants.XA_PERM_TYPE_SUBMIT_TOPOLOGY, AppConstants.getEnumFor_XAPermType("submitTopology"));
        assertEquals(AppConstants.XA_PERM_TYPE_FILE_UPLOAD, AppConstants.getEnumFor_XAPermType("fileUpload"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_NIMBUS, AppConstants.getEnumFor_XAPermType("getNimbusConf"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_CLUSTER_INFO, AppConstants.getEnumFor_XAPermType("getClusterInfo"));
        assertEquals(AppConstants.XA_PERM_TYPE_FILE_DOWNLOAD, AppConstants.getEnumFor_XAPermType("fileDownload"));
        assertEquals(AppConstants.XA_PERM_TYPE_KILL_TOPOLOGY, AppConstants.getEnumFor_XAPermType("killTopology"));
        assertEquals(AppConstants.XA_PERM_TYPE_REBALANCE, AppConstants.getEnumFor_XAPermType("rebalance"));
        assertEquals(AppConstants.XA_PERM_TYPE_ACTIVATE, AppConstants.getEnumFor_XAPermType("activate"));
        assertEquals(AppConstants.XA_PERM_TYPE_DEACTIVATE, AppConstants.getEnumFor_XAPermType("deactivate"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_TOPOLOGY_CONF, AppConstants.getEnumFor_XAPermType("getTopologyConf"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_TOPOLOGY, AppConstants.getEnumFor_XAPermType("getTopology"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_USER_TOPOLOGY, AppConstants.getEnumFor_XAPermType("getUserTopology"));
        assertEquals(AppConstants.XA_PERM_TYPE_GET_TOPOLOGY_INFO, AppConstants.getEnumFor_XAPermType("getTopologyInfo"));
        assertEquals(AppConstants.XA_PERM_TYPE_UPLOAD_NEW_CREDENTIAL, AppConstants.getEnumFor_XAPermType("uploadNewCredentials"));
        assertEquals(AppConstants.XA_PERM_TYPE_REPLADMIN, AppConstants.getEnumFor_XAPermType("repladmin"));
        assertEquals(AppConstants.XA_PERM_TYPE_SERVICEADMIN, AppConstants.getEnumFor_XAPermType("serviceadmin"));
        assertEquals(AppConstants.XA_PERM_TYPE_TEMPUDFADMIN, AppConstants.getEnumFor_XAPermType("tempudfadmin"));
        assertEquals(AppConstants.XA_PERM_TYPE_IDEMPOTENT_WRITE, AppConstants.getEnumFor_XAPermType("idempotent_write"));
        assertEquals(AppConstants.XA_PERM_TYPE_DESCRIBE_CONFIGS, AppConstants.getEnumFor_XAPermType("describe_configs"));
        assertEquals(AppConstants.XA_PERM_TYPE_ALTER_CONFIGS, AppConstants.getEnumFor_XAPermType("alter_configs"));
        assertEquals(AppConstants.XA_PERM_TYPE_CLUSTER_ACTION, AppConstants.getEnumFor_XAPermType("cluster_action"));
    }

    @Test
    public void testGetEnumFor_XAPermType_CaseInsensitive() {
        assertEquals(AppConstants.XA_PERM_TYPE_READ, AppConstants.getEnumFor_XAPermType("read"));
        assertEquals(AppConstants.XA_PERM_TYPE_EXECUTE, AppConstants.getEnumFor_XAPermType("EXECUTE"));
        assertEquals(AppConstants.XA_PERM_TYPE_CREATE, AppConstants.getEnumFor_XAPermType("cReaTe"));
    }

    @Test
    public void testGetEnumFor_XAPermType_InvalidOrNull() {
        assertEquals(0, AppConstants.getEnumFor_XAPermType(null));
        assertEquals(0, AppConstants.getEnumFor_XAPermType("nonexistent_permission"));
    }

    @Test
    public void testGetEnumFor_BooleanValue() {
        assertEquals(AppConstants.BOOL_TRUE, AppConstants.getEnumFor_BooleanValue(true), "Expected BOOL_TRUE for true input");
        assertEquals(AppConstants.BOOL_FALSE, AppConstants.getEnumFor_BooleanValue(false), "Expected BOOL_FALSE for false input");
    }

    @Test
    public void testGetLabelFor_ClassTypes_KnownValues() {
        assertEquals("Asset", AppConstants.getLabelFor_ClassTypes(1000));
        assertEquals("Resource", AppConstants.getLabelFor_ClassTypes(1001));
        assertEquals("XA Group", AppConstants.getLabelFor_ClassTypes(1002));
        assertEquals("XA User", AppConstants.getLabelFor_ClassTypes(1003));
        assertEquals("XA Group of Users", AppConstants.getLabelFor_ClassTypes(1004));
        assertEquals("XA Group of groups", AppConstants.getLabelFor_ClassTypes(1005));
        assertEquals("XA permissions for resource", AppConstants.getLabelFor_ClassTypes(1006));
        assertEquals("XA audits for resource", AppConstants.getLabelFor_ClassTypes(1007));
        assertEquals("XA credential store", AppConstants.getLabelFor_ClassTypes(1008));
        assertEquals("XA Common Reference", AppConstants.getLabelFor_ClassTypes(1009));
        assertEquals("XA License", AppConstants.getLabelFor_ClassTypes(1010));
        assertEquals("XA Policy Export Audit", AppConstants.getLabelFor_ClassTypes(1011));
        assertEquals("Transaction log", AppConstants.getLabelFor_ClassTypes(1012));
        assertEquals("Access Audit", AppConstants.getLabelFor_ClassTypes(1013));
        assertEquals("Trx Log Attribute", AppConstants.getLabelFor_ClassTypes(1014));
        assertEquals("XA AccessType Def", AppConstants.getLabelFor_ClassTypes(1015));
        assertEquals("XA AccessType Def Grants", AppConstants.getLabelFor_ClassTypes(1016));
        assertEquals("XA Data History", AppConstants.getLabelFor_ClassTypes(1017));
        assertEquals("XA Enum Defination", AppConstants.getLabelFor_ClassTypes(1018));
        assertEquals("XA EnumElement Def", AppConstants.getLabelFor_ClassTypes(1019));
        assertEquals("Ranger Policy", AppConstants.getLabelFor_ClassTypes(1020));
        assertEquals("RangerPolicy Condition Def", AppConstants.getLabelFor_ClassTypes(1021));
        assertEquals("RangerPolicy Item", AppConstants.getLabelFor_ClassTypes(1022));
        assertEquals("RangerPolicy Item Access", AppConstants.getLabelFor_ClassTypes(1023));
        assertEquals("RangerPolicyItem Condition ", AppConstants.getLabelFor_ClassTypes(1024));
        assertEquals("RangerPolicy ItemGrp Map", AppConstants.getLabelFor_ClassTypes(1025));
        assertEquals("RangerPolicy ItemUser Map", AppConstants.getLabelFor_ClassTypes(1026));
        assertEquals("RangerPolicy Resource", AppConstants.getLabelFor_ClassTypes(1027));
        assertEquals("RangerPolicy Resource Map", AppConstants.getLabelFor_ClassTypes(1028));
        assertEquals("XA Resource Def", AppConstants.getLabelFor_ClassTypes(1029));
        assertEquals("XA Service", AppConstants.getLabelFor_ClassTypes(1030));
        assertEquals("XA Service Config Def", AppConstants.getLabelFor_ClassTypes(1031));
        assertEquals("XA Service Config Map", AppConstants.getLabelFor_ClassTypes(1032));
        assertEquals("XA Service Def", AppConstants.getLabelFor_ClassTypes(1033));
        assertEquals("XA Service Version Info", AppConstants.getLabelFor_ClassTypes(1052));
        assertEquals("Access Audit V4", AppConstants.getLabelFor_ClassTypes(1053));
        assertEquals("Access Audit V5", AppConstants.getLabelFor_ClassTypes(1054));
        assertEquals("Usersync Audit Info", AppConstants.getLabelFor_ClassTypes(1055));
        assertEquals("Ranger Security Zone", AppConstants.getLabelFor_ClassTypes(1056));
        assertEquals("Ranger Role", AppConstants.getLabelFor_ClassTypes(1057));
        assertEquals("Ranger Security Zone", AppConstants.getLabelFor_ClassTypes(1058));
        assertEquals("Ranger Security Zone", AppConstants.getLabelFor_ClassTypes(1059));
        assertEquals("Ranger Security Zone", AppConstants.getLabelFor_ClassTypes(1060));
        assertEquals("Ranger Security Zone", AppConstants.getLabelFor_ClassTypes(1061));
    }

    @Test
    public void testGetLabelFor_ClassTypes_UnknownValues() {
        assertNull(AppConstants.getLabelFor_ClassTypes(-1));
        assertNull(AppConstants.getLabelFor_ClassTypes(999));
        assertNull(AppConstants.getLabelFor_ClassTypes(1062));
        assertNull(AppConstants.getLabelFor_ClassTypes(2000));
    }
}
