/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RequestContext
 */

public class TestRequestContext {
    private RequestContext requestContext;

    @Before
    public void setUp() {
        requestContext = new RequestContext();
    }

    @Test
    public void testConstructor() {
        RequestContext context = new RequestContext();
        assertNotNull(context);
        assertEquals(RangerCommonEnums.DEVICE_UNKNOWN, context.getDeviceType());
        assertTrue(context.isSync());
        assertTrue(context.getStartTime() > 0);
    }

    @Test
    public void testIpAddress() {
        String ipAddress = "192.168.1.1";
        requestContext.setIpAddress(ipAddress);
        assertEquals(ipAddress, requestContext.getIpAddress());
    }

    @Test
    public void testIpAddressNull() {
        requestContext.setIpAddress(null);
        assertNull(requestContext.getIpAddress());
    }

    @Test
    public void testUserAgent() {
        String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36";
        requestContext.setUserAgent(userAgent);
        assertEquals(userAgent, requestContext.getUserAgent());
    }

    @Test
    public void testUserAgentNull() {
        requestContext.setUserAgent(null);
        assertNull(requestContext.getUserAgent());
    }

    @Test
    public void testRequestURL() {
        String requestURL = "http://localhost:8080/service/public/v2/api/policies";
        requestContext.setRequestURL(requestURL);
        assertEquals(requestURL, requestContext.getRequestURL());
    }

    @Test
    public void testRequestURLNull() {
        requestContext.setRequestURL(null);
        assertNull(requestContext.getRequestURL());
    }

    @Test
    public void testServerRequestId() {
        String requestId = "REQ-12345-ABCDE";
        requestContext.setServerRequestId(requestId);
        assertEquals(requestId, requestContext.getServerRequestId());
    }

    @Test
    public void testServerRequestIdNull() {
        requestContext.setServerRequestId(null);
        assertNull(requestContext.getServerRequestId());
    }

    @Test
    public void testClientTimeOffsetInMinute() {
        int offset = 330; // IST offset
        requestContext.setClientTimeOffsetInMinute(offset);
        assertEquals(offset, requestContext.getClientTimeOffsetInMinute());
    }

    @Test
    public void testClientTimeOffsetNegative() {
        int offset = -300; // EST offset
        requestContext.setClientTimeOffsetInMinute(offset);
        assertEquals(offset, requestContext.getClientTimeOffsetInMinute());
    }

    @Test
    public void testDeviceType() {
        requestContext.setDeviceType(RangerCommonEnums.DEVICE_IPHONE);
        assertEquals(RangerCommonEnums.DEVICE_IPHONE, requestContext.getDeviceType());
    }

    @Test
    public void testDeviceTypeAndroid() {
        requestContext.setDeviceType(RangerCommonEnums.DEVICE_ANDROID);
        assertEquals(RangerCommonEnums.DEVICE_ANDROID, requestContext.getDeviceType());
    }

    @Test
    public void testDeviceTypeBrowser() {
        requestContext.setDeviceType(RangerCommonEnums.DEVICE_BROWSER);
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, requestContext.getDeviceType());
    }

    @Test
    public void testDeviceTypeUnknown() {
        requestContext.setDeviceType(RangerCommonEnums.DEVICE_UNKNOWN);
        assertEquals(RangerCommonEnums.DEVICE_UNKNOWN, requestContext.getDeviceType());
    }

    @Test
    public void testIsSync() {
        assertTrue(requestContext.isSync()); // Default is true

        requestContext.setSync(false);
        assertFalse(requestContext.isSync());

        requestContext.setSync(true);
        assertTrue(requestContext.isSync());
    }

    @Test
    public void testStartTime() {
        long currentTime = System.currentTimeMillis();
        requestContext.setStartTime(currentTime);
        assertEquals(currentTime, requestContext.getStartTime());
    }

    @Test
    public void testStartTimeDefault() {
        RequestContext newContext = new RequestContext();
        assertTrue(newContext.getStartTime() > 0);
        assertTrue(newContext.getStartTime() <= System.currentTimeMillis());
    }

    @Test
    public void testToString() {
        requestContext.setIpAddress("192.168.1.1");
        requestContext.setUserAgent("TestAgent");
        requestContext.setRequestURL("http://test.com");
        requestContext.setDeviceType(RangerCommonEnums.DEVICE_BROWSER);
        requestContext.setServerRequestId("REQ-123");
        requestContext.setSync(true);
        requestContext.setStartTime(1234567890L);

        String result = requestContext.toString();

        assertNotNull(result);
        assertTrue(result.contains("RequestContext"));
        assertTrue(result.contains("ipAddress=192.168.1.1"));
        assertTrue(result.contains("userAgent=TestAgent"));
        assertTrue(result.contains("requestURL=http://test.com"));
        assertTrue(result.contains("deviceType=" + RangerCommonEnums.DEVICE_BROWSER));
        assertTrue(result.contains("serverRequestId=REQ-123"));
        assertTrue(result.contains("isSync=true"));
        assertTrue(result.contains("startTime=1234567890"));
    }

    @Test
    public void testToStringWithNullValues() {
        String result = requestContext.toString();

        assertNotNull(result);
        assertTrue(result.contains("RequestContext"));
        assertTrue(result.contains("ipAddress=null"));
        assertTrue(result.contains("userAgent=null"));
        assertTrue(result.contains("requestURL=null"));
        assertTrue(result.contains("serverRequestId=null"));
    }
}
