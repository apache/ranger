/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SearchCriteria
 */
@ExtendWith(MockitoExtension.class)
public class TestSearchCriteria {
    private SearchCriteria searchCriteria;

    @BeforeEach
    public void setUp() {
        searchCriteria = new SearchCriteria();
    }

    @Test
    public void testDefaultConstructor() {
        SearchCriteria criteria = new SearchCriteria();

        assertNotNull(criteria);
        assertEquals(0, criteria.getStartIndex());
        assertEquals(Integer.MAX_VALUE, criteria.getMaxRows());
        assertNull(criteria.getSortBy());
        assertNull(criteria.getSortType());
        assertTrue(criteria.isGetCount());
        assertNull(criteria.getOwnerId());
        assertFalse(criteria.isGetChildren());
        assertFalse(criteria.isDistinct());
        assertNotNull(criteria.getParamList());
        assertTrue(criteria.getParamList().isEmpty());
        assertNotNull(criteria.getNullParamList());
        assertTrue(criteria.getNullParamList().isEmpty());
        assertNotNull(criteria.getNotNullParamList());
        assertTrue(criteria.getNotNullParamList().isEmpty());
        assertNotNull(criteria.getSearchGroups());
        assertTrue(criteria.getSearchGroups().isEmpty());
    }

    @Test
    public void testParameterizedConstructor() {
        String paramName  = "testParam";
        String paramValue = "testValue";

        SearchCriteria criteria = new SearchCriteria(paramName, paramValue);

        assertNotNull(criteria);
        assertEquals(paramValue, criteria.getParamValue(paramName));
        assertEquals(1, criteria.getParamList().size());
        assertTrue(criteria.getParamList().containsKey(paramName));
        assertEquals(paramValue, criteria.getParamList().get(paramName));
    }

    @Test
    public void testParameterizedConstructorWithNullValue() {
        String paramName  = "testParam";
        Object paramValue = null;

        SearchCriteria criteria = new SearchCriteria(paramName, paramValue);

        assertNotNull(criteria);
        assertNull(criteria.getParamValue(paramName));
        assertEquals(1, criteria.getParamList().size());
        assertTrue(criteria.getParamList().containsKey(paramName));
        assertNull(criteria.getParamList().get(paramName));
    }

    @Test
    public void testStartIndex() {
        int startIndex = 100;
        searchCriteria.setStartIndex(startIndex);
        assertEquals(startIndex, searchCriteria.getStartIndex());
    }

    @Test
    public void testStartIndexNegative() {
        int startIndex = -10;
        searchCriteria.setStartIndex(startIndex);
        assertEquals(startIndex, searchCriteria.getStartIndex());
    }

    @Test
    public void testMaxRows() {
        int maxRows = 50;
        searchCriteria.setMaxRows(maxRows);
        assertEquals(maxRows, searchCriteria.getMaxRows());
    }

    @Test
    public void testMaxRowsZero() {
        int maxRows = 0;
        searchCriteria.setMaxRows(maxRows);
        assertEquals(maxRows, searchCriteria.getMaxRows());
    }

    @Test
    public void testSortBy() {
        String sortBy = "name";
        searchCriteria.setSortBy(sortBy);
        assertEquals(sortBy, searchCriteria.getSortBy());
    }

    @Test
    public void testSortByNull() {
        searchCriteria.setSortBy(null);
        assertNull(searchCriteria.getSortBy());
    }

    @Test
    public void testSortType() {
        String sortType = "ASC";
        searchCriteria.setSortType(sortType);
        assertEquals(sortType, searchCriteria.getSortType());
    }

    @Test
    public void testSortTypeDesc() {
        String sortType = "DESC";
        searchCriteria.setSortType(sortType);
        assertEquals(sortType, searchCriteria.getSortType());
    }

    @Test
    public void testSortTypeNull() {
        searchCriteria.setSortType(null);
        assertNull(searchCriteria.getSortType());
    }

    @Test
    public void testGetCount() {
        assertTrue(searchCriteria.isGetCount()); // Default is true

        searchCriteria.setGetCount(false);
        assertFalse(searchCriteria.isGetCount());

        searchCriteria.setGetCount(true);
        assertTrue(searchCriteria.isGetCount());
    }

    @Test
    public void testOwnerId() {
        Long ownerId = 123L;
        searchCriteria.setOwnerId(ownerId);
        assertEquals(ownerId, searchCriteria.getOwnerId());
    }

    @Test
    public void testOwnerIdInteger() {
        Integer ownerId = 456;
        searchCriteria.setOwnerId(ownerId);
        assertEquals(ownerId, searchCriteria.getOwnerId());
    }

    @Test
    public void testOwnerIdNull() {
        searchCriteria.setOwnerId(null);
        assertNull(searchCriteria.getOwnerId());
    }

    @Test
    public void testGetChildren() {
        assertFalse(searchCriteria.isGetChildren()); // Default is false

        searchCriteria.setGetChildren(true);
        assertTrue(searchCriteria.isGetChildren());

        searchCriteria.setGetChildren(false);
        assertFalse(searchCriteria.isGetChildren());
    }

    @Test
    public void testAddParam() {
        String paramName  = "testParam";
        String paramValue = "testValue";

        searchCriteria.addParam(paramName, paramValue);

        assertEquals(paramValue, searchCriteria.getParamValue(paramName));
        assertEquals(1, searchCriteria.getParamList().size());
        assertTrue(searchCriteria.getParamList().containsKey(paramName));
    }

    @Test
    public void testAddParamMultiple() {
        searchCriteria.addParam("param1", "value1");
        searchCriteria.addParam("param2", "value2");
        searchCriteria.addParam("param3", 123);

        assertEquals("value1", searchCriteria.getParamValue("param1"));
        assertEquals("value2", searchCriteria.getParamValue("param2"));
        assertEquals(123, searchCriteria.getParamValue("param3"));
        assertEquals(3, searchCriteria.getParamList().size());
    }

    @Test
    public void testAddParamOverwrite() {
        String paramName = "testParam";
        String value1    = "value1";
        String value2    = "value2";

        searchCriteria.addParam(paramName, value1);
        assertEquals(value1, searchCriteria.getParamValue(paramName));

        searchCriteria.addParam(paramName, value2);
        assertEquals(value2, searchCriteria.getParamValue(paramName));
        assertEquals(1, searchCriteria.getParamList().size());
    }

    @Test
    public void testAddParamWithNullValue() {
        String paramName = "testParam";
        searchCriteria.addParam(paramName, null);

        assertNull(searchCriteria.getParamValue(paramName));
        assertTrue(searchCriteria.getParamList().containsKey(paramName));
    }

    @Test
    public void testGetParamValueNonExistent() {
        assertNull(searchCriteria.getParamValue("nonExistentParam"));
    }

    @Test
    public void testGetParamList() {
        HashMap<String, Object> paramList = searchCriteria.getParamList();
        assertNotNull(paramList);
        assertTrue(paramList.isEmpty());

        searchCriteria.addParam("test", "value");
        assertEquals(1, paramList.size());
        assertEquals("value", paramList.get("test"));
    }

    @Test
    public void testGetNullParamList() {
        Set<String> nullParamList = searchCriteria.getNullParamList();
        assertNotNull(nullParamList);
        assertTrue(nullParamList.isEmpty());
    }

    @Test
    public void testGetNotNullParamList() {
        Set<String> notNullParamList = searchCriteria.getNotNullParamList();
        assertNotNull(notNullParamList);
        assertTrue(notNullParamList.isEmpty());
    }

    @Test
    public void testGetSearchGroups() {
        List<SearchGroup> searchGroups = searchCriteria.getSearchGroups();
        assertNotNull(searchGroups);
        assertTrue(searchGroups.isEmpty());
    }

    @Test
    public void testIsDistinct() {
        assertFalse(searchCriteria.isDistinct()); // Default is false

        searchCriteria.setDistinct(true);
        assertTrue(searchCriteria.isDistinct());

        searchCriteria.setDistinct(false);
        assertFalse(searchCriteria.isDistinct());
    }

    @Test
    public void testComplexScenario() {
        // Set up a complex search criteria
        searchCriteria.setStartIndex(10);
        searchCriteria.setMaxRows(100);
        searchCriteria.setSortBy("createTime");
        searchCriteria.setSortType("DESC");
        searchCriteria.setGetCount(false);
        searchCriteria.setOwnerId(999L);
        searchCriteria.setGetChildren(true);
        searchCriteria.setDistinct(true);

        searchCriteria.addParam("serviceName", "hdfs");
        searchCriteria.addParam("policyType", 0);
        searchCriteria.addParam("isEnabled", true);

        // Verify all values
        assertEquals(10, searchCriteria.getStartIndex());
        assertEquals(100, searchCriteria.getMaxRows());
        assertEquals("createTime", searchCriteria.getSortBy());
        assertEquals("DESC", searchCriteria.getSortType());
        assertFalse(searchCriteria.isGetCount());
        assertEquals(999L, searchCriteria.getOwnerId());
        assertTrue(searchCriteria.isGetChildren());
        assertTrue(searchCriteria.isDistinct());

        assertEquals("hdfs", searchCriteria.getParamValue("serviceName"));
        assertEquals(0, searchCriteria.getParamValue("policyType"));
        assertEquals(true, searchCriteria.getParamValue("isEnabled"));
        assertEquals(3, searchCriteria.getParamList().size());
    }

    @Test
    public void testParameterDataTypes() {
        searchCriteria.addParam("stringParam", "stringValue");
        searchCriteria.addParam("intParam", 42);
        searchCriteria.addParam("longParam", 999L);
        searchCriteria.addParam("booleanParam", true);
        searchCriteria.addParam("doubleParam", 3.14);

        assertEquals("stringValue", searchCriteria.getParamValue("stringParam"));
        assertEquals(42, searchCriteria.getParamValue("intParam"));
        assertEquals(999L, searchCriteria.getParamValue("longParam"));
        assertEquals(true, searchCriteria.getParamValue("booleanParam"));
        assertEquals(3.14, searchCriteria.getParamValue("doubleParam"));
    }

    @Test
    public void testBoundaryValues() {
        // Test with maximum integer values
        searchCriteria.setStartIndex(Integer.MAX_VALUE);
        searchCriteria.setMaxRows(Integer.MIN_VALUE);

        assertEquals(Integer.MAX_VALUE, searchCriteria.getStartIndex());
        assertEquals(Integer.MIN_VALUE, searchCriteria.getMaxRows());
    }

    @Test
    public void testEmptyStringParameters() {
        searchCriteria.addParam("emptyString", "");
        searchCriteria.setSortBy("");
        searchCriteria.setSortType("");

        assertEquals("", searchCriteria.getParamValue("emptyString"));
        assertEquals("", searchCriteria.getSortBy());
        assertEquals("", searchCriteria.getSortType());
    }
}
