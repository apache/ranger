/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerAdminUserStoreEnricher
 */

public class TestRangerAdminUserStoreEnricher {
    private RangerUserStoreCache originalCacheInstance;

    @BeforeEach
    public void saveOriginalSingleton() {
        originalCacheInstance = RangerUserStoreCache.sInstance;
    }

    @AfterEach
    public void restoreOriginalSingleton() {
        RangerUserStoreCache.sInstance = originalCacheInstance;
    }

    @Test
    public void testEnrichRefreshesUserStoreWhenVersionDiffers() {
        RangerAdminUserStoreEnricher enricher = new RangerAdminUserStoreEnricher();

        RangerUserStore currentStore = new RangerUserStore();
        currentStore.setUserStoreVersion(1L);
        enricher.setRangerUserStore(currentStore);

        RangerUserStore latestStore = new RangerUserStore();
        latestStore.setUserStoreVersion(2L);

        RangerUserStoreCache mockCache = Mockito.mock(RangerUserStoreCache.class);
        when(mockCache.getRangerUserStore()).thenReturn(latestStore);
        RangerUserStoreCache.sInstance = mockCache;

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();

        enricher.enrich(request);

        RangerUserStore storeInContext = RangerAccessRequestUtil.getRequestUserStoreFromContext(request.getContext());
        Assertions.assertNotNull(storeInContext);
        Assertions.assertEquals(Long.valueOf(2L), storeInContext.getUserStoreVersion());
        Assertions.assertEquals(Long.valueOf(2L), enricher.getUserStoreVersion());
    }

    @Test
    public void testEnrichDoesNotRefreshWhenVersionIsSame() {
        RangerAdminUserStoreEnricher enricher = new RangerAdminUserStoreEnricher();

        RangerUserStore existingStore = new RangerUserStore();
        existingStore.setUserStoreVersion(2L);
        enricher.setRangerUserStore(existingStore);

        RangerUserStore differentInstanceSameVersion = new RangerUserStore();
        differentInstanceSameVersion.setUserStoreVersion(2L);

        RangerUserStoreCache mockCache = Mockito.mock(RangerUserStoreCache.class);
        when(mockCache.getRangerUserStore()).thenReturn(differentInstanceSameVersion);
        RangerUserStoreCache.sInstance = mockCache;

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();

        enricher.enrich(request);

        RangerUserStore storeInContext = RangerAccessRequestUtil.getRequestUserStoreFromContext(request.getContext());
        Assertions.assertNotNull(storeInContext);
        // Should remain the original instance as versions are same
        Assertions.assertSame(storeInContext, existingStore);
    }
}
