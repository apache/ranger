/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.admin.client.datatype.RESTResponse;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.WebApplicationException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RESTErrorUtil
 */

@ExtendWith(MockitoExtension.class)
public class TestRESTErrorUtil {
    @Mock
    private StringUtil mockStringUtil;

    private RESTErrorUtil restErrorUtil;

    @BeforeEach
    public void setUp() {
        restErrorUtil            = new RESTErrorUtil();
        restErrorUtil.stringUtil = mockStringUtil;
    }

    @Test
    public void testCreateGrantRevokeRESTException() {
        String logMessage = "Grant/Revoke failed";

        WebApplicationException exception = restErrorUtil.createGrantRevokeRESTException(logMessage);

        assertNotNull(exception);
        assertEquals(HttpServletResponse.SC_FORBIDDEN, exception.getResponse().getStatus());

        RESTResponse response = (RESTResponse) exception.getResponse().getEntity();
        assertEquals(logMessage, response.getMsgDesc());
    }

    @Test
    public void testCreate403RESTExceptionWithString() {
        String logMessage = "Access denied";

        WebApplicationException exception = restErrorUtil.create403RESTException(logMessage);

        assertNotNull(exception);
        assertEquals(HttpServletResponse.SC_FORBIDDEN, exception.getResponse().getStatus());
    }

    @Test
    public void testCreate403RESTExceptionWithVXResponse() {
        VXResponse resp = new VXResponse();
        resp.setMsgDesc("Forbidden");

        WebApplicationException exception = restErrorUtil.create403RESTException(resp);

        assertNotNull(exception);
        assertEquals(HttpServletResponse.SC_FORBIDDEN, exception.getResponse().getStatus());
    }

    @Test
    public void testCreate404RESTException() {
        WebApplicationException exception = restErrorUtil.create404RESTException("Not found", MessageEnums.OPER_NOT_ALLOWED_FOR_STATE, null, "field", "log");
        assertNotNull(exception);
        assertEquals(HttpServletResponse.SC_NOT_FOUND, exception.getResponse().getStatus());
    }

    @Test
    public void testCreateRESTExceptionWithMessageEnum() {
        WebApplicationException exception = restErrorUtil.createRESTException("Error occurred", MessageEnums.INVALID_INPUT_DATA);
        assertNotNull(exception);
        assertEquals(HttpServletResponse.SC_BAD_REQUEST, exception.getResponse().getStatus());
    }

    @Test
    public void testParseIntWithValidValue() {
        String value        = "123";
        int    defaultValue = 0;

        int result = restErrorUtil.parseInt(value, defaultValue, "Test message", MessageEnums.INVALID_INPUT_DATA, null, "testParam");

        assertEquals(123, result);
    }

    @Test
    public void testParseIntWithInvalidValue() {
        String value        = "invalid";
        int    defaultValue = 42;

        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.parseInt(value, defaultValue, "Invalid number", MessageEnums.INVALID_INPUT_DATA, null, "testParam");
        });
    }

    @Test
    public void testParseLongWithValidValue() {
        String value = "9876543210";

        restErrorUtil.parseLong(value, "Invalid long value", MessageEnums.INVALID_INPUT_DATA, null, "testParam");
    }

    @Test
    public void testParseLongWithInvalidValue() {
        String value = "notAnumber";

        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.parseLong(value, "Invalid long", MessageEnums.INVALID_INPUT_DATA, null, "testParam");
        });
    }

    @Test
    public void testParseBooleanWithTrueValue() {
        String  value        = "true";
        boolean defaultValue = false;

        boolean result = restErrorUtil.parseBoolean(value, defaultValue);

        assertTrue(result);
    }

    @Test
    public void testParseBooleanWithFalseValue() {
        String  value        = "false";
        boolean defaultValue = true;

        boolean result = restErrorUtil.parseBoolean(value, defaultValue);

        assertFalse(result);
    }

    @Test
    public void testParseBooleanWithInvalidValue() {
        String  value        = "maybe";
        boolean defaultValue = false;

        boolean result = restErrorUtil.parseBoolean(value, defaultValue);

        assertFalse(result); // Should return default for invalid values
    }

    @Test
    public void testParseBooleanDefaultAndNull() {
        when(mockStringUtil.isEmpty((String) null)).thenReturn(true);
        assertTrue(restErrorUtil.parseBoolean(null, true));
    }

    @Test
    public void testParseLongDefault() {
        when(mockStringUtil.isEmpty((String) null)).thenReturn(true);
        Long ret = restErrorUtil.parseLong(null, 99L);
        assertEquals(Long.valueOf(99L), ret);
    }

    @Test
    public void testParseDateWithValidValue() throws ParseException {
        String value      = "01/15/2023";
        String dateFormat = "MM/dd/yyyy";

        Date result = restErrorUtil.parseDate(value, "Invalid date", MessageEnums.INVALID_INPUT_DATA, null, "testParam", dateFormat);

        assertNotNull(result);
        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        assertEquals(sdf.parse(value), result);
    }

    @Test
    public void testParseDateWithInvalidValue() {
        String value      = "invalid-date";
        String dateFormat = "MM/dd/yyyy";

        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.parseDate(value, "Invalid date", MessageEnums.INVALID_INPUT_DATA, null, "testParam", dateFormat);
        });
    }

    @Test
    public void testValidateStringWithInvalidValue() {
        String value = "invalid@string";
        String regex = "[a-zA-Z0-9]+";

        when(mockStringUtil.isEmpty(value)).thenReturn(false);

        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.validateString(value, regex, "Invalid string", MessageEnums.INVALID_INPUT_DATA, null, "testParam");
        });
    }

    @Test
    public void testValidateStringWithNullValue() {
        String value = null;
        String regex = "[a-zA-Z0-9]+";

        when(mockStringUtil.isEmpty(value)).thenReturn(true);

        String result = restErrorUtil.validateString(value, regex, "Test message", MessageEnums.INVALID_INPUT_DATA, null, "testParam");

        assertNull(result);
    }

    @Test
    public void testValidateStringWithEmptyValue() {
        String value = "";
        String regex = "[a-zA-Z0-9]+";

        when(mockStringUtil.isEmpty(value)).thenReturn(true);

        String result = restErrorUtil.validateString(value, regex, "Test message", MessageEnums.INVALID_INPUT_DATA, null, "testParam");

        assertNull(result);
    }

    @Test
    public void testValidateStringMandatoryThrowsWhenEmpty() {
        when(mockStringUtil.isEmpty("")).thenReturn(true);
        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.validateString("", "[a-z]+", "Required", MessageEnums.NO_INPUT_DATA, null, "field", true);
        });
    }

    @Test
    public void testValidateStringForUpdateReturnsOriginalWhenUnchanged() {
        when(mockStringUtil.isEmpty("john")).thenReturn(false);
        String ret = restErrorUtil.validateStringForUpdate("john", "john", StringUtil.VALIDATION_NAME, "Invalid", MessageEnums.INVALID_INPUT_DATA, null, "firstName");
        assertEquals("john", ret);
    }

    @Test
    public void testTrueConstant() {
        assertEquals("true", RESTErrorUtil.TRUE);
    }

    @Test
    public void testValidateMinMaxBoundaries() {
        // within range does not throw
        restErrorUtil.validateMinMax(5, 0, 10, "", null, "");
        // out of range throws
        assertThrows(WebApplicationException.class, () -> {
            restErrorUtil.validateMinMax(-1, 0, 10, "", null, "");
        });
    }
}
