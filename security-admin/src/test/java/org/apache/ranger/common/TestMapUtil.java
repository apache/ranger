/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for MapUtil
 */
@ExtendWith(MockitoExtension.class)
public class TestMapUtil {
    @BeforeEach
    public void setUp() throws Exception {
        // Reset the static map before each test to ensure clean state
        Field mapField = MapUtil.class.getDeclaredField("policyExportAuditSyncStatusMessageMap");
        mapField.setAccessible(true);
        mapField.set(null, null);
    }

    @Test
    public void testInitialization() {
        MapUtil.init();

        // Test that all expected status codes are initialized
        assertEquals("Policies synced to plugin", MapUtil.getPolicyExportAuditSyncStatus(200));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(202));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(400));
        assertEquals("Bad Credentials", MapUtil.getPolicyExportAuditSyncStatus(401));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(403));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(404));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(500));
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusSuccess() {
        String status = MapUtil.getPolicyExportAuditSyncStatus(200);
        assertEquals("Policies synced to plugin", status);
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusBadCredentials() {
        String status = MapUtil.getPolicyExportAuditSyncStatus(401);
        assertEquals("Bad Credentials", status);
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusErrorCases() {
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(202));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(400));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(403));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(404));
        assertEquals("Error syncing policies", MapUtil.getPolicyExportAuditSyncStatus(500));
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusUnknownCode() {
        String status = MapUtil.getPolicyExportAuditSyncStatus(999);
        assertEquals("", status);
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusNegativeCode() {
        String status = MapUtil.getPolicyExportAuditSyncStatus(-1);
        assertEquals("", status);
    }

    @Test
    public void testGetPolicyExportAuditSyncStatusZeroCode() {
        String status = MapUtil.getPolicyExportAuditSyncStatus(0);
        assertEquals("", status);
    }

    @Test
    public void testAutoInitializationOnFirstCall() throws Exception {
        // Ensure the map is null initially
        Field mapField = MapUtil.class.getDeclaredField("policyExportAuditSyncStatusMessageMap");
        mapField.setAccessible(true);
        mapField.set(null, null);

        // First call should trigger auto-initialization
        String status = MapUtil.getPolicyExportAuditSyncStatus(200);
        assertEquals("Policies synced to plugin", status);

        // Verify the map is now initialized
        @SuppressWarnings("unchecked")
        Map<Integer, String> map = (Map<Integer, String>) mapField.get(null);
        assertNotNull(map);
        assertFalse(map.isEmpty());
        assertEquals(7, map.size()); // Should contain all 7 status codes
    }

    @Test
    public void testMultipleCallsConsistency() {
        // Multiple calls should return consistent results
        String status1 = MapUtil.getPolicyExportAuditSyncStatus(200);
        String status2 = MapUtil.getPolicyExportAuditSyncStatus(200);
        String status3 = MapUtil.getPolicyExportAuditSyncStatus(200);

        assertEquals(status1, status2);
        assertEquals(status2, status3);
        assertEquals("Policies synced to plugin", status1);
    }

    @Test
    public void testAllDefinedStatusCodes() {
        // Test all defined status codes
        int[] statusCodes = {200, 202, 400, 401, 403, 404, 500};
        String[] expectedMessages = {
                "Policies synced to plugin",
                "Error syncing policies",
                "Error syncing policies",
                "Bad Credentials",
                "Error syncing policies",
                "Error syncing policies",
                "Error syncing policies"
        };

        for (int i = 0; i < statusCodes.length; i++) {
            MapUtil.getPolicyExportAuditSyncStatus(statusCodes[i]);
        }
    }

    @Test
    public void testCommonHttpStatusCodes() {
        // Test some common HTTP status codes not defined in the map
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(100)); // Continue
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(201)); // Created
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(204)); // No Content
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(301)); // Moved Permanently
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(302)); // Found
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(405)); // Method Not Allowed
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(502)); // Bad Gateway
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(503)); // Service Unavailable
    }

    @Test
    public void testBoundaryValues() {
        // Test boundary values
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(Integer.MIN_VALUE));
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(Integer.MAX_VALUE));
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(199)); // Just before 200
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(201)); // Just after 200
        assertEquals("", MapUtil.getPolicyExportAuditSyncStatus(501)); // Just after 500
    }

    @Test
    public void testMapUtilIsSerializable() {
        MapUtil mapUtil = new MapUtil();
        assertInstanceOf(Serializable.class, mapUtil);
    }

    @Test
    public void testInitMultipleCalls() throws Exception {
        // Initialize the map
        MapUtil.init();

        // Get the map reference
        Field mapField = MapUtil.class.getDeclaredField("policyExportAuditSyncStatusMessageMap");
        mapField.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<Integer, String> firstMap = (Map<Integer, String>) mapField.get(null);

        // Call init again
        MapUtil.init();

        // Get the map reference again
        @SuppressWarnings("unchecked")
        Map<Integer, String> secondMap = (Map<Integer, String>) mapField.get(null);

        // The maps should be different objects (new HashMap created)
        assertNotSame(firstMap, secondMap);

        // But they should have the same content
        assertEquals(firstMap.size(), secondMap.size());
        assertEquals("Policies synced to plugin", MapUtil.getPolicyExportAuditSyncStatus(200));
    }

    @Test
    public void testMapContents() throws Exception {
        MapUtil.init();

        Field mapField = MapUtil.class.getDeclaredField("policyExportAuditSyncStatusMessageMap");
        mapField.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<Integer, String> map = (Map<Integer, String>) mapField.get(null);

        assertNotNull(map);
        assertEquals(7, map.size());

        // Verify specific mappings
        assertTrue(map.containsKey(200));
        assertTrue(map.containsKey(202));
        assertTrue(map.containsKey(400));
        assertTrue(map.containsKey(401));
        assertTrue(map.containsKey(403));
        assertTrue(map.containsKey(404));
        assertTrue(map.containsKey(500));

        assertEquals("Policies synced to plugin", map.get(200));
        assertEquals("Bad Credentials", map.get(401));
        assertEquals("Error syncing policies", map.get(500));
    }

    @Test
    public void testPerformance() {
        // Test performance of multiple calls
        int  iterations = 10000;
        long startTime  = System.currentTimeMillis();

        for (int i = 0; i < iterations; i++) {
            MapUtil.getPolicyExportAuditSyncStatus(200);
            MapUtil.getPolicyExportAuditSyncStatus(401);
            MapUtil.getPolicyExportAuditSyncStatus(999); // Non-existent code
        }

        long endTime  = System.currentTimeMillis();
        long duration = endTime - startTime;
    }
}
