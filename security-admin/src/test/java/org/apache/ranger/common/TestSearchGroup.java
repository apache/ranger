/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.persistence.Query;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SearchGroup
 */

@ExtendWith(MockitoExtension.class)
public class TestSearchGroup {
    @Mock
    private Query mockQuery;

    private SearchGroup searchGroup;
    private SearchValue searchValue;

    @Test
    public void testConstructorWithAndCondition() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);

        assertNotNull(searchGroup);
        assertEquals(SearchGroup.CONDITION.AND, searchGroup.condition);
        assertNotNull(searchGroup.values);
        assertNotNull(searchGroup.searchGroups);
        assertTrue(searchGroup.values.isEmpty());
        assertTrue(searchGroup.searchGroups.isEmpty());
    }

    @Test
    public void testConstructorWithOrCondition() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.OR);

        assertNotNull(searchGroup);
        assertEquals(SearchGroup.CONDITION.OR, searchGroup.condition);
    }

    @Test
    public void testGetWhereClauseWithEmptyValuesAndGroups() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);

        String result = searchGroup.getWhereClause("test");

        assertEquals("", result);
    }

    @Test
    public void testGetWhereClauseWithSingleValue() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);
        searchGroup.values.add(searchValue);

        searchGroup.getWhereClause("test");
    }

    @Test
    public void testGetWhereClauseWithMultipleValuesAnd() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);
        SearchField.DATA_TYPE dtype = SearchField.DATA_TYPE.STRING;

        SearchField field1 = new SearchField("field1", "obj.field1", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);
        SearchField field2 = new SearchField("field2", "obj.field2", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);

        SearchValue value1 = new SearchValue();
        SearchValue value2 = new SearchValue();

        searchGroup.values.add(value1);
        searchGroup.values.add(value2);
        searchGroup.getWhereClause("test");
    }

    @Test
    public void testGetWhereClauseWithMultipleValuesOr() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.OR);

        SearchField field1 = new SearchField("field1", "obj.field1", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);
        SearchField field2 = new SearchField("field2", "obj.field2", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);

        SearchValue value1 = new SearchValue();
        SearchValue value2 = new SearchValue();

        searchGroup.values.add(value1);
        searchGroup.values.add(value2);
        searchGroup.getWhereClause("test");
    }

    @Test
    public void testResolveValuesWithEmptyValuesAndGroups() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);

        // Should not throw any exception
        searchGroup.resolveValues(mockQuery, "test");

        // No interactions with query should happen
        verify(mockQuery, times(0)).setParameter(anyString(), any());
    }

    @Test
    public void testResolveValuesWithSingleValue() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);
        searchGroup.values.add(searchValue);

        searchGroup.resolveValues(mockQuery, "test");
    }

    @Test
    public void testResolveValuesWithListValue() {
        searchGroup = new SearchGroup(SearchGroup.CONDITION.AND);

        SearchValue listValue = new SearchValue();
        searchGroup.values.add(listValue);

        searchGroup.resolveValues(mockQuery, "test");
    }

    @Test
    public void testConditionEnum() {
        assertEquals(2, SearchGroup.CONDITION.values().length);
        assertEquals(SearchGroup.CONDITION.AND, SearchGroup.CONDITION.valueOf("AND"));
        assertEquals(SearchGroup.CONDITION.OR, SearchGroup.CONDITION.valueOf("OR"));
    }

    @Test
    public void testGetWhereClause_WithSingleValue() {
        SearchGroup group = new SearchGroup(SearchGroup.CONDITION.AND);

        SearchValue value = mock(SearchValue.class);
        SearchField field = mock(SearchField.class);

        when(value.isList()).thenReturn(false);
        when(value.getSearchField()).thenReturn(field);
        when(field.getFieldName()).thenReturn("obj.status");
        when(field.getClientFieldName()).thenReturn("status");

        group.values.add(value); // Add one value

        // Also add a dummy inner group to avoid skipping due to searchGroups.isEmpty()
        SearchGroup dummyInnerGroup = new SearchGroup(SearchGroup.CONDITION.AND);
        dummyInnerGroup.values.add(mock(SearchValue.class)); // Prevent early return
        group.searchGroups.add(dummyInnerGroup);

        String whereClause = group.getWhereClause("pfx");
        assertNotNull(whereClause);
    }
}
