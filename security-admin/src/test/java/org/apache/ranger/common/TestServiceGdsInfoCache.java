/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceVersionInfoDao;
import org.apache.ranger.entity.XXServiceVersionInfo;
import org.apache.ranger.plugin.store.ServiceStore;
import org.apache.ranger.plugin.util.ServiceGdsInfo;
import org.apache.ranger.service.RangerGdsDataShareInDatasetService;
import org.apache.ranger.service.RangerGdsDataShareService;
import org.apache.ranger.service.RangerGdsDatasetInProjectService;
import org.apache.ranger.service.RangerGdsDatasetService;
import org.apache.ranger.service.RangerGdsProjectService;
import org.apache.ranger.service.RangerGdsSharedResourceService;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Answers;
import org.mockito.Mockito;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.SimpleTransactionStatus;

import java.util.Date;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ServiceGdsInfoCache
 */

public class TestServiceGdsInfoCache {
    @Test
    public void testGetLoadsFromDatabaseAndCaches() throws Exception {
        ServiceGdsInfoCache cache = new ServiceGdsInfoCache();

        // mock tx manager used by loader
        PlatformTransactionManager txManager = Mockito.mock(PlatformTransactionManager.class, Answers.RETURNS_DEEP_STUBS);
        when(txManager.getTransaction(any())).thenReturn(new SimpleTransactionStatus());
        doNothing().when(txManager).commit(any());
        doNothing().when(txManager).rollback(any());
        cache.txManager = txManager;

        // mock dao and return version info
        RangerDaoManager        daoMgr         = Mockito.mock(RangerDaoManager.class, Answers.RETURNS_DEEP_STUBS);
        XXServiceVersionInfoDao versionInfoDao = Mockito.mock(XXServiceVersionInfoDao.class);
        when(daoMgr.getXXServiceVersionInfo()).thenReturn(versionInfoDao);
        XXServiceVersionInfo ver = new XXServiceVersionInfo();
        ver.setServiceId(7L);
        ver.setGdsVersion(5L);
        ver.setGdsUpdateTime(new Date());
        when(versionInfoDao.findByServiceName("svc-gds")).thenReturn(ver);
        cache.daoMgr = daoMgr;

        // mock store and all GDS services to return empty sets
        ServiceStore svcStore = Mockito.mock(ServiceStore.class);
        when(svcStore.getServiceDefByName("gds")).thenReturn(new org.apache.ranger.plugin.model.RangerServiceDef());
        cache.svcStore                  = svcStore;
        cache.datasetService            = Mockito.mock(RangerGdsDatasetService.class, Answers.RETURNS_DEEP_STUBS);
        cache.projectService            = Mockito.mock(RangerGdsProjectService.class, Answers.RETURNS_DEEP_STUBS);
        cache.dataShareService          = Mockito.mock(RangerGdsDataShareService.class, Answers.RETURNS_DEEP_STUBS);
        cache.sharedResourceService     = Mockito.mock(RangerGdsSharedResourceService.class, Answers.RETURNS_DEEP_STUBS);
        cache.dataShareInDatasetService = Mockito.mock(RangerGdsDataShareInDatasetService.class, Answers.RETURNS_DEEP_STUBS);
        cache.datasetInProjectService   = Mockito.mock(RangerGdsDatasetInProjectService.class, Answers.RETURNS_DEEP_STUBS);
        // their search methods return empty lists by default (due to deep stubs getList())

        cache.init();

        ServiceGdsInfo info = null;
        try {
            info = cache.get("svc-gds");
        } catch (Exception e) {
            Assert.fail("Should not throw: " + e.getMessage());
        }

        Assert.assertNotNull(info);
        Assert.assertEquals("svc-gds", info.getServiceName());
        Assert.assertEquals(Long.valueOf(5L), info.getGdsVersion());
        Assert.assertNotNull(info.getGdsServiceDef());
    }
}
