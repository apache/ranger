/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SearchField
 */

public class TestSearchField {
    @Test
    public void testBasicConstructor() {
        String clientFieldName = "testField";
        String fieldName       = "table.testField";

        SearchField field = new SearchField(clientFieldName, fieldName);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(SearchField.DATA_TYPE.STRING, field.getDataType());
        assertEquals(SearchField.SEARCH_TYPE.FULL, field.getSearchType());
        assertNull(field.getRegEx());
        assertNull(field.getEnumName());
        assertEquals(0, field.getMaxValue());
        assertNull(field.getJoinTables());
        assertNull(field.getJoinCriteria());
        assertNull(field.getCustomCondition());
    }

    @Test
    public void testFullConstructor() {
        String                  clientFieldName = "testField";
        String                  fieldName       = "table.testField";
        SearchField.DATA_TYPE   dataType        = SearchField.DATA_TYPE.INTEGER;
        SearchField.SEARCH_TYPE searchType      = SearchField.SEARCH_TYPE.PARTIAL;

        SearchField field = new SearchField(clientFieldName, fieldName, dataType, searchType);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(dataType, field.getDataType());
        assertEquals(searchType, field.getSearchType());
    }

    @Test
    public void testConstructorWithJoin() {
        String                  clientFieldName = "testField";
        String                  fieldName       = "table.testField";
        SearchField.DATA_TYPE   dataType        = SearchField.DATA_TYPE.STRING;
        SearchField.SEARCH_TYPE searchType      = SearchField.SEARCH_TYPE.FULL;
        String                  joinTables      = "JoinTable jt, OtherTable ot";
        String                  joinCriteria    = "table.id = jt.tableId";

        SearchField field = new SearchField(clientFieldName, fieldName, dataType, searchType, joinTables, joinCriteria);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(dataType, field.getDataType());
        assertEquals(searchType, field.getSearchType());
        assertEquals(joinCriteria, field.getJoinCriteria());

        List<String> joinTableList = field.getJoinTables();
        assertNotNull(joinTableList);
        assertEquals(2, joinTableList.size());
        assertTrue(joinTableList.contains("JoinTable jt"));
        assertTrue(joinTableList.contains("OtherTable ot"));
    }

    @Test
    public void testCreateStringMethod() {
        String                  clientFieldName = "name";
        String                  fieldName       = "user.name";
        SearchField.SEARCH_TYPE searchType      = SearchField.SEARCH_TYPE.PARTIAL;
        String                  regEx           = "[a-zA-Z]+";

        SearchField field = SearchField.createString(clientFieldName, fieldName, searchType, regEx);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(SearchField.DATA_TYPE.STRING, field.getDataType());
        assertEquals(searchType, field.getSearchType());
        assertEquals(regEx, field.getRegEx());
    }

    @Test
    public void testCreateLongMethod() {
        String clientFieldName = "id";
        String fieldName       = "user.id";

        SearchField field = SearchField.createLong(clientFieldName, fieldName);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(SearchField.DATA_TYPE.INTEGER, field.getDataType());
        assertEquals(SearchField.SEARCH_TYPE.FULL, field.getSearchType());
    }

    @Test
    public void testCreateEnumMethod() {
        String clientFieldName = "status";
        String fieldName       = "user.status";
        String enumName        = "UserStatus";
        int    maxValue        = 5;

        SearchField field = SearchField.createEnum(clientFieldName, fieldName, enumName, maxValue);

        assertEquals(clientFieldName, field.getClientFieldName());
        assertEquals(fieldName, field.getFieldName());
        assertEquals(SearchField.DATA_TYPE.INT_LIST, field.getDataType());
        assertEquals(SearchField.SEARCH_TYPE.FULL, field.getSearchType());
        assertEquals(enumName, field.getEnumName());
        assertEquals(maxValue, field.getMaxValue());
    }

    @Test
    public void testSettersAndGetters() {
        SearchField field = new SearchField("client", "field");

        // Test fieldName
        field.setFieldName("newField");
        assertEquals("newField", field.getFieldName());

        // Test dataType
        field.setDataType(SearchField.DATA_TYPE.BOOLEAN);
        assertEquals(SearchField.DATA_TYPE.BOOLEAN, field.getDataType());

        // Test regEx
        field.setRegEx("\\d+");
        assertEquals("\\d+", field.getRegEx());

        // Test enumName
        field.setEnumName("TestEnum");
        assertEquals("TestEnum", field.getEnumName());

        // Test maxValue
        field.setMaxValue(100);
        assertEquals(100, field.getMaxValue());

        // Test joinCriteria
        field.setJoinCriteria("a.id = b.aId");
        assertEquals("a.id = b.aId", field.getJoinCriteria());

        // Test customCondition
        field.setCustomCondition("field > 0");
        assertEquals("field > 0", field.getCustomCondition());
    }

    @Test
    public void testSetJoinTablesWithString() {
        SearchField field = new SearchField("client", "field");

        String joinTables = "Table1 t1, Table2 t2, Table3 t3";
        field.setJoinTables(joinTables);

        List<String> joinTableList = field.getJoinTables();
        assertNotNull(joinTableList);
        assertEquals(3, joinTableList.size());
        assertTrue(joinTableList.contains("Table1 t1"));
        assertTrue(joinTableList.contains("Table2 t2"));
        assertTrue(joinTableList.contains("Table3 t3"));
    }

    @Test
    public void testSetJoinTablesWithList() {
        SearchField field = new SearchField("client", "field");

        List<String> tables = Arrays.asList("Table1 t1", "Table2 t2");
        field.setJoinTables(tables);

        List<String> joinTableList = field.getJoinTables();
        assertEquals(tables, joinTableList);
    }

    @Test
    public void testSetJoinTablesWithNullString() {
        SearchField field = new SearchField("client", "field");

        field.setJoinTables((String) null);

        assertNull(field.getJoinTables());
    }

    @Test
    public void testSetJoinTablesWithEmptyString() {
        SearchField field = new SearchField("client", "field");

        field.setJoinTables("");

        List<String> joinTableList = field.getJoinTables();
        assertNotNull(joinTableList);
        assertTrue(joinTableList.isEmpty());
    }

    @Test
    public void testSetJoinTablesWithDuplicates() {
        SearchField field = new SearchField("client", "field");

        String joinTables = "Table1 t1, Table1 t1, Table2 t2";
        field.setJoinTables(joinTables);

        List<String> joinTableList = field.getJoinTables();
        assertNotNull(joinTableList);
        assertEquals(2, joinTableList.size()); // Duplicates should be removed
        assertTrue(joinTableList.contains("Table1 t1"));
        assertTrue(joinTableList.contains("Table2 t2"));
    }

    @Test
    public void testSetJoinTablesWithWhitespace() {
        SearchField field = new SearchField("client", "field");

        String joinTables = " Table1 t1 ,  Table2 t2  , Table3 t3 ";
        field.setJoinTables(joinTables);

        List<String> joinTableList = field.getJoinTables();
        assertNotNull(joinTableList);
        assertEquals(3, joinTableList.size());
        assertTrue(joinTableList.contains("Table1 t1"));
        assertTrue(joinTableList.contains("Table2 t2"));
        assertTrue(joinTableList.contains("Table3 t3"));
    }

    @Test
    public void testDataTypeEnum() {
        // Test all enum values exist
        assertEquals(6, SearchField.DATA_TYPE.values().length);
        assertNotNull(SearchField.DATA_TYPE.INTEGER);
        assertNotNull(SearchField.DATA_TYPE.STRING);
        assertNotNull(SearchField.DATA_TYPE.INT_LIST);
        assertNotNull(SearchField.DATA_TYPE.STR_LIST);
        assertNotNull(SearchField.DATA_TYPE.BOOLEAN);
        assertNotNull(SearchField.DATA_TYPE.DATE);
    }

    @Test
    public void testSearchTypeEnum() {
        // Test all enum values exist
        assertEquals(7, SearchField.SEARCH_TYPE.values().length);
        assertNotNull(SearchField.SEARCH_TYPE.FULL);
        assertNotNull(SearchField.SEARCH_TYPE.PARTIAL);
        assertNotNull(SearchField.SEARCH_TYPE.LESS_THAN);
        assertNotNull(SearchField.SEARCH_TYPE.LESS_EQUAL_THAN);
        assertNotNull(SearchField.SEARCH_TYPE.GREATER_THAN);
        assertNotNull(SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN);
        assertNotNull(SearchField.SEARCH_TYPE.NOT_EQUALS);
    }

    @Test
    public void testComplexScenario() {
        SearchField field = new SearchField("userId", "u.id",
                SearchField.DATA_TYPE.INTEGER,
                SearchField.SEARCH_TYPE.GREATER_THAN,
                "UserRole ur, Role r",
                "u.id = ur.userId AND ur.roleId = r.id");

        field.setRegEx("\\d{1,10}");
        field.setEnumName("UserIdEnum");
        field.setMaxValue(999999);
        field.setCustomCondition("u.active = true");

        // Verify all properties
        assertEquals("userId", field.getClientFieldName());
        assertEquals("u.id", field.getFieldName());
        assertEquals(SearchField.DATA_TYPE.INTEGER, field.getDataType());
        assertEquals(SearchField.SEARCH_TYPE.GREATER_THAN, field.getSearchType());
        assertEquals("\\d{1,10}", field.getRegEx());
        assertEquals("UserIdEnum", field.getEnumName());
        assertEquals(999999, field.getMaxValue());
        assertEquals("u.id = ur.userId AND ur.roleId = r.id", field.getJoinCriteria());
        assertEquals("u.active = true", field.getCustomCondition());

        List<String> joinTables = field.getJoinTables();
        assertNotNull(joinTables);
        assertEquals(2, joinTables.size());
        assertTrue(joinTables.contains("UserRole ur"));
        assertTrue(joinTables.contains("Role r"));
    }

    @Test
    public void testNullAndEmptyValues() {
        SearchField field = new SearchField("test", "field");

        // Test setting null values
        field.setFieldName(null);
        assertNull(field.getFieldName());

        field.setRegEx(null);
        assertNull(field.getRegEx());

        field.setEnumName(null);
        assertNull(field.getEnumName());

        field.setJoinCriteria(null);
        assertNull(field.getJoinCriteria());

        field.setCustomCondition(null);
        assertNull(field.getCustomCondition());

        field.setJoinTables((List<String>) null);
        assertNull(field.getJoinTables());

        // Test setting empty values
        field.setFieldName("");
        assertEquals("", field.getFieldName());

        field.setRegEx("");
        assertEquals("", field.getRegEx());

        field.setEnumName("");
        assertEquals("", field.getEnumName());

        field.setJoinCriteria("");
        assertEquals("", field.getJoinCriteria());

        field.setCustomCondition("");
        assertEquals("", field.getCustomCondition());
    }

    @Test
    public void testImmutableClientFieldName() {
        SearchField field = new SearchField("originalName", "field");
        assertEquals("originalName", field.getClientFieldName());

        // Client field name should be immutable (final)
        // We can't test this directly without reflection, but we can verify it doesn't change
        assertEquals("originalName", field.getClientFieldName());
    }

    @Test
    public void testImmutableSearchType() {
        SearchField field = new SearchField("name", "field",
                SearchField.DATA_TYPE.STRING,
                SearchField.SEARCH_TYPE.PARTIAL);
        assertEquals(SearchField.SEARCH_TYPE.PARTIAL, field.getSearchType());

        // Search type should be immutable (final)
        // We can't test this directly without reflection, but we can verify it doesn't change
        assertEquals(SearchField.SEARCH_TYPE.PARTIAL, field.getSearchType());
    }
}
