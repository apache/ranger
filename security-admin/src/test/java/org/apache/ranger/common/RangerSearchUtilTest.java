/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.mock.web.MockHttpServletRequest;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.lenient;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerSearchUtil
 */

@RunWith(MockitoJUnitRunner.class)
public class RangerSearchUtilTest {
    @Mock
    private EntityManager mockEntityManager;

    @Mock
    private Query mockQuery;

    @Mock
    private RESTErrorUtil mockRestErrorUtil;

    @Mock
    private RangerConfigUtil mockConfigUtil;

    @Mock
    private StringUtil mockStringUtil;

    private RangerSearchUtil  rangerSearchUtil;
    private List<SearchField> searchFields;
    private List<SortField>   sortFields;

    @Before
    public void setUp() {
        rangerSearchUtil               = new RangerSearchUtil();
        rangerSearchUtil.restErrorUtil = mockRestErrorUtil;
        rangerSearchUtil.configUtil    = mockConfigUtil;
        rangerSearchUtil.stringUtil    = mockStringUtil;

        // Setup search fields for testing
        searchFields = new ArrayList<>();
        searchFields.add(new SearchField("id", "obj.id", SearchField.DATA_TYPE.INTEGER, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("namePartial", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.PARTIAL));
        searchFields.add(new SearchField("isEnabled", "obj.isEnabled", SearchField.DATA_TYPE.BOOLEAN, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("createdTime", "obj.createdTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("idList", "obj.id", SearchField.DATA_TYPE.INT_LIST, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("nameList", "obj.name", SearchField.DATA_TYPE.STR_LIST, SearchField.SEARCH_TYPE.FULL));

        // Setup sort fields for testing
        sortFields = new ArrayList<>();
        sortFields.add(new SortField("id", "obj.id", true, SortField.SORT_ORDER.ASC));
        sortFields.add(new SortField("name", "obj.name", false, SortField.SORT_ORDER.DESC));
        sortFields.add(new SortField("createTime", "obj.createTime", false, SortField.SORT_ORDER.ASC));

        // Setup lenient stubs for commonly called methods
        lenient().when(mockStringUtil.isEmpty(anyString())).thenReturn(true);
        lenient().when(mockStringUtil.isEmpty((String) null)).thenReturn(true);
        lenient().when(mockConfigUtil.getDefaultMaxRows()).thenReturn(20);
    }

    @Test
    public void testConstructor() {
        RangerSearchUtil searchUtil = new RangerSearchUtil();
        assertEquals(20, searchUtil.dbMinInListLength); // Default value
    }

    @Test
    public void testGetSearchFilterWithEmptyRequest() {
        MockHttpServletRequest request = new MockHttpServletRequest();

        SearchFilter result = rangerSearchUtil.getSearchFilter(request, sortFields);

        assertNotNull(result);
        assertNotNull(result.getParams());
        assertTrue(result.getParams().isEmpty());
    }

    @Test
    public void testGetSearchFilterWithAllParameters() {
        MockHttpServletRequest request = new MockHttpServletRequest();

        // Add all possible search filter parameters
        request.setParameter(SearchFilter.SERVICE_TYPE, "hdfs");
        request.setParameter(SearchFilter.SERVICE_NAME, "hdfs_service");
        request.setParameter(SearchFilter.POLICY_NAME, "test_policy");
        request.setParameter(SearchFilter.USER, "testuser");
        request.setParameter(SearchFilter.GROUP, "testgroup");
        request.setParameter(SearchFilter.IS_ENABLED, "true");
        request.setParameter(SearchFilter.POLICY_TYPE, "1");
        request.setParameter(SearchFilter.START_INDEX, "10");
        request.setParameter(SearchFilter.PAGE_SIZE, "25");
        request.setParameter(SearchFilter.SORT_BY, "name");
        request.setParameter("sortType", "desc");
        request.setParameter("getCount", "false");

        // Mock validation methods
        when(mockRestErrorUtil.parseInt(eq("10"), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(10);
        when(mockRestErrorUtil.parseInt(eq("25"), anyInt(), anyString(), any(), eq(null), eq(SearchFilter.PAGE_SIZE))).thenReturn(25);
        when(mockRestErrorUtil.parseInt(eq("1"), eq(0), anyString(), any(), eq(null), eq(SearchFilter.POLICY_TYPE))).thenReturn(1);
        when(mockRestErrorUtil.parseBoolean("false", true)).thenReturn(false);
        when(mockRestErrorUtil.validateString(eq("name"), anyString(), anyString(), any(), eq(null), eq(SearchFilter.SORT_BY))).thenReturn("name");
        when(mockRestErrorUtil.validateString(eq("desc"), anyString(), anyString(), any(), eq(null), eq("sortType"))).thenReturn("desc");

        SearchFilter result = rangerSearchUtil.getSearchFilter(request, sortFields);

        assertNotNull(result);
        assertEquals("hdfs", result.getParam(SearchFilter.SERVICE_TYPE));
        assertEquals("hdfs_service", result.getParam(SearchFilter.SERVICE_NAME));
        assertEquals("test_policy", result.getParam(SearchFilter.POLICY_NAME));
        assertEquals("testuser", result.getParam(SearchFilter.USER));
        assertEquals("testgroup", result.getParam(SearchFilter.GROUP));
        assertEquals("true", result.getParam(SearchFilter.IS_ENABLED));
        assertEquals("1", result.getParam(SearchFilter.POLICY_TYPE));
        assertEquals(10, result.getStartIndex());
        assertEquals(25, result.getMaxRows());
        assertEquals("name", result.getSortBy());
        assertEquals("desc", result.getSortType());
        assertFalse(result.isGetCount());
    }

    @Test
    public void testGetSearchFilterWithResourcePrefix() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("resource.path", "/test/path");
        request.setParameter("resource.database", "testdb");

        when(mockRestErrorUtil.parseInt(eq(null), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(0);

        rangerSearchUtil.getSearchFilter(request, sortFields);
    }

    @Test
    public void testGetSearchFilterFromLegacyRequestForRepositorySearch() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("name", "test_service");
        request.setParameter("status", "1");
        request.setParameter("type", "HDFS");

        when(mockRestErrorUtil.parseInt(eq(null), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(0);

        SearchFilter result = rangerSearchUtil.getSearchFilterFromLegacyRequestForRepositorySearch(request, sortFields);

        assertNotNull(result);
        assertEquals("test_service", result.getParam(SearchFilter.SERVICE_NAME));
        assertEquals("1", result.getParam(SearchFilter.IS_ENABLED));
        assertEquals("hdfs", result.getParam(SearchFilter.SERVICE_TYPE));
    }

    @Test
    public void testGetSearchFilterFromLegacyRequestForRepositorySearchWithNullRequest() {
        SearchFilter result = rangerSearchUtil.getSearchFilterFromLegacyRequestForRepositorySearch(null, sortFields);
        assertNull(result);
    }

    @Test
    public void testGetSearchFilterFromLegacyRequest() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("repositoryType", "HDFS");
        request.setParameter("repositoryId", "1");
        request.setParameter("repositoryName", "hdfs_service");
        request.setParameter("policyName", "test_policy");
        request.setParameter("userName", "testuser");
        request.setParameter("groupName", "testgroup");
        request.setParameter("isEnabled", "true");
        request.setParameter("resourceName", "/test/path");

        when(mockRestErrorUtil.parseInt(eq(null), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(0);

        SearchFilter result = rangerSearchUtil.getSearchFilterFromLegacyRequest(request, sortFields);

        assertNotNull(result);
        assertEquals("hdfs", result.getParam(SearchFilter.SERVICE_TYPE));
        assertEquals("1", result.getParam(SearchFilter.SERVICE_ID));
        assertEquals("hdfs_service", result.getParam(SearchFilter.SERVICE_NAME));
        assertEquals("test_policy", result.getParam(SearchFilter.POLICY_NAME));
        assertEquals("testuser", result.getParam(SearchFilter.USER));
        assertEquals("testgroup", result.getParam(SearchFilter.GROUP));
        assertEquals("true", result.getParam(SearchFilter.IS_ENABLED));
    }

    @Test
    public void testGetSearchFilterFromLegacyRequestWithAssetId() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("assetId", "2");

        when(mockRestErrorUtil.parseInt(eq(null), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(0);

        SearchFilter result = rangerSearchUtil.getSearchFilterFromLegacyRequest(request, sortFields);

        assertEquals("2", result.getParam(SearchFilter.SERVICE_ID));
    }

    @Test
    public void testExtractCommonCriteriasForFilter() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter(SearchFilter.START_INDEX, "5");
        request.setParameter(SearchFilter.PAGE_SIZE, "30");
        request.setParameter(SearchFilter.POLICY_TYPE, "2");
        request.setParameter("getCount", "false");
        request.setParameter(SearchFilter.SORT_BY, "name");
        request.setParameter("sortType", "asc");

        when(mockRestErrorUtil.parseInt(eq("5"), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(5);
        when(mockRestErrorUtil.parseInt(eq("30"), anyInt(), anyString(), any(), eq(null), eq(SearchFilter.PAGE_SIZE))).thenReturn(30);
        when(mockRestErrorUtil.parseInt(eq("2"), eq(0), anyString(), any(), eq(null), eq(SearchFilter.POLICY_TYPE))).thenReturn(2);
        when(mockRestErrorUtil.parseBoolean("false", true)).thenReturn(false);
        when(mockRestErrorUtil.validateString(eq("name"), anyString(), anyString(), any(), eq(null), eq(SearchFilter.SORT_BY))).thenReturn("name");
        when(mockRestErrorUtil.validateString(eq("asc"), anyString(), anyString(), any(), eq(null), eq("sortType"))).thenReturn("asc");

        SearchFilter searchFilter = new SearchFilter();
        SearchFilter result       = rangerSearchUtil.extractCommonCriteriasForFilter(request, searchFilter, sortFields);

        assertEquals(5, result.getStartIndex());
        assertEquals(30, result.getMaxRows());
        assertEquals("2", result.getParam(SearchFilter.POLICY_TYPE));
        assertFalse(result.isGetCount());
        assertEquals("name", result.getSortBy());
        assertEquals("asc", result.getSortType());
    }

    @Test
    public void testExtractCommonCriteriasForFilterWithNegativeStartIndex() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter(SearchFilter.START_INDEX, "-5");

        when(mockRestErrorUtil.parseInt(eq("-5"), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(-5);

        SearchFilter searchFilter = new SearchFilter();
        SearchFilter result       = rangerSearchUtil.extractCommonCriteriasForFilter(request, searchFilter, sortFields);

        assertEquals(0, result.getStartIndex()); // Should be corrected to 0
    }

    @Test
    public void testExtractCommonCriteriasForFilterWithInvalidSortBy() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter(SearchFilter.SORT_BY, "invalid_field");

        when(mockRestErrorUtil.validateString(eq("invalid_field"), anyString(), anyString(), any(), eq(null), eq(SearchFilter.SORT_BY))).thenReturn("invalid_field");
        when(mockRestErrorUtil.parseInt(eq(null), eq(0), anyString(), any(), eq(null), eq(SearchFilter.START_INDEX))).thenReturn(0);

        SearchFilter searchFilter = new SearchFilter();
        SearchFilter result       = rangerSearchUtil.extractCommonCriteriasForFilter(request, searchFilter, sortFields);

        assertNull(result.getSortBy()); // Should remain null for invalid sort field
    }

    @Test
    public void testCreateSearchQueryWithoutCount() throws Exception {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setStartIndex(10);
        searchFilter.setMaxRows(25);

        when(mockEntityManager.createQuery(anyString())).thenReturn(mockQuery);

        Query result = rangerSearchUtil.createSearchQuery(mockEntityManager, "SELECT obj FROM Object obj ",
                " ORDER BY obj.id ASC", searchFilter, searchFields, false);

        assertNotNull(result);
        verify(mockQuery).setFirstResult(10);
        verify(mockQuery).setMaxResults(anyInt());
    }

    @Test
    public void testCreateSearchQueryWithCount() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setStartIndex(10);
        searchFilter.setMaxRows(25);

        when(mockEntityManager.createQuery(anyString())).thenReturn(mockQuery);

        Query result = rangerSearchUtil.createSearchQuery(mockEntityManager, "SELECT COUNT(obj) FROM Object obj ",
                null, searchFilter, searchFields, true);

        assertNotNull(result);
        verify(mockQuery, never()).setFirstResult(anyInt()); // Pagination should be skipped for count queries
    }

    @Test
    public void testCreateSearchQueryWithRetrieveAllPages() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam(SearchFilter.RETRIEVE_ALL_PAGES, "true");

        when(mockEntityManager.createQuery(anyString())).thenReturn(mockQuery);

        Query result = rangerSearchUtil.createSearchQuery(mockEntityManager, "SELECT obj FROM Object obj ",
                null, searchFilter, searchFields, false);

        assertNotNull(result);
        verify(mockQuery, never()).setFirstResult(anyInt()); // Pagination should be skipped when retrieving all pages
    }

    @Test
    public void testUpdateQueryPageSize() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setMaxRows(30);

        rangerSearchUtil.updateQueryPageSize(mockQuery, searchFilter);

        verify(mockQuery).setMaxResults(30);
        verify(mockQuery).setHint("eclipselink.jdbc.max-rows", "30");
    }

    @Test
    public void testConstructSortClauseWithValidSortBy() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setSortBy("name");
        searchFilter.setSortType("desc");

        when(mockStringUtil.isEmpty("name")).thenReturn(false);
        when(mockStringUtil.isEmpty("desc")).thenReturn(false);

        String result = rangerSearchUtil.constructSortClause(searchFilter, sortFields);

        assertEquals(" ORDER BY obj.name desc", result);
        assertEquals("name", searchFilter.getSortBy());
        assertEquals("desc", searchFilter.getSortType());
    }

    @Test
    public void testConstructSortClauseWithDefaultSort() {
        SearchFilter searchFilter = new SearchFilter();

        // Stub all potential calls
        when(mockStringUtil.isEmpty(anyString())).thenReturn(true);
        when(mockStringUtil.isEmpty((String) null)).thenReturn(true);

        rangerSearchUtil.constructSortClause(searchFilter, sortFields);
    }

    @Test
    public void testConstructSortClauseWithInvalidSortBy() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setSortBy("invalid_field");

        when(mockStringUtil.isEmpty(anyString())).thenReturn(true);
        when(mockStringUtil.isEmpty((String) null)).thenReturn(true);

        rangerSearchUtil.constructSortClause(searchFilter, sortFields);
    }

    @Test
    public void testExtractIntList() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids", "1", "2", "3");

        when(mockRestErrorUtil.parseInt(eq("1"), anyString(), any(), eq(null), eq("ids"))).thenReturn(1);
        when(mockRestErrorUtil.parseInt(eq("2"), anyString(), any(), eq(null), eq("ids"))).thenReturn(2);
        when(mockRestErrorUtil.parseInt(eq("3"), anyString(), any(), eq(null), eq("ids"))).thenReturn(3);

        SearchFilter searchFilter = new SearchFilter();
        rangerSearchUtil.extractIntList(request, searchFilter, "ids", "IDs");

        Object[] result = searchFilter.getMultiValueParam("ids");
        assertNotNull(result);
        assertEquals(3, result.length);
        assertEquals(1, result[0]);
        assertEquals(2, result[1]);
        assertEquals(3, result[2]);
    }

    @Test
    public void testExtractIntListWithBrackets() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids[]", "4", "5");

        when(mockRestErrorUtil.parseInt(eq("4"), anyString(), any(), eq(null), eq("ids"))).thenReturn(4);
        when(mockRestErrorUtil.parseInt(eq("5"), anyString(), any(), eq(null), eq("ids"))).thenReturn(5);

        SearchFilter searchFilter = new SearchFilter();
        rangerSearchUtil.extractIntList(request, searchFilter, "ids", "IDs");

        Object[] result = searchFilter.getMultiValueParam("ids");
        assertNotNull(result);
        assertEquals(2, result.length);
    }

    @Test
    public void testExtractStringList() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("names", "name1", "name2");

        when(mockStringUtil.isEmpty(anyString())).thenReturn(false);
        when(mockRestErrorUtil.validateString(anyString(), anyString(), anyString(), any(), eq(null), eq("names"))).thenReturn("validated");

        SearchFilter searchFilter = new SearchFilter();
        rangerSearchUtil.extractStringList(request, searchFilter, "names", "Names", "nameList", null, "pattern");

        Object[] result = searchFilter.getMultiValueParam("names");
        assertNotNull(result);
        assertEquals(2, result.length);
    }

//    @Test
//    public void testExtractStringListWithoutRegex() {
//        MockHttpServletRequest request = new MockHttpServletRequest();
//        request.setParameter("names", "name1", "name2");
//
//        when(mockStringUtil.isEmpty(null)).thenReturn(true);
//
//        SearchFilter searchFilter = new SearchFilter();
//        rangerSearchUtil.extractStringList(request, searchFilter, "names", "Names", "nameList", null, null);
//
//        Object[] result = searchFilter.getMultiValueParam("names");
//        assertNotNull(result);
//        assertEquals(2, result.length);
//    }

    @Test
    public void testGetMultiValueParamsWithPrefix() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("resource.path", "value1");
        request.setParameter("resource.database", "value2");
        request.setParameter("other.param", "value3");

        Map<String, String[]> result = rangerSearchUtil.getMultiValueParamsWithPrefix(request, "resource.", true);

        assertEquals(2, result.size());
        assertTrue(result.containsKey("path"));
        assertTrue(result.containsKey("database"));
        assertFalse(result.containsKey("other.param"));
    }

    @Test
    public void testGetMultiValueParamsWithPrefixWithoutStripping() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("resource.path", "value1");
        request.setParameter("resource.database", "value2");

        Map<String, String[]> result = rangerSearchUtil.getMultiValueParamsWithPrefix(request, "resource.", false);

        assertEquals(2, result.size());
        assertTrue(result.containsKey("resource.path"));
        assertTrue(result.containsKey("resource.database"));
    }

    @Test
    public void testGetParamMultiValues() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("param1", "value1", "value2");

        String[] result = rangerSearchUtil.getParamMultiValues(request, "param1");

        assertNotNull(result);
        assertEquals(2, result.length);
        assertEquals("value1", result[0]);
        assertEquals("value2", result[1]);
    }

    @Test
    public void testGetParamMultiValuesWithBrackets() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("param1[]", "value1", "value2");

        String[] result = rangerSearchUtil.getParamMultiValues(request, "param1");

        assertNotNull(result);
        assertEquals(2, result.length);
    }

    @Test
    public void testGetParamMultiValuesNotFound() {
        MockHttpServletRequest request = new MockHttpServletRequest();

        String[] result = rangerSearchUtil.getParamMultiValues(request, "nonexistent");

        assertNull(result);
    }

    @Test
    public void testResolveQueryParamsWithIntegerField() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("id", "123");

        List<SearchField> fields = Collections.singletonList(new SearchField("id", "obj.id", SearchField.DATA_TYPE.INTEGER, SearchField.SEARCH_TYPE.FULL));

        when(mockRestErrorUtil.parseInt(eq("123"), anyString(), any(), eq(null), eq("id"))).thenReturn(123);

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("id", 123);
    }

    @Test
    public void testResolveQueryParamsWithStringField() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("name", "TestName");

        List<SearchField> fields = Collections.singletonList(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("name", "testname");
    }

    @Test
    public void testResolveQueryParamsWithStringFieldPartialSearch() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("name", "TestName");

        List<SearchField> fields = Collections.singletonList(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.PARTIAL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("name", "%testname%");
    }

    @Test
    public void testResolveQueryParamsWithBooleanField() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("isEnabled", "true");

        List<SearchField> fields = Collections.singletonList(new SearchField("isEnabled", "obj.isEnabled", SearchField.DATA_TYPE.BOOLEAN, SearchField.SEARCH_TYPE.FULL));

        when(mockRestErrorUtil.parseBoolean(eq("true"), anyString(), any(), eq(null), eq("isEnabled"))).thenReturn(true);

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("isEnabled", true);
    }

    @Test
    public void testResolveQueryParamsWithDateField() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("createdTime", "2023-01-01");

        Date              testDate = new Date();
        List<SearchField> fields   = Collections.singletonList(new SearchField("createdTime", "obj.createdTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.FULL));

        when(mockRestErrorUtil.parseDate(eq("2023-01-01"), anyString(), any(), eq(null), eq("createdTime"), eq(null))).thenReturn(testDate);

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("createdTime", testDate);
    }

    @Test
    public void testResolveQueryParamsWithIntListSmallList() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setMultiValueParam("ids", new Integer[] {1, 2, 3});

        List<SearchField> fields = Collections.singletonList(new SearchField("ids", "obj.id", SearchField.DATA_TYPE.INT_LIST, SearchField.SEARCH_TYPE.FULL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("ids_0", 1);
        verify(mockQuery).setParameter("ids_1", 2);
        verify(mockQuery).setParameter("ids_2", 3);
    }

    @Test
    public void testResolveQueryParamsWithIntListLargeList() {
        SearchFilter searchFilter = new SearchFilter();
        Integer[]    largeArray   = new Integer[25]; // Larger than dbMinInListLength
        for (int i = 0; i < 25; i++) {
            largeArray[i] = i + 1;
        }
        searchFilter.setMultiValueParam("ids", largeArray);

        List<SearchField> fields = Collections.singletonList(new SearchField("ids", "obj.id", SearchField.DATA_TYPE.INT_LIST, SearchField.SEARCH_TYPE.FULL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter(eq("ids"), any(List.class));
    }

    @Test
    public void testResolveQueryParamsWithStringListSmallList() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setMultiValueParam("names", new String[] {"name1", "name2"});

        List<SearchField> fields = Collections.singletonList(new SearchField("names", "obj.name", SearchField.DATA_TYPE.STR_LIST, SearchField.SEARCH_TYPE.FULL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("names_0", "name1");
        verify(mockQuery).setParameter("names_1", "name2");
    }

    @Test
    public void testResolveQueryParamsWithStringListPartialSearch() {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setMultiValueParam("names", new String[] {"name1", "name2"});

        List<SearchField> fields = Collections.singletonList(new SearchField("names", "obj.name", SearchField.DATA_TYPE.STR_LIST, SearchField.SEARCH_TYPE.PARTIAL));

        rangerSearchUtil.resolveQueryParams(mockQuery, searchFilter, fields);

        verify(mockQuery).setParameter("names_0", "%name1%");
        verify(mockQuery).setParameter("names_1", "%name2%");
    }

    // Additional edge case tests
    @Test
    public void testBuildWhereClauseWithEmptyCriteria() throws Exception {
        SearchFilter searchFilter = new SearchFilter();
        // Use empty search fields list to ensure no fields are processed
        List<SearchField> emptyFields = new ArrayList<>();

        // Use reflection to call private method
        Method buildWhereClauseMethod = RangerSearchUtil.class.getDeclaredMethod("buildWhereClause", SearchFilter.class, List.class);
        buildWhereClauseMethod.setAccessible(true);
        StringBuilder result = (StringBuilder) buildWhereClauseMethod.invoke(rangerSearchUtil, searchFilter, emptyFields);

        assertEquals("WHERE 1 = 1 ", result.toString());
    }

    @Test
    public void testBuildWhereClauseWithMultipleConditions() throws Exception {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("id", "1");
        searchFilter.setParam("name", "test");
        searchFilter.setParam("isEnabled", "true");

        when(mockRestErrorUtil.parseInt(eq("1"), anyString(), any(), eq(null), eq("id"))).thenReturn(1);
        when(mockRestErrorUtil.parseBoolean(eq("true"), anyString(), any(), eq(null), eq("isEnabled"))).thenReturn(true);

        // Use reflection to call private method
        Method buildWhereClauseMethod = RangerSearchUtil.class.getDeclaredMethod("buildWhereClause", SearchFilter.class, List.class);
        buildWhereClauseMethod.setAccessible(true);
        StringBuilder result = (StringBuilder) buildWhereClauseMethod.invoke(rangerSearchUtil, searchFilter, searchFields);

        String whereClause = result.toString();
        assertTrue(whereClause.contains("obj.id = :id"));
        assertTrue(whereClause.contains("LOWER(obj.name) = :name"));
        assertTrue(whereClause.contains("obj.isEnabled = :isEnabled"));
    }

    @Test
    public void testBuildWhereClauseWithCustomCondition() throws Exception {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("custom", "value");

        SearchField customField = new SearchField("custom", "obj.customField", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);
        customField.setCustomCondition("obj.customField = :custom");
        List<SearchField> customFields = Collections.singletonList(customField);

        // Use reflection to call private method
        Method buildWhereClauseMethod = RangerSearchUtil.class.getDeclaredMethod("buildWhereClause", SearchFilter.class, List.class);
        buildWhereClauseMethod.setAccessible(true);
        StringBuilder result = (StringBuilder) buildWhereClauseMethod.invoke(rangerSearchUtil, searchFilter, customFields);

        assertTrue(result.toString().contains("obj.customField = :custom"));
    }

    @Test
    public void testBuildWhereClauseWithJoinTables() throws Exception {
        SearchFilter searchFilter = new SearchFilter();
        searchFilter.setParam("joinField", "value");

        SearchField joinField = new SearchField("joinField", "jt.field", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL);
        joinField.setJoinTables(Collections.singletonList("JoinTable jt"));
        joinField.setJoinCriteria("obj.id = jt.objId");

        List<SearchField> joinFields = Collections.singletonList(joinField);

        // Use reflection to call private method
        Method buildWhereClauseMethod = RangerSearchUtil.class.getDeclaredMethod("buildWhereClause", SearchFilter.class, List.class);
        buildWhereClauseMethod.setAccessible(true);
        StringBuilder result = (StringBuilder) buildWhereClauseMethod.invoke(rangerSearchUtil, searchFilter, joinFields);

        String whereClause = result.toString();
        assertTrue(whereClause.contains(", JoinTable jt"));
        assertTrue(whereClause.contains("obj.id = jt.objId"));
    }
}
