/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import javax.servlet.http.HttpServletRequest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for HTTPUtil
 */

@RunWith(MockitoJUnitRunner.class)
public class TestHTTPUtil {
    @Mock
    private HttpServletRequest mockRequest;

    private HTTPUtil httpUtil;

    @Before
    public void setUp() {
        httpUtil = new HTTPUtil();
    }

    @Test
    public void testConstants() {
        assertEquals("User-Agent", HTTPUtil.USER_AGENT);
        assertEquals("iPhone", HTTPUtil.IPHONE);
        assertEquals("iPad", HTTPUtil.IPAD);
        assertEquals("iPod", HTTPUtil.IPOD);
        assertEquals("Android", HTTPUtil.ANDROID);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithiPhone() {
        String userAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15";
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(userAgent);

        int deviceType = httpUtil.getDeviceType(mockRequest);

        assertEquals(RangerCommonEnums.DEVICE_IPHONE, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithiPad() {
        String userAgent = "Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15";
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(userAgent);

        int deviceType = httpUtil.getDeviceType(mockRequest);

        assertEquals(RangerCommonEnums.DEVICE_IPAD, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithiPod() {
        String userAgent = "Mozilla/5.0 (iPod touch; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15";
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(userAgent);

        httpUtil.getDeviceType(mockRequest);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithAndroid() {
        String userAgent = "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36";
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(userAgent);

        int deviceType = httpUtil.getDeviceType(mockRequest);

        assertEquals(RangerCommonEnums.DEVICE_ANDROID, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithBrowser() {
        String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36";
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(userAgent);

        int deviceType = httpUtil.getDeviceType(mockRequest);

        assertEquals(RangerCommonEnums.DEVICE_BROWSER, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromRequestWithNullUserAgent() {
        when(mockRequest.getHeader(HTTPUtil.USER_AGENT)).thenReturn(null);

        int deviceType = httpUtil.getDeviceType(mockRequest);

        assertEquals(RangerCommonEnums.DEVICE_UNKNOWN, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithiPhone() {
        String userAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15";

        int deviceType = httpUtil.getDeviceType(userAgent);

        assertEquals(RangerCommonEnums.DEVICE_IPHONE, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithiPad() {
        String userAgent = "Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15";

        int deviceType = httpUtil.getDeviceType(userAgent);

        assertEquals(RangerCommonEnums.DEVICE_IPAD, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithiPod() {
        String userAgent = "Mozilla/5.0 (iPod touch; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15";

        httpUtil.getDeviceType(userAgent);
    }

    @Test
    public void testGetDeviceTypeFromStringWithAndroid() {
        String userAgent = "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36";

        int deviceType = httpUtil.getDeviceType(userAgent);

        assertEquals(RangerCommonEnums.DEVICE_ANDROID, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithBrowser() {
        String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36";

        int deviceType = httpUtil.getDeviceType(userAgent);

        assertEquals(RangerCommonEnums.DEVICE_BROWSER, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithNullUserAgent() {
        int deviceType = httpUtil.getDeviceType((String) null);

        assertEquals(RangerCommonEnums.DEVICE_UNKNOWN, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithEmptyUserAgent() {
        int deviceType = httpUtil.getDeviceType("");

        assertEquals(RangerCommonEnums.DEVICE_BROWSER, deviceType);
    }

    @Test
    public void testGetDeviceTypeFromStringWithUnknownUserAgent() {
        String userAgent = "Unknown/1.0";

        int deviceType = httpUtil.getDeviceType(userAgent);

        assertEquals(RangerCommonEnums.DEVICE_BROWSER, deviceType);
    }

    @Test
    public void testGetDeviceTypeWithPartialMatch() {
        assertEquals(RangerCommonEnums.DEVICE_IPHONE, httpUtil.getDeviceType("some text iPhone more text"));
        assertEquals(RangerCommonEnums.DEVICE_IPAD, httpUtil.getDeviceType("prefix iPad suffix"));
        assertEquals(RangerCommonEnums.DEVICE_IPOD, httpUtil.getDeviceType("before iPod after"));
        assertEquals(RangerCommonEnums.DEVICE_ANDROID, httpUtil.getDeviceType("testing Android device"));
    }

    @Test
    public void testGetDeviceTypePriorityOrdering() {
        // Test that iPhone takes precedence when multiple device indicators are present
        String userAgent = "iPhone iPad Android";
        assertEquals(RangerCommonEnums.DEVICE_IPHONE, httpUtil.getDeviceType(userAgent));

        // Test that iPad takes precedence over iPod and Android
        userAgent = "iPad iPod Android";
        assertEquals(RangerCommonEnums.DEVICE_IPAD, httpUtil.getDeviceType(userAgent));

        // Test that iPod takes precedence over Android
        userAgent = "iPod Android";
        assertEquals(RangerCommonEnums.DEVICE_IPOD, httpUtil.getDeviceType(userAgent));
    }

    @Test
    public void testRealWorldUserAgents() {
        // Test with real-world user agent strings
        String iphoneUA = "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1";
        assertEquals(RangerCommonEnums.DEVICE_IPHONE, httpUtil.getDeviceType(iphoneUA));

        String ipadUA = "Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1";
        assertEquals(RangerCommonEnums.DEVICE_IPAD, httpUtil.getDeviceType(ipadUA));

        String androidUA = "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36";
        assertEquals(RangerCommonEnums.DEVICE_ANDROID, httpUtil.getDeviceType(androidUA));

        String chromeUA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36";
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType(chromeUA));

        String firefoxUA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0";
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType(firefoxUA));

        String safariUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15";
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType(safariUA));
    }

    @Test
    public void testEdgeCases() {
        // Test edge cases
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType("   ")); // Whitespace only
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType("xyz")); // Random string
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType("iPhon")); // Partial match that doesn't qualify
        assertEquals(RangerCommonEnums.DEVICE_BROWSER, httpUtil.getDeviceType("ianroid")); // Similar but not exact
    }

    @Test
    public void testPerformance() {
        String userAgent  = "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15";
        int    iterations = 10000;

        long startTime = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            httpUtil.getDeviceType(userAgent);
        }
        long endTime = System.currentTimeMillis();

        // Should complete within reasonable time
        assertTrue(endTime - startTime < 1000, "Device type detection should be fast");
    }

    @Test
    public void testConsistentResults() {
        String userAgent = "Mozilla/5.0 (Android 11; Mobile) AppleWebKit/537.36";

        // Multiple calls should return the same result
        int result1 = httpUtil.getDeviceType(userAgent);
        int result2 = httpUtil.getDeviceType(userAgent);
        int result3 = httpUtil.getDeviceType(userAgent);

        assertEquals(result1, result2);
        assertEquals(result2, result3);
        assertEquals(RangerCommonEnums.DEVICE_ANDROID, result1);
    }
}
