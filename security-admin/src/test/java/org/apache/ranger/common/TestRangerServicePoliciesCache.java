/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.store.ServiceStore;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Collections;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServicePoliciesCache
 */

public class TestRangerServicePoliciesCache {
    private RangerServicePoliciesCache original;

    @BeforeEach
    public void setup() {
        original                             = RangerServicePoliciesCache.sInstance;
        RangerServicePoliciesCache.sInstance = null; // force new instance on getInstance()
    }

    @AfterEach
    public void teardown() {
        RangerServicePoliciesCache.sInstance = original;
    }

    @Test
    public void testInitialLoadReturnsFullPolicies() throws Exception {
        ServiceStore store       = Mockito.mock(ServiceStore.class);
        String       serviceName = "svc";
        Long         serviceId   = 100L;

        ServicePolicies v1 = new ServicePolicies();
        v1.setServiceName(serviceName);
        v1.setServiceId(serviceId);
        v1.setPolicyVersion(1L);
        v1.setPolicies(Collections.emptyList());
        v1.setServiceDef(new RangerServiceDef());

        when(store.getServicePolicyVersion(serviceName)).thenReturn(1L);
        when(store.getServicePolicyDeltasOrPolicies(anyString(), anyLong())).thenReturn(v1);

        RangerServicePoliciesCache cache = RangerServicePoliciesCache.getInstance();

        ServicePolicies ret = cache.getServicePolicies(serviceName, serviceId, -1L, false, store);
        Assertions.assertNotNull(ret);
        Assertions.assertEquals(Long.valueOf(1L), ret.getPolicyVersion());
        Assertions.assertEquals(serviceName, ret.getServiceName());
    }

    @Test
    public void testDeltaRetrievalWhenLastKnownVersionOutdated() throws Exception {
        ServiceStore store       = Mockito.mock(ServiceStore.class);
        String       serviceName = "svc2";
        Long         serviceId   = 200L;

        // First load full policies to cache with version 2
        ServicePolicies v2 = new ServicePolicies();
        v2.setServiceName(serviceName);
        v2.setServiceId(serviceId);
        v2.setPolicyVersion(2L);
        v2.setPolicies(Collections.emptyList());
        v2.setServiceDef(new RangerServiceDef());

        when(store.getServicePolicyVersion(serviceName)).thenReturn(2L);
        when(store.getServicePolicyDeltasOrPolicies(serviceName, -1L)).thenReturn(v2);

        RangerServicePoliciesCache cache = RangerServicePoliciesCache.getInstance();

        ServicePolicies first = cache.getServicePolicies(serviceName, serviceId, -1L, false, store);
        Assertions.assertNotNull(first);
        Assertions.assertEquals(Long.valueOf(2L), first.getPolicyVersion());

        // Now ask for deltas from lastKnownVersion=1 to 2
        ServicePolicies deltas = new ServicePolicies();
        deltas.setServiceName(serviceName);
        deltas.setServiceId(serviceId);
        deltas.setPolicyVersion(2L);
        deltas.setPolicies(Collections.emptyList());
        deltas.setServiceDef(new RangerServiceDef());
        deltas.setPolicyDeltas(Collections.emptyList());

        when(store.getServicePolicyDeltas(serviceName, 1L, 2L)).thenReturn(deltas);

        ServicePolicies ret = cache.getServicePolicies(serviceName, serviceId, 1L, false, store);
        Assertions.assertNotNull(ret);
        Assertions.assertNotNull(ret.getPolicyDeltas());
        Assertions.assertEquals(Long.valueOf(2L), ret.getPolicyVersion());
    }

    @Test
    public void testResetCacheByServiceName() throws Exception {
        ServiceStore store       = Mockito.mock(ServiceStore.class);
        String       serviceName = "svc3";
        Long         serviceId   = 300L;

        ServicePolicies v1 = new ServicePolicies();
        v1.setServiceName(serviceName);
        v1.setServiceId(serviceId);
        v1.setPolicyVersion(1L);
        v1.setPolicies(Collections.emptyList());
        v1.setServiceDef(new RangerServiceDef());

        when(store.getServicePolicyVersion(serviceName)).thenReturn(1L);
        when(store.getServicePolicyDeltasOrPolicies(serviceName, -1L)).thenReturn(v1);

        RangerServicePoliciesCache cache = RangerServicePoliciesCache.getInstance();
        ServicePolicies            first = cache.getServicePolicies(serviceName, serviceId, -1L, false, store);
        Assertions.assertNotNull(first);

        boolean reset = cache.resetCache(serviceName);
        Assertions.assertTrue(reset);
    }
}
