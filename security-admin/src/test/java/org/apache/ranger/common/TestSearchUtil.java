/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletRequest;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SearchUtil
 */

@ExtendWith(MockitoExtension.class)
public class TestSearchUtil {
    @Mock
    private RESTErrorUtil mockRestErrorUtil;

    @Mock
    private RangerConfigUtil mockConfigUtil;

    @Mock
    private StringUtil mockStringUtil;

    private SearchUtil      searchUtil;
    private List<SortField> sortFields;

    @BeforeEach
    public void setUp() {
        searchUtil               = new SearchUtil();
        searchUtil.restErrorUtil = mockRestErrorUtil;
        searchUtil.configUtil    = mockConfigUtil;
        searchUtil.stringUtil    = mockStringUtil;

        // Setup sort fields for testing
        sortFields = new ArrayList<>();
        sortFields.add(new SortField("name", "obj.name", true, SortField.SORT_ORDER.ASC));
        sortFields.add(new SortField("createTime", "obj.createTime", false, SortField.SORT_ORDER.DESC));
    }

    @Test
    public void testExtractIntList() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids", "1,2,3,4,5");

        SearchCriteria criteria              = new SearchCriteria();
        String         paramName             = "ids";
        String         userFriendlyParamName = "IDs";
        String         listName              = "ids";

        List<Integer> result = searchUtil.extractIntList(request, criteria, paramName, userFriendlyParamName, listName);
        assertNotNull(result);
    }

    @Test
    public void testResolveQueryParams() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Query             query          = mock(Query.class);
        SearchCriteria    searchCriteria = new SearchCriteria();
        List<SearchField> searchFields   = new ArrayList<>();
        searchFields.add(new SearchField("name", "obj.name", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.FULL));
        searchFields.add(new SearchField("createTime", "obj.createTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN));

        Method method = SearchUtil.class.getDeclaredMethod("resolveQueryParams", Query.class, SearchCriteria.class, List.class);
        method.setAccessible(true);
        method.invoke(searchUtil, query, searchCriteria, searchFields);
    }

    @Test
    public void testExtractLongList() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids", "1,2,3,4,5");

        SearchCriteria criteria              = new SearchCriteria();
        String         paramName             = "ids";
        String         userFriendlyParamName = "IDs";
        String         listName              = "ids";

        List<Long> result = searchUtil.extractLongList(request, criteria, paramName, userFriendlyParamName, listName);
        assertNotNull(result);
    }

    @Test
    public void testExtractStringList() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("names", "Alice,Bob,Charlie");

        SearchCriteria criteria              = new SearchCriteria();
        String         paramName             = "names";
        String         userFriendlyParamName = "Names";
        String         listName              = "names";
        String[]       validValues           = {"Alice", "Bob", "Charlie"};
        String         regEx                 = "[A-Za-z]+";

        List<String> result = searchUtil.extractStringList(request, criteria, paramName, userFriendlyParamName, listName, validValues, regEx);
        assertNotNull(result);
    }

    @Test
    public void testExtractEnum() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("status", "ACTIVE");

        SearchCriteria criteria              = new SearchCriteria();
        String         paramName             = "status";
        String         userFriendlyParamName = "Status";
        String         listName              = "status";
        int            maxValue              = 10;

        List<Integer> result = searchUtil.extractEnum(request, criteria, paramName, userFriendlyParamName, listName, maxValue);

        assertNotNull(result);
    }

    @Test
    public void testConstructor() {
        SearchUtil util = new SearchUtil();
        // Test that constructor initializes default values
        assertEquals(20, util.minInListLength); // Default value
        assertEquals("MM/dd/yyyy", util.defaultDateFormat); // Default value
    }

    @Test
    public void testUpdateQueryPageSize() {
        Query          query    = mock(Query.class);
        SearchCriteria criteria = new SearchCriteria();
        criteria.setMaxRows(50);

        searchUtil.updateQueryPageSize(query, criteria);
    }

    @Test
    public void testCreateSearchQuery() {
        SearchCriteria searchCriteria = new SearchCriteria();
        searchCriteria.setStartIndex(0);
        searchCriteria.setMaxRows(10);
        searchCriteria.setGetCount(false);
        searchCriteria.setOwnerId(123L);
        searchCriteria.setGetChildren(true);
        searchCriteria.setSortBy("name");
        searchCriteria.setSortType("ASC");

        EntityManager em        = mock(EntityManager.class);
        Query         mockQuery = mock(Query.class);

        // Use flexible matcher
        when(em.createQuery(anyString())).thenReturn(mockQuery);
        when(mockQuery.setParameter(anyString(), any())).thenReturn(mockQuery); // for setting :ownerId
        when(mockQuery.setFirstResult(anyInt())).thenReturn(mockQuery);
        when(mockQuery.setMaxResults(anyInt())).thenReturn(mockQuery);

        String            queryStr      = "SELECT obj FROM MyEntity obj WHERE 1=1";
        String            sortClause    = " ORDER BY obj.name ASC";
        List<SearchField> searchFields  = new ArrayList<>();
        boolean           hasAttributes = false;
        boolean           isCountQuery  = false;

        Query query = searchUtil.createSearchQuery(em, queryStr, sortClause, searchCriteria, searchFields, hasAttributes, isCountQuery);

        assertNotNull(query);
    }

    @Test
    public void testExtractCommonCriterias() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("startIndex", "10");
        request.setParameter("pageSize", "50");
        request.setParameter("getCount", "false");
        request.setParameter("ownerId", "123");
        request.setParameter("getChildren", "true");
        request.setParameter("sortBy", "name");
        request.setParameter("sortType", "ASC");

        when(mockRestErrorUtil.parseInt("10", 0, "Invalid value for parameter startIndex", MessageEnums.INVALID_INPUT_DATA, null, "startIndex")).thenReturn(10);
        when(mockRestErrorUtil.parseBoolean("false", true)).thenReturn(false);
        when(mockRestErrorUtil.parseLong("123", null)).thenReturn(123L);
        when(mockRestErrorUtil.parseBoolean("true", false)).thenReturn(true);
        when(mockRestErrorUtil.validateString("name", StringUtil.VALIDATION_ALPHA, "Invalid value for parameter sortBy", MessageEnums.INVALID_INPUT_DATA, null, "sortBy")).thenReturn("name");
        when(mockRestErrorUtil.validateString("ASC", StringUtil.VALIDATION_ALPHA, "Invalid value for parameter sortType", MessageEnums.INVALID_INPUT_DATA, null, "sortType")).thenReturn("ASC");
        when(mockStringUtil.isEmpty("name")).thenReturn(false);
        when(mockConfigUtil.getDefaultMaxRows()).thenReturn(25);

        SearchCriteria result = searchUtil.extractCommonCriterias(request, sortFields);

        assertNotNull(result);
        assertEquals(10, result.getStartIndex());
        assertFalse(result.isGetCount());
        assertEquals(123L, result.getOwnerId());
        assertTrue(result.isGetChildren());
        assertEquals("name", result.getSortBy());
        assertEquals("ASC", result.getSortType());
    }

    @Test
    public void testExtractCommonCriteriasWithNegativeStartIndex() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("startIndex", "-5");

        when(mockRestErrorUtil.parseInt("-5", 0, "Invalid value for parameter startIndex", MessageEnums.INVALID_INPUT_DATA, null, "startIndex")).thenReturn(-5);
        when(mockConfigUtil.getDefaultMaxRows()).thenReturn(25);

        SearchCriteria result = searchUtil.extractCommonCriterias(request, sortFields);

        assertEquals(0, result.getStartIndex()); // Should be corrected to 0
    }

    @Test
    public void testExtractCommonCriteriasWithInvalidSortBy() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("sortBy", "invalidField");

        when(mockRestErrorUtil.validateString("invalidField", StringUtil.VALIDATION_ALPHA, "Invalid value for parameter sortBy", MessageEnums.INVALID_INPUT_DATA, null, "sortBy")).thenReturn("invalidField");
        when(mockStringUtil.isEmpty("invalidField")).thenReturn(false);
        when(mockConfigUtil.getDefaultMaxRows()).thenReturn(25);

        SearchCriteria result = searchUtil.extractCommonCriterias(request, sortFields);

        assertNull(result.getSortBy()); // Should be null for invalid sort field
    }

    @Test
    public void testExtractLong() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("userId", "123");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseLong("123", "Invalid value for User ID", MessageEnums.INVALID_INPUT_DATA, null, "userId")).thenReturn(123L);

        Long result = searchUtil.extractLong(request, criteria, "userId", "User ID");

        assertEquals(123L, criteria.getParamList().get("userId"));
    }

    @Test
    public void testExtractLongWithNullValue() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("userId", "invalid");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseLong("invalid", "Invalid value for User ID", MessageEnums.INVALID_INPUT_DATA, null, "userId")).thenReturn(null);

        Long result = searchUtil.extractLong(request, criteria, "userId", "User ID");

        assertNull(result);
        assertFalse(criteria.getParamList().containsKey("userId"));
    }

    @Test
    public void testExtractInt() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("count", "50");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseInt("50", "Invalid value for Count", MessageEnums.INVALID_INPUT_DATA, null, "count")).thenReturn(50);

        Integer result = searchUtil.extractInt(request, criteria, "count", "Count");

        assertEquals(50, criteria.getParamList().get("count"));
    }

    @Test
    public void testExtractIntWithNullValue() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("count", "invalid");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseInt("invalid", "Invalid value for Count", MessageEnums.INVALID_INPUT_DATA, null, "count")).thenReturn(null);

        Integer result = searchUtil.extractInt(request, criteria, "count", "Count");

        assertNull(result);
        assertFalse(criteria.getParamList().containsKey("count"));
    }

    @Test
    public void testExtractDate() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("createDate", "01/15/2023");

        SearchCriteria criteria = new SearchCriteria();
        Date           testDate = new Date();

        when(mockRestErrorUtil.parseDate("01/15/2023", "Invalid value for Create Date", MessageEnums.INVALID_INPUT_DATA, null, "createDate", "MM/dd/yyyy")).thenReturn(testDate);

        Date result = searchUtil.extractDate(request, criteria, "createDate", "Create Date", "MM/dd/yyyy");

        assertEquals(testDate, result);
        assertEquals(testDate, criteria.getParamList().get("createDate"));
    }

    @Test
    public void testExtractDateWithDefaultFormat() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("createDate", "01/15/2023");

        SearchCriteria criteria = new SearchCriteria();
        Date           testDate = new Date();

        when(mockRestErrorUtil.parseDate("01/15/2023", "Invalid value for Create Date", MessageEnums.INVALID_INPUT_DATA, null, "createDate", "MM/dd/yyyy")).thenReturn(testDate);

        Date result = searchUtil.extractDate(request, criteria, "createDate", "Create Date", null);

        assertEquals(testDate, result);
    }

    @Test
    public void testExtractRoleString() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("role", "ROLE_USER");

        SearchCriteria criteria = new SearchCriteria();

        when(mockStringUtil.isEmpty("ROLE_USER")).thenReturn(false);
        when(mockStringUtil.isEmpty("[A-Z_]+")).thenReturn(false);
        when(mockRestErrorUtil.validateString("ROLE_USER", "[A-Z_]+", "Invalid value for Role", MessageEnums.INVALID_INPUT_DATA, null, "role")).thenReturn("ROLE_USER");

        String result = searchUtil.extractRoleString(request, criteria, "role", "Role", "[A-Z_]+");

        assertEquals("ROLE_USER", result);
        assertEquals("ROLE_USER", criteria.getParamList().get("role"));
    }

    @Test
    public void testValidatePageSize() {
        when(mockConfigUtil.getDefaultMaxRows()).thenReturn(100);

        assertEquals(50, searchUtil.validatePageSize(50));
        assertEquals(100, searchUtil.validatePageSize(0)); // Should return default
        assertEquals(100, searchUtil.validatePageSize(-1)); // Should return default
    }

    @Test
    public void testGetSqlOperator() {
        assertEquals(" = ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.FULL));
        assertEquals(" like ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.PARTIAL));
        assertEquals(" < ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.LESS_THAN));
        assertEquals(" <= ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.LESS_EQUAL_THAN));
        assertEquals(" > ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.GREATER_THAN));
        assertEquals(" >= ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN));
        assertEquals(" != ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.NOT_EQUALS));
    }

    @Test
    public void testAddOrderByClause() {
        StringBuilder whereClause = new StringBuilder("WHERE 1=1");
        String        sortClause  = " ORDER BY name ASC";

        searchUtil.addOrderByClause(whereClause, sortClause);

        assertEquals("WHERE 1=1 ORDER BY name ASC", whereClause.toString());
    }

    @Test
    public void testAddOrderByClauseWithNull() {
        StringBuilder whereClause = new StringBuilder("WHERE 1=1");

        searchUtil.addOrderByClause(whereClause, null);

        assertEquals("WHERE 1=1", whereClause.toString());
    }

    @Test
    public void testGetParamMultiValues() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids", "1", "2", "3");

        String[] result = searchUtil.getParamMultiValues(request, "ids", "idList");

        assertNotNull(result);
        assertEquals(3, result.length);
        assertEquals("1", result[0]);
        assertEquals("2", result[1]);
        assertEquals("3", result[2]);
    }

    @Test
    public void testGetParamMultiValuesWithBrackets() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("ids[]", "4", "5");

        String[] result = searchUtil.getParamMultiValues(request, "ids", "idList");

        assertNotNull(result);
        assertEquals(2, result.length);
    }

    @Test
    public void testExtractBoolean() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("isActive", "true");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseBoolean("true", "Invalid value for Active Status", MessageEnums.INVALID_INPUT_DATA, null, "isActive")).thenReturn(true);

        Boolean result = searchUtil.extractBoolean(request, criteria, "isActive", "Active Status");

        assertTrue(result);
        assertEquals(true, criteria.getParamList().get("isActive"));
    }

    @Test
    public void testExtractBooleanWithNullValue() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setParameter("isActive", "invalid");

        SearchCriteria criteria = new SearchCriteria();

        when(mockRestErrorUtil.parseBoolean("invalid", "Invalid value for Active Status", MessageEnums.INVALID_INPUT_DATA, null, "isActive")).thenReturn(null);

        Boolean result = searchUtil.extractBoolean(request, criteria, "isActive", "Active Status");

        assertNull(result);
        assertFalse(criteria.getParamList().containsKey("isActive"));
    }

    @Test
    public void testValidatePageSizeWithValidInput() {
        int result = searchUtil.validatePageSize(50);
        assertEquals(50, result);
    }

    @Test
    public void testValidatePageSizeWithInvalidInput() {
        when(mockConfigUtil.getDefaultMaxRows()).thenReturn(25);

        int result = searchUtil.validatePageSize(-1);
        assertEquals(25, result);
    }

    @Test
    public void testGetSqlOperatorForAllTypes() {
        assertEquals(" = ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.FULL));
        assertEquals(" like ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.PARTIAL));
        assertEquals(" < ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.LESS_THAN));
        assertEquals(" <= ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.LESS_EQUAL_THAN));
        assertEquals(" > ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.GREATER_THAN));
        assertEquals(" >= ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN));
        assertEquals(" != ", searchUtil.getSqlOperator(SearchField.SEARCH_TYPE.NOT_EQUALS));
    }

    @Test
    public void testConstructSortClauseWithValidSort() {
        SearchCriteria searchCriteria = new SearchCriteria();
        searchCriteria.setSortBy("name");
        searchCriteria.setSortType("DESC");

        when(mockStringUtil.isEmpty("name")).thenReturn(false);

        String result = searchUtil.constructSortClause(searchCriteria, sortFields);

        assertTrue(result.contains("ORDER BY"));
        assertTrue(result.contains("obj.name"));
    }

    @Test
    public void testConstructSortClauseWithDefaultSort() {
        SearchCriteria searchCriteria = new SearchCriteria();
        searchCriteria.setSortBy("invalidSort");

        when(mockStringUtil.isEmpty("invalidSort")).thenReturn(false);

        String result = searchUtil.constructSortClause(searchCriteria, sortFields);

        assertTrue(result.contains("ORDER BY"));
    }

    @Test
    public void testConstructSortClauseWithNullSort() {
        SearchCriteria searchCriteria = new SearchCriteria();
        searchCriteria.setSortBy(null);

        when(mockStringUtil.isEmpty((String) null)).thenReturn(true);

        String result = searchUtil.constructSortClause(searchCriteria, sortFields);

        assertTrue(result.contains("ORDER BY"));
    }
}
