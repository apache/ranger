/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.common;

import org.apache.ranger.plugin.store.TagStore;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerServiceTagsCacheDeltasCache
 */

public class TestRangerServiceTagsCacheDeltasCache {
    @Test
    public void testDeltaCacheIsUsedWhenAvailable() throws Exception {
        String serviceName = "svc-tag";
        Long   serviceId   = 11L;

        // Setup: First call returns full tags at version 2
        ServiceTags full = new ServiceTags();
        full.setServiceName(serviceName);
        full.setTagVersion(2L);

        // Then when deltas are requested from 1 to 2, TagStore returns a delta object
        ServiceTags delta = new ServiceTags();
        delta.setServiceName(serviceName);
        delta.setTagVersion(2L);
        delta.setIsDelta(Boolean.TRUE);

        TagStore tagStore = Mockito.mock(TagStore.class);
        when(tagStore.getTagVersion(serviceName)).thenReturn(2L);
        when(tagStore.getServiceTags(serviceName, -1L)).thenReturn(full);
        when(tagStore.getServiceTagsDelta(serviceName, 1L)).thenReturn(delta);

        RangerServiceTagsCache cache = RangerServiceTagsCache.getInstance();
        // Reset internal singleton map by clearing and creating wrapper via getServiceTags
        ServiceTags first = cache.getServiceTags(serviceName, serviceId, -1L, false, tagStore);
        Assertions.assertEquals(Long.valueOf(2L), first.getTagVersion());

        // Now ask for deltas; the cache should return the delta object, and re-use cached delta on repeat
        ServiceTags d1 = cache.getServiceTags(serviceName, serviceId, 1L, false, tagStore);
        Assertions.assertEquals(Boolean.TRUE, d1.getIsDelta());

        // Make TagStore return null to ensure cache serves previous delta from memory
        when(tagStore.getServiceTagsDelta(serviceName, 1L)).thenReturn(null);
        ServiceTags d2 = cache.getServiceTags(serviceName, serviceId, 1L, false, tagStore);
        Assertions.assertEquals(Boolean.TRUE, d2.getIsDelta());
    }
}
