/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.json;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

/**
 * @generated by Cursor
 * @description : Unit Test cases for JsonDateSerializer
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestJsonDateSerializer {
    @Mock
    public SerializerProvider provider;

    @Test
    public void test1_serialize_formatsDateAsExpected() throws Exception {
        JsonDateSerializer ser  = new JsonDateSerializer();
        Date               date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse("2020-01-02T03:04:05Z");

        StringWriter  sw  = new StringWriter();
        JsonFactory   jf  = new JsonFactory();
        JsonGenerator gen = jf.createGenerator(sw);

        ser.serialize(date, gen, provider);
        gen.flush();
    }

    @Test
    public void test2_serialize_writesNonNullString() throws Exception {
        JsonDateSerializer ser  = new JsonDateSerializer();
        Date               date = new Date(0L);
        JsonGenerator      gen  = mock(JsonGenerator.class);
        ser.serialize(date, gen, provider);
        verify(gen).writeString(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").format(date));
    }
}
