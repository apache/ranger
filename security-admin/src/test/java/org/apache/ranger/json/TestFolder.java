/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.json;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for Folder
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestFolder {
    @Test
    public void testSettersAndGettersWorkForNameAndChildren() {
        Folder root0 = new Folder();
        root0.setName("root0");
        Folder child = new Folder();
        child.setName("child");
        root0.setFolders(Collections.singletonList(child));
        assertEquals("root0", root0.getName());
        assertNotNull(root0.getFolders());
        assertEquals(1, root0.getFolders().size());
        assertEquals("child", root0.getFolders().get(0).getName());
    }

    @Test
    public void testNestedFoldersMultipleLevels() {
        Folder root1 = new Folder();
        root1.setName("r");
        Folder a = new Folder();
        a.setName("a");
        Folder b = new Folder();
        b.setName("b");
        Folder c = new Folder();
        c.setName("c");
        a.setFolders(Collections.singletonList(c));
        root1.setFolders(Arrays.asList(a, b));
        assertEquals(2, root1.getFolders().size());
        assertEquals("a", root1.getFolders().get(0).getName());
        assertEquals("c", root1.getFolders().get(0).getFolders().get(0).getName());
    }
}
