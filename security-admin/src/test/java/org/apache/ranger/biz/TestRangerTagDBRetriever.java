/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.biz;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXServiceResourceDao;
import org.apache.ranger.db.XXTagDefDao;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceResource;
import org.apache.ranger.entity.XXTagDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.service.RangerServiceResourceService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for TestRangerTagDBRetriever class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerTagDBRetriever {
    private static RangerTagDBRetriever newRetriever(RangerDaoManager daoMgr, PlatformTransactionManager txManager,
            XXService xService) throws Exception {
        Constructor<RangerTagDBRetriever> c = RangerTagDBRetriever.class.getDeclaredConstructor(RangerDaoManager.class,
                PlatformTransactionManager.class, XXService.class);
        c.setAccessible(true);
        return c.newInstance(daoMgr, txManager, xService);
    }

    private static void setLookupCache(RangerTagDBRetriever r, Map<Long, List<RangerTag>> serviceResourceToTags)
            throws Exception {
        Field f = RangerTagDBRetriever.class.getDeclaredField("lookupCache");
        f.setAccessible(true);
        Object lookup = f.get(r);
        Field mapF = lookup.getClass().getDeclaredField("serviceResourceToTags");
        mapF.setAccessible(true);
        mapF.set(lookup, serviceResourceToTags);
    }

    @Test
    public void test01_constructor_withNulls_noInit() throws Exception {
        RangerDaoManager daoMgr = mock(RangerDaoManager.class);
        RangerTagDBRetriever r = newRetriever(daoMgr, null, null);
        Assertions.assertNull(r.getServiceResources());
        Assertions.assertNull(r.getTagDefs());
    }

    @Test
    public void test02_constructor_sameThreadInitialization_success() throws Exception {
        RangerDaoManager daoMgr = mock(RangerDaoManager.class);
        XXServiceResourceDao resDao = mock(XXServiceResourceDao.class);
        XXTagDefDao tagDefDao = mock(XXTagDefDao.class);
        XXPortalUserDao userDao = mock(XXPortalUserDao.class);
        when(daoMgr.getXXServiceResource()).thenReturn(resDao);
        when(daoMgr.getXXTagDef()).thenReturn(tagDefDao);
        // Not needed by current assertions; avoid unnecessary stubbing

        XXService service = new XXService();
        service.setId(5L);
        service.setName("svc");

        List<XXServiceResource> xList = new ArrayList<>();
        XXServiceResource xsr = new XXServiceResource();
        xsr.setId(11L);
        xsr.setGuid("g");
        xsr.setIsEnabled(true);
        xsr.setTags("[]");
        xsr.setServiceResourceElements("{}");
        xList.add(xsr);
        when(resDao.findTaggedResourcesInServiceId(5L)).thenReturn(xList);

        List<XXTagDef> tList = new ArrayList<>();
        XXTagDef td = new XXTagDef();
        td.setId(21L);
        td.setGuid("tg");
        td.setIsEnabled(true);
        td.setName("PII");
        td.setTagAttrDefs("[]");
        tList.add(td);
        when(tagDefDao.findByServiceId(5L)).thenReturn(tList);

        XXPortalUser user = new XXPortalUser();
        user.setId(1L);
        user.setLoginId("u");
        user.setPublicScreenName("User");
        // Not needed by current assertions; avoid unnecessary stubbing

        try (MockedStatic<JsonUtils> mocked = Mockito.mockStatic(JsonUtils.class)) {
            mocked.when(() -> JsonUtils.jsonToObject(any(String.class),
                    Mockito.eq(RangerServiceResourceService.subsumedDataType)))
                    .thenReturn(new HashMap<String, RangerPolicy.RangerPolicyResource>());
            mocked.when(() -> JsonUtils.jsonToObject(any(String.class),
                    Mockito.eq(RangerServiceResourceService.duplicatedDataType)))
                    .thenReturn(new ArrayList<RangerTag>());
            mocked.when(
                    () -> JsonUtils.jsonToObject(any(String.class), Mockito.eq(RangerTagDBRetriever.subsumedDataType)))
                    .thenReturn(new ArrayList<RangerTagDef.RangerTagAttributeDef>());

            RangerTagDBRetriever r = newRetriever(daoMgr, null, service);
            Assertions.assertNotNull(r.getServiceResources());
            Assertions.assertNotNull(r.getTagDefs());
        }
    }

    @Test
    public void test03_getTags_and_resourceToTagIds_emptyAndPopulated() throws Exception {
        RangerDaoManager daoMgr = mock(RangerDaoManager.class);
        RangerTagDBRetriever r = newRetriever(daoMgr, null, null);

        Assertions.assertTrue(r.getTags().isEmpty());
        Assertions.assertTrue(r.getResourceToTagIds().isEmpty());

        // inject serviceResources and lookupCache content
        Field srF = RangerTagDBRetriever.class.getDeclaredField("serviceResources");
        srF.setAccessible(true);
        List<RangerServiceResource> srs = new ArrayList<>();
        RangerServiceResource rs = new RangerServiceResource();
        rs.setId(100L);
        srs.add(rs);
        srF.set(r, srs);

        RangerTag tag = new RangerTag();
        tag.setId(501L);
        Map<Long, List<RangerTag>> map = new HashMap<>();
        map.put(100L, new ArrayList<>(Collections.singletonList(tag)));
        setLookupCache(r, map);

        Map<Long, RangerTag> tags = r.getTags();
        Assertions.assertEquals(1, tags.size());
        Assertions.assertTrue(tags.containsKey(501L));

        Map<Long, List<Long>> r2t = r.getResourceToTagIds();
        Assertions.assertEquals(1, r2t.size());
        Assertions.assertEquals(1, r2t.get(100L).size());
        Assertions.assertEquals(501L, r2t.get(100L).get(0));
    }

    @Test
    public void test04_constructor_separateThreadInitialization() throws Exception {
        RangerDaoManager daoMgr = mock(RangerDaoManager.class);
        PlatformTransactionManager txMgr = mock(PlatformTransactionManager.class);
        TransactionTemplate tmpl = new TransactionTemplate(txMgr);
        XXService service = new XXService();
        service.setId(9L);
        service.setName("svc9");

        XXServiceResourceDao resDao = mock(XXServiceResourceDao.class);
        XXTagDefDao tagDefDao = mock(XXTagDefDao.class);
        XXPortalUserDao userDao = mock(XXPortalUserDao.class);
        when(daoMgr.getXXServiceResource()).thenReturn(resDao);
        when(daoMgr.getXXTagDef()).thenReturn(tagDefDao);
        // Not needed for current path; avoid unnecessary stubbing

        when(resDao.findTaggedResourcesInServiceId(9L)).thenReturn(new ArrayList<XXServiceResource>());
        when(tagDefDao.findByServiceId(9L)).thenReturn(new ArrayList<XXTagDef>());

        RangerTagDBRetriever r = newRetriever(daoMgr, txMgr, service);
        // After separate thread initialization, collections should be non-null (possibly empty)
        Assertions.assertNotNull(r.getServiceResources());
        Assertions.assertNotNull(r.getTagDefs());
    }
}
