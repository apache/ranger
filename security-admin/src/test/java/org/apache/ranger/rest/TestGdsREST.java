/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.rest;

import org.apache.ranger.biz.AssetMgr;
import org.apache.ranger.biz.GdsDBStore;
import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerSearchUtil;
import org.apache.ranger.common.ServiceUtil;
import org.apache.ranger.plugin.model.RangerGds;
import org.apache.ranger.plugin.model.RangerGrant;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicyHeader;
import org.apache.ranger.plugin.model.RangerPrincipal;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.plugin.util.ServiceGdsInfo;
import org.apache.ranger.service.RangerGdsDataShareInDatasetService;
import org.apache.ranger.service.RangerGdsDataShareService;
import org.apache.ranger.service.RangerGdsDatasetInProjectService;
import org.apache.ranger.service.RangerGdsDatasetService;
import org.apache.ranger.service.RangerGdsProjectService;
import org.apache.ranger.service.RangerGdsSharedResourceService;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestGdsREST class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGdsREST {
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private final String             serviceDefHive = "hive";
    private final String             serviceDefTag  = "tag";
    private final String             serviceHive     = "dev_hive";
    private final Random             random           = new Random();
    @InjectMocks
    private GdsREST  gdsREST;
    @InjectMocks
    GdsDBStore       gdsDBStore;
    @Mock
    ServiceREST      serviceREST;
    @Mock
    GdsDBStore       gdsStore;
    @Mock
    RESTErrorUtil    restErrorUtil;
    @Mock
    RangerSearchUtil searchUtil;
    @Mock
    RangerBizUtil    bizUtil;
    @Mock
    ServiceUtil      serviceUtil;
    @Mock
    ServiceDBStore   serviceDBStore;
    @Mock
    AssetMgr         assetMgr;
    @Mock
    RangerGdsDatasetService datasetService;
    @Mock
    RangerGdsProjectService projectService;
    @Mock
    RangerGdsDataShareService dataShareService;
    @Mock
    RangerGdsSharedResourceService sharedResourceService;
    @Mock
    RangerGdsDataShareInDatasetService dshidService;
    @Mock
    RangerGdsDatasetInProjectService dipService;

    @Test
    public void testCreateDataset() {
        RangerGds.RangerDataset dataset = createRangerDataSet();
        RangerGds.RangerDataset expected = createRangerDataSet();
        expected.setId(1L);

        when(gdsStore.createDataset(dataset)).thenReturn(expected);

        RangerGds.RangerDataset result = gdsREST.createDataset(dataset);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).createDataset(dataset);
    }

    @Test
    public void testCreateDatasetException() {
        RangerGds.RangerDataset dataset = createRangerDataSet();

        when(gdsStore.createDataset(dataset)).thenThrow(new RuntimeException("Database error"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.createDataset(dataset));
    }

    @Test
    public void testAddDataSharesInDataset() throws Exception {
        Long datasetId = 1L;
        List<RangerGds.RangerDataShareInDataset> dataSharesInDataset = Arrays.asList(createDataShareInDataset(datasetId));
        List<RangerGds.RangerDataShareInDataset> expected = Arrays.asList(createDataShareInDataset(datasetId));

        when(gdsStore.addDataSharesInDataset(dataSharesInDataset)).thenReturn(expected);

        List<RangerGds.RangerDataShareInDataset> result = gdsREST.addDataSharesInDataset(datasetId, dataSharesInDataset);

        assertNotNull(result);
        assertEquals(expected.size(), result.size());
        verify(gdsStore).addDataSharesInDataset(dataSharesInDataset);
    }

    @Test
    public void testAddDataSharesInDatasetInvalidDatasetId() {
        Long datasetId = 1L;
        RangerGds.RangerDataShareInDataset invalidDataShare = createDataShareInDataset(2L);
        List<RangerGds.RangerDataShareInDataset> dataSharesInDataset = Arrays.asList(invalidDataShare);

        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_BAD_REQUEST), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDataSharesInDataset(datasetId, dataSharesInDataset));
    }

    @Test
    public void testUpdateDataset() throws Exception {
        Long datasetId = 1L;
        RangerGds.RangerDataset dataset = createRangerDataSet();
        RangerGds.RangerDataset expected = createRangerDataSet();
        expected.setId(datasetId);

        when(gdsStore.updateDataset(any(RangerGds.RangerDataset.class))).thenReturn(expected);

        RangerGds.RangerDataset result = gdsREST.updateDataset(datasetId, dataset);

        assertNotNull(result);
        assertEquals(datasetId, result.getId());
        verify(gdsStore).updateDataset(any(RangerGds.RangerDataset.class));
    }

    @Test
    public void testUpdateDatasetException() throws Exception {
        when(gdsStore.updateDataset(any(RangerGds.RangerDataset.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateDataset(1L, createRangerDataSet()));
    }

    @Test
    public void testDeleteDataset() throws Exception {
        Long datasetId = 1L;

        doNothing().when(gdsStore).deleteDataset(datasetId, false);

        gdsREST.deleteDataset(datasetId, request);

        verify(gdsStore).deleteDataset(datasetId, false);
    }

    @Test
    public void testDeleteDatasetException() throws Exception {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).deleteDataset(Mockito.anyLong(), Mockito.anyBoolean());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.deleteDataset(1L, request));
    }

    @Test
    public void testDeleteDatasetForceDelete() throws Exception {
        Long datasetId = 1L;

        when(request.getParameter("forceDelete")).thenReturn("true");
        doNothing().when(gdsStore).deleteDataset(datasetId, true);

        gdsREST.deleteDataset(datasetId, request);

        verify(gdsStore).deleteDataset(datasetId, true);
    }

    @Test
    public void testGetDataset() throws Exception {
        Long datasetId = 1L;
        RangerGds.RangerDataset expected = createRangerDataSet();
        expected.setId(datasetId);

        when(gdsStore.getDataset(datasetId)).thenReturn(expected);

        RangerGds.RangerDataset result = gdsREST.getDataset(datasetId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getDataset(datasetId);
    }

    @Test
    public void testGetDatasetException() throws Exception {
        when(gdsStore.getDataset(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataset(1L));
    }

    @Test
    public void testGetDatasetNotFound() throws Exception {
        Long datasetId = 1L;

        when(gdsStore.getDataset(datasetId)).thenReturn(null);
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_FOUND), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataset(datasetId));
    }

    @Test
    public void testSearchDatasets() {
        PList<RangerGds.RangerDataset> expected = new PList<>();
        expected.setList(Arrays.asList(createRangerDataSet()));
        SearchFilter filter = new SearchFilter();

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDatasets(filter)).thenReturn(expected);

        PList<RangerGds.RangerDataset> result = gdsREST.searchDatasets(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchDatasets(filter);
    }

    @Test
    public void testSearchDatasetsException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDatasets(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.searchDatasets(request));
    }

    @Test
    public void testListDatasetNames() {
        PList<String> expected = new PList<>();
        expected.setList(Arrays.asList("dataset1", "dataset2"));
        SearchFilter filter = new SearchFilter();

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDatasetNames(filter)).thenReturn(expected);

        PList<String> result = gdsREST.listDatasetNames(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).getDatasetNames(filter);
    }

    @Test
    public void testGetDatasetSummary() throws Exception {
        PList<RangerGds.DatasetSummary> expected = new PList<>();
        expected.setList(Arrays.asList(new RangerGds.DatasetSummary()));
        SearchFilter filter = new SearchFilter();

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDatasetSummary(filter)).thenReturn(expected);

        PList<RangerGds.DatasetSummary> result = gdsREST.getDatasetSummary(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).getDatasetSummary(filter);
    }

    @Test
    public void testGetEnhancedDatasetSummary() throws Exception {
        SearchFilter filter = new SearchFilter();
        RangerGds.DatasetsSummary expected = new RangerGds.DatasetsSummary();

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getEnhancedDatasetSummary(filter)).thenReturn(expected);

        RangerGds.DatasetsSummary result = gdsREST.getEnhancedDatasetSummary(request);

        assertNotNull(result);
        verify(gdsStore).getEnhancedDatasetSummary(filter);
    }

    @Test
    public void testAddDatasetPolicy() throws Exception {
        Long datasetId = 1L;
        RangerPolicy policy = createPolicy();
        RangerPolicy expected = createPolicy();
        expected.setId(1L);

        when(gdsStore.addDatasetPolicy(datasetId, policy)).thenReturn(expected);

        RangerPolicy result = gdsREST.addDatasetPolicy(datasetId, policy);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).addDatasetPolicy(datasetId, policy);
    }

    @Test
    public void testAddDatasetPolicyException() throws Exception {
        when(gdsStore.addDatasetPolicy(Mockito.anyLong(), any(RangerPolicy.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.addDatasetPolicy(1L, createPolicy()));
    }

    @Test
    public void testUpdateDatasetPolicy() throws Exception {
        Long datasetId = 1L;
        Long policyId = 2L;
        RangerPolicy policy = createPolicy();
        RangerPolicy expected = createPolicy();
        expected.setId(policyId);

        when(gdsStore.updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class))).thenReturn(expected);

        RangerPolicy result = gdsREST.updateDatasetPolicy(datasetId, policyId, policy);

        assertNotNull(result);
        assertEquals(policyId, result.getId());
        verify(gdsStore).updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class));
    }

    @Test
    public void testUpdateDatasetPolicyException() throws Exception {
        when(gdsStore.updateDatasetPolicy(Mockito.anyLong(), any(RangerPolicy.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateDatasetPolicy(1L, 2L, createPolicy()));
    }

    @Test
    public void testDeleteDatasetPolicy() throws Exception {
        Long datasetId = 1L;
        Long policyId = 2L;

        doNothing().when(gdsStore).deleteDatasetPolicy(datasetId, policyId);

        gdsREST.deleteDatasetPolicy(datasetId, policyId);

        verify(gdsStore).deleteDatasetPolicy(datasetId, policyId);
    }

    @Test
    public void testDeleteDatasetPolicyException() throws Exception {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).deleteDatasetPolicy(Mockito.anyLong(), Mockito.anyLong());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.deleteDatasetPolicy(1L, 2L));
    }

    @Test
    public void testGetDatasetPolicy() throws Exception {
        Long datasetId = 1L;
        Long policyId = 2L;
        RangerPolicy expected = createPolicy();
        expected.setId(policyId);

        when(gdsStore.getDatasetPolicy(datasetId, policyId)).thenReturn(expected);

        RangerPolicy result = gdsREST.getDatasetPolicy(datasetId, policyId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getDatasetPolicy(datasetId, policyId);
    }

    @Test
    public void testGetDatasetPolicyException() throws Exception {
        when(gdsStore.getDatasetPolicy(Mockito.anyLong(), Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDatasetPolicy(1L, 2L));
    }

    @Test
    public void testGetDatasetPolicies() throws Exception {
        Long datasetId = 1L;
        List<RangerPolicy> expected = Arrays.asList(createPolicy(), createPolicy());

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(expected);

        List<RangerPolicy> result = gdsREST.getDatasetPolicies(datasetId, request);

        assertNotNull(result);
        assertEquals(expected.size(), result.size());
        verify(gdsStore).getDatasetPolicies(datasetId);
    }

    @Test
    public void testGetDatasetPoliciesException() {
        when(gdsStore.getDatasetPolicies(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDatasetPolicies(1L, request));
    }

    @Test
    public void testCreateProject() {
        RangerGds.RangerProject project = createProject();
        RangerGds.RangerProject expected = createProject();
        expected.setId(1L);

        when(gdsStore.createProject(project)).thenReturn(expected);

        RangerGds.RangerProject result = gdsREST.createProject(project);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).createProject(project);
    }

    @Test
    public void testCreateProjectException() {
        when(gdsStore.createProject(any(RangerGds.RangerProject.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.createProject(createProject()));
    }

    @Test
    public void testUpdateProject() throws Exception {
        Long projectId = 1L;
        RangerGds.RangerProject project = createProject();
        RangerGds.RangerProject expected = createProject();
        expected.setId(projectId);

        when(gdsStore.updateProject(any(RangerGds.RangerProject.class))).thenReturn(expected);

        RangerGds.RangerProject result = gdsREST.updateProject(projectId, project);

        assertNotNull(result);
        assertEquals(projectId, result.getId());
        verify(gdsStore).updateProject(any(RangerGds.RangerProject.class));
    }

    @Test
    public void testUpdateProjectException() throws Exception {
        when(gdsStore.updateProject(any(RangerGds.RangerProject.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateProject(1L, createProject()));
    }

    @Test
    public void testDeleteProject() throws Exception {
        Long projectId = 1L;

        doNothing().when(gdsStore).deleteProject(projectId, false);

        gdsREST.deleteProject(projectId, request);

        verify(gdsStore).deleteProject(projectId, false);
    }

    @Test
    public void testDeleteProjectException() throws Exception {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).deleteProject(Mockito.anyLong(), Mockito.anyBoolean());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.deleteProject(1L, request));
    }

    @Test
    public void testGetProject() throws Exception {
        Long projectId = 1L;
        RangerGds.RangerProject expected = createProject();
        expected.setId(projectId);

        when(gdsStore.getProject(projectId)).thenReturn(expected);

        RangerGds.RangerProject result = gdsREST.getProject(projectId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getProject(projectId);
    }

    @Test
    public void testGetProjectException() throws Exception {
        when(gdsStore.getProject(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getProject(1L));
    }

    @Test
    public void testGetProjectNotFound() throws Exception {
        Long projectId = 1L;

        when(gdsStore.getProject(projectId)).thenReturn(null);
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_FOUND), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getProject(projectId));
    }

    @Test
    public void testSearchProjects() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.RangerProject> expected = new PList<>();
        expected.setList(Arrays.asList(createProject()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchProjects(filter)).thenReturn(expected);

        PList<RangerGds.RangerProject> result = gdsREST.searchProjects(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchProjects(filter);
    }

    @Test
    public void testSearchProjectsException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchProjects(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.searchProjects(request));
    }

    @Test
    public void testListProjectNames() {
        SearchFilter filter = new SearchFilter();
        PList<String> expected = new PList<>();
        expected.setList(Arrays.asList("project1", "project2"));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getProjectNames(filter)).thenReturn(expected);

        PList<String> result = gdsREST.listProjectNames(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).getProjectNames(filter);
    }

    @Test
    public void testAddProjectPolicy() throws Exception {
        Long projectId = 1L;
        RangerPolicy policy = createPolicy();
        RangerPolicy expected = createPolicy();
        expected.setId(1L);

        when(gdsStore.addProjectPolicy(projectId, policy)).thenReturn(expected);

        RangerPolicy result = gdsREST.addProjectPolicy(projectId, policy);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).addProjectPolicy(projectId, policy);
    }

    @Test
    public void testUpdateProjectPolicy() throws Exception {
        Long projectId = 1L;
        Long policyId = 2L;
        RangerPolicy policy = createPolicy();
        RangerPolicy expected = createPolicy();
        expected.setId(policyId);

        when(gdsStore.updateProjectPolicy(eq(projectId), any(RangerPolicy.class))).thenReturn(expected);

        RangerPolicy result = gdsREST.updateProjectPolicy(projectId, policyId, policy);

        assertNotNull(result);
        assertEquals(policyId, result.getId());
        verify(gdsStore).updateProjectPolicy(eq(projectId), any(RangerPolicy.class));
    }

    @Test
    public void testDeleteProjectPolicy() throws Exception {
        Long projectId = 1L;
        Long policyId = 2L;

        doNothing().when(gdsStore).deleteProjectPolicy(projectId, policyId);

        gdsREST.deleteProjectPolicy(projectId, policyId);

        verify(gdsStore).deleteProjectPolicy(projectId, policyId);
    }

    @Test
    public void testDeleteProjectPolicyException() throws Exception {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).deleteProjectPolicy(Mockito.anyLong(), Mockito.anyLong());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.deleteProjectPolicy(1L, 2L));
    }

    @Test
    public void testGetProjectPolicy() throws Exception {
        Long projectId = 1L;
        Long policyId = 2L;
        RangerPolicy expected = createPolicy();
        expected.setId(policyId);

        when(gdsStore.getProjectPolicy(projectId, policyId)).thenReturn(expected);

        RangerPolicy result = gdsREST.getProjectPolicy(projectId, policyId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getProjectPolicy(projectId, policyId);
    }

    @Test
    public void testGetProjectPolicyException() throws Exception {
        when(gdsStore.getProjectPolicy(Mockito.anyLong(), Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getProjectPolicy(1L, 2L));
    }

    @Test
    public void testGetProjectPolicies() throws Exception {
        Long projectId = 1L;
        List<RangerPolicy> expected = Arrays.asList(createPolicy(), createPolicy());

        when(gdsStore.getProjectPolicies(projectId)).thenReturn(expected);

        List<RangerPolicy> result = gdsREST.getProjectPolicies(projectId, request);

        assertNotNull(result);
        assertEquals(expected.size(), result.size());
        verify(gdsStore).getProjectPolicies(projectId);
    }

    @Test
    public void testGetProjectPoliciesException() {
        when(gdsStore.getProjectPolicies(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getProjectPolicies(1L, request));
    }

    @Test
    public void testCreateDataShare() {
        RangerGds.RangerDataShare dataShare = createDataShare();
        RangerGds.RangerDataShare expected = createDataShare();
        expected.setId(1L);

        when(gdsStore.createDataShare(dataShare)).thenReturn(expected);

        RangerGds.RangerDataShare result = gdsREST.createDataShare(dataShare);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).createDataShare(dataShare);
    }

    @Test
    public void testCreateDataShareException() {
        when(gdsStore.createDataShare(any(RangerGds.RangerDataShare.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.createDataShare(createDataShare()));
    }

    @Test
    public void testUpdateDataShare() {
        Long dataShareId = 1L;
        RangerGds.RangerDataShare dataShare = createDataShare();
        RangerGds.RangerDataShare expected = createDataShare();
        expected.setId(dataShareId);

        when(gdsStore.updateDataShare(any(RangerGds.RangerDataShare.class))).thenReturn(expected);

        RangerGds.RangerDataShare result = gdsREST.updateDataShare(dataShareId, dataShare);

        assertNotNull(result);
        assertEquals(dataShareId, result.getId());
        verify(gdsStore).updateDataShare(any(RangerGds.RangerDataShare.class));
    }

    @Test
    public void testUpdateDataShareException() {
        when(gdsStore.updateDataShare(any(RangerGds.RangerDataShare.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateDataShare(1L, createDataShare()));
    }

    @Test
    public void testDeleteDataShare() {
        Long dataShareId = 1L;

        when(request.getParameter("forceDelete")).thenReturn("false");
        doNothing().when(gdsStore).deleteDataShare(dataShareId, false);

        gdsREST.deleteDataShare(dataShareId, request);

        verify(gdsStore).deleteDataShare(dataShareId, false);
    }

    @Test
    public void testDeleteDataShareException() {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).deleteDataShare(Mockito.anyLong(), Mockito.anyBoolean());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.deleteDataShare(1L, request));
    }

    @Test
    public void testDeleteDataShareForceDelete() {
        Long dataShareId = 1L;

        when(request.getParameter("forceDelete")).thenReturn("true");
        doNothing().when(gdsStore).deleteDataShare(dataShareId, true);

        gdsREST.deleteDataShare(dataShareId, request);

        verify(gdsStore).deleteDataShare(dataShareId, true);
    }

    @Test
    public void testGetDataShare() throws Exception {
        Long dataShareId = 1L;
        RangerGds.RangerDataShare expected = createDataShare();
        expected.setId(dataShareId);

        when(gdsStore.getDataShare(dataShareId)).thenReturn(expected);

        RangerGds.RangerDataShare result = gdsREST.getDataShare(dataShareId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getDataShare(dataShareId);
    }

    @Test
    public void testGetDataShareException() throws Exception {
        when(gdsStore.getDataShare(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataShare(1L));
    }

    @Test
    public void testGetDataShareNotFound() throws Exception {
        Long dataShareId = 1L;

        when(gdsStore.getDataShare(dataShareId)).thenReturn(null);
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_FOUND), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataShare(dataShareId));
    }

    @Test
    public void testSearchDataShares() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.RangerDataShare> expected = new PList<>();
        expected.setList(Arrays.asList(createDataShare()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDataShares(filter)).thenReturn(expected);

        PList<RangerGds.RangerDataShare> result = gdsREST.searchDataShares(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchDataShares(filter);
    }

    @Test
    public void testSearchDataSharesException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, dataShareService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDataShares(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.searchDataShares(request));
    }

    @Test
    public void testGetDataShareSummary() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.DataShareSummary> expected = new PList<>();
        expected.setList(Arrays.asList(new RangerGds.DataShareSummary()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDataShareSummary(filter)).thenReturn(expected);

        PList<RangerGds.DataShareSummary> result = gdsREST.getDataShareSummary(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).getDataShareSummary(filter);
    }

    @Test
    public void testGetDataShareSummaryException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, dataShareService.sortFields)).thenReturn(filter);
        when(gdsStore.getDataShareSummary(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataShareSummary(request));
    }

    @Test
    public void testAddSharedResources() {
        List<RangerGds.RangerSharedResource> resources = Arrays.asList(createSharedResource(), createSharedResource());
        List<RangerGds.RangerSharedResource> expected = Arrays.asList(createSharedResource(), createSharedResource());

        when(gdsStore.addSharedResources(resources)).thenReturn(expected);

        List<RangerGds.RangerSharedResource> result = gdsREST.addSharedResources(resources);

        assertNotNull(result);
        assertEquals(expected.size(), result.size());
        verify(gdsStore).addSharedResources(resources);
    }

    @Test
    public void testAddSharedResourcesException() {
        when(gdsStore.addSharedResources(any(List.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        List<RangerGds.RangerSharedResource> resources = Collections.singletonList(createSharedResource());
        assertThrows(WebApplicationException.class, () -> gdsREST.addSharedResources(resources));
    }

    @Test
    public void testUpdateSharedResource() {
        Long resourceId = 1L;
        RangerGds.RangerSharedResource resource = createSharedResource();
        RangerGds.RangerSharedResource expected = createSharedResource();
        expected.setId(resourceId);

        when(gdsStore.updateSharedResource(any(RangerGds.RangerSharedResource.class))).thenReturn(expected);

        RangerGds.RangerSharedResource result = gdsREST.updateSharedResource(resourceId, resource);

        assertNotNull(result);
        assertEquals(resourceId, result.getId());
        verify(gdsStore).updateSharedResource(any(RangerGds.RangerSharedResource.class));
    }

    @Test
    public void testUpdateSharedResourceException() {
        when(gdsStore.updateSharedResource(any(RangerGds.RangerSharedResource.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateSharedResource(1L, createSharedResource()));
    }

    @Test
    public void testRemoveSharedResource() {
        Long resourceId = 1L;

        doNothing().when(gdsStore).removeSharedResources(Arrays.asList(resourceId));

        gdsREST.removeSharedResource(resourceId);

        verify(gdsStore).removeSharedResources(Arrays.asList(resourceId));
    }

    @Test
    public void testRemoveSharedResourceException() {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).removeSharedResources(any(List.class));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.removeSharedResource(1L));
    }

    @Test
    public void testRemoveSharedResources() {
        List<Long> resourceIds = Arrays.asList(1L, 2L, 3L);

        doNothing().when(gdsStore).removeSharedResources(resourceIds);

        gdsREST.removeSharedResources(resourceIds);

        verify(gdsStore).removeSharedResources(resourceIds);
    }

    @Test
    public void testRemoveSharedResourcesException() {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).removeSharedResources(any(List.class));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.removeSharedResources(Collections.singletonList(1L)));
    }

    @Test
    public void testRemoveSharedResourcesBatchSizeExceeded() {
        List<Long> resourceIds = new ArrayList<>();
        for (long i = 0; i < 101; i++) {
            resourceIds.add(i);
        }
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.removeSharedResources(resourceIds));
    }

    @Test
    public void testGetSharedResource() {
        Long resourceId = 1L;
        RangerGds.RangerSharedResource expected = createSharedResource();
        expected.setId(resourceId);

        when(gdsStore.getSharedResource(resourceId)).thenReturn(expected);

        RangerGds.RangerSharedResource result = gdsREST.getSharedResource(resourceId);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getSharedResource(resourceId);
    }

    @Test
    public void testGetSharedResourceException() {
        when(gdsStore.getSharedResource(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getSharedResource(1L));
    }

    @Test
    public void testGetSharedResourceNotFound() {
        Long resourceId = 1L;

        when(gdsStore.getSharedResource(resourceId)).thenReturn(null);
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_FOUND), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getSharedResource(resourceId));
    }

    @Test
    public void testSearchSharedResources() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.RangerSharedResource> expected = new PList<>();
        expected.setList(Arrays.asList(createSharedResource()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchSharedResources(filter)).thenReturn(expected);

        PList<RangerGds.RangerSharedResource> result = gdsREST.searchSharedResources(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchSharedResources(filter);
    }

    @Test
    public void testSearchSharedResourcesException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, sharedResourceService.sortFields)).thenReturn(filter);
        when(gdsStore.searchSharedResources(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.searchSharedResources(request));
    }

    @Test
    public void testAddDataShareInDataset() throws Exception {
        RangerGds.RangerDataShareInDataset dataShareInDataset = createDataShareInDataset(1L);
        RangerGds.RangerDataShareInDataset expected = createDataShareInDataset(1L);
        expected.setId(1L);

        when(gdsStore.addDataShareInDataset(dataShareInDataset)).thenReturn(expected);

        RangerGds.RangerDataShareInDataset result = gdsREST.addDataShareInDataset(dataShareInDataset);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).addDataShareInDataset(dataShareInDataset);
    }

    @Test
    public void testAddDataShareInDatasetException() throws Exception {
        when(gdsStore.addDataShareInDataset(any(RangerGds.RangerDataShareInDataset.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.addDataShareInDataset(createDataShareInDataset(1L)));
    }

    @Test
    public void testUpdateDataShareInDataset() {
        Long id = 1L;
        RangerGds.RangerDataShareInDataset dataShareInDataset = createDataShareInDataset(1L);
        RangerGds.RangerDataShareInDataset expected = createDataShareInDataset(1L);
        expected.setId(id);

        when(gdsStore.updateDataShareInDataset(any(RangerGds.RangerDataShareInDataset.class))).thenReturn(expected);

        RangerGds.RangerDataShareInDataset result = gdsREST.updateDataShareInDataset(id, dataShareInDataset);

        assertNotNull(result);
        assertEquals(id, result.getId());
        verify(gdsStore).updateDataShareInDataset(any(RangerGds.RangerDataShareInDataset.class));
    }

    @Test
    public void testUpdateDataShareInDatasetException() {
        when(gdsStore.updateDataShareInDataset(any(RangerGds.RangerDataShareInDataset.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updateDataShareInDataset(1L, createDataShareInDataset(1L)));
    }

    @Test
    public void testRemoveDataShareInDataset() {
        Long id = 1L;

        doNothing().when(gdsStore).removeDataShareInDataset(id);

        gdsREST.removeDataShareInDataset(id);

        verify(gdsStore).removeDataShareInDataset(id);
    }

    @Test
    public void testRemoveDataShareInDatasetException() {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).removeDataShareInDataset(Mockito.anyLong());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.removeDataShareInDataset(1L));
    }

    @Test
    public void testGetDataShareInDataset() {
        Long id = 1L;
        RangerGds.RangerDataShareInDataset expected = createDataShareInDataset(1L);
        expected.setId(id);

        when(gdsStore.getDataShareInDataset(id)).thenReturn(expected);

        RangerGds.RangerDataShareInDataset result = gdsREST.getDataShareInDataset(id);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getDataShareInDataset(id);
    }

    @Test
    public void testGetDataShareInDatasetException() {
        when(gdsStore.getDataShareInDataset(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDataShareInDataset(1L));
    }

    @Test
    public void testSearchDataShareInDatasets() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.RangerDataShareInDataset> expected = new PList<>();
        expected.setList(Arrays.asList(createDataShareInDataset(1L)));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDataShareInDatasets(filter)).thenReturn(expected);

        PList<RangerGds.RangerDataShareInDataset> result = gdsREST.searchDataShareInDatasets(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchDataShareInDatasets(filter);
    }

    @Test
    public void testSearchDataShareInDatasetsException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, dshidService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDataShareInDatasets(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.searchDataShareInDatasets(request));
    }

    @Test
    public void testGetDshInDsSummary() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.DataShareInDatasetSummary> expected = new PList<>();
        expected.setList(Arrays.asList(new RangerGds.DataShareInDatasetSummary()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDshInDsSummary(filter)).thenReturn(expected);

        PList<RangerGds.DataShareInDatasetSummary> result = gdsREST.getDshInDsSummary(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).getDshInDsSummary(filter);
    }

    @Test
    public void testGetDshInDsSummaryException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, dshidService.sortFields)).thenReturn(filter);
        when(gdsStore.getDshInDsSummary(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.getDshInDsSummary(request));
    }

    @Test
    public void testAddDatasetInProject() throws Exception {
        RangerGds.RangerDatasetInProject datasetInProject = createDatasetInProject();
        RangerGds.RangerDatasetInProject expected = createDatasetInProject();
        expected.setId(1L);

        when(gdsStore.addDatasetInProject(datasetInProject)).thenReturn(expected);

        RangerGds.RangerDatasetInProject result = gdsREST.addDatasetInProject(datasetInProject);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).addDatasetInProject(datasetInProject);
    }

    @Test
    public void testAddDatasetInProjectException() throws Exception {
        when(gdsStore.addDatasetInProject(any(RangerGds.RangerDatasetInProject.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.addDatasetInProject(createDatasetInProject()));
    }

    @Test
    public void testUpdateDatasetInProject() {
        Long id = 1L;
        RangerGds.RangerDatasetInProject datasetInProject = createDatasetInProject();
        RangerGds.RangerDatasetInProject expected = createDatasetInProject();
        expected.setId(id);

        when(gdsStore.updateDatasetInProject(any(RangerGds.RangerDatasetInProject.class))).thenReturn(expected);

        RangerGds.RangerDatasetInProject result = gdsREST.updateDatasetInProject(id, datasetInProject);

        assertNotNull(result);
        assertEquals(id, result.getId());
        verify(gdsStore).updateDatasetInProject(any(RangerGds.RangerDatasetInProject.class));
    }

    @Test
    public void testUpdateDatasetInProjectException() {
        when(gdsStore.updateDatasetInProject(any(RangerGds.RangerDatasetInProject.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.updateDatasetInProject(1L, createDatasetInProject()));
    }

    @Test
    public void testRemoveDatasetInProject() {
        Long id = 1L;

        doNothing().when(gdsStore).removeDatasetInProject(id);

        gdsREST.removeDatasetInProject(id);

        verify(gdsStore).removeDatasetInProject(id);
    }

    @Test
    public void testRemoveDatasetInProjectException() {
        Mockito.doThrow(new RuntimeException("err")).when(gdsStore).removeDatasetInProject(Mockito.anyLong());
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.removeDatasetInProject(1L));
    }

    @Test
    public void testGetDatasetInProject() {
        Long id = 1L;
        RangerGds.RangerDatasetInProject expected = createDatasetInProject();
        expected.setId(id);

        when(gdsStore.getDatasetInProject(id)).thenReturn(expected);

        RangerGds.RangerDatasetInProject result = gdsREST.getDatasetInProject(id);

        assertNotNull(result);
        assertEquals(expected.getId(), result.getId());
        verify(gdsStore).getDatasetInProject(id);
    }

    @Test
    public void testGetDatasetInProjectException() {
        when(gdsStore.getDatasetInProject(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.getDatasetInProject(1L));
    }

    @Test
    public void testSearchDatasetInProjects() {
        SearchFilter filter = new SearchFilter();
        PList<RangerGds.RangerDatasetInProject> expected = new PList<>();
        expected.setList(Arrays.asList(createDatasetInProject()));

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDatasetInProjects(filter)).thenReturn(expected);

        PList<RangerGds.RangerDatasetInProject> result = gdsREST.searchDatasetInProjects(request);

        assertNotNull(result);
        assertEquals(expected.getList().size(), result.getList().size());
        verify(gdsStore).searchDatasetInProjects(filter);
    }

    @Test
    public void testSearchDatasetInProjectsException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, dipService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDatasetInProjects(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.searchDatasetInProjects(request));
    }

    @Test
    public void testGetServiceGdsInfoIfUpdated() throws Exception {
        String serviceName = "testService";
        Long lastKnownVersion = 1L;
        Long lastActivationTime = 0L;
        String pluginId = "plugin1";
        String clusterName = "cluster1";
        String pluginCapabilities = "capabilities";

        ServiceGdsInfo expected = new ServiceGdsInfo();
        expected.setGdsVersion(2L);

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenReturn(expected);

        ServiceGdsInfo result = gdsREST.getServiceGdsInfoIfUpdated(serviceName, lastKnownVersion,
                lastActivationTime, pluginId, clusterName, pluginCapabilities, request);

        assertNotNull(result);
        assertEquals(expected.getGdsVersion(), result.getGdsVersion());
        verify(gdsStore).getGdsInfoIfUpdated(serviceName, lastKnownVersion);
    }

    @Test
    public void testGetServiceGdsInfoIfUpdatedWebAppException() throws Exception {
        String serviceName = "svc";
        Long lastKnownVersion = 1L;
        String pluginId = "p1";
        String clusterName = "c1";
        String pluginCapabilities = "caps";

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        Response resp = Response.status(400).entity("bad").build();
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenThrow(new WebApplicationException(resp));
        doNothing().when(assetMgr).createPluginInfo(
                Mockito.anyString(),
                Mockito.anyString(),
                Mockito.any(HttpServletRequest.class),
                Mockito.anyInt(),
                Mockito.<Long>any(),
                Mockito.<Long>any(),
                Mockito.anyLong(),
                Mockito.anyInt(),
                Mockito.anyString(),
                Mockito.anyString());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.getServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, pluginId, clusterName, pluginCapabilities, request));
    }

    @Test
    public void testGetServiceGdsInfoIfUpdatedGenericException() throws Exception {
        String serviceName = "svc";
        Long lastKnownVersion = 1L;
        String pluginId = "p1";
        String clusterName = "c1";
        String pluginCapabilities = "caps";

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenThrow(new RuntimeException("err"));
        doNothing().when(assetMgr).createPluginInfo(
                Mockito.anyString(),
                Mockito.anyString(),
                Mockito.any(HttpServletRequest.class),
                Mockito.anyInt(),
                Mockito.<Long>any(),
                Mockito.<Long>any(),
                Mockito.anyLong(),
                Mockito.anyInt(),
                Mockito.anyString(),
                Mockito.anyString());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.getServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, pluginId, clusterName, pluginCapabilities, request));
    }

    @Test
    public void testGetSecureServiceGdsInfoIfUpdated() throws Exception {
        String serviceName = "testService";
        Long lastKnownVersion = 1L;
        Long lastActivationTime = 0L;
        String pluginId = "plugin1";
        String clusterName = "cluster1";
        String pluginCapabilities = "capabilities";

        ServiceGdsInfo expected = new ServiceGdsInfo();
        expected.setGdsVersion(2L);

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenReturn(expected);

        ServiceGdsInfo result = gdsREST.getSecureServiceGdsInfoIfUpdated(serviceName, lastKnownVersion,
                lastActivationTime, pluginId, clusterName, pluginCapabilities, request);

        assertNotNull(result);
        assertEquals(expected.getGdsVersion(), result.getGdsVersion());
        verify(gdsStore).getGdsInfoIfUpdated(serviceName, lastKnownVersion);
    }

    @Test
    public void testGetSecureServiceGdsInfoIfUpdatedGenericException() throws Exception {
        String serviceName = "svc";
        Long lastKnownVersion = 1L;
        String pluginId = "p1";
        String clusterName = "c1";
        String pluginCapabilities = "caps";

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenThrow(new RuntimeException("err"));
        doNothing().when(assetMgr).createPluginInfo(
                Mockito.anyString(),
                Mockito.anyString(),
                Mockito.any(HttpServletRequest.class),
                Mockito.anyInt(),
                Mockito.<Long>any(),
                Mockito.<Long>any(),
                Mockito.anyLong(),
                Mockito.anyInt(),
                Mockito.anyString(),
                Mockito.anyString());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.getSecureServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, pluginId, clusterName, pluginCapabilities, request));
    }

    @Test
    public void testGetDataSetGrants() throws Exception {
        Long datasetId = 1L;
        List<RangerPolicy> policies = Arrays.asList(createPolicyForDataSet(createRangerDataSet()));
        List<RangerGrant> expected = createAndGetSampleGrantData();

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(policies);

        List<RangerGrant> result = gdsREST.getDataSetGrants(datasetId, request);

        assertNotNull(result);
        verify(gdsStore).getDatasetPolicies(datasetId);
    }

    @Test
    public void testGetDataSetGrantsException() {
        when(gdsStore.getDatasetPolicies(Mockito.anyLong())).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.getDataSetGrants(1L, request));
    }

    @Test
    public void testGetDataSetGrantsNoPolicies() throws Exception {
        Long datasetId = 1L;

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(Collections.emptyList());

        List<RangerGrant> result = gdsREST.getDataSetGrants(datasetId, request);

        assertNotNull(result);
        assertTrue(result.isEmpty());
        verify(gdsStore).getDatasetPolicies(datasetId);
    }

    @Test
    public void testUpdatePolicyWithModifiedGrants() throws Exception {
        Long datasetId = 1L;
        List<RangerGrant> rangerGrants = createAndGetSampleGrantData();
        RangerPolicy policy = createPolicyForDataSet(createRangerDataSet());
        RangerPolicy updatedPolicy = createPolicyForDataSet(createRangerDataSet());
        updatedPolicy.setId(1L);

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(Arrays.asList(policy));
        when(gdsStore.updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class))).thenReturn(updatedPolicy);

        RangerPolicyHeader result = gdsREST.updateDataSetGrants(datasetId, rangerGrants);

        assertNotNull(result);
        assertEquals(updatedPolicy.getId(), result.getId());
        verify(gdsStore).getDatasetPolicies(datasetId);
        verify(gdsStore).updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class));
    }

    @Test
    public void testUpdatePolicyWithModifiedGrantsException() {
        RangerPolicy badPolicy = Mockito.spy(new RangerPolicy());
        Mockito.doReturn(null).when(badPolicy).getPolicyItems();
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_BAD_REQUEST), Mockito.<String>any(), eq(true)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.updatePolicyWithModifiedGrants(badPolicy, Collections.emptyList()));
    }

    @Test
    public void testUpdateDataSetGrants() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);

        List<RangerGrant> rangerGrants = createAndGetSampleGrantData();
        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);

        String[] requestedPrincipals = {"group:hdfs"};
        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(requestedPrincipals);

        List<RangerPolicy.RangerPolicyItem> hdfsPolicyItems = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        RangerGrant grant3 = new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.GROUP, "hdfs"), Collections.singletonList("_READ"), Collections.emptyList());
        policy = gdsREST.updatePolicyWithModifiedGrants(policy, Collections.singletonList(grant3));

        List<RangerPolicy.RangerPolicyItem> updatedHdfsPolicyItems = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        assertNotNull(updatedHdfsPolicyItems);
        assertEquals(hdfsPolicyItems.size(), updatedHdfsPolicyItems.size());
        assertNotEquals(hdfsPolicyItems, updatedHdfsPolicyItems);
    }

    @Test
    public void testRemoveDataSetGrants() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);
        List<RangerGrant>       rangerGrants  = createAndGetSampleGrantData();

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);
        List<RangerPolicy.RangerPolicyItem> newPolicyItems = policy.getPolicyItems();

        String[] requestedPrincipals = {"group:hdfs"};
        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(requestedPrincipals);

        List<RangerPolicy.RangerPolicyItem> existingHdfsPolicyItems = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        RangerGrant grant4 = new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.GROUP, "hdfs"), Collections.emptyList(), Collections.emptyList());
        policy = gdsREST.updatePolicyWithModifiedGrants(policy, Collections.singletonList(grant4));

        List<RangerPolicy.RangerPolicyItem> updatedHdfsPolicyItems = gdsREST.filterPolicyItemsByRequest(policy, request);

        assertNotEquals(existingHdfsPolicyItems, updatedHdfsPolicyItems);
        assertTrue(updatedHdfsPolicyItems.isEmpty(), "Grants for " + Arrays.toString(requestedPrincipals) + " should be empty");
    }

    @Test
    public void testGetAllDataSetGrants() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);
        List<RangerGrant>       rangerGrants  = createAndGetSampleGrantData();

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);

        List<RangerPolicy.RangerPolicyItem> policyItems         = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));
        List<RangerGrant>                   policyItemsAsGrants = gdsREST.transformPolicyItemsToGrants(policyItems);

        assertEquals(rangerGrants, policyItemsAsGrants);
    }

    @Test
    public void testGetDataSetGrantsByPrincipal() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);
        List<RangerGrant>       rangerGrants  = createAndGetSampleGrantData();

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);

        String[] existingRequestedPrincipals = {"user:hive"};
        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(existingRequestedPrincipals);

        List<RangerPolicy.RangerPolicyItem> filteredPolicyItemsByPrincipal = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        assertEquals(1, filteredPolicyItemsByPrincipal.size());
        assertTrue(filteredPolicyItemsByPrincipal.get(0).getUsers().contains("hive"));

        String[] nonexistentRequestedPrincipals = {"user:hadoop"};
        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(nonexistentRequestedPrincipals);

        filteredPolicyItemsByPrincipal = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));
        assertEquals(0, filteredPolicyItemsByPrincipal.size(), "Grants for Principals: " + Arrays.toString(nonexistentRequestedPrincipals) + " should be empty");
    }

    @Test
    public void testGetDataSetGrantsByAccessType() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);
        List<RangerGrant>       rangerGrants  = createAndGetSampleGrantData();

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);

        String[] requestedAccessTypes = {"_MANAGE"};
        when(searchUtil.getParamMultiValues(request, "accessType")).thenReturn(requestedAccessTypes);

        List<RangerPolicy.RangerPolicyItem> policyItemsByAccessType = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        assertEquals(1, policyItemsByAccessType.size());
        assertTrue(policyItemsByAccessType.get(0).getAccesses().stream().anyMatch(x -> Arrays.asList(requestedAccessTypes).contains(x.getType())));

        String[] nonexistentRequestedAccessTypes = {"_DELETE"};
        when(searchUtil.getParamMultiValues(request, "accessType")).thenReturn(nonexistentRequestedAccessTypes);

        List<RangerPolicy.RangerPolicyItem> updatedPolicyItemsByAccessType = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));
        assertTrue(updatedPolicyItemsByAccessType.isEmpty(), "Grants for AccessTypes: " + Arrays.toString(nonexistentRequestedAccessTypes) + " should be empty");
    }

    @Test
    public void testGetDataSetGrantsByPrincipalAndAccessType() {
        RangerGds.RangerDataset rangerDataset = createRangerDataSet();
        RangerPolicy            policy        = createPolicyForDataSet(rangerDataset);
        List<RangerGrant>       rangerGrants  = createAndGetSampleGrantData();

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, rangerGrants);

        String[] requestedPrincipals  = {"user:hive"};
        String[] requestedAccessTypes = {"_READ"};

        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(requestedPrincipals);
        when(searchUtil.getParamMultiValues(request, "accessType")).thenReturn(requestedAccessTypes);

        List<RangerPolicy.RangerPolicyItem> filteredPolicyItems = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));

        assertEquals(1, filteredPolicyItems.size(), "Grants for Principals: " + Arrays.toString(requestedPrincipals) + " and AccessTypes: " + Arrays.toString(requestedAccessTypes) + " should exist");
        assertTrue(filteredPolicyItems.get(0).getUsers().contains("hive"), "Grants for Principals: " + Arrays.toString(requestedPrincipals) + "should exist");
        assertTrue(filteredPolicyItems.get(0).getAccesses().stream().anyMatch(x -> Arrays.asList(requestedAccessTypes).contains(x.getType())), "Grants for AccessTypes: " + Arrays.toString(requestedAccessTypes) + "should exist");

        String[] nonexistentRequestedAccessTypes = {"_DELETE"};
        when(searchUtil.getParamMultiValues(request, "accessType")).thenReturn(nonexistentRequestedAccessTypes);

        List<RangerPolicy.RangerPolicyItem> updatedPolicyItemsByAccessType = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));
        assertTrue(updatedPolicyItemsByAccessType.isEmpty(), "Grants for Principals: " + Arrays.toString(requestedPrincipals) + " and AccessTypes: " + Arrays.toString(nonexistentRequestedAccessTypes) + " should be empty");
    }

    @Test
    public void testSearchDataSetsByValidityPeriod() {
        List<RangerGds.RangerDataset> rangerDatasets = new ArrayList<>();

        RangerGds.RangerDataset rangerDataset1 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset1, -5, -1);

        RangerGds.RangerDataset rangerDataset2 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset2, -5, 5);

        RangerGds.RangerDataset rangerDataset3 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset3, -10, 2);

        RangerGds.RangerDataset rangerDataset4 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset4, -2, 15);

        RangerGds.RangerDataset rangerDataset5 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset5, 5, 15);

        RangerGds.RangerDataset rangerDataset6 = createRangerDataSet();
        updateDatasetValiditySchedule(rangerDataset6, -15, -5);

        rangerDatasets.addAll(Arrays.asList(rangerDataset1, rangerDataset2, rangerDataset3, rangerDataset4, rangerDataset5, rangerDataset6));
        List<RangerGds.RangerDataset> actualDatasets = new ArrayList<>(rangerDatasets);

        SearchFilter filter = new SearchFilter();
        filter.setParam(SearchFilter.VALIDITY_TIME_ZONE, SearchFilter.DEFAULT_TIME_ZONE);

        //ValiditySchedule Filter criteria-1
        String startTime = getFormattedDateString(-10);
        String endTime   = getFormattedDateString(-2);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_START, startTime);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_END, endTime);

        List<RangerGds.RangerDataset> expectedDatasets = Arrays.asList(rangerDataset6);

        gdsDBStore.filterDatasetsByValidityExpiration(filter, actualDatasets);

        assertEquals(expectedDatasets.size(), actualDatasets.size(), "Datasets expiry count mismatch between " + startTime + " and " + endTime);

        assertTrue(actualDatasets.containsAll(expectedDatasets), "Mismatch in datasets returned for expiry between " + startTime + " and " + endTime);

        //ValiditySchedule Filter criteria-2
        actualDatasets.clear();
        actualDatasets.addAll(rangerDatasets);

        startTime = getFormattedDateString(-4);
        endTime   = getFormattedDateString(20);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_START, startTime);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_END, endTime);

        expectedDatasets = Arrays.asList(rangerDataset1, rangerDataset2, rangerDataset3, rangerDataset4, rangerDataset5);

        gdsDBStore.filterDatasetsByValidityExpiration(filter, actualDatasets);

        assertEquals(expectedDatasets.size(), actualDatasets.size(), "Datasets expiry count mismatch between " + startTime + " and " + endTime);

        assertTrue(actualDatasets.containsAll(expectedDatasets), "Mismatch in datasets returned for expiry between " + startTime + " and " + endTime);

        //ValiditySchedule Filter criteria-3
        actualDatasets.clear();
        actualDatasets.addAll(rangerDatasets);

        startTime = getFormattedDateString(-15);
        endTime   = getFormattedDateString(0);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_START, startTime);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_END, endTime);

        expectedDatasets = Arrays.asList(rangerDataset1, rangerDataset6);

        gdsDBStore.filterDatasetsByValidityExpiration(filter, actualDatasets);

        assertEquals(expectedDatasets.size(), actualDatasets.size(), "Datasets expiry count mismatch between " + startTime + " and " + endTime);

        assertTrue(actualDatasets.containsAll(expectedDatasets), "Mismatch in datasets returned for expiry between " + startTime + " and " + endTime);

        //ValiditySchedule Filter criteria-4 with invalid date
        actualDatasets.clear();
        actualDatasets.addAll(rangerDatasets);

        startTime = getInvalidDateString(-5);
        endTime   = getFormattedDateString(16);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_START, startTime);
        filter.setParam(SearchFilter.VALIDITY_EXPIRY_END, endTime);

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> {
            gdsDBStore.filterDatasetsByValidityExpiration(filter, actualDatasets);
        });

        //ValiditySchedule Filter criteria-5 without start and end time
        actualDatasets.clear();
        actualDatasets.addAll(rangerDatasets);

        filter.removeParam(SearchFilter.VALIDITY_EXPIRY_START);
        filter.removeParam(SearchFilter.VALIDITY_EXPIRY_END);

        expectedDatasets = rangerDatasets;

        gdsDBStore.filterDatasetsByValidityExpiration(filter, actualDatasets);

        assertEquals(expectedDatasets.size(), actualDatasets.size(), "Datasets expiry count mismatch with empty start and end time");

        assertTrue(actualDatasets.containsAll(expectedDatasets), "Mismatch in datasets returned with empty expiry time range");
    }

    private RangerGds.RangerDataset createRangerDataSet() {
        long                    id      = random.nextInt(100);
        RangerGds.RangerDataset dataset = new RangerGds.RangerDataset();
        dataset.setId(id);
        dataset.setName("dataset-" + id);
        dataset.setGuid(UUID.randomUUID().toString());

        return dataset;
    }

    private RangerGds.RangerProject createProject() {
        long                    id      = random.nextInt(100);
        RangerGds.RangerProject project = new RangerGds.RangerProject();
        project.setId(id);
        project.setName("project-" + id);
        project.setGuid(UUID.randomUUID().toString());

        return project;
    }

    private RangerGds.RangerDataShare createDataShare() {
        long                      id        = random.nextInt(100);
        RangerGds.RangerDataShare dataShare = new RangerGds.RangerDataShare();
        dataShare.setId(id);
        dataShare.setName("dataShare-" + id);
        dataShare.setGuid(UUID.randomUUID().toString());
        dataShare.setService(serviceHive);

        return dataShare;
    }

    private RangerGds.RangerSharedResource createSharedResource() {
        long                           id             = random.nextInt(100);
        RangerGds.RangerSharedResource sharedResource = new RangerGds.RangerSharedResource();
        sharedResource.setId(id);
        sharedResource.setName("resource-" + id);
        sharedResource.setGuid(UUID.randomUUID().toString());
        sharedResource.setResource(createRandomResources(serviceDefHive, "test"));

        return sharedResource;
    }

    private Map<String, RangerPolicy.RangerPolicyResource> createRandomResources(String service, String prefix) {
        Map<String, RangerPolicy.RangerPolicyResource> resources = new HashMap<>();
        int                                            id        = random.nextInt(50);

        if (serviceDefHive.equals(service)) {
            resources.put("database", new RangerPolicy.RangerPolicyResource(prefix + "_db_" + id, false, false));
            resources.put("table", new RangerPolicy.RangerPolicyResource(prefix + "_tb_" + id, false, false));
            resources.put("column", new RangerPolicy.RangerPolicyResource(prefix + "_col_" + id, false, false));
        } else {
            resources.put("tag", new RangerPolicy.RangerPolicyResource(prefix + "_tag_" + id, false, false));
        }
        return resources;
    }

    private RangerGds.RangerDataShareInDataset createDataShareInDataset(Long datasetId) {
        RangerGds.RangerDataShareInDataset dataShareInDataset = new RangerGds.RangerDataShareInDataset();
        dataShareInDataset.setDatasetId(datasetId);
        dataShareInDataset.setDataShareId(1L);
        dataShareInDataset.setStatus(RangerGds.GdsShareStatus.ACTIVE);

        return dataShareInDataset;
    }

    private RangerGds.RangerDatasetInProject createDatasetInProject() {
        RangerGds.RangerDatasetInProject datasetInProject = new RangerGds.RangerDatasetInProject();
        datasetInProject.setDatasetId(1L);
        datasetInProject.setProjectId(1L);
        datasetInProject.setStatus(RangerGds.GdsShareStatus.ACTIVE);

        return datasetInProject;
    }

    private RangerPolicy createPolicy() {
        RangerPolicy policy = new RangerPolicy();
        policy.setId((long) random.nextInt(100));
        policy.setName("policy-" + policy.getId());
        policy.setServiceType("gds");
        policy.setService("_gds");

        return policy;
    }

    private RangerGds.RangerDataset updateDatasetValiditySchedule(RangerGds.RangerDataset dataset, int pastDaysToStart, int futureDaysToEnd) {
        String start      = getFormattedDateString(pastDaysToStart);
        String end        = getFormattedDateString(futureDaysToEnd);
        String timezone   = SearchFilter.DEFAULT_TIME_ZONE;
        RangerValiditySchedule validitySchedule = new RangerValiditySchedule(start, end, timezone, null);
        dataset.setValiditySchedule(validitySchedule);

        return dataset;
    }

    private String getFormattedDateString(int days) {
        return getDateString(days, RangerValiditySchedule.VALIDITY_SCHEDULE_DATE_STRING_SPECIFICATION);
    }

    private String getInvalidDateString(int days) {
        return getDateString(days, "yyyy/MM/dd");
    }

    private String getDateString(int days, String pattern) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(pattern);
        LocalDateTime     current       = LocalDateTime.now();

        return current.plusDays(days).format(dateFormatter);
    }

    private RangerPolicy createPolicyForDataSet(RangerGds.RangerDataset dataset) {
        RangerPolicy policy = new RangerPolicy();
        policy.setName("DATASET: " + dataset.getName() + "@" + System.currentTimeMillis());
        policy.setDescription("Policy for dataset: " + dataset.getName());
        policy.setServiceType("gds");
        policy.setService("_gds");
        policy.setZoneName(null);
        policy.setResources(Collections.singletonMap("dataset-id", new RangerPolicy.RangerPolicyResource(dataset.getId().toString())));
        policy.setPolicyType(RangerPolicy.POLICY_TYPE_ACCESS);
        policy.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_NORMAL);
        policy.setAllowExceptions(Collections.emptyList());
        policy.setDenyPolicyItems(Collections.emptyList());
        policy.setDenyExceptions(Collections.emptyList());
        policy.setDataMaskPolicyItems(Collections.emptyList());
        policy.setRowFilterPolicyItems(Collections.emptyList());
        policy.setIsDenyAllElse(Boolean.FALSE);

        return policy;
    }

    private List<RangerGrant> createAndGetSampleGrantData() {
        List<RangerGrant.Condition> conditions = new ArrayList<>();

        RangerGrant.Condition condition1  = new RangerGrant.Condition(null, null);
        condition1.setType("expression");
        condition1.setValues(Arrays.asList("IS_ACCESSED_BEFORE('2024/12/12')", "_STATE == 'CA'"));
        conditions.add(condition1);

        RangerGrant.Condition condition2  = new RangerGrant.Condition(null, null);
        condition2.setType("validitySchedule");
        condition2.setValues(Arrays.asList("{\"startTime\":\"1970/01/01 00:00:00\",\"endTime\":\"2025/03/08 00:35:28\",\"timeZone\":\"UTC\"}"));
        conditions.add(condition2);

        RangerGrant grant1 = new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "hive"), Collections.singletonList("_READ"), conditions);
        RangerGrant grant2 = new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.GROUP, "hdfs"), Collections.singletonList("_MANAGE"), Collections.emptyList());

        return Arrays.asList(grant1, grant2);
    }

    @Test
    public void testAddSharedResource() {
        RangerGds.RangerSharedResource resource = createSharedResource();
        RangerGds.RangerSharedResource stored   = createSharedResource();
        stored.setId(100L);

        when(gdsStore.addSharedResources(Mockito.anyList())).thenReturn(Collections.singletonList(stored));

        RangerGds.RangerSharedResource result = gdsREST.addSharedResource(resource);

        assertNotNull(result);
        assertEquals(Long.valueOf(100L), result.getId());
        verify(gdsStore).addSharedResources(Mockito.anyList());
    }

    @Test
    public void testAddSharedResourceException() {
        RangerGds.RangerSharedResource resource = createSharedResource();

        when(gdsStore.addSharedResources(Mockito.anyList())).thenThrow(new RuntimeException("DB error"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.addSharedResource(resource));
    }

    @Test
    public void testAddDatasetResourcesWithExistingDataShare() throws Exception {
        Long datasetId   = 10L;
        String serviceNm = "svc1";
        String zoneName  = "";

        RangerService rangerService = new RangerService();
        rangerService.setId(5L);
        rangerService.setIsEnabled(true);

        RangerGds.RangerDataset dataset = createRangerDataSet();
        dataset.setId(datasetId);

        RangerGds.RangerDataShare existingShare = createDataShare();
        existingShare.setId(77L);
        PList<RangerGds.RangerDataShare> dataSharePList = new PList<>();
        dataSharePList.setList(Arrays.asList(existingShare));

        RangerGds.RangerSharedResource r1 = createSharedResource();
        RangerGds.RangerSharedResource r2 = createSharedResource();
        RangerGds.RangerSharedResource r1Stored = createSharedResource();
        r1Stored.setId(201L);
        RangerGds.RangerSharedResource r2Stored = createSharedResource();
        r2Stored.setId(202L);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        when(gdsStore.getDataset(datasetId)).thenReturn(dataset);
        when(gdsStore.searchDataShares(any(SearchFilter.class))).thenReturn(dataSharePList);
        when(gdsStore.addSharedResources(Mockito.anyList()))
                .thenReturn(Collections.singletonList(r1Stored))
                .thenReturn(Collections.singletonList(r2Stored));

        List<RangerGds.RangerSharedResource> result = gdsREST.addDatasetResources(datasetId, serviceNm, zoneName, Arrays.asList(r1, r2));

        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals(Long.valueOf(201L), result.get(0).getId());
        assertEquals(Long.valueOf(202L), result.get(1).getId());
        verify(serviceDBStore).getServiceByName(serviceNm);
        verify(gdsStore).getDataset(datasetId);
        verify(gdsStore, Mockito.times(2)).addSharedResources(Mockito.anyList());
    }

    @Test
    public void testAddDatasetResourcesCreatesNewDataShare() throws Exception {
        Long datasetId   = 20L;
        String serviceNm = "svc2";

        RangerService rangerService = new RangerService();
        rangerService.setId(6L);
        rangerService.setIsEnabled(true);

        RangerGds.RangerDataset dataset = createRangerDataSet();
        dataset.setId(datasetId);

        PList<RangerGds.RangerDataShare> emptyPList = new PList<>();
        emptyPList.setList(new ArrayList<>());

        RangerGds.RangerDataShare createdShare = createDataShare();
        createdShare.setId(88L);

        RangerGds.RangerSharedResource res = createSharedResource();
        RangerGds.RangerSharedResource resStored = createSharedResource();
        resStored.setId(301L);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        when(gdsStore.getDataset(datasetId)).thenReturn(dataset);
        when(gdsStore.searchDataShares(any(SearchFilter.class))).thenReturn(emptyPList);
        when(gdsStore.createDataShare(any(RangerGds.RangerDataShare.class))).thenReturn(createdShare);
        when(gdsStore.addDataSharesInDataset(any(List.class))).thenAnswer(invocation -> invocation.getArgument(0));
        when(gdsStore.addSharedResources(Mockito.anyList())).thenReturn(Collections.singletonList(resStored));

        List<RangerGds.RangerSharedResource> result = gdsREST.addDatasetResources(datasetId, serviceNm, "", Collections.singletonList(res));

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(Long.valueOf(301L), result.get(0).getId());
        verify(gdsStore).createDataShare(any(RangerGds.RangerDataShare.class));
        verify(gdsStore).addDataSharesInDataset(any(List.class));
    }

    @Test
    public void testAddDatasetResourcesServiceNameMissing() {
        when(restErrorUtil.createRESTException(eq("ServiceName not provided."), eq(MessageEnums.INVALID_INPUT_DATA))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(1L, "", "", Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testAddDatasetResourcesServiceDisabled() throws Exception {
        String serviceNm = "svc3";
        RangerService rangerService = new RangerService();
        rangerService.setId(7L);
        rangerService.setIsEnabled(false);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        when(restErrorUtil.createRESTException(eq("Unauthorized access."), eq(MessageEnums.OPER_NOT_ALLOWED_FOR_STATE))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(1L, serviceNm, "", Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testAddDatasetResourcesZoneNotFound() throws Exception {
        String serviceNm = "svc4";
        String zoneName  = "zoneA";
        RangerService rangerService = new RangerService();
        rangerService.setId(8L);
        rangerService.setIsEnabled(true);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        Mockito.doThrow(new RuntimeException("Zone not found")).when(serviceDBStore).getSecurityZone(zoneName);
        when(restErrorUtil.createRESTException(Mockito.anyString(), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(1L, serviceNm, zoneName, Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testAddDatasetResourcesServiceNotFound() throws Exception {
        String serviceNm = "svc-missing";

        Mockito.doThrow(new Exception("Service not found")).when(serviceDBStore).getServiceByName(serviceNm);
        when(restErrorUtil.createRESTException(Mockito.anyString(), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(1L, serviceNm, "", Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testAddDatasetResourcesServiceNull() throws Exception {
        String serviceNm = "svc-null";

        Mockito.doThrow(new Exception("Service missing")).when(serviceDBStore).getServiceByName(serviceNm);
        when(restErrorUtil.createRESTException(Mockito.anyString(), eq(MessageEnums.DATA_NOT_FOUND)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(1L, serviceNm, "", Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testAddDatasetResourcesSetsDataShareIdOnResources() throws Exception {
        Long datasetId   = 30L;
        String serviceNm = "svc5";

        RangerService rangerService = new RangerService();
        rangerService.setId(9L);
        rangerService.setIsEnabled(true);

        RangerGds.RangerDataset dataset = createRangerDataSet();
        dataset.setId(datasetId);

        RangerGds.RangerDataShare existingShare = createDataShare();
        existingShare.setId(777L);
        PList<RangerGds.RangerDataShare> dataSharePList = new PList<>();
        dataSharePList.setList(Arrays.asList(existingShare));

        RangerGds.RangerSharedResource res = createSharedResource();
        RangerGds.RangerSharedResource resStored = createSharedResource();
        resStored.setId(401L);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        when(gdsStore.getDataset(datasetId)).thenReturn(dataset);
        when(gdsStore.searchDataShares(any(SearchFilter.class))).thenReturn(dataSharePList);
        when(gdsStore.addSharedResources(Mockito.anyList())).thenReturn(Collections.singletonList(resStored));

        ArgumentCaptor<List<RangerGds.RangerSharedResource>> captor = ArgumentCaptor.forClass(List.class);

        List<RangerGds.RangerSharedResource> result = gdsREST.addDatasetResources(datasetId, serviceNm, "", Collections.singletonList(res));

        assertNotNull(result);
        verify(gdsStore).addSharedResources(captor.capture());
        List<RangerGds.RangerSharedResource> passed = captor.getValue();
        assertEquals(1, passed.size());
        assertEquals(Long.valueOf(777L), passed.get(0).getDataShareId());
    }

    @Test
    public void testAddDataSharesInDatasetEmptyList() {
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_BAD_REQUEST), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDataSharesInDataset(1L, Collections.emptyList()));
    }

    @Test
    public void testAddDatasetResourcesGenericException() throws Exception {
        Long datasetId   = 40L;
        String serviceNm = "svc-ex";

        RangerService rangerService = new RangerService();
        rangerService.setId(10L);
        rangerService.setIsEnabled(true);

        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(rangerService);
        when(gdsStore.getDataset(datasetId)).thenThrow(new RuntimeException("boom"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class,
                () -> gdsREST.addDatasetResources(datasetId, serviceNm, "", Collections.singletonList(createSharedResource())));
    }

    @Test
    public void testRemoveMatchingPrincipalFromPolicyItem_viaReflection() throws Exception {
        RangerPolicy.RangerPolicyItem item = new RangerPolicy.RangerPolicyItem();
        item.setUsers(new ArrayList<>(Collections.singletonList("u1")));
        item.setGroups(new ArrayList<>(Collections.singletonList("g1")));
        item.setRoles(new ArrayList<>(Collections.singletonList("r1")));

        Method m = GdsREST.class.getDeclaredMethod("removeMatchingPrincipalFromPolicyItem", RangerPolicy.RangerPolicyItem.class, RangerPrincipal.class);
        m.setAccessible(true);

        m.invoke(gdsREST, item, new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "u1"));
        assertTrue(item.getUsers() == null || item.getUsers().isEmpty());

        item.setUsers(new ArrayList<>(Collections.singletonList("u2")));
        m.invoke(gdsREST, item, new RangerPrincipal(RangerPrincipal.PrincipalType.GROUP, "g1"));
        assertTrue(item.getGroups() == null || item.getGroups().isEmpty());

        m.invoke(gdsREST, item, new RangerPrincipal(RangerPrincipal.PrincipalType.ROLE, "r1"));
        assertTrue(item.getRoles() == null || item.getRoles().isEmpty());
    }

    @Test
    public void testValidateAndGetZoneId_defaultUnzoned() throws Exception {
        Method m = GdsREST.class.getDeclaredMethod("validateAndGetZoneId", String.class);
        m.setAccessible(true);

        Long ret = (Long) m.invoke(gdsREST, "");
        assertEquals(Long.valueOf(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID), ret);
    }

    @Test
    public void testValidateAndGetZoneId_found() throws Exception {
        String zoneName = "zoneX";
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setId(55L);
        when(serviceDBStore.getSecurityZone(zoneName)).thenReturn(zone);

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetZoneId", String.class);
        m.setAccessible(true);
        Long ret = (Long) m.invoke(gdsREST, zoneName);
        assertEquals(Long.valueOf(55L), ret);
    }

    @Test
    public void testValidateAndGetZoneId_notFoundException() throws Exception {
        String zoneName = "zoneY";
        when(serviceDBStore.getSecurityZone(zoneName)).thenThrow(new RuntimeException("not found"));
        when(restErrorUtil.createRESTException(anyString(), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetZoneId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, zoneName);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetZoneId_nullZone() throws Exception {
        String zoneName = "zoneZ";

        when(serviceDBStore.getSecurityZone(zoneName)).thenThrow(new RuntimeException("no zone"));
        when(restErrorUtil.createRESTException(anyString(), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetZoneId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, zoneName);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetServiceId_nullName() throws Exception {
        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        when(restErrorUtil.createRESTException(eq("ServiceName not provided."), eq(MessageEnums.INVALID_INPUT_DATA))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, "");
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetServiceId_found() throws Exception {
        String serviceNm = "svcX";
        RangerService svc = new RangerService();
        svc.setId(99L);
        svc.setIsEnabled(true);
        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(svc);

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        Long ret = (Long) m.invoke(gdsREST, serviceNm);
        assertEquals(Long.valueOf(99L), ret);
    }

    @Test
    public void testValidateAndGetServiceId_serviceThrows() throws Exception {
        String serviceNm = "svcY";
        when(serviceDBStore.getServiceByName(serviceNm)).thenThrow(new RuntimeException("no svc"));
        when(restErrorUtil.createRESTException(eq("Service:" + serviceNm + " not found"), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, serviceNm);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetServiceId_nullService() throws Exception {
        String serviceNm = "svcZ";

        when(serviceDBStore.getServiceByName(serviceNm)).thenThrow(new RuntimeException("no svc"));
        when(restErrorUtil.createRESTException(eq("Service:" + serviceNm + " not found"), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, serviceNm);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetServiceId_disabledService() throws Exception {
        String serviceNm = "svcD";
        RangerService svc = new RangerService();
        svc.setId(100L);
        svc.setIsEnabled(false);
        when(serviceDBStore.getServiceByName(serviceNm)).thenReturn(svc);
        when(restErrorUtil.createRESTException(eq("Unauthorized access."), eq(MessageEnums.OPER_NOT_ALLOWED_FOR_STATE))).thenReturn(new WebApplicationException());

        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, serviceNm);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testUpdateDataSetGrants_NoPolicyExists() throws Exception {
        Long datasetId = 42L;
        List<RangerGrant> rangerGrants = createAndGetSampleGrantData();
        RangerPolicy newPolicy = new RangerPolicy();
        newPolicy.setId(7L);
        RangerPolicy updatedPolicy = createPolicyForDataSet(createRangerDataSet());
        updatedPolicy.setId(7L);

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(Collections.emptyList());
        when(gdsStore.addDatasetPolicy(eq(datasetId), any(RangerPolicy.class))).thenReturn(newPolicy);
        when(gdsStore.updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class))).thenReturn(updatedPolicy);

        RangerPolicyHeader result = gdsREST.updateDataSetGrants(datasetId, rangerGrants);
        assertNotNull(result);
        assertEquals(updatedPolicy.getId(), result.getId());
        verify(gdsStore).addDatasetPolicy(eq(datasetId), any(RangerPolicy.class));
        verify(gdsStore).updateDatasetPolicy(eq(datasetId), any(RangerPolicy.class));
    }

    @Test
    public void testListProjectNamesException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getProjectNames(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.listProjectNames(request));
    }

    @Test
    public void testListDatasetNamesException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDatasetNames(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> gdsREST.listDatasetNames(request));
    }

    @Test
    public void testGetServiceGdsInfoIfUpdated_NotModified() throws Exception {
        String serviceName = "svc-nomod";
        Long lastKnownVersion = 5L;
        String pluginId = "p1";
        String clusterName = "c1";
        String pluginCapabilities = "caps";

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenReturn(null);
        doNothing().when(assetMgr).createPluginInfo(anyString(), anyString(), any(HttpServletRequest.class), anyInt(), any(), any(), anyLong(), anyInt(), anyString(), anyString());
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_MODIFIED), anyString(), eq(false))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () ->
                gdsREST.getServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, pluginId, clusterName, pluginCapabilities, request));
    }

    @Test
    public void testGetServiceGdsInfoIfUpdated_AuthInvalidReturnsNull() throws Exception {
        String serviceName = "svc-auth-invalid";
        Long lastKnownVersion = 1L;

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(false);
        doNothing().when(assetMgr).createPluginInfo(anyString(), anyString(), any(HttpServletRequest.class), anyInt(), any(), any(), anyLong(), anyInt(), anyString(), anyString());

        ServiceGdsInfo result = gdsREST.getServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, "p1", "c1", "caps", request);
        assertEquals(null, result);
    }

    @Test
    public void testGetSecureServiceGdsInfoIfUpdated_NotModified() throws Exception {
        String serviceName = "svc-secure-nomod";
        Long lastKnownVersion = 7L;

        doNothing().when(bizUtil).failUnauthenticatedDownloadIfNotAllowed();
        when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true);
        when(gdsStore.getGdsInfoIfUpdated(serviceName, lastKnownVersion)).thenReturn(null);
        doNothing().when(assetMgr).createPluginInfo(anyString(), anyString(), any(HttpServletRequest.class), anyInt(), any(), any(), anyLong(), anyInt(), anyString(), anyString());
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_MODIFIED), anyString(), eq(false))).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () ->
                gdsREST.getSecureServiceGdsInfoIfUpdated(serviceName, lastKnownVersion, 0L, "p1", "c1", "caps", request));
    }

    @Test
    public void testFilterPolicyItemsByRequest_DefaultPrincipalType() {
        RangerGds.RangerDataset dataset = createRangerDataSet();
        RangerPolicy policy = createPolicyForDataSet(dataset);
        RangerGrant grant = new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "hive"), Collections.singletonList("_READ"), Collections.emptyList());

        policy = gdsREST.updatePolicyWithModifiedGrants(policy, Collections.singletonList(grant));

        when(searchUtil.getParamMultiValues(request, "principal")).thenReturn(new String[] {"hive"});

        List<RangerPolicy.RangerPolicyItem> filtered = new ArrayList<>(gdsREST.filterPolicyItemsByRequest(policy, request));
        assertEquals(1, filtered.size());
        assertTrue(filtered.get(0).getUsers().contains("hive"));
    }

    @Test
    public void testSearchDatasets_ExtractsMultiValueParams() {
        PList<RangerGds.RangerDataset> expected = new PList<>();
        expected.setList(Arrays.asList(createRangerDataSet()));
        SearchFilter filter = new SearchFilter();

        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.searchDatasets(filter)).thenReturn(expected);

        PList<RangerGds.RangerDataset> result = gdsREST.searchDatasets(request);
        assertNotNull(result);

        verify(searchUtil, Mockito.times(1)).extractStringList(eq(request), eq(filter), eq(SearchFilter.DATASET_LABEL), anyString(), anyString(), any(), any());
        verify(searchUtil, Mockito.times(1)).extractStringList(eq(request), eq(filter), eq(SearchFilter.DATASET_KEYWORD), anyString(), anyString(), any(), any());
    }

    @Test
    public void testUpdateDataSetGrants_NoActionPerformed() throws Exception {
        Long datasetId = 99L;
        RangerPolicy policy = createPolicyForDataSet(createRangerDataSet());
        RangerPolicy existing = createPolicyForDataSet(createRangerDataSet());
        existing.setId(12L);
        existing.setPolicyItems(policy.getPolicyItems());

        when(gdsStore.getDatasetPolicies(datasetId)).thenReturn(Collections.singletonList(existing));
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_NOT_MODIFIED), anyString(), eq(false))).thenReturn(new WebApplicationException());

        List<RangerGrant> grants = Collections.singletonList(new RangerGrant(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "nouser"), Collections.emptyList(), Collections.emptyList()));

        assertThrows(WebApplicationException.class, () -> gdsREST.updateDataSetGrants(datasetId, grants));
    }

    @Test
    public void testAddDataSharesInDataset_MissingDatasetId() {
        Long datasetId = 1L;
        RangerGds.RangerDataShareInDataset item = new RangerGds.RangerDataShareInDataset();
        item.setDatasetId(null);
        item.setDataShareId(2L);
        item.setStatus(RangerGds.GdsShareStatus.ACTIVE);
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_BAD_REQUEST), anyString(), eq(false)))
                .thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.addDataSharesInDataset(datasetId, Arrays.asList(item)));
    }

    @Test
    public void testAddDataSharesInDataset_GenericException() throws Exception {
        Long datasetId = 1L;
        RangerGds.RangerDataShareInDataset item = createDataShareInDataset(datasetId);
        when(gdsStore.addDataSharesInDataset(Mockito.anyList())).thenThrow(new RuntimeException("boom"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.addDataSharesInDataset(datasetId, Arrays.asList(item)));
    }

    @Test
    public void testGetDatasetSummaryException() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getDatasetSummary(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.getDatasetSummary(request));
    }

    @Test
    public void testGetEnhancedDatasetSummaryException2() {
        SearchFilter filter = new SearchFilter();
        when(searchUtil.getSearchFilter(request, datasetService.sortFields)).thenReturn(filter);
        when(gdsStore.getEnhancedDatasetSummary(filter)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.getEnhancedDatasetSummary(request));
    }

    @Test
    public void testAddProjectPolicyException2() throws Exception {
        Long projectId = 123L;
        RangerPolicy policy = createPolicy();
        when(gdsStore.addProjectPolicy(projectId, policy)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.addProjectPolicy(projectId, policy));
    }

    @Test
    public void testUpdateProjectPolicyException2() throws Exception {
        Long projectId = 123L;
        Long policyId = 999L;
        RangerPolicy policy = createPolicy();
        when(gdsStore.updateProjectPolicy(eq(projectId), any(RangerPolicy.class))).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.updateProjectPolicy(projectId, policyId, policy));
    }

    @Test
    public void testAddSharedResources_BatchSizeExceeded() {
        List<RangerGds.RangerSharedResource> resources = new ArrayList<>();
        for (int i = 0; i < 101; i++) {
            resources.add(createSharedResource());
        }
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.addSharedResources(resources));
    }

    @Test
    public void testUpdateDataSetGrants_GenericException2() {
        Long datasetId = 77L;
        when(gdsStore.getDatasetPolicies(datasetId)).thenThrow(new RuntimeException("err"));
        when(restErrorUtil.createRESTException(anyString())).thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> gdsREST.updateDataSetGrants(datasetId, Collections.emptyList()));
    }

    @Test
    public void testValidateAndGetServiceId_serviceNull404() throws Exception {
        String serviceNm = "svcNull";
        when(serviceDBStore.getServiceByName(serviceNm)).thenThrow(new RuntimeException("no svc"));
        when(restErrorUtil.createRESTException(eq("Service:" + serviceNm + " not found"), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());
        Method m = GdsREST.class.getDeclaredMethod("validateAndGetServiceId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, serviceNm);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testValidateAndGetZoneId_zoneNull404() throws Exception {
        String zoneName = "zoneNull";
        when(serviceDBStore.getSecurityZone(zoneName)).thenThrow(new RuntimeException("no zone"));
        when(restErrorUtil.createRESTException(eq("Zone:" + zoneName + " not found"), eq(MessageEnums.DATA_NOT_FOUND))).thenReturn(new WebApplicationException());
        Method m = GdsREST.class.getDeclaredMethod("validateAndGetZoneId", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(gdsREST, zoneName);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }
}
