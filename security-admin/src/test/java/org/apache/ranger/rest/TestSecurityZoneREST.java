/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.rest;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.biz.RangerPolicyAdmin;
import org.apache.ranger.biz.SecurityZoneDBStore;
import org.apache.ranger.biz.ServiceDBStore;
import org.apache.ranger.biz.ServiceMgr;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerConstants;
import org.apache.ranger.common.RangerSearchUtil;
import org.apache.ranger.common.RangerValidatorFactory;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZone.RangerSecurityZoneService;
import org.apache.ranger.plugin.model.RangerSecurityZone.SecurityZoneSummary;
import org.apache.ranger.plugin.model.RangerSecurityZoneHeaderInfo;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneChangeRequest;
import org.apache.ranger.plugin.model.validation.RangerSecurityZoneValidator;
import org.apache.ranger.plugin.model.validation.RangerValidator;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.service.RangerSecurityZoneServiceService;
import org.apache.ranger.view.RangerSecurityZoneList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.persistence.OptimisticLockException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.WebApplicationException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestSecurityZoneREST class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSecurityZoneREST {
    @InjectMocks
    SecurityZoneREST                 securityZoneREST = new SecurityZoneREST();
    @Mock
    RangerValidatorFactory           validatorFactory;
    @Mock
    RangerSecurityZoneValidator      validator;
    @Mock
    SecurityZoneDBStore              securityZoneStore;
    @Mock
    RangerBizUtil                    rangerBizUtil;
    @Mock
    ServiceDBStore                   svcStore;
    @Mock
    RangerSearchUtil                 searchUtil;
    @Mock
    RangerSecurityZoneServiceService securityZoneService;
    @Mock
    RESTErrorUtil                    restErrorUtil;
    @Mock
    RangerDaoManager                 daoManager;
    @Mock
    XXServiceDef                     xServiceDef;
    @Mock
    ServiceREST                      serviceRest;
    @Mock
    ServiceMgr                       serviceMgr;

    @Test
    public void testCreateSecurityZone() throws Exception {
        RangerSecurityZone rangerSecurityZone = createRangerSecurityZone();
        XXServiceDao       xServiceDao        = Mockito.mock(XXServiceDao.class);
        XXService          xService           = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao     = Mockito.mock(XXServiceDefDao.class);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(daoManager.getXXService()).thenReturn(xServiceDao);
        when(xServiceDao.findByName("test_service_1")).thenReturn(xService);

        when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);
        when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);

        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(rangerSecurityZone, RangerValidator.Action.CREATE);
        when(securityZoneStore.createSecurityZone(rangerSecurityZone)).thenReturn(rangerSecurityZone);

        RangerSecurityZone createdRangerSecurityZone = securityZoneREST.createSecurityZone(rangerSecurityZone);
        Assertions.assertEquals(createdRangerSecurityZone.getName(), rangerSecurityZone.getName());
        verify(validator, times(1)).validate(rangerSecurityZone, RangerValidator.Action.CREATE);
        verify(securityZoneStore, times(1)).createSecurityZone(rangerSecurityZone);
    }

    @Test
    public void createSecurityZone_AdminAccessDenied() throws Exception {
        RangerSecurityZone rangerSecurityZone = createRangerSecurityZone();
        XXServiceDao       xServiceDao        = Mockito.mock(XXServiceDao.class);
        XXService          xService           = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao     = Mockito.mock(XXServiceDefDao.class);
        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("nonAdminUser");

        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class))).thenReturn(new WebApplicationException());

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.createSecurityZone(rangerSecurityZone);
        });

        verify(validator, never()).validate(rangerSecurityZone, RangerValidator.Action.CREATE);
        verify(securityZoneStore, never()).createSecurityZone(rangerSecurityZone);
        verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class));
    }

    @Test
    public void testCreateSecurityZoneOptimisticLockException() throws Exception {
        RangerSecurityZone rangerSecurityZone = createRangerSecurityZone();
        XXServiceDao       xServiceDao        = Mockito.mock(XXServiceDao.class);
        XXService          xService           = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao     = Mockito.mock(XXServiceDefDao.class);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(daoManager.getXXService()).thenReturn(xServiceDao);
        when(xServiceDao.findByName("test_service_1")).thenReturn(xService);

        when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);
        when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);

        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(rangerSecurityZone, RangerValidator.Action.CREATE);

        when(securityZoneStore.createSecurityZone(rangerSecurityZone)).thenThrow(new OptimisticLockException());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.createSecurityZone(rangerSecurityZone);
        });

        verify(validator, times(1)).validate(rangerSecurityZone, RangerValidator.Action.CREATE);
        verify(securityZoneStore).createSecurityZone(rangerSecurityZone);
        verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void testCreateSecurityZoneException() throws Exception {
        RangerSecurityZone rangerSecurityZone = createRangerSecurityZone();
        XXServiceDao       xServiceDao        = Mockito.mock(XXServiceDao.class);
        XXService          xService           = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao     = Mockito.mock(XXServiceDefDao.class);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(daoManager.getXXService()).thenReturn(xServiceDao);
        when(xServiceDao.findByName("test_service_1")).thenReturn(xService);

        when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao);
        when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef);

        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.createSecurityZone(rangerSecurityZone);
        });

        verify(validator, never()).validate(rangerSecurityZone, RangerValidator.Action.CREATE);
        verify(securityZoneStore, never()).createSecurityZone(rangerSecurityZone);
    }

    @Test
    public void testUpdateSecurityZone() throws Exception {
        RangerSecurityZone rangerSecurityZoneToUpdate = createRangerSecurityZone();
        Long               securityZoneId             = 2L;
        XXServiceDao       xServiceDao                = Mockito.mock(XXServiceDao.class);
        XXService          xService                   = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao             = Mockito.mock(XXServiceDefDao.class);
        rangerSecurityZoneToUpdate.setId(securityZoneId);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);

        doNothing().when(validator).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        when(securityZoneStore.updateSecurityZoneById(rangerSecurityZoneToUpdate)).thenReturn(rangerSecurityZoneToUpdate);
        RangerSecurityZone updatedRangerSecurityZone = securityZoneREST.updateSecurityZone(securityZoneId, rangerSecurityZoneToUpdate);
        Assertions.assertEquals(rangerSecurityZoneToUpdate.getId(), updatedRangerSecurityZone.getId());
        verify(validator, times(1)).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
    }

    @Test
    public void testUpdateSecurityZoneWithMisMatchId() throws Exception {
        Assertions.assertThrows(WebApplicationException.class, () -> {
            RangerSecurityZone rangerSecurityZoneToUpdate = createRangerSecurityZone();
            Long               securityZoneId             = 2L;
            XXServiceDefDao    xServiceDefDao             = Mockito.mock(XXServiceDefDao.class);
            XXServiceDao       xServiceDao                = Mockito.mock(XXServiceDao.class);
            XXService          xService                   = Mockito.mock(XXService.class);

            rangerSecurityZoneToUpdate.setId(securityZoneId);
            when(rangerBizUtil.isAdmin()).thenReturn(true);

            when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());
            RangerSecurityZone updatedRangerSecurityZone = securityZoneREST.updateSecurityZone(9L, rangerSecurityZoneToUpdate);
            Assertions.assertEquals(rangerSecurityZoneToUpdate.getId(), updatedRangerSecurityZone.getId());
            verify(validator, times(1)).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        });
    }

    @Test
    public void testUpdateSecurityZoneOptimisticLockException() throws Exception {
        RangerSecurityZone rangerSecurityZoneToUpdate = createRangerSecurityZone();
        Long               securityZoneId             = 2L;
        XXServiceDao       xServiceDao                = Mockito.mock(XXServiceDao.class);
        XXService          xService                   = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao             = Mockito.mock(XXServiceDefDao.class);
        rangerSecurityZoneToUpdate.setId(securityZoneId);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);

        doNothing().when(validator).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        when(securityZoneStore.updateSecurityZoneById(rangerSecurityZoneToUpdate)).thenThrow(new OptimisticLockException());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.updateSecurityZone(securityZoneId, rangerSecurityZoneToUpdate);
        });

        verify(validator, times(1)).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        verify(securityZoneStore).updateSecurityZoneById(rangerSecurityZoneToUpdate);
        verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void testUpdateSecurityZoneException() throws Exception {
        RangerSecurityZone rangerSecurityZoneToUpdate = createRangerSecurityZone();
        Long               securityZoneId             = 2L;
        XXServiceDao       xServiceDao                = Mockito.mock(XXServiceDao.class);
        XXService          xService                   = Mockito.mock(XXService.class);
        XXServiceDefDao    xServiceDefDao             = Mockito.mock(XXServiceDefDao.class);
        rangerSecurityZoneToUpdate.setId(securityZoneId);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);

        doNothing().when(validator).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        when(securityZoneStore.updateSecurityZoneById(rangerSecurityZoneToUpdate)).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.updateSecurityZone(securityZoneId, rangerSecurityZoneToUpdate);
        });

        verify(validator, times(1)).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE);
        verify(securityZoneStore).updateSecurityZoneById(rangerSecurityZoneToUpdate);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testUpdateUnzonedSecurityZone() throws Exception {
        RangerSecurityZone rangerSecurityZone = createRangerSecurityZone();
        when(restErrorUtil.createRESTException("Cannot update unzoned zone")).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.updateSecurityZone(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID, rangerSecurityZone);
        });
        verify(restErrorUtil).createRESTException("Cannot update unzoned zone");
    }

    @Test
    public void testGetSecurityZoneById() throws Exception {
        RangerSecurityZone securityZone   = createRangerSecurityZone();
        Long               securityZoneId = 2L;
        securityZone.setId(securityZoneId);
        when(securityZoneStore.getSecurityZone(securityZoneId)).thenReturn(securityZone);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        RangerSecurityZone rangerSecurityZone = securityZoneREST.getSecurityZone(securityZoneId);
        Assertions.assertEquals(securityZoneId, rangerSecurityZone.getId());
        verify(securityZoneStore, times(1)).getSecurityZone(securityZoneId);

        //No access
        Assertions.assertThrows(WebApplicationException.class, () -> {
            when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(false);
            when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any())).thenReturn(new WebApplicationException());
            securityZoneREST.getSecurityZone(securityZoneId);
            verify(securityZoneStore, times(0)).getSecurityZone(securityZoneId);
        });
    }

    @Test
    public void getSecurityZoneById_NoModuleAccess() throws Exception {
        Long zoneId = 1L;

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(false);
        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class))).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneId);
        });

        verify(securityZoneStore, never()).getSecurityZone(anyLong());
        verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class));
    }

    @Test
    public void testGetSecurityZoneByIdWithException() throws Exception {
        Long zoneId = 2L;

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(true);
        when(securityZoneStore.getSecurityZone(zoneId)).thenThrow(new RuntimeException("Database error"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneId);
        });

        verify(securityZoneStore).getSecurityZone(zoneId);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetSecurityZoneByIdWithWebException() throws Exception {
        Long zoneId = 2L;

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(true);
        when(securityZoneStore.getSecurityZone(zoneId)).thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneId);
        });

        verify(securityZoneStore).getSecurityZone(zoneId);
        verify(restErrorUtil, never()).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetUnzonedSecurityZone() throws Exception {
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(restErrorUtil.createRESTException("Cannot access unzoned zone")).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID);
        });
    }

    @Test
    public void testGetSecurityZoneByName() throws Exception {
        RangerSecurityZone securityZone     = createRangerSecurityZone();
        Long               securityZoneId   = 2L;
        String             securityZoneName = securityZone.getName();
        securityZone.setId(securityZoneId);
        when(securityZoneStore.getSecurityZoneByName(securityZoneName)).thenReturn(securityZone);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        RangerSecurityZone rangerSecurityZone = securityZoneREST.getSecurityZone(securityZoneName);
        Assertions.assertEquals(securityZoneName, rangerSecurityZone.getName());
        verify(securityZoneStore, times(1)).getSecurityZoneByName(securityZoneName);

        //No access
        Assertions.assertThrows(WebApplicationException.class, () -> {
            when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(false);
            when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any())).thenReturn(new WebApplicationException());
            securityZoneREST.getSecurityZone(securityZoneName);
            verify(securityZoneStore, times(0)).getSecurityZoneByName(securityZoneName);
        });
    }

    @Test
    public void getSecurityZoneByName_NoModuleAccess() throws Exception {
        String zoneName = "testZone";

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(false);
        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class))).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneName);
        });

        verify(securityZoneStore, never()).getSecurityZoneByName(anyString());
    }

    @Test
    public void testGetSecurityZoneByNameWithException() throws Exception {
        String zoneName = "testZone";

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(true);
        when(securityZoneStore.getSecurityZoneByName(zoneName)).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneName);
        });

        verify(securityZoneStore).getSecurityZoneByName(zoneName);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetSecurityZoneByNameWithWebException() throws Exception {
        String zoneName = "testZone";

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(true);
        when(securityZoneStore.getSecurityZoneByName(zoneName)).thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZone(zoneName);
        });

        verify(securityZoneStore).getSecurityZoneByName(zoneName);
    }

    @Test
    public void testGetAllSecurityZone() throws Exception {
        RangerSecurityZone securityZone = createRangerSecurityZone();
        HttpServletRequest request      = Mockito.mock(HttpServletRequest.class);
        SearchFilter       filter       = new SearchFilter();
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        Long securityZoneId = 2L;
        securityZone.setId(securityZoneId);
        List<RangerSecurityZone> zonesList = new ArrayList<>();
        zonesList.add(securityZone);
        RangerSecurityZoneList rangerZoneList = new RangerSecurityZoneList();
        rangerZoneList.setSecurityZoneList(zonesList);

        when(securityZoneStore.getSecurityZones(filter)).thenReturn(zonesList);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);

        RangerSecurityZoneList returnedZonesList = securityZoneREST.getAllZones(request);
        Assertions.assertEquals(returnedZonesList.getResultSize(), rangerZoneList.getList().size());
        verify(securityZoneStore, times(1)).getSecurityZones(filter);

        //No access
        Assertions.assertThrows(WebApplicationException.class, () -> {
            when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(false);
            when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any())).thenReturn(new WebApplicationException());
            securityZoneREST.getAllZones(request);
            verify(securityZoneStore, times(0)).getSecurityZones(filter);
        });
    }

    @Test
    public void testGetAllZonesWithException() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = new SearchFilter();

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getSecurityZones(filter)).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getAllZones(request);
        });

        verify(securityZoneStore).getSecurityZones(filter);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetAllZonesWithWebException() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = new SearchFilter();

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getSecurityZones(filter)).thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getAllZones(request);
        });

        verify(securityZoneStore).getSecurityZones(filter);
    }

    @Test
    public void getAllZones_NoModuleAccess() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);

        when(rangerBizUtil.hasModuleAccess(RangerConstants.MODULE_SECURITY_ZONE)).thenReturn(false);
        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class))).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getAllZones(request);
        });

        verify(securityZoneStore, never()).getSecurityZones(any());
    }

    @Test
    public void testDeleteSecurityZoneById() throws Exception {
        RangerSecurityZone securityZone   = createRangerSecurityZone();
        Long               securityZoneId = 2L;
        securityZone.setId(securityZoneId);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(securityZoneId, RangerValidator.Action.DELETE);
        securityZoneREST.deleteSecurityZone(securityZoneId);
        verify(securityZoneStore, times(1)).deleteSecurityZoneById(securityZoneId);
    }

    @Test
    public void testDeleteUnzonedSecurityZone() throws Exception {
        when(restErrorUtil.createRESTException("Cannot delete unzoned zone")).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID);
        });
    }

    @Test
    public void testDeleteSecurityZoneByIdOptimisticLockException() throws Exception {
        Long zoneId = 2L;

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(zoneId, RangerValidator.Action.DELETE);
        Mockito.doThrow(new OptimisticLockException()).when(securityZoneStore).deleteSecurityZoneById(zoneId);
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneId);
        });

        verify(validator).validate(zoneId, RangerValidator.Action.DELETE);
        verify(securityZoneStore).deleteSecurityZoneById(zoneId);
        verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void testDeleteSecurityZoneByIdException() throws Exception {
        Long zoneId = 2L;

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(zoneId, RangerValidator.Action.DELETE);
        Mockito.doThrow(new RuntimeException("General exception")).when(securityZoneStore).deleteSecurityZoneById(zoneId);
        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(), Mockito.nullable(Long.class), Mockito.nullable(String.class), Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneId);
        });

        verify(validator).validate(zoneId, RangerValidator.Action.DELETE);
        verify(securityZoneStore).deleteSecurityZoneById(zoneId);
        verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any(), Mockito.nullable(Long.class), Mockito.nullable(String.class), Mockito.anyString());
    }

    @Test
    public void deleteSecurityZoneById_AdminAccessDenied() throws Exception {
        Long zoneId = 2L;

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("nonAdminUser");
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneId);
        });

        verify(validator, never()).validate(anyLong(), any());
        verify(securityZoneStore, never()).deleteSecurityZoneById(anyLong());
    }

    @Test
    public void testDeleteSecurityZoneByName() throws Exception {
        RangerSecurityZone securityZone   = createRangerSecurityZone();
        Long               securityZoneId = 2L;
        securityZone.setId(securityZoneId);
        String securityZoneName = securityZone.getName();
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(securityZoneName, RangerValidator.Action.DELETE);
        securityZoneREST.deleteSecurityZone(securityZoneName);
        verify(securityZoneStore, times(1)).deleteSecurityZoneByName(securityZoneName);
    }

    @Test
    public void deleteSecurityZoneByName_AdminAccessDenied() throws Exception {
        String zoneName = "testZoneToDelete";

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("nonAdminUser");
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneName);
        });

        verify(validator, never()).validate(anyString(), any());
        verify(securityZoneStore, never()).deleteSecurityZoneByName(anyString());
    }

    @Test
    public void deleteSecurityZoneByNameOptimisticLockException() throws Exception {
        String zoneName = "testZoneToDelete";

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        Mockito.doNothing().when(validator).validate(Mockito.eq(zoneName), Mockito.eq(RangerValidator.Action.DELETE));
        Mockito.doThrow(new OptimisticLockException()).when(securityZoneStore).deleteSecurityZoneByName(zoneName);
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneName);
        });

        verify(validator, times(1)).validate(zoneName, RangerValidator.Action.DELETE);
        verify(securityZoneStore, times(1)).deleteSecurityZoneByName(zoneName);
    }

    @Test
    public void deleteSecurityZoneByNameException() throws Exception {
        String zoneName = "testZoneToDelete";

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        Mockito.doNothing().when(validator).validate(Mockito.eq(zoneName), Mockito.eq(RangerValidator.Action.DELETE));
        Mockito.doThrow(new RuntimeException("General exception")).when(securityZoneStore).deleteSecurityZoneByName(zoneName);
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.deleteSecurityZone(zoneName);
        });

        verify(validator, times(1)).validate(zoneName, RangerValidator.Action.DELETE);
        verify(securityZoneStore, times(1)).deleteSecurityZoneByName(zoneName);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetZoneNamesForResource() throws Exception {
        String serviceName = "test_service";
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicyAdmin policyAdmin = Mockito.mock(RangerPolicyAdmin.class);
        Collection<String> expectedZoneNames = new HashSet<>(Arrays.asList("zoneA", "zoneB"));
        SearchFilter filter = Mockito.mock(SearchFilter.class);

        Map<String, String> resource = new HashMap<>();
        resource.put("path", "/test/path");

        when(serviceRest.isServiceAdmin(serviceName)).thenReturn(true);
        when(serviceRest.getPolicyAdminForDelegatedAdmin(serviceName)).thenReturn(policyAdmin);
        when(searchUtil.getSearchFilter(request, Collections.emptyList())).thenReturn(filter);
        when(filter.getParamsWithPrefix(SearchFilter.RESOURCE_PREFIX, true)).thenReturn(resource);
        when(policyAdmin.getZoneNamesForResource(resource)).thenReturn(expectedZoneNames);

        Collection<String> result = securityZoneREST.getZoneNamesForResource(serviceName, request);

        assertNotNull(result);
        assertEquals(2, result.size());
        Assertions.assertEquals(expectedZoneNames, result);
        verify(serviceRest, times(1)).isServiceAdmin(serviceName);
        verify(serviceRest, times(1)).getPolicyAdminForDelegatedAdmin(serviceName);
        verify(policyAdmin, times(1)).getZoneNamesForResource(anyMap());
    }

    @Test
    public void testGetZoneNamesForResourceUnauthorized() throws Exception {
        String serviceName = "test_service";
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicyAdmin policyAdmin = Mockito.mock(RangerPolicyAdmin.class);

        when(serviceRest.isServiceAdmin(serviceName)).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("testuser");
        when(restErrorUtil.createRESTException(HttpServletResponse.SC_FORBIDDEN, "User 'testuser' does not have privilege", true)).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getZoneNamesForResource(serviceName, request);
        });
        verify(serviceRest, times(1)).isServiceAdmin(serviceName);
        verify(serviceRest, never()).getPolicyAdminForDelegatedAdmin(serviceName);
        verify(policyAdmin, never()).getZoneNamesForResource(anyMap());
    }

    @Test
    public void testGetZoneNamesForResourcePolicyAdminNull() throws Exception {
        String serviceName = "test_service";
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        when(serviceRest.isServiceAdmin(serviceName)).thenReturn(true);
        when(serviceRest.getPolicyAdminForDelegatedAdmin(serviceName)).thenReturn(null);

        Collection<String> result = securityZoneREST.getZoneNamesForResource(serviceName, request);

        Assertions.assertNull(result);
        verify(serviceRest).isServiceAdmin(serviceName);
        verify(serviceRest).getPolicyAdminForDelegatedAdmin(serviceName);
    }

    @Test
    public void testGetSecurityZoneHeaderInfoListByServiceId() throws Exception {
        Long serviceId = 1L;
        Boolean isTagService = false;
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerSecurityZoneHeaderInfo> expectedList = new ArrayList<>();
        RangerSecurityZoneHeaderInfo headerInfo = new RangerSecurityZoneHeaderInfo();
        headerInfo.setId(1L);
        headerInfo.setName("zone1");
        expectedList.add(headerInfo);

        when(securityZoneStore.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request)).thenReturn(expectedList);

        List<RangerSecurityZoneHeaderInfo> result = securityZoneREST.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);

        Assertions.assertEquals(expectedList, result);
        verify(securityZoneStore).getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
    }

    @Test
    public void testGetSecurityZoneHeaderInfoListByServiceIdWithException() throws Exception {
        Long serviceId = 1L;
        Boolean isTagService = false;
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        when(securityZoneStore.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request))
                .thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
        });

        verify(securityZoneStore).getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetSecurityZoneHeaderInfoListByServiceIdWithWebException() throws Exception {
        Long serviceId = 1L;
        Boolean isTagService = false;
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        when(securityZoneStore.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request))
                .thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
        });

        verify(securityZoneStore).getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
        verify(restErrorUtil, never()).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetZonesSummary() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = new SearchFilter();
        PList<SecurityZoneSummary> expectedSummary = new PList<>();
        SecurityZoneSummary summary = new SecurityZoneSummary();
        summary.setName("zone1");
        expectedSummary.setList(Arrays.asList(summary));

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getZonesSummary(filter)).thenReturn(expectedSummary);

        PList<SecurityZoneSummary> result = securityZoneREST.getZonesSummary(request);

        Assertions.assertEquals(expectedSummary, result);
        verify(securityZoneStore).getZonesSummary(filter);
    }

    @Test
    public void testGetZonesSummaryNoModuleAccess() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(false);
        when(restErrorUtil.createRESTException(anyString(), any())).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getZonesSummary(request);
        });
    }

    @Test
    public void testGetZonesSummaryWithException() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = new SearchFilter();

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getZonesSummary(filter)).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getZonesSummary(request);
        });

        verify(securityZoneStore).getZonesSummary(filter);
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetZonesSummaryWithWebException() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = new SearchFilter();

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getZonesSummary(filter)).thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.getZonesSummary(request);
        });

        verify(securityZoneStore).getZonesSummary(filter);
    }

    @Test
    public void testCreateSecurityZoneV2() throws Exception {
        RangerSecurityZoneV2 zoneV2 = new RangerSecurityZoneV2();
        RangerSecurityZone zoneV1 = createRangerSecurityZone();
        zoneV2.setName("testzone1");

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), eq(RangerValidator.Action.CREATE));
        when(securityZoneStore.createSecurityZone(any(RangerSecurityZone.class))).thenReturn(zoneV1);

        RangerSecurityZoneV2 result = securityZoneREST.createSecurityZone(zoneV2);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(zoneV1.getName(), result.getName());
    }

    @Test
    public void testCreateSecurityZoneV2AdminAccessDenied() throws Exception {
        RangerSecurityZoneV2 zoneV2 = new RangerSecurityZoneV2();
        zoneV2.setName("testzone1");

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("nonAdminUser");
        when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.createSecurityZone(zoneV2);
        });

        verify(rangerBizUtil).isAdmin();
        verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void testCreateSecurityZoneV2OptimisticLockException() throws Exception {
        RangerSecurityZoneV2 zoneV2 = new RangerSecurityZoneV2();
        zoneV2.setName("testzone1");

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), eq(RangerValidator.Action.CREATE));
        when(securityZoneStore.createSecurityZone(any(RangerSecurityZone.class))).thenThrow(new OptimisticLockException());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.createSecurityZone(zoneV2);
        });

        verify(securityZoneStore).createSecurityZone(any(RangerSecurityZone.class));
        verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void testUpdateSecurityZoneV2() throws Exception {
        Long zoneId = 2L;
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(zoneId);
        securityZoneV2.setName("updatedTestZoneV2");
        securityZoneV2.setServices(new HashMap<>());

        RangerSecurityZone securityZoneV1 = securityZoneV2.toV1();

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), eq(RangerValidator.Action.UPDATE));
        when(securityZoneStore.updateSecurityZoneById(any(RangerSecurityZone.class))).thenReturn(securityZoneV1);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("rangerAdmin");

        RangerSecurityZoneV2 result = securityZoneREST.updateSecurityZone(zoneId, securityZoneV2);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(securityZoneV1.getName(), result.getName());
    }

    @Test
    public void testUpdateSecurityZoneV2WithUnzonedId() throws Exception {
        Long zoneId = RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID;
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(zoneId);

        when(restErrorUtil.createRESTException("Cannot update unzoned zone")).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.updateSecurityZone(zoneId, securityZoneV2);
        });

        verify(restErrorUtil).createRESTException("Cannot update unzoned zone");
    }

    @Test
    public void testUpdateSecurityZoneV2OptimisticLockException() throws Exception {
        Long zoneId = 2L;
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(zoneId);
        securityZoneV2.setName("testZoneV2");

        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), eq(RangerValidator.Action.UPDATE));
        when(securityZoneStore.updateSecurityZoneById(any(RangerSecurityZone.class))).thenThrow(new OptimisticLockException());
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            securityZoneREST.updateSecurityZone(zoneId, securityZoneV2);
        });

        verify(securityZoneStore).updateSecurityZoneById(any(RangerSecurityZone.class));
        verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void testUpdateSecurityZoneWithChangeRequest() throws Exception {
        Long zoneId = 2L;
        RangerSecurityZoneChangeRequest changeRequest = new RangerSecurityZoneChangeRequest();
        RangerSecurityZone existingZone = createRangerSecurityZone();
        existingZone.setId(zoneId);
        existingZone.setName("existingZone");
        existingZone.setServices(new HashMap<>());

        RangerSecurityZone updatedZone = createRangerSecurityZone();
        updatedZone.setId(zoneId);
        updatedZone.setName("updatedZoneFromChange");
        updatedZone.setServices(new HashMap<>());

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(securityZoneStore.getSecurityZone(zoneId)).thenReturn(existingZone);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), any());
        when(securityZoneStore.updateSecurityZoneById(any(RangerSecurityZone.class))).thenReturn(updatedZone);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("admin");

        SecurityZoneREST spySecurityZoneREST = Mockito.spy(securityZoneREST);
        when(spySecurityZoneREST.getSecurityZone(zoneId)).thenReturn(existingZone);

        Boolean result = spySecurityZoneREST.updateSecurityZone(zoneId, changeRequest);

        Assertions.assertTrue(result);
        verify(spySecurityZoneREST, times(2)).getSecurityZone(anyLong());
        verify(securityZoneStore, times(1)).updateSecurityZoneById(any(RangerSecurityZone.class));
    }

    @Test
    public void testUpdateSecurityZoneWithChangeRequestException() throws Exception {
        Long zoneId = 2L;
        RangerSecurityZoneChangeRequest changeRequest = new RangerSecurityZoneChangeRequest();
        RangerSecurityZone existingZone = createRangerSecurityZone();
        existingZone.setId(zoneId);

        SecurityZoneREST spySecurityZoneREST = Mockito.spy(securityZoneREST);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(spySecurityZoneREST.getSecurityZone(zoneId)).thenReturn(existingZone);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), any());
        when(securityZoneStore.updateSecurityZoneById(any(RangerSecurityZone.class))).thenThrow(new RuntimeException("General exception"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            spySecurityZoneREST.updateSecurityZone(zoneId, changeRequest);
        });

        verify(securityZoneStore).updateSecurityZoneById(any(RangerSecurityZone.class));
        verify(restErrorUtil).createRESTException(Mockito.anyString());
    }

    @Test
    public void testUpdateSecurityZoneWithChangeRequestWebException() throws Exception {
        Long zoneId = 2L;
        RangerSecurityZoneChangeRequest changeRequest = new RangerSecurityZoneChangeRequest();
        RangerSecurityZone existingZone = createRangerSecurityZone();
        existingZone.setId(zoneId);

        SecurityZoneREST spySecurityZoneREST = Mockito.spy(securityZoneREST);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(spySecurityZoneREST.getSecurityZone(zoneId)).thenReturn(existingZone);
        when(rangerBizUtil.isAdmin()).thenReturn(true);
        when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator);
        doNothing().when(validator).validate(any(RangerSecurityZone.class), any());
        when(securityZoneStore.updateSecurityZoneById(any(RangerSecurityZone.class))).thenThrow(new WebApplicationException());

        WebApplicationException thrown = assertThrows(WebApplicationException.class, () -> {
            spySecurityZoneREST.updateSecurityZone(zoneId, changeRequest);
        });

        verify(securityZoneStore).updateSecurityZoneById(any(RangerSecurityZone.class));
        verify(restErrorUtil, never()).createRESTException(Mockito.anyString());
    }

    @Test
    public void testGetSecurityZoneV2ByName() throws Exception {
        String zoneName = "testzone1";
        RangerSecurityZone zoneV1 = createRangerSecurityZone();
        zoneV1.setName(zoneName);

        SecurityZoneREST spySecurityZoneREST = spy(securityZoneREST);
        doReturn(zoneV1).when(spySecurityZoneREST).getSecurityZone(zoneName);

        RangerSecurityZoneV2 result = spySecurityZoneREST.getSecurityZoneV2(zoneName);

        Assertions.assertNotNull(result);
        assertEquals(zoneName, result.getName());
        verify(spySecurityZoneREST, times(1)).getSecurityZone(zoneName);
    }

    @Test
    public void testGetSecurityZoneV2ById() throws Exception {
        Long zoneId = 1L;
        RangerSecurityZone zoneV1 = createRangerSecurityZone();
        zoneV1.setId(zoneId);

        SecurityZoneREST spySecurityZoneREST = spy(securityZoneREST);
        doReturn(zoneV1).when(spySecurityZoneREST).getSecurityZone(zoneId);

        RangerSecurityZoneV2 result = spySecurityZoneREST.getSecurityZoneV2(zoneId);

        assertNotNull(result);
        assertEquals(zoneId, result.getId());
        verify(spySecurityZoneREST, times(1)).getSecurityZone(zoneId);
    }

    @Test
    public void testGetAllZonesV2() throws Exception {
        RangerSecurityZoneList zoneList = new RangerSecurityZoneList();
        List<RangerSecurityZone> zones = Arrays.asList(createRangerSecurityZone());
        zoneList.setSecurityZoneList(zones);
        zoneList.setTotalCount(1);
        zoneList.setResultSize(1);

        SearchFilter filter = new SearchFilter();
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(searchUtil.getSearchFilter(request, securityZoneService.sortFields)).thenReturn(filter);
        when(securityZoneStore.getSecurityZones(filter)).thenReturn(zones);

        PList<RangerSecurityZoneV2> result = securityZoneREST.getAllZonesV2(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(1, result.getList().size());
        Assertions.assertEquals("testzone1", result.getList().get(0).getName());
    }

    @Test
    public void testGetResourcesByZoneId() throws Exception {
        Long zoneId = 2L;
        String serviceName = "test_service";
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerSecurityZone zone = createRangerSecurityZone();
        zone.setId(zoneId);

        SearchFilter filter = Mockito.mock(SearchFilter.class);

        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(securityZoneStore.getSecurityZone(zoneId)).thenReturn(zone);

        securityZoneREST.getResources(zoneId, serviceName, request);

        verify(securityZoneStore).getSecurityZone(zoneId);
    }

    @Test
    public void testGetResourcesByZoneName() throws Exception {
        String zoneName = "testzone1";
        String serviceName = "test_service";
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerSecurityZone zone = createRangerSecurityZone();
        zone.setName(zoneName);

        SearchFilter filter = new SearchFilter();
        when(rangerBizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        when(securityZoneStore.getSecurityZoneByName(zoneName)).thenReturn(zone);

        securityZoneREST.getResources(zoneName, serviceName, request);

        verify(securityZoneStore).getSecurityZoneByName(zoneName);
    }

    @Test
    public void testEnsureUserAllowOperationOnServiceForZone_NameChangeThrows() throws Exception {
        RangerSecurityZone uiZone = createRangerSecurityZone();
        uiZone.setId(5L);
        uiZone.setName("changedZone");
        RangerSecurityZone dbZone = createRangerSecurityZone();
        dbZone.setId(5L);
        dbZone.setName("originalZone");

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("user1");
        when(svcStore.getSecurityZone(5L)).thenReturn(dbZone);
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.eq(true))).thenReturn(new WebApplicationException());

        Method m = SecurityZoneREST.class.getDeclaredMethod("ensureUserAllowOperationOnServiceForZone", RangerSecurityZone.class);
        m.setAccessible(true);

        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(securityZoneREST, uiZone);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testEnsureUserAllowOperationOnServiceForZone_ServiceAssociationThrows() throws Exception {
        RangerSecurityZone dbZone = createRangerSecurityZone();
        dbZone.setId(7L);
        // existing services: {"test_service_1"}
        RangerSecurityZone uiZone = createRangerSecurityZone();
        uiZone.setId(7L);
        // add a new service to trigger diff
        RangerSecurityZone.RangerSecurityZoneService extraSvc = new RangerSecurityZone.RangerSecurityZoneService();
        extraSvc.setResources(new ArrayList<>());
        uiZone.getServices().put("svc-new", extraSvc);

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("user2");
        when(svcStore.getSecurityZone(7L)).thenReturn(dbZone);
        when(serviceMgr.isZoneAdmin(dbZone.getName())).thenReturn(false);
        when(svcStore.isServiceAdminUser(Mockito.eq("svc-new"), Mockito.eq("user2"))).thenReturn(false);
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.eq(true))).thenReturn(new WebApplicationException());

        Method m = SecurityZoneREST.class.getDeclaredMethod("ensureUserAllowOperationOnServiceForZone", RangerSecurityZone.class);
        m.setAccessible(true);

        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(securityZoneREST, uiZone);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testThrowRestError_Direct() throws Exception {
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.eq(true))).thenReturn(new WebApplicationException());
        Method m = SecurityZoneREST.class.getDeclaredMethod("throwRestError", String.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(securityZoneREST, "forbidden change");
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testGetResourcesPrivate_NoMatchingServiceReturnsNull() throws Exception {
        RangerSecurityZone zone = createRangerSecurityZone();
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = Mockito.mock(SearchFilter.class);

        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("user3");

        Method m = SecurityZoneREST.class.getDeclaredMethod("getResources", RangerSecurityZone.class, String.class, HttpServletRequest.class);
        m.setAccessible(true);
        Object ret = m.invoke(securityZoneREST, zone, "unknown_service", request);
        Assertions.assertNull(ret);
    }

    @Test
    public void testGetResourcesPrivate_WithMatchingServiceReturnsPList() throws Exception {
        RangerSecurityZone zone = createRangerSecurityZone();
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        SearchFilter filter = Mockito.mock(SearchFilter.class);
        when(filter.getStartIndex()).thenReturn(0);
        when(filter.getMaxRows()).thenReturn(100);
        when(searchUtil.getSearchFilter(request, Collections.emptyList())).thenReturn(filter);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("user4");

        Method m = SecurityZoneREST.class.getDeclaredMethod("getResources", RangerSecurityZone.class, String.class, HttpServletRequest.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        PList<RangerSecurityZoneV2.RangerSecurityZoneResource> ret = (PList<RangerSecurityZoneV2.RangerSecurityZoneResource>) m.invoke(securityZoneREST, zone, "test_service_1", request);
        assertNotNull(ret);
    }

    @Test
    public void testEnsureUserAllowOperationOnServiceForZone_TagServiceChangeThrows() throws Exception {
        RangerSecurityZone dbZone = createRangerSecurityZone();
        dbZone.setId(11L);
        dbZone.setTagServices(new ArrayList<>(Arrays.asList("tagA")));
        RangerSecurityZone uiZone = createRangerSecurityZone();
        uiZone.setId(11L);
        uiZone.setTagServices(new ArrayList<>(Arrays.asList("tagA", "tagB")));

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("userTag");
        when(svcStore.getSecurityZone(11L)).thenReturn(dbZone);
        when(serviceMgr.isZoneAdmin(dbZone.getName())).thenReturn(false);
        when(svcStore.isServiceAdminUser(Mockito.eq("tagB"), Mockito.eq("userTag"))).thenReturn(false);
        when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.eq(true))).thenReturn(new WebApplicationException());

        Method m = SecurityZoneREST.class.getDeclaredMethod("ensureUserAllowOperationOnServiceForZone", RangerSecurityZone.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(securityZoneREST, uiZone);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testEnsureUserAllowOperationOnServiceForZone_SvcStoreThrowsPropagatesAsRestError() throws Exception {
        RangerSecurityZone uiZone = createRangerSecurityZone();
        uiZone.setId(13L);

        when(rangerBizUtil.isAdmin()).thenReturn(false);
        when(rangerBizUtil.getCurrentUserLoginId()).thenReturn("userX");
        when(svcStore.getSecurityZone(13L)).thenThrow(new RuntimeException("db error"));
        when(restErrorUtil.createRESTException(Mockito.anyString())).thenReturn(new WebApplicationException());

        Method m = SecurityZoneREST.class.getDeclaredMethod("ensureUserAllowOperationOnServiceForZone", RangerSecurityZone.class);
        m.setAccessible(true);
        assertThrows(WebApplicationException.class, () -> {
            try {
                m.invoke(securityZoneREST, uiZone);
            } catch (InvocationTargetException ite) {
                throw (RuntimeException) ite.getCause();
            }
        });
    }

    @Test
    public void testUpdateSecurityZoneWithChangeRequest_GetSecurityZoneWebException() throws Exception {
        Long zoneId = 21L;
        RangerSecurityZoneV2.RangerSecurityZoneChangeRequest changeRequest = new RangerSecurityZoneV2.RangerSecurityZoneChangeRequest();

        SecurityZoneREST spySecurityZoneREST = Mockito.spy(securityZoneREST);
        Mockito.doThrow(new WebApplicationException()).when(spySecurityZoneREST).getSecurityZone(zoneId);

        assertThrows(WebApplicationException.class, () -> {
            spySecurityZoneREST.updateSecurityZone(zoneId, changeRequest);
        });
    }

    private RangerSecurityZone createRangerSecurityZone() {
        String       testZone1              = "testzone1";
        List<String> testZone1ResoursesList = new ArrayList(Arrays.asList("/path/to/resource1", "/path/to/resource2"));
        List<String> userGroupList          = new ArrayList(Arrays.asList("testuser", "testgroup"));

        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setName(testZone1);
        zone.setAdminUserGroups(userGroupList);
        zone.setAdminUsers(userGroupList);
        zone.setAuditUserGroups(userGroupList);
        zone.setAuditUsers(userGroupList);
        Map<String, RangerSecurityZoneService> services = new HashMap<>();

        List<HashMap<String, List<String>>> resources = new ArrayList<>();
        HashMap<String, List<String>>       resource  = new HashMap<String, List<String>>();

        resource.put("resource_path", testZone1ResoursesList);

        resources.add(resource);

        RangerSecurityZoneService zoneService = new RangerSecurityZoneService();

        zoneService.setResources(resources);
        services.put("test_service_1", zoneService);
        zone.setServices(services);
        return zone;
    }
}
