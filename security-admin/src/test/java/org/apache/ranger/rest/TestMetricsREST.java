/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.rest;

import org.apache.ranger.metrics.RangerAdminMetricsWrapper;
import org.apache.ranger.plugin.model.RangerMetrics;
import org.apache.ranger.util.RangerMetricsUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestMetricsREST class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestMetricsREST {
    @InjectMocks
    MetricsREST metricsREST = new MetricsREST();

    @Mock
    RangerMetricsUtil jvmMetricUtil;

    @Mock
    RangerAdminMetricsWrapper rangerAdminMetricsWrapper;

    @Test
    public void testGetStatus() throws Exception {
        Map<String, Object> rangerMetricsValues = getRangerMetricsValues();

        Mockito.when(jvmMetricUtil.getValues()).thenReturn(rangerMetricsValues);

        RangerMetrics rangerMetrics = metricsREST.getStatus();

        Assertions.assertNotNull(rangerMetrics);
        Assertions.assertNotNull(rangerMetrics.getData());
        Assertions.assertNotNull(rangerMetrics.getData().get("jvm"));

        Map<String, Object> jvmMetricsMap = (Map<String, Object>) rangerMetrics.getData().get("jvm");

        Assertions.assertNotNull(jvmMetricsMap.get("JVM Machine Actual Name"));
        Assertions.assertNotNull(jvmMetricsMap.get("version"));
        Assertions.assertNotNull(jvmMetricsMap.get("JVM Vendor Name"));
        Assertions.assertEquals("Mac OS X, x86_64, 12.6.3", jvmMetricsMap.get("os.spec"));
        Assertions.assertEquals("8", jvmMetricsMap.get("os.vcpus"));
        Assertions.assertNotNull(jvmMetricsMap.get("memory"));

        Map<String, Object> memoryDetailsMap = (Map<String, Object>) jvmMetricsMap.get("memory");

        Assertions.assertEquals("7635730432", memoryDetailsMap.get("heapMax"));
        Assertions.assertEquals("40424768", memoryDetailsMap.get("heapUsed"));
    }

    @Test
    public void testGetStatus_ExceptionInJvmMetrics() throws Exception {
        when(jvmMetricUtil.getValues()).thenThrow(new RuntimeException("JVM metrics exception"));

        assertThrows(RuntimeException.class, () -> metricsREST.getStatus());

        verify(jvmMetricUtil, times(1)).getValues();
    }

    @Test
    public void testGetStatus_NullJvmMetrics() throws Exception {
        when(jvmMetricUtil.getValues()).thenReturn(null);

        assertThrows(NullPointerException.class, () -> metricsREST.getStatus());
    }

    @Test
    public void testGetStatus_EmptyJvmMetrics() throws Exception {
        when(jvmMetricUtil.getValues()).thenReturn(new HashMap<>());

        RangerMetrics result = metricsREST.getStatus();

        assertNotNull(result);
        assertNotNull(result.getData());
        assertNotNull(result.getData().get("jvm"));

        Map<String, Object> jvmMetricsMap = (Map<String, Object>) result.getData().get("jvm");

        assertNotNull(jvmMetricsMap.get("JVM Machine Actual Name"));
        assertNotNull(jvmMetricsMap.get("version"));
        assertNotNull(jvmMetricsMap.get("JVM Vendor Name"));
        assertNotNull(jvmMetricsMap.get("Up time of JVM"));

        verify(jvmMetricUtil, times(1)).getValues();
    }

    @Test
    public void testGetMetricsPrometheus_Success() throws Exception {
        String expectedPrometheusMetrics = "jvm_memory_used_bytes{area=\"heap\"} 40424768\n" +
                                           "jvm_memory_used_bytes{area=\"nonheap\"} 123456789\n";

        when(rangerAdminMetricsWrapper.getRangerMetricsInPrometheusFormat()).thenReturn(expectedPrometheusMetrics);

        String result = metricsREST.getMetricsPrometheus();

        assertNotNull(result);
        assertEquals(expectedPrometheusMetrics, result);
        verify(rangerAdminMetricsWrapper, times(1)).getRangerMetricsInPrometheusFormat();
    }

    @Test
    public void testGetMetricsPrometheus_Exception() throws Exception {
        when(rangerAdminMetricsWrapper.getRangerMetricsInPrometheusFormat()).thenThrow(new RuntimeException("Metrics exception"));

        String result = metricsREST.getMetricsPrometheus();

        assertNotNull(result);
        assertEquals("", result);
        verify(rangerAdminMetricsWrapper, times(1)).getRangerMetricsInPrometheusFormat();
    }

    @Test
    public void testGetMetricsJson_Success() throws Exception {
        Map<String, Map<String, Object>> expectedJsonMetrics = new HashMap<>();
        Map<String, Object> jvmMetrics = new HashMap<>();
        jvmMetrics.put("heapUsed", 40424768L);
        jvmMetrics.put("heapMax", 7635730432L);
        expectedJsonMetrics.put("jvm", jvmMetrics);

        Map<String, Object> httpMetrics = new HashMap<>();
        httpMetrics.put("requestCount", 1000);
        httpMetrics.put("responseTime", 250.5);
        expectedJsonMetrics.put("http", httpMetrics);

        when(rangerAdminMetricsWrapper.getRangerMetrics()).thenReturn(expectedJsonMetrics);

        Map<String, Map<String, Object>> result = metricsREST.getMetricsJson();

        assertNotNull(result);
        assertEquals(expectedJsonMetrics, result);
        assertEquals(2, result.size());
        assertTrue(result.containsKey("jvm"));
        assertTrue(result.containsKey("http"));

        Map<String, Object> jvmResult = result.get("jvm");
        assertEquals(40424768L, jvmResult.get("heapUsed"));
        assertEquals(7635730432L, jvmResult.get("heapMax"));

        Map<String, Object> httpResult = result.get("http");
        assertEquals(1000, httpResult.get("requestCount"));
        assertEquals(250.5, httpResult.get("responseTime"));

        verify(rangerAdminMetricsWrapper, times(1)).getRangerMetrics();
    }

    @Test
    public void testGetMetricsJson_Exception() throws Exception {
        when(rangerAdminMetricsWrapper.getRangerMetrics()).thenThrow(new RuntimeException("Metrics exception"));

        Map<String, Map<String, Object>> result = metricsREST.getMetricsJson();

        assertNull(result);
        verify(rangerAdminMetricsWrapper, times(1)).getRangerMetrics();
    }

    @Test
    public void testGetMetricsJson_EmptyResult() throws Exception {
        Map<String, Map<String, Object>> emptyMetrics = new HashMap<>();
        when(rangerAdminMetricsWrapper.getRangerMetrics()).thenReturn(emptyMetrics);

        Map<String, Map<String, Object>> result = metricsREST.getMetricsJson();

        assertNotNull(result);
        assertTrue(result.isEmpty());
        verify(rangerAdminMetricsWrapper, times(1)).getRangerMetrics();
    }

    private Map<String, Object> getRangerMetricsValues() {
        Map<String, Object> rangerMetricsMap = new LinkedHashMap<>();
        rangerMetricsMap.put("os.spec", "Mac OS X, x86_64, 12.6.3");
        rangerMetricsMap.put("os.vcpus", "8");

        Map<String, Object> memoryDetailsMap = new LinkedHashMap<>();
        memoryDetailsMap.put("heapMax", String.valueOf(7635730432L));
        memoryDetailsMap.put("heapCommitted", String.valueOf(514850816L));
        memoryDetailsMap.put("heapUsed", String.valueOf(40424768L));
        rangerMetricsMap.put("memory", memoryDetailsMap);

        return rangerMetricsMap;
    }
}
