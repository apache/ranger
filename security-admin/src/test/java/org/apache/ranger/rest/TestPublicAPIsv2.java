/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.rest;

import org.apache.ranger.admin.client.datatype.RESTResponse;
import org.apache.ranger.biz.SecurityZoneDBStore;
import org.apache.ranger.common.ContextUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerSearchUtil;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.plugin.model.RangerPluginInfo;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZoneHeaderInfo;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneChangeRequest;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneResource;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerContextEnricherDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerEnumDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerServiceConfigDef;
import org.apache.ranger.plugin.model.RangerServiceHeaderInfo;
import org.apache.ranger.plugin.model.RangerServiceTags;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.util.GrantRevokeRoleRequest;
import org.apache.ranger.plugin.util.RangerPurgeResult;
import org.apache.ranger.plugin.util.ServiceTags;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.apache.ranger.service.RangerPolicyService;
import org.apache.ranger.view.RangerPluginInfoList;
import org.apache.ranger.view.RangerPolicyList;
import org.apache.ranger.view.RangerRoleList;
import org.apache.ranger.view.RangerSecurityZoneList;
import org.apache.ranger.view.RangerServiceDefList;
import org.apache.ranger.view.RangerServiceList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.WebApplicationException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for TestPublicAPIsv2 class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPublicAPIsv2 {
    private static final Long Id  = 8L;
    private static final Long Id2 = 10L;
    @InjectMocks
    PublicAPIsv2        publicAPIsv2 = new PublicAPIsv2();
    @Mock
    ServiceREST         serviceREST;
    @Mock
    SecurityZoneREST    securityZoneRest;
    @Mock
    RangerSearchUtil    searchUtil;
    @Mock
    RangerPolicyService policyService;
    @Mock
    RESTErrorUtil       restErrorUtil;
    @Mock
    SecurityZoneDBStore securityZoneStore;
    @Mock
    TagREST             tagREST;
    @Mock
    RoleREST            roleREST;

    @BeforeEach
    public void setup() throws Exception {
        RangerSecurityContext context = new RangerSecurityContext();
        context.setUserSession(new UserSessionBase());
        RangerContextHolder.setSecurityContext(context);
        UserSessionBase currentUserSession = ContextUtil.getCurrentUserSession();
        currentUserSession.setUserAdmin(true);
    }

    @Test
    public void test1getServiceDef() throws Exception {
        RangerServiceDef rangerServiceDef = rangerServiceDef();
        Mockito.when(serviceREST.getServiceDef(rangerServiceDef.getId())).thenReturn(rangerServiceDef);
        RangerServiceDef dbRangerServiceDef = publicAPIsv2.getServiceDef(Id);
        Assertions.assertNotNull(dbRangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef, rangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef.getId(), rangerServiceDef.getId());
        Assertions.assertEquals(dbRangerServiceDef.getName(), rangerServiceDef.getName());
        Mockito.verify(serviceREST).getServiceDef(Id);
    }

    @Test
    public void test2getServiceDefByName() throws Exception {
        RangerServiceDef rangerServiceDef = rangerServiceDef();
        String           name             = rangerServiceDef.getName();
        Mockito.when(serviceREST.getServiceDefByName(name)).thenReturn(rangerServiceDef);
        RangerServiceDef dbRangerServiceDef = publicAPIsv2.getServiceDefByName(name);
        Assertions.assertNotNull(dbRangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef, rangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef.getId(), rangerServiceDef.getId());
        Assertions.assertEquals(dbRangerServiceDef.getName(), rangerServiceDef.getName());
        Mockito.verify(serviceREST).getServiceDefByName(name);
    }

    @Test
    public void test3searchServiceDefs() throws Exception {
        HttpServletRequest     request         = Mockito.mock(HttpServletRequest.class);
        List<RangerServiceDef> serviceDefsList = new ArrayList<RangerServiceDef>();
        RangerServiceDef       serviceDef      = rangerServiceDef();
        serviceDefsList.add(serviceDef);
        RangerServiceDefList serviceDefList = new RangerServiceDefList(serviceDefsList);
        Mockito.when(serviceREST.getServiceDefs(request)).thenReturn(serviceDefList);
        List<RangerServiceDef> dbRangerServiceDefList = publicAPIsv2.searchServiceDefs(request);
        Assertions.assertNotNull(dbRangerServiceDefList);
        Assertions.assertEquals(dbRangerServiceDefList.size(), serviceDefsList.size());
        Mockito.verify(serviceREST).getServiceDefs(request);
    }

    @Test
    public void test4createServiceDef() throws Exception {
        RangerServiceDef rangerServiceDef = rangerServiceDef();
        Mockito.when(serviceREST.createServiceDef(rangerServiceDef)).thenReturn(rangerServiceDef);
        RangerServiceDef dbRangerServiceDef = publicAPIsv2.createServiceDef(rangerServiceDef);
        Assertions.assertNotNull(dbRangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef, rangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef.getId(), rangerServiceDef.getId());
        Assertions.assertEquals(dbRangerServiceDef.getName(), rangerServiceDef.getName());
        Mockito.verify(serviceREST).createServiceDef(rangerServiceDef);
    }

    @Test
    public void test5updateServiceDef() throws Exception {
        RangerServiceDef rangerServiceDef = rangerServiceDef();
        Mockito.when(serviceREST.updateServiceDef(rangerServiceDef, rangerServiceDef.getId())).thenReturn(rangerServiceDef);
        RangerServiceDef dbRangerServiceDef = publicAPIsv2.updateServiceDef(rangerServiceDef, Id);
        Assertions.assertNotNull(dbRangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef, rangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef.getId(), rangerServiceDef.getId());
        Assertions.assertEquals(dbRangerServiceDef.getName(), rangerServiceDef.getName());
        Mockito.verify(serviceREST).updateServiceDef(rangerServiceDef, rangerServiceDef.getId());
    }

    @Test
    public void test6updateServiceDefByName() throws Exception {
        RangerServiceDef rangerServiceDef = rangerServiceDef();
        String           name             = rangerServiceDef.getName();
        Mockito.when(serviceREST.getServiceDefByName(name)).thenReturn(rangerServiceDef);
        Mockito.when(serviceREST.updateServiceDef(rangerServiceDef, rangerServiceDef.getId())).thenReturn(rangerServiceDef);
        RangerServiceDef dbRangerServiceDef = publicAPIsv2.updateServiceDefByName(rangerServiceDef, name);
        Assertions.assertNotNull(dbRangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef, rangerServiceDef);
        Assertions.assertEquals(dbRangerServiceDef.getId(), rangerServiceDef.getId());
        Assertions.assertEquals(dbRangerServiceDef.getName(), rangerServiceDef.getName());
        Mockito.verify(serviceREST).updateServiceDef(rangerServiceDef, dbRangerServiceDef.getId());
        Mockito.verify(serviceREST).getServiceDefByName(name);
    }

    @Test
    public void test7deleteServiceDef() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.doNothing().when(serviceREST).deleteServiceDef(Id, request);
        publicAPIsv2.deleteServiceDef(Id, request);
        Mockito.verify(serviceREST).deleteServiceDef(Id, request);
    }

    @Test
    public void test8deleteServiceDefByName() throws Exception {
        HttpServletRequest request          = Mockito.mock(HttpServletRequest.class);
        RangerServiceDef   rangerServiceDef = rangerServiceDef();
        String             name             = rangerServiceDef.getName();
        Mockito.when(serviceREST.getServiceDefByName(name)).thenReturn(rangerServiceDef);
        Mockito.doNothing().when(serviceREST).deleteServiceDef(rangerServiceDef.getId(), request);
        publicAPIsv2.deleteServiceDefByName(name, request);
        Mockito.verify(serviceREST).deleteServiceDef(rangerServiceDef.getId(), request);
        Mockito.verify(serviceREST).getServiceDefByName(name);
    }

    @Test
    public void test9getService() throws Exception {
        RangerService rangerService = rangerService();
        Mockito.when(serviceREST.getService(rangerService.getId())).thenReturn(rangerService);
        RangerService dbRangerService = publicAPIsv2.getService(Id);
        Assertions.assertNotNull(dbRangerService);
        Assertions.assertEquals(dbRangerService, rangerService);
        Assertions.assertEquals(dbRangerService.getId(), rangerService.getId());
        Assertions.assertEquals(dbRangerService.getName(), rangerService.getName());
        Mockito.verify(serviceREST).getService(Id);
    }

    @Test
    public void test10getServiceByName() throws Exception {
        RangerService rangerService = rangerService();
        String        name          = rangerService.getName();
        Mockito.when(serviceREST.getServiceByName(name)).thenReturn(rangerService);
        RangerService dbRangerService = publicAPIsv2.getServiceByName(name);
        Assertions.assertNotNull(dbRangerService);
        Assertions.assertEquals(dbRangerService, rangerService);
        Assertions.assertEquals(dbRangerService.getId(), rangerService.getId());
        Assertions.assertEquals(dbRangerService.getName(), rangerService.getName());
        Mockito.verify(serviceREST).getServiceByName(name);
    }

    @Test
    public void test11searchServices() throws Exception {
        HttpServletRequest  request      = Mockito.mock(HttpServletRequest.class);
        List<RangerService> servicesList = new ArrayList<RangerService>();
        RangerService       service      = rangerService();
        servicesList.add(service);
        RangerServiceList serviceList = new RangerServiceList(servicesList);
        Mockito.when(serviceREST.getServices(request)).thenReturn(serviceList);
        List<RangerService> dbRangerServiceList = publicAPIsv2.searchServices(request);
        Assertions.assertNotNull(dbRangerServiceList);
        Assertions.assertEquals(dbRangerServiceList.size(), servicesList.size());
        Mockito.verify(serviceREST).getServices(request);
    }

    @Test
    public void test12createService() throws Exception {
        RangerService rangerService = rangerService();
        Mockito.when(serviceREST.createService(rangerService)).thenReturn(rangerService);
        RangerService dbRangerService = publicAPIsv2.createService(rangerService);
        Assertions.assertNotNull(dbRangerService);
        Assertions.assertEquals(dbRangerService, rangerService);
        Assertions.assertEquals(dbRangerService.getId(), rangerService.getId());
        Assertions.assertEquals(dbRangerService.getName(), rangerService.getName());
        Mockito.verify(serviceREST).createService(rangerService);
    }

    @Test
    public void test13updateService() throws Exception {
        RangerService      rangerService = rangerService();
        HttpServletRequest request       = null;
        Mockito.when(serviceREST.updateService(rangerService, request)).thenReturn(rangerService);
        RangerService dbRangerService = publicAPIsv2.updateService(rangerService, Id, request);
        Assertions.assertNotNull(dbRangerService);
        Assertions.assertEquals(dbRangerService, rangerService);
        Assertions.assertEquals(dbRangerService.getId(), rangerService.getId());
        Assertions.assertEquals(dbRangerService.getName(), rangerService.getName());
        Mockito.verify(serviceREST).updateService(rangerService, request);
    }

    @Test
    public void test14updateServiceByName() throws Exception {
        RangerService      rangerService = rangerService();
        HttpServletRequest request       = null;
        String             name          = rangerService.getName();
        Mockito.when(serviceREST.getServiceByName(name)).thenReturn(rangerService);
        Mockito.when(serviceREST.updateService(rangerService, request)).thenReturn(rangerService);
        RangerService dbRangerService = publicAPIsv2.updateServiceByName(rangerService, name, request);
        Assertions.assertNotNull(dbRangerService);
        Assertions.assertEquals(dbRangerService, rangerService);
        Assertions.assertEquals(dbRangerService.getId(), rangerService.getId());
        Assertions.assertEquals(dbRangerService.getName(), rangerService.getName());
        Mockito.verify(serviceREST).updateService(rangerService, request);
        Mockito.verify(serviceREST).getServiceByName(name);
    }

    @Test
    public void test15deleteService() throws Exception {
        Mockito.doNothing().when(serviceREST).deleteService(Id);
        publicAPIsv2.deleteService(Id);
        Mockito.verify(serviceREST).deleteService(Id);
    }

    @Test
    public void test16deleteServiceByName() throws Exception {
        RangerService rangerService = rangerService();
        String        name          = rangerService.getName();
        Mockito.when(serviceREST.getServiceByName(name)).thenReturn(rangerService);
        Mockito.doNothing().when(serviceREST).deleteService(rangerService.getId());
        publicAPIsv2.deleteServiceByName(name);
        Mockito.verify(serviceREST).deleteService(rangerService.getId());
        Mockito.verify(serviceREST).getServiceByName(name);
    }

    @Test
    public void test17getPolicy() throws Exception {
        RangerPolicy rangerPolicy = rangerPolicy();
        Mockito.when(serviceREST.getPolicy(rangerPolicy.getId())).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.getPolicy(Id);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).getPolicy(Id);
    }

    @Test
    public void test18getPolicyByName() throws Exception {
        HttpServletRequest request       = Mockito.mock(HttpServletRequest.class);
        RangerPolicy       rangerPolicy  = rangerPolicy();
        RangerService      rangerService = rangerService();
        String             serviceName   = rangerService.getName();
        String             policyName    = rangerPolicy.getName();
        String             zoneName      = "zone-1";
        Mockito.when(serviceREST.getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.getPolicyByName(serviceName, policyName, zoneName, request);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());
    }

    @Test
    public void test19searchPolicies() throws Exception {
        HttpServletRequest request      = Mockito.mock(HttpServletRequest.class);
        List<RangerPolicy> policiesList = new ArrayList<RangerPolicy>();
        RangerService      service      = rangerService();
        String             serviceName  = service.getName();
        RangerPolicy       rangerPolicy = rangerPolicy();
        policiesList.add(rangerPolicy);
        RangerPolicyList policyList = new RangerPolicyList(policiesList);
        Mockito.when(serviceREST.getServicePoliciesByName(serviceName, request)).thenReturn(policyList);
        List<RangerPolicy> dbRangerPolicyList = publicAPIsv2.searchPolicies(serviceName, request);
        Assertions.assertNotNull(dbRangerPolicyList);
        Assertions.assertEquals(dbRangerPolicyList.size(), policiesList.size());
        Mockito.verify(serviceREST).getServicePoliciesByName(serviceName, request);
    }

    @Test
    public void test20createPolicy() throws Exception {
        HttpServletRequest request      = Mockito.mock(HttpServletRequest.class);
        RangerPolicy       rangerPolicy = rangerPolicy();
        Mockito.when(serviceREST.createPolicy(rangerPolicy, request)).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.createPolicy(rangerPolicy, request);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).createPolicy(rangerPolicy, request);
    }

    @Test
    public void test21applyPolicy() throws Exception {
        HttpServletRequest request      = Mockito.mock(HttpServletRequest.class);
        RangerPolicy       rangerPolicy = rangerPolicy();
        Mockito.when(serviceREST.applyPolicy(rangerPolicy, request)).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.applyPolicy(rangerPolicy, request);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).applyPolicy(rangerPolicy, request);
    }

    @Test
    public void test22updatePolicy() throws Exception {
        RangerPolicy rangerPolicy = rangerPolicy();
        Mockito.when(serviceREST.updatePolicy(rangerPolicy, Id)).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.updatePolicy(rangerPolicy, Id);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).updatePolicy(rangerPolicy, Id);
    }

    @Test
    public void test23updatePolicyByName() throws Exception {
        HttpServletRequest request       = Mockito.mock(HttpServletRequest.class);
        RangerPolicy       rangerPolicy  = rangerPolicy();
        String             policyName    = rangerPolicy.getName();
        RangerService      rangerService = rangerService();
        String             serviceName   = rangerService.getName();
        String             zoneName      = "zone-1";
        Mockito.when(serviceREST.getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(rangerPolicy);
        Mockito.when(serviceREST.updatePolicy(rangerPolicy, rangerPolicy.getId())).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.updatePolicyByName(rangerPolicy, serviceName, policyName, zoneName, request);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).updatePolicy(rangerPolicy, rangerPolicy.getId());
        Mockito.verify(serviceREST).getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());
    }

    @Test
    public void test24deletePolicy() throws Exception {
        Mockito.doNothing().when(serviceREST).deletePolicy(Id);
        publicAPIsv2.deletePolicy(Id);
        Mockito.verify(serviceREST).deletePolicy(Id);
    }

    @Test
    public void test25deletePolicyByName() throws Exception {
        HttpServletRequest request       = Mockito.mock(HttpServletRequest.class);
        RangerPolicy       rangerPolicy  = rangerPolicy();
        String             policyName    = rangerPolicy.getName();
        RangerService      rangerService = rangerService();
        String             serviceName   = rangerService.getName();
        String             zoneName      = "zone-1";
        Mockito.when(serviceREST.getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(rangerPolicy);
        Mockito.doNothing().when(serviceREST).deletePolicy(Id);
        publicAPIsv2.deletePolicyByName(serviceName, policyName, zoneName, request);
        Mockito.verify(serviceREST).getPolicyByName(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());
        Mockito.verify(serviceREST).deletePolicy(Id);
    }

    @Test
    public void test26getPolicies() throws Exception {
        HttpServletRequest request        = Mockito.mock(HttpServletRequest.class);
        RangerPolicyList   policyList     = Mockito.mock(RangerPolicyList.class);
        List<RangerPolicy> rangerPolicies = new ArrayList<RangerPolicy>();
        RangerPolicy       rangerpolicy1  = rangerPolicy();
        RangerPolicy       rangerpolicy2  = rangerPolicy1();
        rangerPolicies.add(rangerpolicy1);
        rangerPolicies.add(rangerpolicy2);
        Mockito.when(serviceREST.getPolicies(request)).thenReturn(policyList);
        Mockito.when(policyList.getPolicies()).thenReturn(rangerPolicies);
        List<RangerPolicy> dbRangerPolicies = publicAPIsv2.getPolicies(request);
        Assertions.assertNotNull(dbRangerPolicies);
        Assertions.assertEquals(dbRangerPolicies.size(), rangerPolicies.size());
        Mockito.verify(serviceREST).getPolicies(request);
    }

    @Test
    public void testGetAllZoneNames() throws Exception {
        HttpServletRequest                 request            = Mockito.mock(HttpServletRequest.class);
        List<RangerSecurityZoneHeaderInfo> zoneHeaderInfoList = new ArrayList<>();

        zoneHeaderInfoList.add(new RangerSecurityZoneHeaderInfo(2L, "zone-1"));
        zoneHeaderInfoList.add(new RangerSecurityZoneHeaderInfo(3L, "zone-2"));

        Mockito.when(securityZoneStore.getSecurityZoneHeaderInfoList(request)).thenReturn(zoneHeaderInfoList);

        List<RangerSecurityZoneHeaderInfo> returnedZoneHeaderInfoList = publicAPIsv2.getSecurityZoneHeaderInfoList(request);

        Assertions.assertEquals(returnedZoneHeaderInfoList.size(), zoneHeaderInfoList.size());
        Mockito.verify(securityZoneStore, Mockito.times(1)).getSecurityZoneHeaderInfoList(request);
    }

    @Test
    public void testGetServiceNamesForZone() throws Exception {
        Long zoneId1           = 2L;
        Long zoneId2           = 3L;
        Long nonExistingZondId = 101L;

        List<RangerServiceHeaderInfo> rangerServiceList1 = new ArrayList<RangerServiceHeaderInfo>();
        List<RangerServiceHeaderInfo> rangerServiceList2 = new ArrayList<RangerServiceHeaderInfo>();

        rangerServiceList1.add(new RangerServiceHeaderInfo(1L, "hdfs_1", false));
        rangerServiceList1.add(new RangerServiceHeaderInfo(2L, "hive_1", false));
        rangerServiceList1.add(new RangerServiceHeaderInfo(3L, "hbase_1", false));
        rangerServiceList1.add(new RangerServiceHeaderInfo(4L, "tag_1", true));

        rangerServiceList2.add(new RangerServiceHeaderInfo(5L, "yarn_1", false));

        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        Mockito.when(securityZoneStore.getServiceHeaderInfoListByZoneId(null, request)).thenReturn(Collections.emptyList());
        Mockito.when(securityZoneStore.getServiceHeaderInfoListByZoneId(zoneId1, request)).thenReturn(rangerServiceList1);
        Mockito.when(securityZoneStore.getServiceHeaderInfoListByZoneId(zoneId2, request)).thenReturn(rangerServiceList2);
        Mockito.when(securityZoneStore.getServiceHeaderInfoListByZoneId(nonExistingZondId, request)).thenReturn(Collections.emptyList());

        // Null
        List<RangerServiceHeaderInfo> returnedServicesNull = publicAPIsv2.getServiceHeaderInfoListByZoneId(null, request);

        Mockito.verify(securityZoneStore, Mockito.times(1)).getServiceHeaderInfoListByZoneId(null, request);
        Assertions.assertEquals(returnedServicesNull.size(), 0);

        // Non existing zoneId
        List<RangerServiceHeaderInfo> returnedServicesNonExisting = publicAPIsv2.getServiceHeaderInfoListByZoneId(nonExistingZondId, request);

        Mockito.verify(securityZoneStore, Mockito.times(1)).getServiceHeaderInfoListByZoneId(null, request);
        Assertions.assertEquals(returnedServicesNonExisting.size(), 0);

        // zoneId1
        List<RangerServiceHeaderInfo> returnedServicesZone1 = publicAPIsv2.getServiceHeaderInfoListByZoneId(zoneId1, request);

        Mockito.verify(securityZoneStore, Mockito.times(1)).getServiceHeaderInfoListByZoneId(zoneId1, request);
        Assertions.assertEquals(returnedServicesZone1.size(), rangerServiceList1.size());

        // zoneId2
        List<RangerServiceHeaderInfo> returnedServicesZone2 = publicAPIsv2.getServiceHeaderInfoListByZoneId(zoneId2, request);

        Mockito.verify(securityZoneStore, Mockito.times(1)).getServiceHeaderInfoListByZoneId(zoneId2, request);
        Assertions.assertEquals(returnedServicesZone2.size(), rangerServiceList2.size());
    }

    @Test
    public void testGetPolicyByGUIDAndServiceNameAndZoneName() throws Exception {
        RangerPolicy  rangerPolicy  = rangerPolicy();
        RangerService rangerService = rangerService();
        String        serviceName   = rangerService.getName();
        Mockito.when(serviceREST.getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, "zone-1")).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, "zone-1");
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, "zone-1");
    }

    @Test
    public void testGetPolicyByGUID() throws Exception {
        RangerPolicy rangerPolicy = rangerPolicy();
        Mockito.when(serviceREST.getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null)).thenReturn(rangerPolicy);
        RangerPolicy dbRangerPolicy = publicAPIsv2.getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null);
        Assertions.assertNotNull(dbRangerPolicy);
        Assertions.assertEquals(dbRangerPolicy, rangerPolicy);
        Assertions.assertEquals(dbRangerPolicy.getId(), rangerPolicy.getId());
        Assertions.assertEquals(dbRangerPolicy.getName(), rangerPolicy.getName());
        Mockito.verify(serviceREST).getPolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null);
    }

    @Test
    public void testDeletePolicyByGUIDAndServiceNameAndZoneName() throws Exception {
        RangerPolicy  rangerPolicy  = rangerPolicy();
        RangerService rangerService = rangerService();
        String        serviceName   = rangerService.getName();
        String        zoneName      = "zone-1";
        Mockito.doNothing().when(serviceREST).deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, zoneName);
        publicAPIsv2.deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, zoneName);
        Mockito.verify(serviceREST).deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), serviceName, zoneName);
    }

    @Test
    public void testDeletePolicyByGUID() throws Exception {
        RangerPolicy rangerPolicy = rangerPolicy();
        Mockito.doNothing().when(serviceREST).deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null);
        publicAPIsv2.deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null);
        Mockito.verify(serviceREST).deletePolicyByGUIDAndServiceNameAndZoneName(rangerPolicy.getGuid(), null, null);
    }

    private RangerServiceDef rangerServiceDef() {
        List<RangerServiceConfigDef>   configs          = new ArrayList<RangerServiceConfigDef>();
        List<RangerResourceDef>        resources        = new ArrayList<RangerResourceDef>();
        List<RangerAccessTypeDef>      accessTypes      = new ArrayList<RangerAccessTypeDef>();
        List<RangerPolicyConditionDef> policyConditions = new ArrayList<RangerPolicyConditionDef>();
        List<RangerContextEnricherDef> contextEnrichers = new ArrayList<RangerContextEnricherDef>();
        List<RangerEnumDef>            enums            = new ArrayList<RangerEnumDef>();

        RangerServiceDef rangerServiceDef = new RangerServiceDef();
        rangerServiceDef.setId(Id);
        rangerServiceDef.setName("RangerServiceHdfs");
        rangerServiceDef.setImplClass("RangerServiceHdfs");
        rangerServiceDef.setLabel("HDFS Repository");
        rangerServiceDef.setDescription("HDFS Repository");
        rangerServiceDef.setRbKeyDescription(null);
        rangerServiceDef.setUpdatedBy("Admin");
        rangerServiceDef.setUpdateTime(new Date());
        rangerServiceDef.setConfigs(configs);
        rangerServiceDef.setResources(resources);
        rangerServiceDef.setAccessTypes(accessTypes);
        rangerServiceDef.setPolicyConditions(policyConditions);
        rangerServiceDef.setContextEnrichers(contextEnrichers);
        rangerServiceDef.setEnums(enums);

        return rangerServiceDef;
    }

    private RangerService rangerService() {
        Map<String, String> configs = new HashMap<String, String>();
        configs.put("username", "servicemgr");
        configs.put("password", "servicemgr");
        configs.put("namenode", "servicemgr");
        configs.put("hadoop.security.authorization", "No");
        configs.put("hadoop.security.authentication", "Simple");
        configs.put("hadoop.security.auth_to_local", "");
        configs.put("dfs.datanode.kerberos.principal", "");
        configs.put("dfs.namenode.kerberos.principal", "");
        configs.put("dfs.secondary.namenode.kerberos.principal", "");
        configs.put("hadoop.rpc.protection", "Privacy");
        configs.put("commonNameForCertificate", "");

        RangerService rangerService = new RangerService();
        rangerService.setId(Id);
        rangerService.setConfigs(configs);
        rangerService.setCreateTime(new Date());
        rangerService.setDescription("service policy");
        rangerService.setGuid("1427365526516_835_0");
        rangerService.setIsEnabled(true);
        rangerService.setName("HDFS_1");
        rangerService.setPolicyUpdateTime(new Date());
        rangerService.setType("1");
        rangerService.setUpdatedBy("Admin");
        rangerService.setUpdateTime(new Date());

        return rangerService;
    }

    private RangerPolicy rangerPolicy() {
        List<RangerPolicyItemAccess>    accesses         = new ArrayList<RangerPolicyItemAccess>();
        List<String>                    users            = new ArrayList<String>();
        List<String>                    groups           = new ArrayList<String>();
        List<RangerPolicyItemCondition> conditions       = new ArrayList<RangerPolicyItemCondition>();
        List<RangerPolicyItem>          policyItems      = new ArrayList<RangerPolicyItem>();
        RangerPolicyItem                rangerPolicyItem = new RangerPolicyItem();
        rangerPolicyItem.setAccesses(accesses);
        rangerPolicyItem.setConditions(conditions);
        rangerPolicyItem.setGroups(groups);
        rangerPolicyItem.setUsers(users);
        rangerPolicyItem.setDelegateAdmin(false);

        policyItems.add(rangerPolicyItem);

        Map<String, RangerPolicyResource> policyResource       = new HashMap<String, RangerPolicyResource>();
        RangerPolicyResource              rangerPolicyResource = new RangerPolicyResource();
        rangerPolicyResource.setIsExcludes(true);
        rangerPolicyResource.setIsRecursive(true);
        rangerPolicyResource.setValue("1");
        rangerPolicyResource.setValues(users);
        policyResource.put("resource", rangerPolicyResource);
        RangerPolicy policy = new RangerPolicy();
        policy.setId(Id);
        policy.setCreateTime(new Date());
        policy.setDescription("policy");
        policy.setGuid("policyguid");
        policy.setIsEnabled(true);
        policy.setName("HDFS_1-1-20150316062453");
        policy.setUpdatedBy("Admin");
        policy.setUpdateTime(new Date());
        policy.setService("HDFS_1");
        policy.setIsAuditEnabled(true);
        policy.setPolicyItems(policyItems);
        policy.setResources(policyResource);
        policy.setService("HDFS_1");

        return policy;
    }

    private RangerPolicy rangerPolicy1() {
        List<RangerPolicyItemAccess>    accesses         = new ArrayList<RangerPolicyItemAccess>();
        List<String>                    users            = new ArrayList<String>();
        List<String>                    groups           = new ArrayList<String>();
        List<RangerPolicyItemCondition> conditions       = new ArrayList<RangerPolicyItemCondition>();
        List<RangerPolicyItem>          policyItems      = new ArrayList<RangerPolicyItem>();
        RangerPolicyItem                rangerPolicyItem = new RangerPolicyItem();
        rangerPolicyItem.setAccesses(accesses);
        rangerPolicyItem.setConditions(conditions);
        rangerPolicyItem.setGroups(groups);
        rangerPolicyItem.setUsers(users);
        rangerPolicyItem.setDelegateAdmin(false);

        policyItems.add(rangerPolicyItem);

        Map<String, RangerPolicyResource> policyResource       = new HashMap<String, RangerPolicyResource>();
        RangerPolicyResource              rangerPolicyResource = new RangerPolicyResource();
        rangerPolicyResource.setIsExcludes(true);
        rangerPolicyResource.setIsRecursive(true);
        rangerPolicyResource.setValue("2");
        rangerPolicyResource.setValues(users);
        policyResource.put("resource", rangerPolicyResource);
        RangerPolicy policy = new RangerPolicy();
        policy.setId(Id2);
        policy.setCreateTime(new Date());
        policy.setDescription("policy");
        policy.setGuid("policyguid");
        policy.setIsEnabled(true);
        policy.setName("HDFS_1-1-20150316062454");
        policy.setUpdatedBy("Admin");
        policy.setUpdateTime(new Date());
        policy.setService("HDFS_1-1-20150316062454");
        policy.setIsAuditEnabled(true);
        policy.setPolicyItems(policyItems);
        policy.setResources(policyResource);
        policy.setService("HDFS_2");

        return policy;
    }

    @Test
    public void test27createSecurityZone() throws Exception {
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(Id);
        securityZone.setName("test-zone");
        securityZone.setDescription("Test security zone");

        Mockito.when(securityZoneRest.createSecurityZone(securityZone)).thenReturn(securityZone);
        RangerSecurityZone result = publicAPIsv2.createSecurityZone(securityZone);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), securityZone.getId());
        Assertions.assertEquals(result.getName(), securityZone.getName());

        Mockito.verify(securityZoneRest).createSecurityZone(securityZone);
    }

    @Test
    public void test28updateSecurityZone() throws Exception {
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(Id);
        securityZone.setName("test-zone-updated");
        securityZone.setDescription("Updated test security zone");

        Mockito.when(securityZoneRest.updateSecurityZone(Id, securityZone)).thenReturn(securityZone);
        RangerSecurityZone result = publicAPIsv2.updateSecurityZone(Id, securityZone);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), securityZone.getId());
        Assertions.assertEquals(result.getName(), securityZone.getName());

        Mockito.verify(securityZoneRest).updateSecurityZone(Id, securityZone);
    }

    @Test
    public void test29deleteSecurityZoneByName() throws Exception {
        String zoneName = "test-zone";
        Mockito.doNothing().when(securityZoneRest).deleteSecurityZone(zoneName);

        publicAPIsv2.deleteSecurityZone(zoneName);

        Mockito.verify(securityZoneRest).deleteSecurityZone(zoneName);
    }

    @Test
    public void test30deleteSecurityZoneById() throws Exception {
        Mockito.doNothing().when(securityZoneRest).deleteSecurityZone(Id);

        publicAPIsv2.deleteSecurityZone(Id);

        Mockito.verify(securityZoneRest).deleteSecurityZone(Id);
    }

    @Test
    public void test31getSecurityZoneByName() throws Exception {
        String zoneName = "test-zone";
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(Id);
        securityZone.setName(zoneName);

        Mockito.when(securityZoneRest.getSecurityZone(zoneName)).thenReturn(securityZone);
        RangerSecurityZone result = publicAPIsv2.getSecurityZone(zoneName);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getName(), zoneName);

        Mockito.verify(securityZoneRest).getSecurityZone(zoneName);
    }

    @Test
    public void test32updateServiceWithIdMismatch() throws Exception {
        RangerService service = rangerService();
        service.setId(Id2); // Different ID than path parameter
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            publicAPIsv2.updateService(service, Id, request);
        });

        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void test33updateServiceDefWithMisMatchName() throws Exception {
        RangerServiceDef serviceDef = rangerServiceDef();
        String name = "non-existent-service-def";

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            publicAPIsv2.updateServiceDefByName(serviceDef, name);
        });

        Mockito.verify(serviceREST, Mockito.never()).getServiceDefByName(name);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void test34getPolicyByNameWithNullZone() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicy policy = rangerPolicy();
        String serviceName = "HDFS_1";
        String policyName = "test-policy";

        Mockito.when(serviceREST.getPolicyByName(serviceName, policyName, null)).thenReturn(policy);
        RangerPolicy result = publicAPIsv2.getPolicyByName(serviceName, policyName, null, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), policy.getId());

        Mockito.verify(serviceREST).getPolicyByName(serviceName, policyName, null);
    }

    @Test
    public void test35updatePolicyByNameWithNullZone() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicy policy = rangerPolicy();
        String serviceName = "HDFS_1";
        String policyName = "test-policy";

        Mockito.when(serviceREST.getPolicyByName(serviceName, policyName, null)).thenReturn(policy);
        Mockito.when(serviceREST.updatePolicy(policy, policy.getId())).thenReturn(policy);

        RangerPolicy result = publicAPIsv2.updatePolicyByName(policy, serviceName, policyName, null, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), policy.getId());

        Mockito.verify(serviceREST).getPolicyByName(serviceName, policyName, null);
        Mockito.verify(serviceREST).updatePolicy(policy, policy.getId());
    }

    @Test
    public void test36deletePolicyByNameWithNullZone() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicy policy = rangerPolicy();
        String serviceName = "HDFS_1";
        String policyName = "test-policy";

        Mockito.when(serviceREST.getPolicyByName(serviceName, policyName, null)).thenReturn(policy);
        Mockito.doNothing().when(serviceREST).deletePolicy(policy.getId());

        publicAPIsv2.deletePolicyByName(serviceName, policyName, null, request);

        Mockito.verify(serviceREST).getPolicyByName(serviceName, policyName, null);
        Mockito.verify(serviceREST).deletePolicy(policy.getId());
    }

    @Test
    public void test37getPoliciesWithEmptyList() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicyList policyList = Mockito.mock(RangerPolicyList.class);
        List<RangerPolicy> emptyPolicies = new ArrayList<>();

        Mockito.when(serviceREST.getPolicies(request)).thenReturn(policyList);
        Mockito.when(policyList.getPolicies()).thenReturn(emptyPolicies);

        List<RangerPolicy> result = publicAPIsv2.getPolicies(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(serviceREST).getPolicies(request);
    }

    @Test
    public void test38getSecurityZoneHeaderInfoListEmpty() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerSecurityZoneHeaderInfo> emptyList = new ArrayList<>();

        Mockito.when(securityZoneStore.getSecurityZoneHeaderInfoList(request)).thenReturn(emptyList);

        List<RangerSecurityZoneHeaderInfo> result = publicAPIsv2.getSecurityZoneHeaderInfoList(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(securityZoneStore).getSecurityZoneHeaderInfoList(request);
    }

    @Test
    public void test39getServiceHeaderInfoListByZoneIdWithInvalidZone() throws Exception {
        Long invalidZoneId = 999L;
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerServiceHeaderInfo> emptyList = new ArrayList<>();

        Mockito.when(securityZoneStore.getServiceHeaderInfoListByZoneId(invalidZoneId, request)).thenReturn(emptyList);

        List<RangerServiceHeaderInfo> result = publicAPIsv2.getServiceHeaderInfoListByZoneId(invalidZoneId, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(securityZoneStore).getServiceHeaderInfoListByZoneId(invalidZoneId, request);
    }

    @Test
    public void test40searchServicesWithEmptyResult() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerServiceList serviceList = new RangerServiceList();
        serviceList.setServices(new ArrayList<>());

        Mockito.when(serviceREST.getServices(request)).thenReturn(serviceList);

        List<RangerService> result = publicAPIsv2.searchServices(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(serviceREST).getServices(request);
    }

    @Test
    public void test41searchServiceDefsWithEmptyResult() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerServiceDefList serviceDefList = new RangerServiceDefList();
        serviceDefList.setServiceDefs(new ArrayList<>());

        Mockito.when(serviceREST.getServiceDefs(request)).thenReturn(serviceDefList);

        List<RangerServiceDef> result = publicAPIsv2.searchServiceDefs(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(serviceREST).getServiceDefs(request);
    }

    @Test
    public void test42searchPoliciesWithEmptyResult() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "HDFS_1";
        RangerPolicyList policyList = new RangerPolicyList();
        policyList.setPolicies(new ArrayList<>());

        Mockito.when(serviceREST.getServicePoliciesByName(serviceName, request)).thenReturn(policyList);

        List<RangerPolicy> result = publicAPIsv2.searchPolicies(serviceName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 0);

        Mockito.verify(serviceREST).getServicePoliciesByName(serviceName, request);
    }

    @Test
    public void test43getServiceHeaders() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerServiceHeaderInfo> serviceHeaders = new ArrayList<>();
        RangerServiceHeaderInfo headerInfo = new RangerServiceHeaderInfo();
        headerInfo.setId(Id);
        headerInfo.setName("HDFS_1");
        headerInfo.setType("hdfs");
        serviceHeaders.add(headerInfo);

        Mockito.when(serviceREST.getServiceHeaders(request)).thenReturn(serviceHeaders);

        List<RangerServiceHeaderInfo> result = publicAPIsv2.getServiceHeaders(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);
        Assertions.assertEquals(result.get(0).getName(), "HDFS_1");

        Mockito.verify(serviceREST).getServiceHeaders(request);
    }

    @Test
    public void test44updatePolicyByNameNotFound() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerPolicy policy = rangerPolicy();
        String serviceName = "HDFS_1";
        String policyName = "non-existent-policy";
        String zoneName = "zone-1";

        Mockito.when(serviceREST.getPolicyByName(serviceName, policyName, zoneName)).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            publicAPIsv2.updatePolicyByName(policy, serviceName, policyName, zoneName, request);
        });

        Mockito.verify(serviceREST).getPolicyByName(serviceName, policyName, zoneName);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void test45deletePolicyByNameNotFound() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "HDFS_1";
        String policyName = "non-existent-policy";
        String zoneName = "zone-1";

        Mockito.when(serviceREST.getPolicyByName(serviceName, policyName, zoneName)).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            publicAPIsv2.deletePolicyByName(serviceName, policyName, zoneName, request);
        });

        Mockito.verify(serviceREST).getPolicyByName(serviceName, policyName, zoneName);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }

    @Test
    public void test46createSecurityZoneV2() throws Exception {
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(Id);
        securityZoneV2.setName("test-zone-v2");
        securityZoneV2.setDescription("Test security zone V2");

        Mockito.when(securityZoneRest.createSecurityZone(securityZoneV2)).thenReturn(securityZoneV2);
        RangerSecurityZoneV2 result = publicAPIsv2.createSecurityZone(securityZoneV2);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), securityZoneV2.getId());
        Assertions.assertEquals(result.getName(), securityZoneV2.getName());

        Mockito.verify(securityZoneRest).createSecurityZone(securityZoneV2);
    }

    @Test
    public void test47updateSecurityZoneV2() throws Exception {
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(Id);
        securityZoneV2.setName("test-zone-v2-updated");

        Mockito.when(securityZoneRest.updateSecurityZone(Id, securityZoneV2)).thenReturn(securityZoneV2);
        RangerSecurityZoneV2 result = publicAPIsv2.updateSecurityZone(Id, securityZoneV2);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), securityZoneV2.getId());

        Mockito.verify(securityZoneRest).updateSecurityZone(Id, securityZoneV2);
    }

    @Test
    public void test48updateSecurityZonePartial() throws Exception {
        RangerSecurityZoneChangeRequest changeRequest = new RangerSecurityZoneChangeRequest();
        Boolean expectedResult = true;

        Mockito.when(securityZoneRest.updateSecurityZone(Id, changeRequest)).thenReturn(expectedResult);
        Boolean result = publicAPIsv2.updateSecurityZone(Id, changeRequest);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, expectedResult);

        Mockito.verify(securityZoneRest).updateSecurityZone(Id, changeRequest);
    }

    @Test
    public void test49getSecurityZoneV2ByName() throws Exception {
        String zoneName = "test-zone-v2";
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(Id);
        securityZoneV2.setName(zoneName);

        Mockito.when(securityZoneRest.getSecurityZoneV2(zoneName)).thenReturn(securityZoneV2);
        RangerSecurityZoneV2 result = publicAPIsv2.getSecurityZoneV2(zoneName);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getName(), zoneName);

        Mockito.verify(securityZoneRest).getSecurityZoneV2(zoneName);
    }

    @Test
    public void test50getSecurityZoneV2ById() throws Exception {
        RangerSecurityZoneV2 securityZoneV2 = new RangerSecurityZoneV2();
        securityZoneV2.setId(Id);
        securityZoneV2.setName("test-zone-v2");

        Mockito.when(securityZoneRest.getSecurityZoneV2(Id)).thenReturn(securityZoneV2);
        RangerSecurityZoneV2 result = publicAPIsv2.getSecurityZoneV2(Id);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), Id);

        Mockito.verify(securityZoneRest).getSecurityZoneV2(Id);
    }

    @Test
    public void test51getResourcesByZoneId() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        PList<RangerSecurityZoneResource> resourceList = new PList<>();

        Mockito.when(securityZoneRest.getResources(Id, serviceName, request)).thenReturn(resourceList);
        PList<RangerSecurityZoneResource> result = publicAPIsv2.getResources(Id, serviceName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, resourceList);

        Mockito.verify(securityZoneRest).getResources(Id, serviceName, request);
    }

    @Test
    public void test52getResourcesByZoneName() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String zoneName = "test-zone";
        String serviceName = "hdfs_service";
        PList<RangerSecurityZoneResource> resourceList = new PList<>();

        Mockito.when(securityZoneRest.getResources(zoneName, serviceName, request)).thenReturn(resourceList);
        PList<RangerSecurityZoneResource> result = publicAPIsv2.getResources(zoneName, serviceName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, resourceList);

        Mockito.verify(securityZoneRest).getResources(zoneName, serviceName, request);
    }

    @Test
    public void test53getAllZonesV2() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        PList<RangerSecurityZoneV2> zoneList = new PList<>();

        Mockito.when(securityZoneRest.getAllZonesV2(request)).thenReturn(zoneList);
        PList<RangerSecurityZoneV2> result = publicAPIsv2.getAllZonesV2(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, zoneList);

        Mockito.verify(securityZoneRest).getAllZonesV2(request);
    }

    @Test
    public void test54importServiceTags() throws Exception {
        String serviceName = "hdfs_service";
        RangerServiceTags serviceTags = new RangerServiceTags();
        serviceTags.setServiceName(serviceName);

        Mockito.doNothing().when(tagREST).importServiceTags(Mockito.any(ServiceTags.class));

        publicAPIsv2.importServiceTags(serviceName, serviceTags);

        Mockito.verify(tagREST).importServiceTags(Mockito.any(ServiceTags.class));
    }

    @Test
    public void test55getServiceTags() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        ServiceTags serviceTags = new ServiceTags();
        serviceTags.setServiceName(serviceName);

        Mockito.when(tagREST.getServiceTagsIfUpdated(serviceName, -1L, 0L, null, false, "", request)).thenReturn(serviceTags);

        RangerServiceTags result = publicAPIsv2.getServiceTags(serviceName, request);

        Assertions.assertNotNull(result);

        Mockito.verify(tagREST).getServiceTagsIfUpdated(serviceName, -1L, 0L, null, false, "", request);
    }

    @Test
    public void test56getPluginsInfo() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerPluginInfo> pluginInfoList = new ArrayList<>();
        RangerPluginInfo pluginInfo = new RangerPluginInfo();
        pluginInfo.setServiceName("hdfs_service");
        pluginInfoList.add(pluginInfo);

        Mockito.when(serviceREST.getPluginsInfo(request)).thenReturn(new RangerPluginInfoList(pluginInfoList));

        List<RangerPluginInfo> result = publicAPIsv2.getPluginsInfo(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(serviceREST).getPluginsInfo(request);
    }

    @Test
    public void test57deletePolicyDeltas() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Integer olderThan = 10;

        Mockito.doNothing().when(serviceREST).deletePolicyDeltas(olderThan, request);

        publicAPIsv2.deletePolicyDeltas(olderThan, request);

        Mockito.verify(serviceREST).deletePolicyDeltas(olderThan, request);
    }

    @Test
    public void test58deleteTagDeltas() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Integer olderThan = 10;

        Mockito.doNothing().when(tagREST).deleteTagDeltas(olderThan, request);

        publicAPIsv2.deleteTagDeltas(olderThan, request);

        Mockito.verify(tagREST).deleteTagDeltas(olderThan, request);
    }

    @Test
    public void test59purgeEmptyPolicies() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";

        Mockito.doNothing().when(serviceREST).purgeEmptyPolicies(serviceName, request);

        publicAPIsv2.purgeEmptyPolicies(serviceName, request);

        Mockito.verify(serviceREST).purgeEmptyPolicies(serviceName, request);
    }

    @Test
    public void test60createRole() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        RangerRole role = new RangerRole();
        role.setId(Id);
        role.setName("test-role");
        Boolean createNonExistUserGroup = false;

        Mockito.when(roleREST.createRole(serviceName, role, createNonExistUserGroup)).thenReturn(role);

        RangerRole result = publicAPIsv2.createRole(serviceName, role, createNonExistUserGroup, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), role.getId());
        Assertions.assertEquals(result.getName(), role.getName());

        Mockito.verify(roleREST).createRole(serviceName, role, createNonExistUserGroup);
    }

    @Test
    public void test61updateRole() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerRole role = new RangerRole();
        role.setId(Id);
        role.setName("test-role-updated");
        Boolean createNonExistUserGroup = false;

        Mockito.when(roleREST.updateRole(Id, role, createNonExistUserGroup)).thenReturn(role);

        RangerRole result = publicAPIsv2.updateRole(Id, role, createNonExistUserGroup, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), role.getId());

        Mockito.verify(roleREST).updateRole(Id, role, createNonExistUserGroup);
    }

    @Test
    public void test62deleteRoleByName() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        String userName = "testuser";
        String roleName = "test-role";

        Mockito.doNothing().when(roleREST).deleteRole(serviceName, userName, roleName);

        publicAPIsv2.deleteRole(serviceName, userName, roleName, request);

        Mockito.verify(roleREST).deleteRole(serviceName, userName, roleName);
    }

    @Test
    public void test63deleteRoleById() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        Mockito.doNothing().when(roleREST).deleteRole(Id);

        publicAPIsv2.deleteRole(Id, request);

        Mockito.verify(roleREST).deleteRole(Id);
    }

    @Test
    public void test64getRoleByName() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        String userName = "testuser";
        String roleName = "test-role";
        RangerRole role = new RangerRole();
        role.setId(Id);
        role.setName(roleName);

        Mockito.when(roleREST.getRole(serviceName, userName, roleName)).thenReturn(role);

        RangerRole result = publicAPIsv2.getRole(serviceName, userName, roleName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getName(), roleName);

        Mockito.verify(roleREST).getRole(serviceName, userName, roleName);
    }

    @Test
    public void test65getRoleById() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        RangerRole role = new RangerRole();
        role.setId(Id);
        role.setName("test-role");

        Mockito.when(roleREST.getRole(Id)).thenReturn(role);

        RangerRole result = publicAPIsv2.getRole(Id, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), Id);

        Mockito.verify(roleREST).getRole(Id);
    }

    @Test
    public void test66getAllRoles() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerRole> roleList = new ArrayList<>();
        RangerRole role = new RangerRole();
        role.setId(Id);
        role.setName("test-role");
        roleList.add(role);

        Mockito.when(roleREST.getAllRoles(request)).thenReturn(new RangerRoleList(roleList));

        List<RangerRole> result = publicAPIsv2.getAllRoles(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(roleREST).getAllRoles(request);
    }

    @Test
    public void test67getAllRoleNames() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        String execUser = "testuser";
        List<String> roleNames = new ArrayList<>();
        roleNames.add("test-role");

        Mockito.when(roleREST.getAllRoleNames(serviceName, execUser, request)).thenReturn(roleNames);

        List<String> result = publicAPIsv2.getAllRoleNames(serviceName, execUser, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);
        Assertions.assertEquals(result.get(0), "test-role");

        Mockito.verify(roleREST).getAllRoleNames(serviceName, execUser, request);
    }

    @Test
    public void test68getUserRoles() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String userName = "testuser";
        List<String> userRoles = new ArrayList<>();
        userRoles.add("test-role");

        Mockito.when(roleREST.getUserRoles(userName, request)).thenReturn(userRoles);

        List<String> result = publicAPIsv2.getUserRoles(userName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);
        Assertions.assertEquals(result.get(0), "test-role");

        Mockito.verify(roleREST).getUserRoles(userName, request);
    }

    @Test
    public void test69addUsersAndGroups() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<String> users = new ArrayList<>();
        users.add("testuser");
        List<String> groups = new ArrayList<>();
        groups.add("testgroup");
        Boolean isAdmin = true;
        RangerRole role = new RangerRole();
        role.setId(Id);

        Mockito.when(roleREST.addUsersAndGroups(Id, users, groups, isAdmin)).thenReturn(role);

        RangerRole result = publicAPIsv2.addUsersAndGroups(Id, users, groups, isAdmin, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), Id);

        Mockito.verify(roleREST).addUsersAndGroups(Id, users, groups, isAdmin);
    }

    @Test
    public void test70removeUsersAndGroups() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<String> users = new ArrayList<>();
        users.add("testuser");
        List<String> groups = new ArrayList<>();
        groups.add("testgroup");
        RangerRole role = new RangerRole();
        role.setId(Id);

        Mockito.when(roleREST.removeUsersAndGroups(Id, users, groups)).thenReturn(role);

        RangerRole result = publicAPIsv2.removeUsersAndGroups(Id, users, groups, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), Id);

        Mockito.verify(roleREST).removeUsersAndGroups(Id, users, groups);
    }

    @Test
    public void test71removeAdminFromUsersAndGroups() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<String> users = new ArrayList<>();
        users.add("testuser");
        List<String> groups = new ArrayList<>();
        groups.add("testgroup");
        RangerRole role = new RangerRole();
        role.setId(Id);

        Mockito.when(roleREST.removeAdminFromUsersAndGroups(Id, users, groups)).thenReturn(role);

        RangerRole result = publicAPIsv2.removeAdminFromUsersAndGroups(Id, users, groups, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), Id);

        Mockito.verify(roleREST).removeAdminFromUsersAndGroups(Id, users, groups);
    }

    @Test
    public void test72grantRole() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        GrantRevokeRoleRequest grantRoleRequest = new GrantRevokeRoleRequest();
        RESTResponse response = new RESTResponse();

        Mockito.when(roleREST.grantRole(serviceName, grantRoleRequest, request)).thenReturn(response);

        RESTResponse result = publicAPIsv2.grantRole(serviceName, grantRoleRequest, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, response);

        Mockito.verify(roleREST).grantRole(serviceName, grantRoleRequest, request);
    }

    @Test
    public void test73revokeRole() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        GrantRevokeRoleRequest revokeRoleRequest = new GrantRevokeRoleRequest();
        RESTResponse response = new RESTResponse();

        Mockito.when(roleREST.revokeRole(serviceName, revokeRoleRequest, request)).thenReturn(response);

        RESTResponse result = publicAPIsv2.revokeRoleUsersAndRoles(serviceName, revokeRoleRequest, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result, response);

        Mockito.verify(roleREST).revokeRole(serviceName, revokeRoleRequest, request);
    }

    @Test
    public void test74purgeRecords() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String recordType = "policy";
        Integer retentionDays = 180;
        List<RangerPurgeResult> purgeResults = new ArrayList<>();
        RangerPurgeResult purgeResult = new RangerPurgeResult();
        purgeResults.add(purgeResult);

        Mockito.when(serviceREST.purgeRecords(recordType, retentionDays, request)).thenReturn(purgeResults);

        List<RangerPurgeResult> result = publicAPIsv2.purgeRecords(recordType, retentionDays, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(serviceREST).purgeRecords(recordType, retentionDays, request);
    }

    @Test
    public void test75getPoliciesForResource() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceDefName = "hdfs";
        String serviceName = "hdfs_service";
        List<RangerPolicy> policies = new ArrayList<>();
        RangerPolicy policy = rangerPolicy();
        policies.add(policy);

        Mockito.when(serviceREST.getPoliciesForResource(serviceDefName, serviceName, request))
                .thenReturn(policies);

        List<RangerPolicy> result = publicAPIsv2.getPoliciesForResource(serviceDefName, serviceName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(serviceREST).getPoliciesForResource(serviceDefName, serviceName, request);
    }

    @Test
    public void test76getSecurityZoneNamesForResource() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        Collection<String> zoneNames = new ArrayList<>();
        zoneNames.add("zone1");
        zoneNames.add("zone2");

        Mockito.when(securityZoneRest.getZoneNamesForResource(serviceName, request)).thenReturn(zoneNames);

        Collection<String> result = publicAPIsv2.getSecurityZoneNamesForResource(serviceName, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 2);

        Mockito.verify(securityZoneRest).getZoneNamesForResource(serviceName, request);
    }

    @Test
    public void test77getSecurityZoneHeaderInfoListByServiceId() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Long serviceId = 1L;
        Boolean isTagService = false;
        List<RangerSecurityZoneHeaderInfo> headerInfoList = new ArrayList<>();
        RangerSecurityZoneHeaderInfo headerInfo = new RangerSecurityZoneHeaderInfo();
        headerInfo.setId(Id);
        headerInfo.setName("zone1");
        headerInfoList.add(headerInfo);

        Mockito.when(securityZoneRest.getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request))
                .thenReturn(headerInfoList);

        List<RangerSecurityZoneHeaderInfo> result = publicAPIsv2.getSecurityZoneHeaderInfoListByServiceId(
                serviceId, isTagService, request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(securityZoneRest).getSecurityZoneHeaderInfoListByServiceId(serviceId, isTagService, request);
    }

    @Test
    public void test78getAllZones() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        List<RangerSecurityZone> zones = new ArrayList<>();
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setId(Id);
        zone.setName("test-zone");
        zones.add(zone);

        RangerSecurityZoneList zoneList = new RangerSecurityZoneList(zones);

        Mockito.when(securityZoneRest.getAllZones(request)).thenReturn(zoneList);

        List<RangerSecurityZone> result = publicAPIsv2.getAllZones(request);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 1);

        Mockito.verify(securityZoneRest).getAllZones(request);
    }

    @Test
    public void test79deleteBulkPolicies() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        String serviceName = "hdfs_service";
        List<Long> deletedPolicyIds = new ArrayList<>();
        deletedPolicyIds.add(1L);
        deletedPolicyIds.add(2L);

        Mockito.when(serviceREST.deleteBulkPolicies(Mockito.eq(serviceName), Mockito.eq(request))).thenReturn(deletedPolicyIds);

        List<Long> result = publicAPIsv2.deletePolicies(request, serviceName);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.size(), 2);

        Mockito.verify(serviceREST).deleteBulkPolicies(Mockito.eq(serviceName), Mockito.eq(request));
    }

    @Test
    public void test80purgeEmptyPoliciesWithNullServiceName() throws Exception {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            publicAPIsv2.purgeEmptyPolicies(null, request);
        });

        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyInt(), Mockito.anyString(), Mockito.anyBoolean());
    }
}
