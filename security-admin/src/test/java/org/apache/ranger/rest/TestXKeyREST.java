/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.rest;

import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import org.apache.ranger.biz.KmsKeyMgr;
import org.apache.ranger.biz.XAuditMgr;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchUtil;
import org.apache.ranger.service.XAccessAuditService;
import org.apache.ranger.view.VXKmsKey;
import org.apache.ranger.view.VXKmsKeyList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.WebApplicationException;

/**
* @generated by Cursor
* @description <Unit Test for TestXKeyREST class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXKeyREST {
    @InjectMocks
    XKeyREST keyREST = new XKeyREST();
    @Mock
    XAuditMgr xAuditMgr;
    @Mock
    SearchUtil searchUtil;
    @Mock
    XAccessAuditService xAccessAuditSrv;
    @Mock
    KmsKeyMgr keyMgr;
    @Mock
    VXKmsKey vxKmsKey;
    @Mock
    RESTErrorUtil restErrorUtil;
    @Mock
    HttpServletRequest request;
    String provider = "providerX";
    String name     = "xyz";
    String nameNl   = "";

    @Test
    public void test1Searchkeys() throws Exception {
        VXKmsKeyList vxKeyListExp = new VXKmsKeyList();

        Mockito.when(keyMgr.searchKeys(request, provider)).thenReturn(vxKeyListExp);

        VXKmsKeyList vxKeyListAct = keyREST.searchKeys(request, provider);

        Assertions.assertNotNull(vxKeyListAct);
        Assertions.assertEquals(vxKeyListExp, vxKeyListAct);

        Mockito.verify(keyMgr).searchKeys(request, provider);
    }

    @Test
    public void test2RolloverKey() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher("CipherX");

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertEquals(vxKeyExp.getName(), vxKeyAct.getName());
        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
    }

    @Test
    public void test3RolloverKey() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertEquals(vxKeyExp.getName(), vxKeyAct.getName());
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
    }

    @Test
    public void test4RolloverKey()  {
        VXKmsKey vxKeyExp = new VXKmsKey();

        Mockito.when(restErrorUtil.createRESTException(Mockito.nullable(String.class), Mockito.any())).thenReturn(new WebApplicationException());
        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.rolloverKey(provider, vxKeyExp);

            Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
        });
    }

    @Test
    public void test5DeleteKey() throws Exception {
        Mockito.doNothing().when(keyMgr).deleteKey(provider, name);

        keyREST.deleteKey(name, provider, request);

        Mockito.verify(keyMgr).deleteKey(provider, name);
    }

    @Test
    public void test6DeleteKey() throws Exception {
        Mockito.when(restErrorUtil.createRESTException(Mockito.nullable(String.class), Mockito.any())).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.deleteKey(nameNl, provider, request);

            Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
        });
    }

    @Test
    public void test6CreateKey() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher("CipherX");

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenReturn(vxKeyExp);
        VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyAct, vxKeyExp);
        Assertions.assertEquals(vxKeyExp.getName(), vxKeyAct.getName());
        Assertions.assertEquals(vxKeyExp.getCipher(), vxKeyAct.getCipher());

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
    }

    @Test
    public void test7CreateKey() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyAct, vxKeyExp);
        Assertions.assertEquals(vxKeyExp.getName(), vxKeyAct.getName());
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
    }

    @Test
    public void test8CreateKey() {
        VXKmsKey vxKeyExp = new VXKmsKey();

        Mockito.when(restErrorUtil.createRESTException(Mockito.nullable(String.class), Mockito.any())).thenReturn(new WebApplicationException());
        Assertions.assertThrows(WebApplicationException.class, () -> {
            VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);
            Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
            Assertions.assertNull(vxKeyAct);
        });
    }

    @Test
    public void test9GetKey() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();

        Mockito.when(keyMgr.getKey(provider, name)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.getKey(name, provider);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyAct, vxKeyExp);
        Assertions.assertEquals(vxKeyExp.getName(), vxKeyAct.getName());

        Mockito.verify(keyMgr).getKey(provider, name);
    }

    @Test
    public void test10GetKey() {
        Mockito.when(restErrorUtil.createRESTException(Mockito.nullable(String.class), Mockito.any())).thenReturn(new WebApplicationException());
        Assertions.assertThrows(WebApplicationException.class, () -> {
            VXKmsKey vxKeyAct = keyREST.getKey(nameNl, provider);
            Assertions.assertNull(vxKeyAct);
            Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
        });
    }

    @Test
    public void test11SearchKeysWithException() throws Exception {
        Exception testException = new RuntimeException("Test exception");

        Mockito.when(keyMgr.searchKeys(request, provider)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any())).thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.searchKeys(request, provider);
        });

        Mockito.verify(keyMgr).searchKeys(request, provider);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test12SearchKeysWithNullProvider() throws Exception {
        VXKmsKeyList vxKeyListExp = new VXKmsKeyList();

        Mockito.when(keyMgr.searchKeys(request, null)).thenReturn(vxKeyListExp);

        VXKmsKeyList vxKeyListAct = keyREST.searchKeys(request, null);

        Assertions.assertNotNull(vxKeyListAct);
        Assertions.assertEquals(vxKeyListExp, vxKeyListAct);

        Mockito.verify(keyMgr).searchKeys(request, null);
    }

    @Test
    public void test13SearchKeysReturnsNull() throws Exception {
        Mockito.when(keyMgr.searchKeys(request, provider)).thenReturn(null);

        VXKmsKeyList vxKeyListAct = keyREST.searchKeys(request, provider);

        Assertions.assertNotNull(vxKeyListAct);
        Assertions.assertEquals(0, vxKeyListAct.getListSize());

        Mockito.verify(keyMgr).searchKeys(request, provider);
    }

    @Test
    public void test14RolloverKeyWithEmptyName() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName("");

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.rolloverKey(provider, vxKeyExp);
        });

        Mockito.verify(restErrorUtil, Mockito.times(2)).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test15RolloverKeyWithNullCipher() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher(null);

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
    }

    @Test
    public void test16RolloverKeyWithWhitespaceCipher() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher("   ");

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
    }

    @Test
    public void test17RolloverKeyWithException() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Exception testException = new RuntimeException("Test exception");

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.rolloverKey(provider, vxKeyExp);
        });

        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test18RolloverKeyReturnsNull() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.rolloverKey(provider, vxKeyExp)).thenReturn(null);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertNull(vxKeyAct.getName());

        Mockito.verify(keyMgr).rolloverKey(provider, vxKeyExp);
    }

    @Test
    public void test19DeleteKeyWithException() throws Exception {
        Exception testException = new RuntimeException("Test exception");

        Mockito.doThrow(testException).when(keyMgr).deleteKey(provider, name);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.deleteKey(name, provider, request);
        });

        Mockito.verify(keyMgr).deleteKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test20DeleteKeyWithNullProvider() throws Exception {
        Mockito.doNothing().when(keyMgr).deleteKey(null, name);

        keyREST.deleteKey(name, null, request);

        Mockito.verify(keyMgr).deleteKey(null, name);
    }

    @Test
    public void test21CreateKeyWithEmptyName() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName("");

        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.createKey(provider, vxKeyExp);
        });

        Mockito.verify(restErrorUtil, Mockito.times(2)).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test22CreateKeyWithException() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Exception testException = new RuntimeException("Test exception");

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.createKey(provider, vxKeyExp);
        });

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test23CreateKeyReturnsNull() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenReturn(null);

        VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertNull(vxKeyAct.getName());

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
    }

    @Test
    public void test24CreateKeyWithNullCipher() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher(null);

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
    }

    @Test
    public void test25CreateKeyWithWhitespaceCipher() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);
        vxKeyExp.setCipher("   ");

        Mockito.when(keyMgr.createKey(provider, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.createKey(provider, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);
        Assertions.assertNull(vxKeyAct.getCipher());

        Mockito.verify(keyMgr).createKey(provider, vxKeyExp);
    }

    @Test
    public void test26GetKeyWithException() throws Exception {
        Exception testException = new RuntimeException("Test exception");

        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(Mockito.anyString(), Mockito.any());
    }

    @Test
    public void test27GetKeyReturnsNull() throws Exception {
        Mockito.when(keyMgr.getKey(provider, name)).thenReturn(null);

        VXKmsKey vxKeyAct = keyREST.getKey(name, provider);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertNull(vxKeyAct.getName());

        Mockito.verify(keyMgr).getKey(provider, name);
    }

    @Test
    public void test28GetKeyWithNullProvider() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.getKey(null, name)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.getKey(name, null);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);

        Mockito.verify(keyMgr).getKey(null, name);
    }

    @Test
    public void test29HandleErrorWithConnectionRefused() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Exception testException = new RuntimeException("Connection refused");

        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(
                Mockito.eq("Connection refused : Please check the KMS provider URL and whether the Ranger KMS is running"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM)))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(
                Mockito.eq("Connection refused : Please check the KMS provider URL and whether the Ranger KMS is running"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM));
    }

    @Test
    public void test30HandleErrorWith403Status() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Exception testException = new RuntimeException("response status of 403");

        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(
                Mockito.eq("Unauthenticated : Please check the permission in the policy for the user"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM)))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(
                Mockito.eq("Unauthenticated : Please check the permission in the policy for the user"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM));
    }

    @Test
    public void test31HandleErrorWith401Status() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Exception testException = new RuntimeException("HTTP Status 401 - Authentication required");

        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(testException);
        Mockito.when(restErrorUtil.createRESTException(
                Mockito.eq("Unauthenticated : Please check the permission in the policy for the user"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM)))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(
                Mockito.eq("Unauthenticated : Please check the permission in the policy for the user"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM));
    }

    @Test
    public void test32HandleErrorWithUniformInterfaceException() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        ClientResponse mockResponse = Mockito.mock(ClientResponse.class);
        UniformInterfaceException uie = new UniformInterfaceException(mockResponse);
        String errorMessage = "{\"RemoteException\":{\"message\":\"Test error message\"}}";

        Mockito.when(mockResponse.getEntity(String.class)).thenReturn(errorMessage);
        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(uie);
        Mockito.when(restErrorUtil.createRESTException(
                Mockito.eq("Test error message"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM)))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(
                Mockito.eq("Test error message"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM));
    }

    @Test
    public void test33HandleErrorWithUniformInterfaceExceptionInvalidJson() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        ClientResponse mockResponse = Mockito.mock(ClientResponse.class);
        UniformInterfaceException uie = new UniformInterfaceException(mockResponse);
        String errorMessage = "Invalid JSON";

        Mockito.when(mockResponse.getEntity(String.class)).thenReturn(errorMessage);
        Mockito.when(keyMgr.getKey(provider, name)).thenThrow(uie);
        Mockito.when(restErrorUtil.createRESTException(
                Mockito.eq("Invalid JSON"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM)))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.getKey(name, provider);
        });

        Mockito.verify(keyMgr).getKey(provider, name);
        Mockito.verify(restErrorUtil).createRESTException(
                Mockito.eq("Invalid JSON"),
                Mockito.eq(MessageEnums.ERROR_SYSTEM));
    }

    @Test
    public void test34CreateKeyWithNullProvider() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.createKey(null, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.createKey(null, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);

        Mockito.verify(keyMgr).createKey(null, vxKeyExp);
    }

    @Test
    public void test35RolloverKeyWithNullProvider() throws Exception {
        VXKmsKey vxKeyExp = new VXKmsKey();
        vxKeyExp.setName(name);

        Mockito.when(keyMgr.rolloverKey(null, vxKeyExp)).thenReturn(vxKeyExp);

        VXKmsKey vxKeyAct = keyREST.rolloverKey(null, vxKeyExp);

        Assertions.assertNotNull(vxKeyAct);
        Assertions.assertEquals(vxKeyExp, vxKeyAct);

        Mockito.verify(keyMgr).rolloverKey(null, vxKeyExp);
    }

    @Test
    public void test36DeleteKeyWithNullName() throws Exception {
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any()))
                .thenReturn(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> {
            keyREST.deleteKey(null, provider, request);
        });

        Mockito.verify(restErrorUtil, Mockito.times(2)).createRESTException(Mockito.anyString(), Mockito.any());
    }
}
