/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.validation;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.biz.ServiceMgr;
import org.apache.ranger.biz.XUserMgr;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAccessTypeDefDao;
import org.apache.ranger.db.XXDataMaskTypeDefDao;
import org.apache.ranger.db.XXGdsDataShareDao;
import org.apache.ranger.db.XXGdsDatasetDao;
import org.apache.ranger.db.XXGdsProjectDao;
import org.apache.ranger.db.XXGdsSharedResourceDao;
import org.apache.ranger.db.XXGlobalStateDao;
import org.apache.ranger.db.XXGroupDao;
import org.apache.ranger.db.XXRoleDao;
import org.apache.ranger.db.XXSecurityZoneDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXGdsDataShare;
import org.apache.ranger.entity.XXGdsDataset;
import org.apache.ranger.entity.XXGdsProject;
import org.apache.ranger.entity.XXGroup;
import org.apache.ranger.entity.XXRole;
import org.apache.ranger.entity.XXSecurityZone;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShare;
import org.apache.ranger.plugin.model.RangerGds.RangerDataset;
import org.apache.ranger.plugin.model.RangerGds.RangerProject;
import org.apache.ranger.plugin.model.RangerPolicyResourceSignature;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngine;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerRolesUtil;
import org.apache.ranger.plugin.util.ServiceDefUtil;
import org.apache.ranger.service.RangerGdsDataShareService;
import org.apache.ranger.service.RangerGdsDatasetService;
import org.apache.ranger.service.RangerGdsProjectService;
import org.apache.ranger.service.RangerServiceService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static java.util.Collections.singletonList;
import static java.util.Collections.singletonMap;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsValidationDBProvider
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class RangerGdsValidationDBProviderTest {
    @InjectMocks
    private RangerGdsValidationDBProvider provider;

    @Mock private RangerDaoManager          daoMgr;
    @Mock private XUserMgr                  userMgr;
    @Mock private ServiceMgr                serviceMgr;
    @Mock private RangerServiceService      svcService;
    @Mock private RangerGdsDatasetService   datasetService;
    @Mock private RangerGdsProjectService   projectService;
    @Mock private RangerGdsDataShareService dataShareService;
    @Mock private RangerBizUtil             bizUtil;

    @Mock private XXServiceDao           xxServiceDao;
    @Mock private XXSecurityZoneDao      xxSecurityZoneDao;
    @Mock private XXGdsDatasetDao        xxGdsDatasetDao;
    @Mock private XXGdsProjectDao        xxGdsProjectDao;
    @Mock private XXGdsDataShareDao      xxGdsDataShareDao;
    @Mock private XXUserDao              xxUserDao;
    @Mock private XXRoleDao              xxRoleDao;
    @Mock private XXGroupDao             xxGroupDao;
    @Mock private XXAccessTypeDefDao     xxAccessTypeDefDao;
    @Mock private XXDataMaskTypeDefDao   xxDataMaskTypeDefDao;
    @Mock private XXGdsSharedResourceDao xxGdsSharedResourceDao;
    @Mock private XXGlobalStateDao       xxGlobalStateDao;

    @Test
    public void sharedResourceId_lookupByNameOrSignature() {
        when(xxGdsSharedResourceDao.getIdByDataShareIdAndName(10L, "res")).thenReturn(100L);
        assertEquals(100L, provider.getSharedResourceId(10L, "res"));

        RangerPolicyResourceSignature sig = RangerPolicyResourceSignature.from(singletonMap("path", singletonList("/a")));
        when(xxGdsSharedResourceDao.getIdByDataShareIdAndResourceSignature(anyLong(), anyString())).thenReturn(200L);
        assertEquals(200L, provider.getSharedResourceId(10L, sig));
    }

    @Test
    public void getRolesForUserAndGroups_mergesGroupPublic() {
        // Exercise empty/null-safe flows: initGetRolesUtil returns null => returns roles for user (null) and adds group/public none
        Set<String> roles = provider.getRolesForUserAndGroups("u", new HashSet<>(singletonList("g")));
        assertNull(roles);
    }

    @Test
    public void testGetDatasetId() {
        when(xxGdsDatasetDao.findByName("dataset1")).thenReturn(null);
        assertNull(provider.getDatasetId("dataset1"));
        XXGdsDataset xds = new XXGdsDataset();
        xds.setId(1L);
        when(xxGdsDatasetDao.findByName("dataset1")).thenReturn(xds);
        assertEquals(1L, provider.getDatasetId("dataset1"));
    }

    @Test
    public void testGetProjectId() {
        when(xxGdsProjectDao.findByName("project1")).thenReturn(null);
        assertNull(provider.getProjectId("project1"));
        XXGdsProject xprj = new XXGdsProject();
        xprj.setId(1L);
        when(xxGdsProjectDao.findByName("project1")).thenReturn(xprj);
        assertEquals(1L, provider.getProjectId("project1"));
    }

    @Test
    public void testGetDataShareId() {
        when(xxGdsDataShareDao.findByName("dataShare1")).thenReturn(null);
        assertNull(provider.getDataShareId("dataShare1"));
        XXGdsDataShare xdsr = new XXGdsDataShare();
        xdsr.setId(1L);
        when(xxGdsDataShareDao.findByName("dataShare1")).thenReturn(xdsr);
        assertEquals(1L, provider.getDataShareId("dataShare1"));
    }

    @Test
    public void testGetUserId() {
        when(xxUserDao.findByUserName("user1")).thenReturn(null);
        assertNull(provider.getUserId("user1"));
        XXUser user = new XXUser();
        user.setId(1L);
        when(xxUserDao.findByUserName("user1")).thenReturn(user);
        assertEquals(1L, provider.getUserId("user1"));
    }

    @Test
    public void testGetRoleId() {
        when(xxRoleDao.findByRoleName("role1")).thenReturn(null);
        assertNull(provider.getRoleId("role1"));
        XXRole xrole = new XXRole();
        xrole.setId(1L);
        when(xxRoleDao.findByRoleName("role1")).thenReturn(xrole);
        assertEquals(1L, provider.getRoleId("role1"));
    }

    @Test
    public void getRolesForUserAndGroups_mergesGroupAndPublicRoles() {
        // Keep version stable so provider doesn't try to refresh roles from cache
        when(xxGlobalStateDao.getAppDataVersion(anyString())).thenReturn(1L);

        RangerRole groupRole = new RangerRole("role-g", "", null, null,
                singletonList(new RangerRole.RoleMember("g1", false)), null);
        RangerRole publicRole = new RangerRole("role-public", "", null, null,
                singletonList(new RangerRole.RoleMember(RangerPolicyEngine.GROUP_PUBLIC, false)), null);

        RangerRoles roles = new RangerRoles();
        roles.setRoleVersion(1L);
        roles.setRangerRoles(new HashSet<>(Arrays.asList(groupRole, publicRole)));

        provider.rolesUtil = new RangerRolesUtil(roles);

        Set<String> merged = provider.getRolesForUserAndGroups("userX", new HashSet<>(singletonList("g1")));
        assertEquals(new HashSet<>(Arrays.asList("role-g", "role-public")), merged);
    }

    @Test
    public void getRolesForUserAndGroups_mergesUserGroupAndPublicRoles() {
        when(xxGlobalStateDao.getAppDataVersion(anyString())).thenReturn(1L);

        RangerRole userRole = new RangerRole("role-u", "", null,
                singletonList(new RangerRole.RoleMember("u1", false)), null, null);
        RangerRole groupRole = new RangerRole("role-g", "", null, null,
                singletonList(new RangerRole.RoleMember("g1", false)), null);
        RangerRole publicRole = new RangerRole("role-public", "", null, null,
                singletonList(new RangerRole.RoleMember(RangerPolicyEngine.GROUP_PUBLIC, false)), null);

        RangerRoles roles = new RangerRoles();
        roles.setRoleVersion(1L);
        roles.setRangerRoles(new HashSet<>(Arrays.asList(userRole, groupRole, publicRole)));

        provider.rolesUtil = new RangerRolesUtil(roles);

        Set<String> merged = provider.getRolesForUserAndGroups("u1", new HashSet<>(singletonList("g1")));
        assertEquals(new HashSet<>(Arrays.asList("role-u", "role-g", "role-public")), merged);
    }

    @BeforeEach
    void setup() {
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(daoMgr.getXXSecurityZoneDao()).thenReturn(xxSecurityZoneDao);
        when(daoMgr.getXXGdsDataset()).thenReturn(xxGdsDatasetDao);
        when(daoMgr.getXXGdsProject()).thenReturn(xxGdsProjectDao);
        when(daoMgr.getXXGdsDataShare()).thenReturn(xxGdsDataShareDao);
        when(daoMgr.getXXUser()).thenReturn(xxUserDao);
        when(daoMgr.getXXRole()).thenReturn(xxRoleDao);
        when(daoMgr.getXXGroup()).thenReturn(xxGroupDao);
        when(daoMgr.getXXAccessTypeDef()).thenReturn(xxAccessTypeDefDao);
        when(daoMgr.getXXDataMaskTypeDef()).thenReturn(xxDataMaskTypeDefDao);
        when(daoMgr.getXXGdsSharedResource()).thenReturn(xxGdsSharedResourceDao);
        when(daoMgr.getXXGlobalState()).thenReturn(xxGlobalStateDao);
    }

    @Test
    void getServiceId_returnsIdOrNull() {
        XXService svc = new XXService();
        svc.setId(5L);
        when(xxServiceDao.findByName("svc")).thenReturn(svc);
        assertEquals(5L, provider.getServiceId("svc"));
        when(xxServiceDao.findByName("missing")).thenReturn(null);
        assertNull(provider.getServiceId("missing"));
    }

    @Test
    void getZoneId_returnsIdOrNull() {
        XXSecurityZone zone = new XXSecurityZone();
        zone.setId(7L);
        when(xxSecurityZoneDao.findByZoneName("zone")).thenReturn(zone);
        assertEquals(7L, provider.getZoneId("zone"));
        when(xxSecurityZoneDao.findByZoneName("missing")).thenReturn(null);
        assertNull(provider.getZoneId("missing"));
    }

    @Test
    void getGroupId_returnsIdOrNull() {
        when(xxGroupDao.findByGroupName("group1")).thenReturn(null);
        assertNull(provider.getGroupId("group1"));

        XXGroup grp = new XXGroup();
        grp.setId(1L);
        when(xxGroupDao.findByGroupName("group1")).thenReturn(grp);
        assertEquals(1L, provider.getGroupId("group1"));
    }

    @Test
    void currentUserAndAdminChecks_delegateToBizUtilAndServiceMgr() {
        when(bizUtil.getCurrentUserLoginId()).thenReturn("alice");
        assertEquals("alice", provider.getCurrentUserLoginId());

        when(bizUtil.isAdmin()).thenReturn(true, false);
        assertTrue(provider.isAdminUser());
        assertFalse(provider.isAdminUser());

        // isServiceAdmin path where service found and populated
        XXService xService = new XXService();
        xService.setName("svc");
        xService.setId(11L);
        when(xxServiceDao.findByName("svc")).thenReturn(xService);
        RangerService view = new RangerService();
        when(svcService.getPopulatedViewObject(xService)).thenReturn(view);
        when(bizUtil.isUserServiceAdmin(view, "alice")).thenReturn(true);
        when(bizUtil.getCurrentUserLoginId()).thenReturn("alice");
        assertTrue(provider.isServiceAdmin("svc"));

        // when service not found
        when(xxServiceDao.findByName("missing")).thenReturn(null);
        assertFalse(provider.isServiceAdmin("missing"));

        when(serviceMgr.isZoneAdmin("zone")).thenReturn(true, false);
        assertTrue(provider.isZoneAdmin("zone"));
        assertFalse(provider.isZoneAdmin("zone"));
    }

    @Test
    void groupsRolesAccessTypesMaskTypes_resolveFromDeps() {
        Set<String> groups = new HashSet<>(Arrays.asList("g1", "g2"));
        when(userMgr.getGroupsForUser("u1")).thenReturn(groups);
        assertEquals(groups, provider.getGroupsForUser("u1"));

        // roles for user and group: initGetRolesUtil path is exercised indirectly by null-safe return; we only assert null or set passthrough
        when(xxAccessTypeDefDao.getNamesByServiceName("svc")).thenReturn(Arrays.asList("read", "write"));
        Set<String> access = provider.getAccessTypes("svc");
        assertTrue(access.contains("read") && access.contains("write") && access.containsAll(ServiceDefUtil.ACCESS_TYPE_MARKERS));

        when(xxDataMaskTypeDefDao.getNamesByServiceName("svc")).thenReturn(Arrays.asList("MASK_NULL", "CUSTOM"));
        Set<String> masks = provider.getMaskTypes("svc");
        assertEquals(new HashSet<>(Arrays.asList("MASK_NULL", "CUSTOM")), masks);
    }

    @Test
    void getDatasetProjectDataShare_byId_handlesExceptionsAndNulls() throws Exception {
        // dataset
        RangerDataset ds = new RangerDataset();
        when(datasetService.read(1L)).thenReturn(ds);
        assertSame(ds, provider.getDataset(1L));
        when(datasetService.read(2L)).thenThrow(new RuntimeException("fail"));
        assertNull(provider.getDataset(2L));
        assertNull(provider.getDataset(null));

        // project
        RangerProject prj = new RangerProject();
        when(projectService.read(3L)).thenReturn(prj);
        assertSame(prj, provider.getProject(3L));
        when(projectService.read(4L)).thenThrow(new RuntimeException("fail"));
        assertNull(provider.getProject(4L));
        assertNull(provider.getProject(null));

        // datashare
        RangerDataShare dshare = new RangerDataShare();
        when(dataShareService.read(5L)).thenReturn(dshare);
        assertSame(dshare, provider.getDataShare(5L));
        when(dataShareService.read(6L)).thenThrow(new RuntimeException("fail"));
        assertNull(provider.getDataShare(6L));
    }
}
