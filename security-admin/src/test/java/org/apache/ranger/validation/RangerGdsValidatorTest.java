/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.validation;

import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerConstants;
import org.apache.ranger.plugin.errors.ValidationErrorCode;
import org.apache.ranger.plugin.model.RangerGds.GdsPermission;
import org.apache.ranger.plugin.model.RangerGds.GdsShareStatus;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShare;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShareInDataset;
import org.apache.ranger.plugin.model.RangerGds.RangerDataset;
import org.apache.ranger.plugin.model.RangerGds.RangerDatasetInProject;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsMaskInfo;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsObjectACL;
import org.apache.ranger.plugin.model.RangerGds.RangerProject;
import org.apache.ranger.plugin.model.RangerGds.RangerSharedResource;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerPolicyResourceSignature;
import org.apache.ranger.plugin.model.validation.ValidationFailureDetails;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import static java.util.Collections.singletonList;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerGdsValidator
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class RangerGdsValidatorTest {
    @Mock
    private RangerGdsValidationDataProvider dataProvider;

    @InjectMocks
    private RangerGdsValidator validator;

    @BeforeEach
    public void setUp() {
        validator.restErrorUtil = new RESTErrorUtil();
    }

    @Test
    public void getGdsPermissionForUser_aggregatesUsersGroupsRolesAndAdminUser() {
        String user = "alice";

        RangerGdsObjectACL         acl   = new RangerGdsObjectACL();
        Map<String, GdsPermission> users = new HashMap<>();
        users.put(user, GdsPermission.VIEW);
        acl.setUsers(users);
        Map<String, GdsPermission> groups = new HashMap<>();
        groups.put(RangerConstants.GROUP_PUBLIC, GdsPermission.LIST);
        groups.put("analyst", GdsPermission.AUDIT);
        acl.setGroups(groups);
        Map<String, GdsPermission> roles = new HashMap<>();
        roles.put("role1", GdsPermission.POLICY_ADMIN);
        acl.setRoles(roles);

        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getGroupsForUser(user)).thenReturn(new HashSet<>(Arrays.asList("analyst", "ops")));
        when(dataProvider.getRolesForUser(user)).thenReturn(new HashSet<>(Collections.singletonList("role1")));

        GdsPermission perm = validator.getGdsPermissionForUser(acl, user);
        assertEquals(GdsPermission.POLICY_ADMIN, perm);
    }

    @Test
    public void hasPermission_checksUserGroupRoleAndPublic() {
        String user = "bob";
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn(user);
        when(dataProvider.getGroupsForUser(user)).thenReturn(new HashSet<>(Collections.singletonList("developers")));
        when(dataProvider.getRolesForUser(user)).thenReturn(new HashSet<>(Collections.singletonList("roleX")));

        RangerGdsObjectACL acl = new RangerGdsObjectACL();
        acl.setUsers(Collections.singletonMap(user, GdsPermission.VIEW));
        Map<String, GdsPermission> groups = new HashMap<>();
        groups.put(RangerConstants.GROUP_PUBLIC, GdsPermission.LIST);
        groups.put("developers", GdsPermission.AUDIT);
        acl.setGroups(groups);
        acl.setRoles(Collections.singletonMap("roleX", GdsPermission.POLICY_ADMIN));

        assertTrue(validator.hasPermission(acl, GdsPermission.LIST));
        assertTrue(validator.hasPermission(acl, GdsPermission.VIEW));
        assertTrue(validator.hasPermission(acl, GdsPermission.AUDIT));
        assertTrue(validator.hasPermission(acl, GdsPermission.POLICY_ADMIN));
        assertFalse(validator.hasPermission(acl, GdsPermission.ADMIN));
    }

    @Test
    public void needApproverUpdate_coversStateTransitions() {
        assertTrue(validator.needApproverUpdate(GdsShareStatus.NONE, GdsShareStatus.GRANTED));
        assertTrue(validator.needApproverUpdate(GdsShareStatus.REQUESTED, GdsShareStatus.ACTIVE));
        assertFalse(validator.needApproverUpdate(GdsShareStatus.GRANTED, GdsShareStatus.GRANTED));
        assertFalse(validator.needApproverUpdate(GdsShareStatus.GRANTED, GdsShareStatus.ACTIVE));
        assertFalse(validator.needApproverUpdate(GdsShareStatus.ACTIVE, GdsShareStatus.REQUESTED));
    }

    @Test
    public void validateCreate_dataset_nameConflictAndAclUserGroupRoleChecks() {
        RangerDataset ds = new RangerDataset();
        ds.setName("dataset1");
        RangerGdsObjectACL acl = new RangerGdsObjectACL();
        acl.setUsers(Collections.singletonMap("nouser", GdsPermission.ADMIN));
        acl.setGroups(Collections.singletonMap("nogroup", GdsPermission.ADMIN));
        acl.setRoles(Collections.singletonMap("norole", GdsPermission.ADMIN));
        ds.setAcl(acl);

        when(dataProvider.getDatasetId("dataset1")).thenReturn(1L);
        when(dataProvider.getUserId("nouser")).thenReturn(null);
        when(dataProvider.getGroupId("nogroup")).thenReturn(null);
        when(dataProvider.getRoleId("norole")).thenReturn(null);

        assertThrows(WebApplicationException.class, () -> validator.validateCreate(ds));
    }

    @Test
    public void validateUpdate_dataset_existingNullAndRenameConflictsAndNameLength() {
        RangerDataset ds = new RangerDataset();
        ds.setName(repeat('x', RangerGdsValidator.GDS_ENTITIES_NAME_MAX_LENGTH + 1));
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(ds, null));

        RangerDataset existing = new RangerDataset();
        existing.setName("old");
        existing.setAcl(aclWithUser("admin", GdsPermission.ADMIN));

        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("admin");
        when(dataProvider.getUserId("admin")).thenReturn(1L);
        when(dataProvider.getDatasetId(ds.getName())).thenReturn(2L);

        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(ds, existing));
    }

    @Test
    public void validateDelete_dataset_requiresAdmin() {
        RangerDataset existing = new RangerDataset();
        existing.setName("ds");
        existing.setAcl(aclWithUser("u1", GdsPermission.ADMIN));
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("u2");
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(5L, existing));
    }

    @Test
    public void validateCreate_project_conflictAndAclChecks() {
        RangerProject p = new RangerProject();
        p.setName("p1");
        p.setAcl(aclWithUser("nouser", GdsPermission.ADMIN));
        when(dataProvider.getProjectId("p1")).thenReturn(7L);
        when(dataProvider.getUserId("nouser")).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> validator.validateCreate(p));
    }

    @Test
    public void validateCreate_dataShare_serviceZoneAdminAndAccessMaskTypes() {
        RangerDataShare ds = new RangerDataShare();
        ds.setName("share1");
        ds.setService("svc");
        ds.setZone("zone1");
        ds.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        ds.setDefaultAccessTypes(new HashSet<>(Arrays.asList("read", "invalidAccess")));

        RangerGdsMaskInfo            mask     = new RangerGdsMaskInfo();
        RangerPolicyItemDataMaskInfo maskInfo = new RangerPolicyItemDataMaskInfo();
        maskInfo.setDataMaskType("invalidMask");
        mask.setMaskInfo(maskInfo);
        ds.setDefaultTagMasks(Collections.singletonList(mask));

        when(dataProvider.getDataShareId("share1")).thenReturn(9L);
        when(dataProvider.getServiceId("svc")).thenReturn(null);
        when(dataProvider.getAccessTypes("svc")).thenReturn(new HashSet<>(Arrays.asList("read", "write")));
        when(dataProvider.getMaskTypes("svc")).thenReturn(new HashSet<>(Arrays.asList("MASK_NULL", "CUSTOM")));
        when(dataProvider.isAdminUser()).thenReturn(false);

        assertThrows(WebApplicationException.class, () -> validator.validateCreate(ds));

        // Now service exists but not service/zone admin and zone not found
        when(dataProvider.getDataShareId("share1")).thenReturn(null);
        when(dataProvider.getServiceId("svc")).thenReturn(1L);
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone1")).thenReturn(false);
        when(dataProvider.getZoneId("zone1")).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> validator.validateCreate(ds));
    }

    @Test
    public void validateCreate_sharedResource_conflicts_and_resourceValues() {
        RangerSharedResource r = new RangerSharedResource();
        r.setName("res1");
        r.setDataShareId(10L);
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("path", new RangerPolicyResource(Arrays.asList("", " "), false, false));
        r.setResource(res);

        when(dataProvider.getDataShare(10L)).thenReturn(new RangerDataShare());
        when(dataProvider.getSharedResourceId(eq(10L), anyString())).thenReturn(100L);

        assertThrows(WebApplicationException.class, () -> validator.validateCreate(r));

        // now use non-empty resource; simulate signature conflict
        res.put("path", new RangerPolicyResource(singletonList("/a"), false, false));
        r.setResource(res);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("u1");
        RangerDataShare dataShare = new RangerDataShare();
        dataShare.setService("svc");
        dataShare.setZone("zone");
        dataShare.setAcl(aclWithUser("u1", GdsPermission.ADMIN));
        when(dataProvider.getDataShare(10L)).thenReturn(dataShare);
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);
        when(dataProvider.getSharedResourceId(eq(10L), any(RangerPolicyResourceSignature.class))).thenReturn(200L);

        assertThrows(WebApplicationException.class, () -> validator.validateCreate(r));
    }

    @Test
    public void validateUpdate_sharedResource_nameAndSignatureConflicts() {
        RangerSharedResource existing = new RangerSharedResource();
        existing.setId(1L);
        existing.setName("old");
        existing.setDataShareId(11L);

        RangerSharedResource r = new RangerSharedResource();
        r.setId(1L);
        r.setName("new");
        r.setDataShareId(11L);
        r.setResource(Collections.singletonMap("db", new RangerPolicyResource("sales")));

        RangerDataShare ds = new RangerDataShare();
        ds.setService("svc");
        ds.setZone("zone");
        ds.setAcl(aclWithUser("u1", GdsPermission.ADMIN));

        when(dataProvider.getDataShare(11L)).thenReturn(ds);
        when(dataProvider.getSharedResourceId(11L, "new")).thenReturn(2L);
        when(dataProvider.getSharedResourceId(eq(11L), any(RangerPolicyResourceSignature.class))).thenReturn(3L);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("u1");
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);

        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(r, existing));
    }

    @Test
    public void validateCreateOrUpdate_policy_policyItemsValidation() {
        RangerPolicy           p     = new RangerPolicy();
        List<RangerPolicyItem> items = new ArrayList<>();
        items.add(null);
        RangerPolicyItem item2 = new RangerPolicyItem();
        item2.setUsers(new ArrayList<>()); // no principals
        item2.setAccesses(singletonList(new RangerPolicyItemAccess(""))); // invalid type
        items.add(item2);
        RangerPolicyItem item3 = new RangerPolicyItem();
        item3.setUsers(Collections.singletonList("u"));
        item3.setAccesses(Collections.singletonList(null)); // null access
        items.add(item3);
        p.setPolicyItems(items);

        assertThrows(WebApplicationException.class, () -> validator.validateCreateOrUpdate(p));
    }

    @Test
    public void validateCreate_dataShareInDataset_statusBasedAdminRequirements() {
        RangerDataShareInDataset d = new RangerDataShareInDataset();
        d.setDataShareId(21L);
        d.setDatasetId(22L);
        d.setStatus(GdsShareStatus.ACTIVE);

        RangerDataShare ds = new RangerDataShare();
        ds.setName("ds");
        ds.setAcl(aclWithUser("alice", GdsPermission.ADMIN));
        RangerDataset dataset = new RangerDataset();
        dataset.setName("dt");
        dataset.setAcl(aclWithUser("alice", GdsPermission.ADMIN));

        when(dataProvider.getDataShare(21L)).thenReturn(ds);
        when(dataProvider.getDataset(22L)).thenReturn(dataset);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("alice");

        assertDoesNotThrow(() -> validator.validateCreate(d));

        // REQUESTED requires dataset admin
        d.setStatus(GdsShareStatus.REQUESTED);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("bob");
        assertThrows(WebApplicationException.class, () -> validator.validateCreate(d));
    }

    @Test
    public void validateUpdate_dataShareInDataset_statusChangeRules_andAuthorization() {
        RangerDataShareInDataset existing = new RangerDataShareInDataset();
        existing.setId(1L);
        existing.setDataShareId(31L);
        existing.setDatasetId(32L);
        existing.setStatus(GdsShareStatus.NONE);

        RangerDataShareInDataset updated = new RangerDataShareInDataset();
        updated.setId(1L);
        updated.setDataShareId(31L);
        updated.setDatasetId(32L);
        updated.setStatus(GdsShareStatus.GRANTED);

        RangerDataShare ds = new RangerDataShare();
        ds.setName("dshare");
        ds.setService("svc");
        ds.setZone("zone");
        ds.setAcl(aclWithUser("approver", GdsPermission.ADMIN));

        RangerDataset dataset = new RangerDataset();
        dataset.setName("dataset");
        dataset.setAcl(aclWithUser("approver", GdsPermission.ADMIN));

        when(dataProvider.getDataShare(31L)).thenReturn(ds);
        when(dataProvider.getDataset(32L)).thenReturn(dataset);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("approver");
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);

        assertDoesNotThrow(() -> validator.validateUpdate(updated, existing));

        // change to a status that requires neither admin exclusively, must be admin on at least one side
        existing.setStatus(GdsShareStatus.GRANTED);
        updated.setStatus(GdsShareStatus.DENIED);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("noadmin");
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(updated, existing));
    }

    @Test
    public void validateCreate_datasetInProject_statusRules() {
        RangerDatasetInProject dip = new RangerDatasetInProject();
        dip.setDatasetId(41L);
        dip.setProjectId(42L);
        dip.setStatus(GdsShareStatus.ACTIVE);

        RangerDataset dataset = new RangerDataset();
        dataset.setName("ds");
        dataset.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        RangerProject project = new RangerProject();
        project.setName("prj");
        project.setAcl(aclWithUser("owner", GdsPermission.ADMIN));

        when(dataProvider.getDataset(41L)).thenReturn(dataset);
        when(dataProvider.getProject(42L)).thenReturn(project);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("owner");

        assertDoesNotThrow(() -> validator.validateCreate(dip));

        // missing dataset
        when(dataProvider.getDataset(41L)).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> validator.validateCreate(dip));
    }

    @Test
    public void validateUpdate_project_existingNullAndRenameConflictsAndNameLength() {
        RangerProject p = new RangerProject();
        p.setName("x" + repeat('y', RangerGdsValidator.GDS_ENTITIES_NAME_MAX_LENGTH));
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(p, null));

        RangerProject existing = new RangerProject();
        existing.setName("old");
        existing.setAcl(aclWithUser("pa", GdsPermission.ADMIN));
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("pa");
        when(dataProvider.getUserId("pa")).thenReturn(1L);
        when(dataProvider.getProjectId(p.getName())).thenReturn(2L);
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(p, existing));
    }

    @Test
    public void validateDelete_project_requiresAdmin() {
        RangerProject existing = new RangerProject();
        existing.setName("prj");
        existing.setAcl(aclWithUser("u1", GdsPermission.ADMIN));
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("u2");
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(10L, existing));
    }

    @Test
    public void validateUpdate_dataShare_existingNullAndRenameConflictsAndNameLength() {
        RangerDataShare ds = new RangerDataShare();
        ds.setName(repeat('a', RangerGdsValidator.GDS_ENTITIES_NAME_MAX_LENGTH + 1));
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(ds, null));

        RangerDataShare existing = new RangerDataShare();
        existing.setName("old");
        existing.setService("svc");
        existing.setZone("zone");
        existing.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("owner");
        when(dataProvider.getUserId("owner")).thenReturn(1L);
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);
        when(dataProvider.getDataShareId(ds.getName())).thenReturn(99L);
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(ds, existing));
    }

    @Test
    public void validateDelete_dataShare_requiresAdminOrServiceZoneAdmin() {
        RangerDataShare existing = new RangerDataShare();
        existing.setName("ds");
        existing.setService("svc");
        existing.setZone("zone");
        existing.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("nope");
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(1L, existing));
    }

    @Test
    public void validateDelete_sharedResource_requiresAdminOnDataShare() {
        RangerSharedResource existing = new RangerSharedResource();
        existing.setId(1L);
        existing.setDataShareId(101L);
        RangerDataShare ds = new RangerDataShare();
        ds.setName("dshare");
        ds.setService("svc");
        ds.setZone("zone");
        ds.setAcl(aclWithUser("approver", GdsPermission.ADMIN));
        when(dataProvider.getDataShare(101L)).thenReturn(ds);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("x");
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(1L, existing));
    }

    @Test
    public void validateUpdate_datasetInProject_statusChangeAndAuth() {
        RangerDatasetInProject existing = new RangerDatasetInProject();
        existing.setId(1L);
        existing.setDatasetId(11L);
        existing.setProjectId(12L);
        existing.setStatus(GdsShareStatus.NONE);

        RangerDatasetInProject updated = new RangerDatasetInProject();
        updated.setId(1L);
        updated.setDatasetId(11L);
        updated.setProjectId(12L);
        updated.setStatus(GdsShareStatus.REQUESTED);

        RangerDataset dataset = new RangerDataset();
        dataset.setName("ds");
        dataset.setAcl(aclWithUser("approver", GdsPermission.ADMIN));
        RangerProject project = new RangerProject();
        project.setName("prj");
        project.setAcl(aclWithUser("approver", GdsPermission.ADMIN));

        when(dataProvider.getDataset(11L)).thenReturn(dataset);
        when(dataProvider.getProject(12L)).thenReturn(project);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("approver");

        assertDoesNotThrow(() -> validator.validateUpdate(updated, existing));

        existing.setStatus(GdsShareStatus.GRANTED);
        updated.setStatus(GdsShareStatus.DENIED);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("noadmin");
        assertThrows(WebApplicationException.class, () -> validator.validateUpdate(updated, existing));
    }

    @Test
    public void validateCreateOrUpdate_policy_noItemsIsNoOp_andValidItemsPass() {
        RangerPolicy p = new RangerPolicy();
        assertDoesNotThrow(() -> validator.validateCreateOrUpdate(p));

        RangerPolicy     p2 = new RangerPolicy();
        RangerPolicyItem ok = new RangerPolicyItem();
        ok.setUsers(Collections.singletonList("u"));
        ok.setAccesses(Collections.singletonList(new RangerPolicyItemAccess("read")));
        p2.setPolicyItems(Collections.singletonList(ok));
        assertDoesNotThrow(() -> validator.validateCreateOrUpdate(p2));
    }

    @Test
    public void getGdsPermissionForUser_whenAdminUserAlwaysAdmin() {
        RangerGdsObjectACL acl = new RangerGdsObjectACL();
        when(dataProvider.isAdminUser()).thenReturn(true);
        assertEquals(GdsPermission.ADMIN, validator.getGdsPermissionForUser(acl, "any"));
    }

    @Test
    public void hasPermission_nullAclOrNone() {
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("u");
        assertFalse(validator.hasPermission(null, GdsPermission.VIEW));
    }

    @Test
    public void validateDelete_dataShareInDataset_checksNullsAndAdminOrServiceZoneOrDataset() {
        // existing == null -> ID_NOT_FOUND
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(100L, (RangerDataShareInDataset) null));

        // dataShare null -> DATA_SHARE_ID_NOT_FOUND
        RangerDataShareInDataset existing = new RangerDataShareInDataset();
        existing.setDataShareId(1L);
        existing.setDatasetId(2L);
        when(dataProvider.getDataShare(1L)).thenReturn(null);
        when(dataProvider.getDataset(2L)).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(101L, existing));

        // both non-null but user not admin anywhere -> NOT_ADMIN
        RangerDataShare ds = new RangerDataShare();
        ds.setName("ds");
        ds.setService("svc");
        ds.setZone("zone");
        ds.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        RangerDataset dataset = new RangerDataset();
        dataset.setName("dt");
        dataset.setAcl(aclWithUser("owner", GdsPermission.ADMIN));
        when(dataProvider.getDataShare(1L)).thenReturn(ds);
        when(dataProvider.getDataset(2L)).thenReturn(dataset);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("nope");
        when(dataProvider.isServiceAdmin("svc")).thenReturn(false);
        when(dataProvider.isZoneAdmin("zone")).thenReturn(false);
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(101L, existing));
    }

    @Test
    public void validateDelete_datasetInProject_checksNullsAndAdminEitherSide() {
        // existing == null -> ID_NOT_FOUND
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(200L, (RangerDatasetInProject) null));

        RangerDatasetInProject existing = new RangerDatasetInProject();
        existing.setDatasetId(11L);
        existing.setProjectId(12L);

        // dataset null -> DATASET_ID_NOT_FOUND
        when(dataProvider.getDataset(11L)).thenReturn(null);
        when(dataProvider.getProject(12L)).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(200L, existing));

        // both present but user not admin in either -> NOT_ADMIN
        RangerDataset dataset = new RangerDataset();
        dataset.setName("ds");
        dataset.setAcl(aclWithUser("u1", GdsPermission.ADMIN));
        RangerProject project = new RangerProject();
        project.setName("prj");
        project.setAcl(aclWithUser("u1", GdsPermission.ADMIN));
        when(dataProvider.getDataset(11L)).thenReturn(dataset);
        when(dataProvider.getProject(12L)).thenReturn(project);
        when(dataProvider.isAdminUser()).thenReturn(false);
        when(dataProvider.getCurrentUserLoginId()).thenReturn("nope");
        assertThrows(WebApplicationException.class, () -> validator.validateDelete(200L, existing));
    }

    @Test
    public void validationResult_getFailuresAndThrow403() throws Exception {
        // construct inner class ValidationResult via reflection
        Class<?> vrClass = Arrays.stream(RangerGdsValidator.class.getDeclaredClasses())
                .filter(c -> c.getSimpleName().equals("ValidationResult")).findFirst().orElseThrow(null);
        Constructor<?> ctor = vrClass.getDeclaredConstructor(validator.getClass());
        ctor.setAccessible(true);
        Object vr = ctor.newInstance(validator);

        // add a failure using the public API via reflection
        vrClass.getMethod("addValidationFailure", ValidationFailureDetails.class)
                .invoke(vr, new ValidationFailureDetails(
                        ValidationErrorCode.GDS_VALIDATION_ERR_DATASET_ID_NOT_FOUND,
                        "datasetId", 999L));

        // getValidationFailures should return non-empty
        @SuppressWarnings("unchecked")
        List<?> failures = (List<?>) vrClass.getMethod("getValidationFailures").invoke(vr);
        assertTrue(failures != null && !failures.isEmpty());

        // throwREST403Exception should raise WebApplicationException
        assertThrows(WebApplicationException.class, () -> {
            try {
                vrClass.getMethod("throwREST403Exception").invoke(vr);
            } catch (InvocationTargetException ite) {
                if (ite.getCause() instanceof WebApplicationException) {
                    throw ite.getCause();
                }
                throw new RuntimeException(ite.getCause());
            }
        });
    }

    private static RangerGdsObjectACL aclWithUser(String user, GdsPermission p) {
        RangerGdsObjectACL         acl   = new RangerGdsObjectACL();
        Map<String, GdsPermission> users = new HashMap<>();
        users.put(user, p);
        acl.setUsers(users);
        return acl;
    }

    private static RangerGdsObjectACL aclWithGroup(String group, GdsPermission p) {
        RangerGdsObjectACL         acl    = new RangerGdsObjectACL();
        Map<String, GdsPermission> groups = new HashMap<>();
        groups.put(group, p);
        acl.setGroups(groups);
        return acl;
    }

    private static RangerGdsObjectACL aclWithRole(String role, GdsPermission p) {
        RangerGdsObjectACL         acl   = new RangerGdsObjectACL();
        Map<String, GdsPermission> roles = new HashMap<>();
        roles.put(role, p);
        acl.setRoles(roles);
        return acl;
    }

    private static String repeat(char c, int count) {
        char[] arr = new char[count];
        Arrays.fill(arr, c);
        return new String(arr);
    }

    private void assertFalse(boolean b) {}
}
