/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.amazon.cloudwatch;

import com.amazonaws.services.logs.AWSLogs;
import com.amazonaws.services.logs.model.FilterLogEventsRequest;
import com.amazonaws.services.logs.model.FilterLogEventsResult;
import com.amazonaws.services.logs.model.FilteredLogEvent;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for CloudWatchUtil
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class CloudWatchUtilTest {
    @Test
    public void getFilterLogEventsRequest_buildsPattern_dates_and_logStreamPrefix() {
        CloudWatchUtil util = new CloudWatchUtil();
        SearchCriteria sc   = new SearchCriteria();
        Date           from = new Date(System.currentTimeMillis() - 3600_000);
        Date           to   = new Date();
        sc.addParam("fromDate", from);
        sc.addParam("toDate", to);
        sc.addParam("user", "Alice");
        sc.addParam("actions", Arrays.asList("read", "write"));
        sc.addParam("resource", "path/to");

        List<SearchField> fields = Arrays.asList(
                new SearchField("fromDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN),
                new SearchField("toDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.LESS_EQUAL_THAN),
                new SearchField("user", "user"),
                new SearchField("actions", "action"),
                new SearchField("resource", "resource"));

        AWSLogs                client = mock(AWSLogs.class);
        FilterLogEventsRequest req    = util.getFilterLogEventsRequest(client, sc, fields);

        assertNotNull(req.getStartTime());
        assertNotNull(req.getEndTime());
        assertTrue(req.getFilterPattern().contains("$.user = \"alice\""));
        assertTrue(req.getFilterPattern().contains("$.action = \"read\""));
        assertTrue(req.getFilterPattern().contains("$.action = \"write\""));
    }

    @Test
    public void getFilterLogEventsRequest_usesDefaults_whenDatesMissing_and_partialSearch() {
        CloudWatchUtil util = new CloudWatchUtil();
        SearchCriteria sc   = new SearchCriteria();
        sc.addParam("resource", "Tbl");

        List<SearchField> fields = Collections.singletonList(
                new SearchField("resource", "resource", SearchField.DATA_TYPE.STRING, SearchField.SEARCH_TYPE.PARTIAL));

        FilterLogEventsRequest req = util.getFilterLogEventsRequest(mock(AWSLogs.class), sc, fields);
        assertNotNull(req.getStartTime());
        assertNotNull(req.getEndTime());
        assertTrue(req.getFilterPattern().contains("$.resource= \"*tbl*\""));
    }

    @Test
    public void searchResources_paginates_until_noMoreTokens_and_collects_events() {
        CloudWatchUtil util   = new CloudWatchUtil();
        AWSLogs        client = mock(AWSLogs.class);

        FilterLogEventsResult r1 = new FilterLogEventsResult()
                .withEvents(new FilteredLogEvent().withMessage("m1"))
                .withNextToken("t1");
        FilterLogEventsResult r2 = new FilterLogEventsResult()
                .withEvents(new FilteredLogEvent().withMessage("m2"))
                .withNextToken(null);

        when(client.filterLogEvents(any(FilterLogEventsRequest.class)))
                .thenReturn(r1)
                .thenReturn(r2);

        SearchCriteria sc = new SearchCriteria();

        List<FilteredLogEvent> out = util.searchResources(client, sc, new ArrayList<>(), Collections.emptyList());
        assertNotNull(out);
    }

    @Test
    public void searchResources_stops_when_nextToken_repeats() {
        CloudWatchUtil util   = new CloudWatchUtil();
        AWSLogs        client = mock(AWSLogs.class);

        FilterLogEventsResult r1 = new FilterLogEventsResult()
                .withEvents(Collections.singletonList(new FilteredLogEvent().withMessage("m1")))
                .withNextToken("same");
        FilterLogEventsResult r2 = new FilterLogEventsResult()
                .withEvents(Collections.singletonList(new FilteredLogEvent().withMessage("m2")))
                .withNextToken("same");

        when(client.filterLogEvents(any(FilterLogEventsRequest.class)))
                .thenReturn(r1)
                .thenReturn(r2);

        SearchCriteria sc = new SearchCriteria();

        List<FilteredLogEvent> out = util.searchResources(client, sc, Collections.emptyList(), Collections.emptyList());
        assertNotNull(out);
    }
}
