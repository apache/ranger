/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.amazon.cloudwatch;

import com.amazonaws.regions.Regions;
import com.amazonaws.services.logs.AWSLogs;
import com.amazonaws.services.logs.AWSLogsClientBuilder;
import org.apache.ranger.common.PropertiesUtil;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for CloudWatchMgr
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class CloudWatchMgrTest {
    @AfterEach
    public void tearDown() {
        PropertiesUtil.getPropertiesMap().remove("ranger.audit.amazon_cloudwatch.region");
    }

    @Test
    public void getClient_buildsDefault_whenRegionBlank() {
        PropertiesUtil.getPropertiesMap().put("ranger.audit.amazon_cloudwatch.region", " ");
        CloudWatchMgr mgr = new CloudWatchMgr();

        AWSLogsClientBuilder builder = mock(AWSLogsClientBuilder.class);
        AWSLogs              client  = mock(AWSLogs.class);

        try (MockedStatic<AWSLogsClientBuilder> mocked = mockStatic(AWSLogsClientBuilder.class)) {
            mocked.when(AWSLogsClientBuilder::standard).thenReturn(builder);
            // For default path, build() is called directly without withRegion
            when(builder.build()).thenReturn(client);

            AWSLogs out = mgr.getClient();
            assertNotNull(out);
            verify(builder, times(1)).build();
        }
    }

    @Test
    public void getClient_buildsWithRegion_whenRegionProvided() {
        PropertiesUtil.getPropertiesMap().put("ranger.audit.amazon_cloudwatch.region", Regions.US_EAST_1.getName());
        CloudWatchMgr mgr = new CloudWatchMgr();

        AWSLogsClientBuilder builder = mock(AWSLogsClientBuilder.class);
        AWSLogs              client  = mock(AWSLogs.class);

        try (MockedStatic<AWSLogsClientBuilder> mocked = mockStatic(AWSLogsClientBuilder.class)) {
            mocked.when(AWSLogsClientBuilder::standard).thenReturn(builder);
            when(builder.withRegion(any(String.class))).thenReturn(builder);
            when(builder.build()).thenReturn(client);

            AWSLogs out = mgr.getClient();
            assertNotNull(out);
            verify(builder, times(1)).withRegion(Regions.US_EAST_1.getName());
            verify(builder, times(1)).build();
        }
    }
}
