/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr.krb;

import org.apache.commons.configuration2.BaseConfiguration;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.login.AppConfigurationEntry;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for InMemoryJAASConfiguration
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class InMemoryJAASConfigurationTest {
    @Test
    public void init_withValidProperties_parsesEntryAndOptions() throws Exception {
        Properties p = new Properties();
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "Client.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        // omit control flag to verify default REQUIRED
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "Client.option.principal", "user@EXAMPLE.COM");
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "Client.option.useKeyTab", "true");

        InMemoryJAASConfiguration conf = InMemoryJAASConfiguration.init(p);

        AppConfigurationEntry[] entries = conf.getAppConfigurationEntry("Client");
        assertNotNull(entries);
        assertEquals(1, entries.length);
        assertEquals("com.sun.security.auth.module.Krb5LoginModule", entries[0].getLoginModuleName());
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
        assertEquals("user@EXAMPLE.COM", entries[0].getOptions().get(InMemoryJAASConfiguration.JAAS_PRINCIPAL_PROP));
        assertEquals("true", entries[0].getOptions().get("useKeyTab"));
    }

    @Test
    public void init_withExplicitOptionalFlag_setsControlFlagOptional() throws Exception {
        Properties p = new Properties();
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "KafkaClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "KafkaClient.loginModuleControlFlag", "optional");

        InMemoryJAASConfiguration conf    = InMemoryJAASConfiguration.init(p);
        AppConfigurationEntry[]   entries = conf.getAppConfigurationEntry("KafkaClient");
        assertNotNull(entries);
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL, entries[0].getControlFlag());
    }

    @Test
    public void init_withFilePath_loadsProperties() throws Exception {
        File tmp = Files.createTempFile("jaas-test", ".properties").toFile();
        try (FileWriter fw = new FileWriter(tmp)) {
            fw.write(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "FileClient.loginModuleName=com.sun.security.auth.module.Krb5LoginModule\n");
            fw.flush();
        }
        InMemoryJAASConfiguration conf    = InMemoryJAASConfiguration.init(tmp.getAbsolutePath());
        AppConfigurationEntry[]   entries = conf.getAppConfigurationEntry("FileClient");
        assertNotNull(entries);
        assertEquals("com.sun.security.auth.module.Krb5LoginModule", entries[0].getLoginModuleName());
        tmp.delete();
    }

    @Test
    public void init_withCommonsConfiguration_buildsProperties() throws Exception {
        BaseConfiguration cfg = new BaseConfiguration();
        cfg.addProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "CfgClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        assertDoesNotThrow(() -> InMemoryJAASConfiguration.init(cfg));
        Properties p = new Properties();
        p.setProperty(InMemoryJAASConfiguration.JAAS_CONFIG_PREFIX_PARAM + "CfgClient.loginModuleName", "com.sun.security.auth.module.Krb5LoginModule");
        InMemoryJAASConfiguration conf = InMemoryJAASConfiguration.init(p);
        assertNotNull(conf.getAppConfigurationEntry("CfgClient"));
    }
}
