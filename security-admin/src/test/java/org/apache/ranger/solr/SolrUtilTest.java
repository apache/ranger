/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr;

import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.SearchField;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.StringUtil;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import javax.ws.rs.WebApplicationException;

import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SolrUtil
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class SolrUtilTest {
    private SolrUtil solrUtil;

    @Mock
    private SolrMgr solrMgr;

    @BeforeEach
    public void setUp() {
        // ensure deterministic date formatting
        PropertiesUtil.getPropertiesMap().put("xa.solr.timezone", "UTC");
        solrUtil = new SolrUtil();
        ReflectionTestUtils.setField(solrUtil, "restErrorUtil", new RESTErrorUtil());
        ReflectionTestUtils.setField(solrUtil, "stringUtil", new StringUtil());
        ReflectionTestUtils.setField(solrUtil, "solrMgr", solrMgr);
    }

    @Test
    public void setField_nullOrBlank_returnsNull() {
        assertNull(solrUtil.setField("f", null));
        assertNull(solrUtil.setField("f", "   "));
    }

    @Test
    public void setField_lowercasesAndEscapes() {
        assertEquals("f:abc123", solrUtil.setField("f", "Abc123"));
    }

    @Test
    public void setDateRange_formatsUTC() {
        Date from = new Date(0);
        Date to   = new Date(1000);
        assertEquals("evt:[1970-01-01T00:00:00Z TO 1970-01-01T00:00:01Z]", solrUtil.setDateRange("evt", from, to));
    }

    @Test
    public void orList_buildsOrExpression() {
        assertEquals("(k:a OR k:b)", solrUtil.orList("k", Arrays.asList("A", "B")));
    }

    @Test
    public void andList_buildsAndExpression() {
        assertEquals("(k:a AND k:b)", solrUtil.andList("k", Arrays.asList("A", "B")));
    }

    @Test
    public void setSortClause_usesDefaultWhenNoneProvided() {
        SearchCriteria  criteria   = new SearchCriteria();
        List<SortField> sortFields = Collections.singletonList(new SortField("eventTime", "evtTime", true, SortField.SORT_ORDER.DESC));
        SolrQuery       query      = new SolrQuery();

        solrUtil.setSortClause(criteria, sortFields, query);

        assertEquals("eventTime", criteria.getSortBy());
        assertEquals("DESC", criteria.getSortType());
        assertNotNull(query.getSorts());
        assertEquals(1, query.getSorts().size());
        assertEquals("evtTime", query.getSorts().get(0).getItem());
        assertEquals(SolrQuery.ORDER.desc, query.getSorts().get(0).getOrder());
    }

    @Test
    public void searchResources_success_returnsResponse() throws Exception {
        SearchCriteria criteria = new SearchCriteria();
        criteria.setMaxRows(10);
        criteria.setStartIndex(0);
        criteria.getParamList().put("startDate", new Date(0));
        List<SearchField> searchFields = Collections.singletonList(new SearchField("startDate", "evtTime", SearchField.DATA_TYPE.DATE, SearchField.SEARCH_TYPE.GREATER_EQUAL_THAN));
        List<SortField>   sortFields   = Collections.singletonList(new SortField("eventTime", "evtTime", true, SortField.SORT_ORDER.DESC));

        QueryResponse response = mock(QueryResponse.class);
        when(response.getStatus()).thenReturn(0);
        when(solrMgr.queryToSolr(any())).thenReturn(response);

        QueryResponse out = solrUtil.searchResources(criteria, searchFields, sortFields, mock(SolrClient.class));
        assertSame(response, out);
        verify(solrMgr, times(1)).queryToSolr(any());
    }

    @Test
    public void searchResources_whenQueryFails_wrapsInWebAppException() throws Exception {
        SearchCriteria    criteria     = new SearchCriteria();
        List<SearchField> searchFields = Collections.emptyList();
        List<SortField>   sortFields   = Collections.emptyList();

        when(solrMgr.queryToSolr(any())).thenThrow(new RuntimeException("boom"));

        assertThrows(WebApplicationException.class, () -> solrUtil.searchResources(criteria, searchFields, sortFields, mock(SolrClient.class)));
    }

    @Test
    public void searchResources_whenResponseNullOrNonZero_throwsWebAppException() throws Exception {
        SearchCriteria    criteria     = new SearchCriteria();
        List<SearchField> searchFields = Collections.emptyList();
        List<SortField>   sortFields   = Collections.emptyList();

        QueryResponse bad = mock(QueryResponse.class);
        when(bad.getStatus()).thenReturn(1);
        when(solrMgr.queryToSolr(any())).thenReturn(bad);

        assertThrows(WebApplicationException.class, () -> solrUtil.searchResources(criteria, searchFields, sortFields, mock(SolrClient.class)));
    }

    // New tests for private setFieldForPartialSearch
    @Test
    public void setFieldForPartialSearch_returnsWildcardEscaped() {
        String out = ReflectionTestUtils.invokeMethod(solrUtil, "setFieldForPartialSearch", "name", "Va l/ue");
        assertEquals("name:*va\\ l\\/ue*", out);
    }

    @Test
    public void setFieldForPartialSearch_nullOrBlank_returnsNull() {
        assertNull(ReflectionTestUtils.invokeMethod(solrUtil, "setFieldForPartialSearch", "name", null));
        assertNull(ReflectionTestUtils.invokeMethod(solrUtil, "setFieldForPartialSearch", "name", "   "));
    }
}
