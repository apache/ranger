/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr;

import org.apache.ranger.AccessAuditsService;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.view.VXAccessAuditList;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Field;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SolrAccessAuditsService
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class SolrAccessAuditsServiceTest {
    @Test
    public void searchXAccessAudits_whenClientNull_throwsWebAppException() {
        SolrAccessAuditsService service = new SolrAccessAuditsService();
        service.solrMgr  = mock(SolrMgr.class);
        service.solrUtil = mock(SolrUtil.class);
        setRestErrorUtil(service);

        when(service.solrMgr.getSolrClient()).thenReturn(null);

        assertThrows(WebApplicationException.class, () -> service.searchXAccessAudits(new SearchCriteria()));
    }

    @Test
    public void searchXAccessAudits_success_basicMappingAndCounts() {
        SolrAccessAuditsService service = new SolrAccessAuditsService();
        service.solrMgr  = mock(SolrMgr.class);
        service.solrUtil = mock(SolrUtil.class);
        setRestErrorUtil(service);

        SolrClient client = mock(SolrClient.class);
        when(service.solrMgr.getSolrClient()).thenReturn(client);

        // mock response with one document
        QueryResponse    qr   = mock(QueryResponse.class);
        SolrDocumentList list = new SolrDocumentList();
        SolrDocument     doc  = new SolrDocument();
        doc.setField("id", "abc");
        doc.setField("cluster", "cl");
        doc.setField("zoneName", "zn");
        doc.setField("agentHost", "ah");
        doc.setField("policyVersion", 1);
        doc.setField("access", "read");
        doc.setField("enforcer", "tag");
        doc.setField("agent", "ag");
        doc.setField("repo", "repo1");
        doc.setField("sess", "s1");
        doc.setField("reqUser", "bob");
        doc.setField("reqData", "data");
        doc.setField("resource", "/p");
        doc.setField("cliIP", "1.1.1.1");
        doc.setField("result", 1);
        doc.setField("policy", 9);
        doc.setField("repoType", 1);
        doc.setField("resType", "table");
        doc.setField("reason", "ok");
        doc.setField("action", "ACCESS");
        doc.setField("evtTime", System.currentTimeMillis());
        doc.setField("seq_num", 1);
        doc.setField("event_count", 1);
        doc.setField("event_dur_ms", 2);
        doc.setField("tags", "t");
        list.add(doc);
        list.setNumFound(1);
        list.setStart(0);
        when(qr.getResults()).thenReturn(list);
        when(service.solrUtil.searchResources(any(), any(), any(), eq(client))).thenReturn(qr);

        // mock daoManager for service type/name mapping
        RangerDaoManager daoManager = mock(RangerDaoManager.class);
        XXServiceDefDao  sdDao      = mock(XXServiceDefDao.class);
        XXServiceDao     svcDao     = mock(XXServiceDao.class);
        XXServiceDef     sd         = mock(XXServiceDef.class);
        when(daoManager.getXXServiceDef()).thenReturn(sdDao);
        when(daoManager.getXXService()).thenReturn(svcDao);
        when(sdDao.getById(1L)).thenReturn(sd);
        when(sd.getName()).thenReturn("hive");
        when(sd.getDisplayName()).thenReturn("Hive");
        XXService xxService = mock(XXService.class);
        when(xxService.getDisplayName()).thenReturn("Repo 1");
        when(svcDao.findByName("repo1")).thenReturn(xxService);
        injectField(service, AccessAuditsService.class, "daoManager", daoManager);

        SearchCriteria criteria = new SearchCriteria();
        criteria.setMaxRows(25);
        criteria.setStartIndex(0);
        VXAccessAuditList out = service.searchXAccessAudits(criteria);

        assertEquals(1, out.getResultSize());
        assertEquals(1, out.getTotalCount());
        assertEquals(0, out.getStartIndex());
        assertEquals(25, out.getPageSize());
        assertEquals("cl", out.getVXAccessAudits().get(0).getClusterName());
        assertEquals("Repo 1", out.getVXAccessAudits().get(0).getRepoDisplayName());
    }

    @Test
    public void searchXAccessAudits_hiveVisibilityFalse_nullsRequestData() {
        SolrAccessAuditsService service = new SolrAccessAuditsService();
        service.solrMgr  = mock(SolrMgr.class);
        service.solrUtil = mock(SolrUtil.class);
        setRestErrorUtil(service);

        // set property to hide hive query
        Map<String, String> props = PropertiesUtil.getPropertiesMap();
        String              old   = props.get("ranger.audit.hive.query.visibility");
        props.put("ranger.audit.hive.query.visibility", "false");
        try {
            SolrClient client = mock(SolrClient.class);
            when(service.solrMgr.getSolrClient()).thenReturn(client);

            QueryResponse    qr   = mock(QueryResponse.class);
            SolrDocumentList list = new SolrDocumentList();
            SolrDocument     doc  = new SolrDocument();
            doc.setField("id", "1");
            doc.setField("repoType", 1);
            doc.setField("access", "select");
            doc.setField("reqData", "select 1");
            // map to hive service type
            RangerDaoManager daoManager = mock(RangerDaoManager.class);
            XXServiceDefDao  sdDao      = mock(XXServiceDefDao.class);
            XXServiceDef     sd         = mock(XXServiceDef.class);
            when(daoManager.getXXServiceDef()).thenReturn(sdDao);
            when(sdDao.getById(1L)).thenReturn(sd);
            when(sd.getName()).thenReturn("hive");
            injectField(service, AccessAuditsService.class, "daoManager", daoManager);

            list.add(doc);
            when(qr.getResults()).thenReturn(list);
            when(service.solrUtil.searchResources(any(), any(), any(), eq(client))).thenReturn(qr);

            VXAccessAuditList out = service.searchXAccessAudits(new SearchCriteria());
            assertNull(out.getVXAccessAudits().get(0).getRequestData());
        } finally {
            if (old != null) {
                props.put("ranger.audit.hive.query.visibility", old);
            } else {
                props.remove("ranger.audit.hive.query.visibility");
            }
        }
    }

    @Test
    public void getXAccessAuditSearchCount_returnsConstant() {
        SolrAccessAuditsService service = new SolrAccessAuditsService();
        assertEquals(100L, service.getXAccessAuditSearchCount(new SearchCriteria()).getValue());
    }

    private static void setRestErrorUtil(AccessAuditsService svc) {
        try {
            Field f = AccessAuditsService.class.getDeclaredField("restErrorUtil");
            f.setAccessible(true);
            f.set(svc, new RESTErrorUtil());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static void injectField(Object target, Class<?> owner, String field, Object value) {
        try {
            Field f = owner.getDeclaredField(field);
            f.setAccessible(true);
            f.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
