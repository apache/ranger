/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr;

import org.apache.ranger.biz.RangerBizUtil;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.solr.krb.KerberosUser;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.request.QueryRequest;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import javax.security.auth.login.LoginException;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for SolrMgr
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class SolrMgrTest {
    @Test
    public void queryToSolr_executesRequestWithClient() throws Exception {
        SolrMgr    mgr    = new SolrMgr();
        SolrClient client = mock(SolrClient.class);
        ReflectionTestUtils.setField(mgr, "solrClient", client);

        QueryRequest  req  = mock(QueryRequest.class);
        QueryResponse resp = mock(QueryResponse.class);
        when(req.process(client)).thenReturn(resp);

        QueryResponse out = mgr.queryToSolr(req);
        assertSame(resp, out);
    }

    @Test
    public void stop_closesClientAndLogsOutKerberosUser() throws IOException, LoginException {
        SolrMgr    mgr    = new SolrMgr();
        SolrClient client = mock(SolrClient.class);
        ReflectionTestUtils.setField(mgr, "solrClient", client);
        KerberosUser user = mock(KerberosUser.class);
        ReflectionTestUtils.setField(mgr, "kerberosUser", user);

        mgr.stop();
        verify(client, times(1)).close();
        verify(user, times(1)).logout();
    }

    @Test
    public void getSolrClient_connectsUsingHttpUrl_whenZkNotProvided() {
        // Arrange properties and rangerBizUtil
        PropertiesUtil.getPropertiesMap().put("ranger.audit.source.type", "solr");
        PropertiesUtil.getPropertiesMap().put("ranger.audit.solr.urls", "http://localhost:8983/solr");

        SolrMgr       mgr = new SolrMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        when(biz.getAuditDBType()).thenReturn("solr");
        ReflectionTestUtils.setField(mgr, "rangerBizUtil", biz);

        // Act
        SolrClient client = mgr.getSolrClient();

        // Assert: client is assigned and initDone may be true
        assertNotNull(client);
        assertInstanceOf(HttpSolrClient.class, client);
        // Ensure same instance returned on subsequent calls
        assertSame(client, mgr.getSolrClient());

        // Cleanup
        mgr.stop();
    }
}
