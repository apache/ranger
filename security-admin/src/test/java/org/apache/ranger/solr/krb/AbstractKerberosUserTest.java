/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr.krb;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.Subject;
import javax.security.auth.kerberos.KerberosPrincipal;
import javax.security.auth.kerberos.KerberosTicket;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;

import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for AbstractKerberosUser
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class AbstractKerberosUserTest {
    @Test
    public void login_logout_and_doAs_flow() throws Exception {
        Subject          subject = new Subject();
        LoginContext     ctx     = mock(LoginContext.class);
        TestKerberosUser user    = new TestKerberosUser("user@EXAMPLE.COM", subject, ctx);

        // toString when not logged in
        String s1 = user.toString();
        assertTrue(s1.contains("user@EXAMPLE.COM"));
        assertTrue(s1.contains("loggedIn=false"));

        // First login initializes state and calls login on context
        user.login();
        assertTrue(user.isLoggedIn());
        verify(ctx, times(1)).login();

        // toString when logged in
        String s2 = user.toString();
        assertTrue(s2.contains("loggedIn=true"));

        // doAs should work when logged in
        String result = user.doAs((PrivilegedAction<String>) () -> "ok");
        assertEquals("ok", result);

        // doAs with PrivilegedExceptionAction
        String result2 = user.doAs((PrivilegedExceptionAction<String>) () -> "ok2");
        assertEquals("ok2", result2);

        // logout should call context.logout and flip flag
        user.logout();
        verify(ctx, times(1)).logout();
        assertFalse(user.isLoggedIn());

        // doAs when not logged-in should throw
        assertThrows(IllegalStateException.class, () -> user.doAs((PrivilegedAction<String>) () -> "x"));
        assertThrows(IllegalStateException.class, () -> user.doAs((PrivilegedExceptionAction<String>) () -> "x"));
    }

    @Test
    public void checkTGTAndRelogin_triggersReloginWhenNoTGT() throws Exception {
        Subject          subject = new Subject();
        LoginContext     ctx     = mock(LoginContext.class);
        TestKerberosUser user    = new TestKerberosUser("user@EXAMPLE.COM", subject, ctx);

        boolean relogin = user.checkTGTAndRelogin();
        assertTrue(relogin);
        verify(ctx, times(1)).login();
        assertTrue(user.isLoggedIn());
    }

    @Test
    public void checkTGTAndRelogin_noReloginWhenValidTGT() throws Exception {
        Subject subject = new Subject();
        // mock a KerberosTicket that is valid and not in renew window
        KerberosTicket tgt = mock(KerberosTicket.class);
        when(tgt.getServer()).thenReturn(new KerberosPrincipal("krbtgt/EXAMPLE.COM@EXAMPLE.COM"));
        Date start = new Date(System.currentTimeMillis() - 60_000); // started 1 min ago
        Date end   = new Date(System.currentTimeMillis() + 60 * 60_000); // ends in 60 min
        when(tgt.getStartTime()).thenReturn(start);
        when(tgt.getEndTime()).thenReturn(end);
        subject.getPrivateCredentials().add(tgt);

        LoginContext     ctx  = mock(LoginContext.class);
        TestKerberosUser user = new TestKerberosUser("user@EXAMPLE.COM", subject, ctx);

        // Login once so user is in logged-in state, then reset interactions for precise verify
        user.login();
        Mockito.reset(ctx);

        boolean relogin = user.checkTGTAndRelogin();
        assertFalse(relogin);
        verify(ctx, never()).logout();
        verify(ctx, never()).login();
    }

    @Test
    public void checkTGTAndRelogin_reloginWhenOnlyNonTGSTicketPresent() throws Exception {
        Subject subject = new Subject();
        // mock a non-TGS ticket
        KerberosTicket nonTgs = mock(KerberosTicket.class);
        when(nonTgs.getServer()).thenReturn(new KerberosPrincipal("service/EXAMPLE.COM@EXAMPLE.COM"));
        subject.getPrivateCredentials().add(nonTgs);

        LoginContext     ctx  = mock(LoginContext.class);
        TestKerberosUser user = new TestKerberosUser("user@EXAMPLE.COM", subject, ctx);

        boolean relogin = user.checkTGTAndRelogin();
        assertTrue(relogin);
        verify(ctx, times(1)).login();
    }

    private static class TestKerberosUser extends AbstractKerberosUser {
        private final String       principal;
        private final LoginContext ctx;

        TestKerberosUser(String principal, Subject subject, LoginContext ctx) {
            this.principal = principal;
            this.subject   = subject;
            this.ctx       = ctx;
        }

        @Override
        public String getPrincipal() {
            return principal;
        }

        @Override
        protected LoginContext createLoginContext(Subject subject) throws LoginException {
            return ctx;
        }
    }
}
