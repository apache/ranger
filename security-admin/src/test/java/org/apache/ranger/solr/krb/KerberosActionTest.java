/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.solr.krb;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import javax.security.auth.login.LoginException;

import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for KerberosAction
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class KerberosActionTest {
    @Test
    public void execute_performsLoginCheckAndAction() throws Exception {
        KerberosUser user   = mock(KerberosUser.class);
        Logger       logger = mock(Logger.class);
        when(user.isLoggedIn()).thenReturn(false, true); // first call false, after login true
        // login() and checkTGTAndRelogin() are public void; no extra stubbing needed, just verify interaction
        doNothing().when(user).login();
        when(user.checkTGTAndRelogin()).thenReturn(false);

        PrivilegedExceptionAction<String> action = () -> "ok";
        when(user.doAs(action)).thenReturn("ok");

        KerberosAction<String> ka  = new KerberosAction<>(user, action, logger);
        String                 out = ka.execute();

        assertEquals("ok", out);
        verify(user, times(1)).login();
        verify(user, times(1)).checkTGTAndRelogin();
        verify(user, times(1)).doAs(action);
    }

    @Test
    public void execute_retriesOnSecurityException_thenSucceeds() throws Exception {
        KerberosUser user   = mock(KerberosUser.class);
        Logger       logger = mock(Logger.class);
        when(user.isLoggedIn()).thenReturn(true);
        when(user.checkTGTAndRelogin()).thenReturn(false);

        PrivilegedExceptionAction<String> action = () -> "ok";
        when(user.doAs(action)).thenThrow(new SecurityException("boom")) // first attempt
                .thenReturn("ok"); // retry

        KerberosAction<String> ka  = new KerberosAction<>(user, action, logger);
        String                 out = ka.execute();

        assertEquals("ok", out);
        verify(user, times(1)).logout();
        verify(user, times(1)).login();
        verify(user, times(2)).doAs(action);
    }

    @Test
    public void execute_wrapsPrivilegedActionException() throws Exception {
        KerberosUser user   = mock(KerberosUser.class);
        Logger       logger = mock(Logger.class);
        when(user.isLoggedIn()).thenReturn(true);
        when(user.checkTGTAndRelogin()).thenReturn(false);

        PrivilegedExceptionAction<String> action = () -> "ok";
        when(user.doAs(action)).thenThrow(new PrivilegedActionException(new RuntimeException("fail")));

        KerberosAction<String> ka = new KerberosAction<>(user, action, logger);
        Exception              ex = assertThrows(Exception.class, ka::execute);
        assertTrue(ex.getMessage().contains("Privileged action failed"));
    }

    @Test
    public void execute_wrapsLoginException() throws Exception {
        KerberosUser user   = mock(KerberosUser.class);
        Logger       logger = mock(Logger.class);
        when(user.isLoggedIn()).thenReturn(false);
        doThrow(new LoginException("no")).when(user).login();

        PrivilegedExceptionAction<String> action = () -> "ok";
        KerberosAction<String>            ka     = new KerberosAction<>(user, action, logger);

        Exception ex = assertThrows(Exception.class, ka::execute);
        assertTrue(ex.getMessage().contains("Login failed"));
    }
}
