/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authentication.unix.jaas;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.security.Principal;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RoleUserAuthorityGranter
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRoleUserAuthorityGranter {
    @Test
    public void test1_grant_returnsGroupName_forUnixGroupPrincipal() {
        RoleUserAuthorityGranter g     = new RoleUserAuthorityGranter();
        UnixGroupPrincipal       grp   = new UnixGroupPrincipal("hadoop");
        Set<String>              auths = g.grant(grp);
        assertEquals(1, auths.size());
        assertTrue(auths.contains("hadoop"));
    }

    @Test
    public void test2_grant_returnsROLE_USER_forNonGroupPrincipal() {
        RoleUserAuthorityGranter g     = new RoleUserAuthorityGranter();
        Principal                p     = () -> "someone"; // lambda Principal
        Set<String>              auths = g.grant(p);
        assertEquals(1, auths.size());
        assertTrue(auths.contains("ROLE_USER"));
    }
}
