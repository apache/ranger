/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.services.hive.client;

import org.apache.ranger.plugin.util.TimedEventUtil;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for HiveConnectionMgr
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHiveConnectionMgr {
    @Test
    public void test01_returnsNullWhenServiceTypeNull() {
        HiveConnectionMgr mgr = new HiveConnectionMgr();
        HiveClient        ret = mgr.getHiveConnection("svc", null, new HashMap<>());
        assertNull(ret);
    }

    @Test
    public void test02_returnsNullWhenConfigsNullAndCacheEmpty() {
        HiveConnectionMgr mgr = new HiveConnectionMgr();
        HiveClient        ret = mgr.getHiveConnection("svc", "hive", null);
        assertNull(ret);
    }

    @Test
    public void test03_returnsCachedAndValidates() throws Exception {
        HiveConnectionMgr mgr = new HiveConnectionMgr();

        HiveClient client = Mockito.mock(HiveClient.class);
        Mockito.when(client.getDatabaseList("*", null)).thenReturn(Collections.singletonList("db1"));

        Field f = HiveConnectionMgr.class.getDeclaredField("hiveConnectionCache");
        f.setAccessible(true);
        @SuppressWarnings("unchecked")
        ConcurrentHashMap<String, HiveClient> cache = (ConcurrentHashMap<String, HiveClient>) f.get(mgr);
        cache.put("svc", client);

        HiveClient ret = mgr.getHiveConnection("svc", "hive", new HashMap<>());
        assertEquals(client, ret);
    }

    @Test
    public void test04_newClientClosedIfOldPresentAtPutIfAbsent() throws Exception {
        HiveConnectionMgr mgr = new HiveConnectionMgr();

        // Replace cache with a mock to simulate race: get() returns null, putIfAbsent returns existing old
        @SuppressWarnings("unchecked")
        ConcurrentMap<String, HiveClient> mockCache = Mockito.mock(ConcurrentMap.class);
        Field fCache = HiveConnectionMgr.class.getDeclaredField("hiveConnectionCache");
        fCache.setAccessible(true);
        fCache.set(mgr, mockCache);

        HiveClient oldClient = Mockito.mock(HiveClient.class);
        HiveClient newClient = Mockito.mock(HiveClient.class);

        Mockito.when(mockCache.get("svc")).thenReturn(null);
        Mockito.when(mockCache.putIfAbsent("svc", newClient)).thenReturn(oldClient);

        try (MockedStatic<TimedEventUtil> s = Mockito.mockStatic(TimedEventUtil.class)) {
            s.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any())).thenReturn(newClient);

            HiveClient ret = mgr.getHiveConnection("svc", "hive", new HashMap<>());
            assertEquals(oldClient, ret);
            Mockito.verify(newClient, Mockito.times(1)).close();
        }
    }

    @Test
    public void test05_cachedClientFailureRemovesClosesAndRecreates() throws Exception {
        HiveConnectionMgr mgr = new HiveConnectionMgr();

        Field fCache = HiveConnectionMgr.class.getDeclaredField("hiveConnectionCache");
        fCache.setAccessible(true);
        @SuppressWarnings("unchecked")
        ConcurrentHashMap<String, HiveClient> cache = (ConcurrentHashMap<String, HiveClient>) fCache.get(mgr);

        HiveClient badClient = Mockito.mock(HiveClient.class);
        Mockito.when(badClient.getDatabaseList("*", null)).thenThrow(new RuntimeException("boom"));
        cache.put("svc", badClient);

        HiveClient newClient = Mockito.mock(HiveClient.class);
        try (MockedStatic<TimedEventUtil> s = Mockito.mockStatic(TimedEventUtil.class)) {
            s.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any())).thenReturn(newClient);

            HiveClient ret = mgr.getHiveConnection("svc", "hive", new HashMap<>());
            assertEquals(newClient, ret);
            Mockito.verify(badClient, Mockito.times(1)).close();
            assertEquals(newClient, cache.get("svc"));
        }
    }
}
