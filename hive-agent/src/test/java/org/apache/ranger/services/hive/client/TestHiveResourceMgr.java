/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.services.hive.client;

import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * @generated by Cursor
 * @description : Unit Test cases for HiveResourceMgr
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHiveResourceMgr {
    @Test
    public void test01_connectionTestDelegatesToHiveClient() throws Exception {
        try (MockedStatic<HiveClient> staticMock = Mockito.mockStatic(HiveClient.class)) {
            Map<String, Object> resp = new HashMap<>();
            resp.put("connectivityStatus", true);
            staticMock.when(() -> HiveClient.connectionTest(Mockito.eq("svc"), Mockito.anyMap())).thenReturn(resp);

            Map<String, Object> out = HiveResourceMgr.connectionTest("svc", Collections.emptyMap());
            assertEquals(resp, out);
        }
    }

    @Test
    public void test02_getHiveResources_dbTableColumnPaths() throws Exception {
        HiveClient client = Mockito.mock(HiveClient.class);
        Mockito.when(client.getDatabaseList("db*", null)).thenReturn(Arrays.asList("db1", "db2"));
        Mockito.when(client.getTableList("tbl*", null, null)).thenReturn(Arrays.asList("db1.tbl1", "db1.tbl2"));
        Mockito.when(client.getColumnList("col*", null, null, null)).thenReturn(Collections.singletonList("db1.tbl1.col1"));

        try (MockedConstruction<HiveConnectionMgr> cons = Mockito.mockConstruction(HiveConnectionMgr.class, (mock, ctx) -> {
            Mockito.when(mock.getHiveConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyMap())).thenReturn(client);
        })) {
            ResourceLookupContext ctx = new ResourceLookupContext();
            ctx.setUserInput("db");
            ctx.setResourceName("database");
            List<String> dbs = HiveResourceMgr.getHiveResources("svc", "hive", Collections.emptyMap(), ctx);
            assertNotNull(dbs);

            ctx = new ResourceLookupContext();
            ctx.setUserInput("tbl");
            ctx.setResourceName("table");
            List<String> tbls = HiveResourceMgr.getHiveResources("svc", "hive", Collections.emptyMap(), ctx);
            assertNotNull(tbls);

            ctx = new ResourceLookupContext();
            ctx.setUserInput("col");
            ctx.setResourceName("column");
            List<String> cols = HiveResourceMgr.getHiveResources("svc", "hive", Collections.emptyMap(), ctx);
            assertNotNull(cols);
        }
    }

    @Test
    public void test03_getHiveResources_nullsReturnNull() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput(null);
        ctx.setResourceName("database");
        List<String> out = HiveResourceMgr.getHiveResources("svc", "hive", Collections.emptyMap(), ctx);
        assertNull(out);
    }
}
