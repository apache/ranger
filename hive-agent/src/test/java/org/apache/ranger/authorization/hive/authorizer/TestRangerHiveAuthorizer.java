/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hive.authorizer;

import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.permission.FsAction;
import org.apache.hadoop.hive.metastore.IMetaStoreClient;
import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.apache.hadoop.hive.metastore.api.HiveObjectRef;
import org.apache.hadoop.hive.metastore.api.HiveObjectType;
import org.apache.hadoop.hive.metastore.api.StorageDescriptor;
import org.apache.hadoop.hive.metastore.api.Table;
import org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider;
import org.apache.hadoop.hive.ql.security.authorization.AuthorizationUtils;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAccessControlException;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzContext;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzPluginException;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzSessionContext;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzSessionContext.CLIENT_TYPE;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveMetastoreClientFactory;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveOperationType;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePolicyProvider;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrincipal;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilege;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeInfo;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject.HivePrivObjectActionType;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject.HivePrivilegeObjectType;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveResourceACLs.AccessResult;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveResourceACLs.Privilege;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveRoleGrant;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.apache.ranger.plugin.policyengine.RangerResourceACLs;
import org.apache.ranger.plugin.policyevaluator.RangerPolicyEvaluator;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.apache.ranger.plugin.util.GrantRevokeRequest;
import org.apache.ranger.plugin.util.GrantRevokeRoleRequest;
import org.apache.ranger.plugin.util.RangerRoles;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.function.Executable;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerHiveAuthorizer
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHiveAuthorizer {
    @Test
    public void test01_constructorInitializesPluginForHiveCLI() throws Exception {
        setStaticHivePlugin(null);

        HiveMetastoreClientFactory msFactory      = Mockito.mock(HiveMetastoreClientFactory.class);
        HiveAuthenticationProvider authenticator  = Mockito.mock(HiveAuthenticationProvider.class);
        HiveAuthzSessionContext    sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.when(sessionContext.getClientType()).thenReturn(CLIENT_TYPE.HIVECLI);

        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, authenticator, sessionContext);

        RangerBasePlugin plugin = getStaticHivePlugin();
        assertNotNull(plugin);
        assertEquals("hiveCLI", plugin.getAppId());
    }

    @Test
    public void test02_getHivePolicyProviderReturnsProviderWhenPluginPresent() throws Exception {
        setStaticHivePlugin(null);
        HiveMetastoreClientFactory msFactory      = Mockito.mock(HiveMetastoreClientFactory.class);
        HiveAuthzSessionContext    sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.when(sessionContext.getClientType()).thenReturn(CLIENT_TYPE.HIVECLI);

        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, null, sessionContext);

        HivePolicyProvider provider = authorizer.getHivePolicyProvider();
        assertNotNull(provider);
    }

    @Test
    public void test03_getHivePolicyProviderThrowsWhenPluginNull() throws Exception {
        HiveMetastoreClientFactory msFactory  = Mockito.mock(HiveMetastoreClientFactory.class);
        RangerHiveAuthorizer       authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);

        // Force plugin to null after construction
        setStaticHivePlugin(null);

        Executable call = authorizer::getHivePolicyProvider;
        assertThrows(HiveAuthzPluginException.class, call);
    }

    @Test
    public void test04_showPrivilegesThrowsWhenPluginNull() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        setStaticHivePlugin(null);
        HivePrivilegeObject      obj  = new HivePrivilegeObject(HivePrivilegeObjectType.DATABASE, "db1", null);
        Executable               call = () -> authorizer.showPrivileges(null, obj);
        HiveAuthzPluginException ex   = assertThrows(HiveAuthzPluginException.class, call);
        assertEquals("RangerHiveAuthorizer.showPrivileges error: hivePlugin is null", ex.getMessage());
    }

    @Test
    public void test05_createHiveResourceMappings() throws Exception {
        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           msClient  = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(msClient);
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);

        HivePrivilegeObject           db     = new HivePrivilegeObject(HivePrivilegeObjectType.DATABASE, "dbA", null);
        Map<String, String> owners = new HashMap<>();
        owners.put("dbA", "ownerA");
        RangerHiveResource dbRes = authorizer.createHiveResource(db, owners);
        assertNotNull(dbRes);
        assertEquals("dbA", dbRes.getDatabase());

        HivePrivilegeObject tbl = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "dbB", "t1");
        owners.put("dbB.t1", "ownerB");
        RangerHiveResource tblRes = authorizer.createHiveResource(tbl, owners);
        assertNotNull(tblRes);
        assertEquals("dbB", tblRes.getDatabase());
        assertEquals("t1", tblRes.getTable());
    }

    @Test
    public void test06_needTransformReturnsTrue() {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        assertTrue(authorizer.needTransform());
    }

    @Test
    public void test07_grantAndRevokePrivilegesThrowWhenUpdatesDisabled() throws Exception {
        HiveMetastoreClientFactory msFactory  = Mockito.mock(HiveMetastoreClientFactory.class);
        RangerHiveAuthorizer       authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);
        setStaticHivePlugin(null);
        // Disable updates
        setRangerHivePluginUpdateFlag(false);

        HivePrivilegeObject hiveObj    = new HivePrivilegeObject(HivePrivilegeObjectType.DATABASE, "db1", null);
        List<HivePrincipal> principals = Collections.singletonList(new HivePrincipal("alice", HivePrincipal.HivePrincipalType.USER));
        List<HivePrivilege> privileges = Collections.emptyList();

        assertThrows(HiveAuthzPluginException.class, () -> authorizer.grantPrivileges(principals, privileges, hiveObj, principals.get(0), true));
        assertThrows(HiveAuthzPluginException.class, () -> authorizer.revokePrivileges(principals, privileges, hiveObj, principals.get(0), true));
    }

    @Test
    public void test08_createRoleAuditsAndUsesReservedCheck() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        // stub createRole to avoid admin client
        Mockito.doReturn(new RangerRole()).when(pluginSpy).createRole(Mockito.any(RangerRole.class), Mockito.any());
        setStaticHivePlugin(pluginSpy);
        HiveMetastoreClientFactory msFactory  = Mockito.mock(HiveMetastoreClientFactory.class);
        RangerHiveAuthorizer       authorizer = Mockito.spy(new RangerHiveAuthorizer(msFactory, null, null, null));
        // getGrantorUsername pulls from principal
        HivePrincipal grantor = new HivePrincipal("bob", HivePrincipal.HivePrincipalType.USER);

        // Success path
        authorizer.createRole("role1", grantor);
        // No direct verify; ensure no exception and audit path executed

        // Reserved name path
        assertThrows(HiveAuthzPluginException.class, () -> authorizer.createRole("all", grantor));
    }

    @Test
    public void test09_dropRoleValidatesAndAudits() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doNothing().when(pluginSpy).dropRole(Mockito.anyString(), Mockito.anyString(), Mockito.any());
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));

        UserGroupInformation ugi = UserGroupInformation.createRemoteUser("charlie");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        authorizer.dropRole("roleX");
        // Success path confirmed by no exception

        assertThrows(HiveAuthzPluginException.class, () -> authorizer.dropRole("all"));
    }

    @Test
    public void test10_getPrincipalGrantInfoForRoleRequiresAdmin() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(false).when(pluginSpy).isServiceAdmin("dave");
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));

        UserGroupInformation ugi = UserGroupInformation.createRemoteUser("dave");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        assertThrows(HiveAuthzPluginException.class, () -> authorizer.getPrincipalGrantInfoForRole("r1"));
    }

    @Test
    public void test11_getRoleGrantInfoForPrincipalHappyPath() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("erin");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        List<HiveRoleGrant> grants = authorizer.getRoleGrantInfoForPrincipal(new HivePrincipal("erin", HivePrincipal.HivePrincipalType.USER));
        assertNotNull(grants);
    }

    @Test
    public void test12_grantAndRevokeRoleAuditFlow() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doNothing().when(pluginSpy).grantRole(Mockito.any(GrantRevokeRoleRequest.class), Mockito.any());
        Mockito.doNothing().when(pluginSpy).revokeRole(Mockito.any(GrantRevokeRoleRequest.class), Mockito.any());
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        HivePrincipal        grantor    = new HivePrincipal("frank", HivePrincipal.HivePrincipalType.USER);
        // Provide group names and session context when asked
        HiveAuthzSessionContext sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.doReturn(sessionContext).when(authorizer).getHiveAuthzSessionContext();

        authorizer.grantRole(Collections.singletonList(new HivePrincipal("x", HivePrincipal.HivePrincipalType.USER)), Collections.singletonList("r"), true, grantor);
        // success implies audit + call path executed

        authorizer.revokeRole(Collections.singletonList(new HivePrincipal("x", HivePrincipal.HivePrincipalType.USER)), Collections.singletonList("r"), true, grantor);
        // success implies audit + call path executed
    }

    @Test
    public void test13_checkPrivilegesThrowsWhenUserNull() {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        Mockito.doReturn(null).when(authorizer).getCurrentUserGroupInfo();
        assertThrows(HiveAccessControlException.class, () -> authorizer.checkPrivileges(HiveOperationType.QUERY, Collections.emptyList(), Collections.emptyList(), Mockito.mock(HiveAuthzContext.class)));
    }

    @Test
    public void test14_checkPrivilegesDfsOperationReturnsEarly() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("user1");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();
        HivePrivilegeObject dfsObj = new HivePrivilegeObject(HivePrivilegeObjectType.DFS_URI, null, "hdfs://namenode/tmp");
        assertThrows(HiveAccessControlException.class, () -> authorizer.checkPrivileges(HiveOperationType.DFS, Collections.singletonList(dfsObj), Collections.emptyList(), Mockito.mock(HiveAuthzContext.class)));
    }

    @Test
    public void test15_checkPrivilegesShowDatabasesAllowed() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(allowedResult()).when(pluginSpy).isAccessAllowed(Mockito.any(RangerAccessRequestImpl.class), Mockito.any());
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("user2");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();
        authorizer.checkPrivileges(HiveOperationType.SHOWDATABASES, Collections.emptyList(), Collections.emptyList(), Mockito.mock(HiveAuthzContext.class));
    }

    @Test
    public void test17_filterListCmdObjectsNullReturnsNull() {
        RangerHiveAuthorizer      authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        List<HivePrivilegeObject> ret        = authorizer.filterListCmdObjects(null, Mockito.mock(HiveAuthzContext.class));
        assertNull(ret);
    }

    @Test
    public void test18_filterListCmdObjectsUserNullReturnsOriginal() {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        Mockito.doReturn(null).when(authorizer).getCurrentUserGroupInfo();
        HivePrivilegeObject       obj = new HivePrivilegeObject(HivePrivilegeObjectType.DATABASE, "dbX", null);
        List<HivePrivilegeObject> in  = Collections.singletonList(obj);
        List<HivePrivilegeObject> out = authorizer.filterListCmdObjects(in, Mockito.mock(HiveAuthzContext.class));
        assertEquals(in, out);
    }

    @Test
    public void test19_filterListCmdObjectsAllowsWhenPluginAllows() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(allowedResult()).when(pluginSpy).isAccessAllowed(Mockito.any(RangerAccessRequestImpl.class), Mockito.any());
        setStaticHivePlugin(pluginSpy);
        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(msFactory, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("user4");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();
        HivePrivilegeObject       obj = new HivePrivilegeObject(HivePrivilegeObjectType.DATABASE, "dbY", null);
        List<HivePrivilegeObject> out = authorizer.filterListCmdObjects(Collections.singletonList(obj), Mockito.mock(HiveAuthzContext.class));
        assertNotNull(out);
        assertEquals(1, out.size());
    }

    @Test
    public void test20_getAllRolesThrowsWhenPluginNullOrUserNull() {
        // Test user null path with valid plugin
        try {
            setStaticHivePlugin((RangerBasePlugin) newInstanceRangerHivePlugin("hiveCLI"));
        } catch (Exception ignored) {
        }
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        Mockito.doReturn(null).when(authorizer).getCurrentUserGroupInfo();
        assertThrows(HiveAccessControlException.class, () -> authorizer.getAllRoles());
    }

    @Test
    public void test21_getAllRolesUnauthorized() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(false).when(pluginSpy).isServiceAdmin("ua");
        setStaticHivePlugin(pluginSpy);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("ua");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();
        assertThrows(HiveAuthzPluginException.class, authorizer::getAllRoles);
    }

    @Test
    public void test23_applyRowFilterAndColumnMaskingTransforms() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        // Row filter enabled
        RangerAccessResult rf = new RangerAccessResult(RangerPolicy.POLICY_TYPE_ROWFILTER, "svc", null, new RangerAccessRequestImpl());
        rf.setFilterExpr("col > 5");
        Mockito.doReturn(rf).when(pluginSpy).evalRowFilterPolicies(Mockito.any(RangerHiveAccessRequest.class), Mockito.any());
        setStaticHivePlugin(pluginSpy);

        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(msFactory, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("um");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        HivePrivilegeObject       tbl = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "dbZ", "tZ");
        List<HivePrivilegeObject> ret = authorizer.applyRowFilterAndColumnMasking(Mockito.mock(HiveAuthzContext.class), Collections.singletonList(tbl));
        assertNotNull(ret);
        assertEquals(1, ret.size());
    }

    @Test
    public void test24_getURIAccessTypeAndBuildPathForException() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getURIAccessType", HiveOperationType.class);
        m.setAccessible(true);
        Object read  = m.invoke(authorizer, HiveOperationType.LOAD);
        Object write = m.invoke(authorizer, HiveOperationType.EXPORT);
        assertEquals(FsAction.READ, read);
        assertEquals(FsAction.WRITE, write);

        Method m2 = RangerHiveAuthorizer.class.getDeclaredMethod("buildPathForException", String.class, HiveOperationType.class);
        m2.setAccessible(true);
        String desc = (String) m2.invoke(authorizer, "db/table", HiveOperationType.DESCTABLE);
        assertEquals("db/table/*", desc);
        String q = (String) m2.invoke(authorizer, "db/table/part", HiveOperationType.QUERY);
        assertTrue(q.endsWith("/*"));
    }

    @Test
    public void test25_getAllRolesSuccess() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(true).when(pluginSpy).isServiceAdmin("sa");
        RangerRoles                                    roles = new RangerRoles();
        Set<RangerRole> rr    = new HashSet<>();
        RangerRole      r     = new RangerRole();
        r.setName("roleX");
        rr.add(r);
        roles.setRangerRoles(rr);
        Mockito.doReturn(roles).when(pluginSpy).getRangerRoles();
        setStaticHivePlugin(pluginSpy);

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = UserGroupInformation.createRemoteUser("sa");
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        List<String> out = authorizer.getAllRoles();
        assertNotNull(out);
        assertTrue(out.contains("roleX"));
    }

    @Test
    public void test26_setCurrentRoleNoneAndAdmin() throws Exception {
        // Ensure plugin is initialized for audit handler
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(new HashSet<>(Arrays.asList("admin", "r1")))
                .when(pluginSpy).getRolesFromUserAndGroups(Mockito.eq("userA"), Mockito.anySet());
        setStaticHivePlugin(pluginSpy);

        HiveAuthzSessionContext    sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        HiveAuthenticationProvider authenticator  = Mockito.mock(HiveAuthenticationProvider.class);
        Mockito.when(authenticator.getUserName()).thenReturn("userA");

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, authenticator, sessionContext));

        // Seed fields
        Field fRoles = RangerHiveAuthorizer.class.getDeclaredField("currentRoles");
        fRoles.setAccessible(true);
        Field fFlag = RangerHiveAuthorizer.class.getDeclaredField("isCurrentRoleSet");
        fFlag.setAccessible(true);

        Set<String> roles = new HashSet<>();
        roles.add("old");
        fRoles.set(authorizer, roles);

        // NONE clears roles
        authorizer.setCurrentRole("NONE");
        Set<String> afterNone = (Set<String>) fRoles.get(authorizer);
        assertTrue(afterNone.isEmpty());
        assertTrue((Boolean) fFlag.get(authorizer));

        // ADMIN fills with admin (adminRole is computed in getCurrentRoleNamesFromRanger)
        roles.add("x");
        fRoles.set(authorizer, roles);
        authorizer.setCurrentRole("admin");
        Set<String> afterAdmin = (Set<String>) fRoles.get(authorizer);
        assertTrue(afterAdmin.contains("admin"));
    }

    @Test
    public void test27_isPathInFSScheme() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isPathInFSScheme", String.class);
        m.setAccessible(true);
        boolean hdfs = (Boolean) m.invoke(authorizer, "hdfs://nn/tmp");
        boolean s3a  = (Boolean) m.invoke(authorizer, "s3a://bucket");
        assertFalse(s3a);
    }

    @Test
    public void test28_getCurrentRoleNamesFromRanger_excludesAdmin() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("bob").when(ugi).getShortUserName();
        Mockito.doReturn(new String[] {"g1"}).when(ugi).getGroupNames();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        Set<String> pluginRoles = new HashSet<>();
        pluginRoles.add("analyst");
        pluginRoles.add("admin"); // ROLE_ADMIN should be excluded from return set
        Mockito.doReturn(pluginRoles).when(pluginSpy).getRolesFromUserAndGroups(Mockito.eq("bob"), Mockito.anySet());

        Field fUser = RangerHiveAuthorizer.class.getDeclaredField("currentUserName");
        fUser.setAccessible(true);
        fUser.set(authorizer, "bob");

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getCurrentRoleNamesFromRanger");
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Set<String> ret = (Set<String>) m.invoke(authorizer);

        assertTrue(ret.contains("analyst"));
        assertFalse(ret.contains("admin"));

        Field fAdmin = RangerHiveAuthorizer.class.getDeclaredField("adminRole");
        fAdmin.setAccessible(true);
        Object adminRole = fAdmin.get(authorizer);
        assertEquals("admin", adminRole);
    }

    @Test
    public void test29_getCurrentRoleNamesFromRanger_ugiNullThrows() throws Exception {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        Mockito.doReturn(null).when(authorizer).getCurrentUserGroupInfo();

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getCurrentRoleNamesFromRanger");
        m.setAccessible(true);
        assertThrows(HiveAuthzPluginException.class, () -> {
            try {
                m.invoke(authorizer);
            } catch (Exception e) {
                if (e.getCause() instanceof HiveAuthzPluginException) {
                    throw e.getCause();
                }
                throw new RuntimeException(e);
            }
        });
    }

    @Test
    public void test30_getRolesforUserAndGroups_nullPluginReturnsEmpty() throws Exception {
        setStaticHivePlugin(null);
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getRolesforUserAndGroups", String.class, Set.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Set<String> ret = (Set<String>) m.invoke(authorizer, "user", new HashSet<>());
        assertNotNull(ret);
        assertTrue(ret.isEmpty());
    }

    @Test
    public void test31_getHiveRoleGrant_buildsFields() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);

        RangerRole role = new RangerRole();
        role.setName("roleA");
        role.setCreatedByUser("creator1");
        role.setUpdateTime(new Date(2000L));

        Class<?> roleMemberCls = Class.forName("org.apache.ranger.plugin.model.RangerRole$RoleMember");
        Object   member        = roleMemberCls.getDeclaredConstructor().newInstance();
        roleMemberCls.getMethod("setName", String.class).invoke(member, "user1");
        roleMemberCls.getMethod("setIsAdmin", Boolean.TYPE).invoke(member, true);

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getHiveRoleGrant", RangerRole.class, roleMemberCls, String.class);
        m.setAccessible(true);
        Object grant = m.invoke(authorizer, role, member, HivePrincipal.HivePrincipalType.USER.name());

        assertInstanceOf(HiveRoleGrant.class, grant);
        HiveRoleGrant g = (HiveRoleGrant) grant;
        assertEquals("roleA", g.getRoleName());
        assertTrue(g.isGrantOption());
        assertEquals("creator1", g.getGrantor());
        assertEquals(HivePrincipal.HivePrincipalType.USER.name(), g.getGrantorType());
        assertEquals("user1", g.getPrincipalName());
        assertEquals(HivePrincipal.HivePrincipalType.USER.name(), g.getPrincipalType());
        assertTrue(g.getGrantTime() > 0);
    }

    @Test
    public void test32_getRangerRoleForRoleName_findsAndMissing() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);

        RangerRoles     rr      = new RangerRoles();
        Set<RangerRole> roleSet = new HashSet<>();
        RangerRole      r1      = new RangerRole();
        r1.setName("roleX");
        RangerRole r2 = new RangerRole();
        r2.setName("roleY");
        roleSet.add(r1);
        roleSet.add(r2);
        rr.setRangerRoles(roleSet);
        Mockito.doReturn(rr).when(pluginSpy).getRangerRoles();

        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getRangerRoleForRoleName", String.class);
        m.setAccessible(true);
        Object found = m.invoke(authorizer, "roleX");
        assertInstanceOf(RangerRole.class, found);
        assertEquals("roleX", ((RangerRole) found).getName());

        Object missing = m.invoke(authorizer, "nope");
        assertNull(missing);
    }

    @Test
    public void test33_buildRequestForAlterTableSetOwnerFromCommandString_parses() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        HiveAuthzContext     ctx        = Mockito.mock(HiveAuthzContext.class);
        Mockito.when(ctx.getCommandString()).thenReturn("ALTER TABLE db1.tbl1 SET OWNER USER alice");

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod(
                "buildRequestForAlterTableSetOwnerFromCommandString",
                String.class, Set.class, Set.class, String.class, HiveAuthzContext.class, HiveAuthzSessionContext.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Object req = m.invoke(authorizer, "bob", new HashSet<>(), new HashSet<>(), "ALTERTABLE_OWNER", ctx, null);

        assertInstanceOf(RangerHiveAccessRequest.class, req);
        RangerHiveAccessRequest r = (RangerHiveAccessRequest) req;
        assertEquals(RangerHiveAuthorizer.HiveAccessType.ALTER, r.getHiveAccessType());
        RangerHiveResource res = (RangerHiveResource) r.getResource();
        assertEquals("db1", res.getDatabase());
        assertEquals("tbl1", res.getTable());
    }

    @Test
    public void test34_getColumnType_fromMetastore() throws Exception {
        HivePrivilegeObject hiveObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(hiveObj.getType()).thenReturn(HivePrivilegeObjectType.TABLE_OR_VIEW);
        Mockito.when(hiveObj.getDbname()).thenReturn("db1");
        Mockito.when(hiveObj.getObjectName()).thenReturn("t1");

        IMetaStoreClient  ms    = Mockito.mock(IMetaStoreClient.class);
        Table             table = Mockito.mock(Table.class);
        StorageDescriptor sd    = Mockito.mock(StorageDescriptor.class);
        Mockito.when(table.getSd()).thenReturn(sd);
        Mockito.when(sd.getCols()).thenReturn(Arrays.asList(new FieldSchema("c1", "int", null), new FieldSchema("c2", "string", null)));
        Mockito.when(ms.getTable("db1", "t1")).thenReturn(table);

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getColumnType", HivePrivilegeObject.class, String.class, IMetaStoreClient.class);
        m.setAccessible(true);
        Object type = m.invoke(null, hiveObj, "c2", ms);
        assertEquals("string", type);
    }

    @Test
    public void test35_getMetaStoreClient_successAndException() throws Exception {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));

        HiveMetastoreClientFactory factory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           client  = Mockito.mock(IMetaStoreClient.class);
        Mockito.doReturn(client).when(factory).getHiveMetastoreClient();
        Mockito.doReturn(factory).when(authorizer).getMetastoreClientFactory();

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getMetaStoreClient");
        m.setAccessible(true);
        Object ret = m.invoke(authorizer);
        assertNotNull(ret);

        HiveMetastoreClientFactory badFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        Mockito.doThrow(new HiveAuthzPluginException("x")).when(badFactory).getHiveMetastoreClient();
        Mockito.doReturn(badFactory).when(authorizer).getMetastoreClientFactory();
        Object ret2 = m.invoke(authorizer);
        assertNull(ret2);
    }

    @Test
    public void test36_setCurrentRoleAllLoadsRoles() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(new HashSet<>(Arrays.asList("role1", "admin"))).when(pluginSpy)
                .getRolesFromUserAndGroups(Mockito.eq("bob"), Mockito.anySet());

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        setStaticHivePlugin(pluginSpy);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("bob").when(ugi).getShortUserName();
        Mockito.doReturn(new String[] {"g1"}).when(ugi).getGroupNames();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        HiveAuthenticationProvider auth = Mockito.mock(HiveAuthenticationProvider.class);
        Mockito.doReturn("bob").when(auth).getUserName();
        Mockito.doReturn(auth).when(authorizer).getHiveAuthenticator();

        Field fUser = RangerHiveAuthorizer.class.getDeclaredField("currentUserName");
        fUser.setAccessible(true);
        fUser.set(authorizer, "bob");

        Field fRoles = RangerHiveAuthorizer.class.getDeclaredField("currentRoles");
        fRoles.setAccessible(true);
        fRoles.set(authorizer, new HashSet<String>());
        Field fFlag = RangerHiveAuthorizer.class.getDeclaredField("isCurrentRoleSet");
        fFlag.setAccessible(true);

        authorizer.setCurrentRole("ALL");
        @SuppressWarnings("unchecked")
        Set<String> roles = (Set<String>) fRoles.get(authorizer);
        assertTrue(roles.contains("role1"));
        assertFalse(roles.contains("admin"));
        assertTrue((Boolean) fFlag.get(authorizer));
    }

    @Test
    public void test37_setCurrentRoleSpecificMembership() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(new HashSet<>(Collections.singletonList("role2"))).when(pluginSpy)
                .getRolesFromUserAndGroups(Mockito.eq("bob"), Mockito.anySet());

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        setStaticHivePlugin(pluginSpy);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("bob").when(ugi).getShortUserName();
        Mockito.doReturn(new String[] {"g1"}).when(ugi).getGroupNames();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        HiveAuthenticationProvider auth = Mockito.mock(HiveAuthenticationProvider.class);
        Mockito.doReturn("bob").when(auth).getUserName();
        Mockito.doReturn(auth).when(authorizer).getHiveAuthenticator();

        Field fUser = RangerHiveAuthorizer.class.getDeclaredField("currentUserName");
        fUser.setAccessible(true);
        fUser.set(authorizer, "bob");

        Field fRoles = RangerHiveAuthorizer.class.getDeclaredField("currentRoles");
        fRoles.setAccessible(true);
        fRoles.set(authorizer, new HashSet<String>());
        Field fFlag = RangerHiveAuthorizer.class.getDeclaredField("isCurrentRoleSet");
        fFlag.setAccessible(true);

        authorizer.setCurrentRole("role2");
        @SuppressWarnings("unchecked")
        Set<String> roles = (Set<String>) fRoles.get(authorizer);
        assertTrue(roles.contains("role2"));
        assertEquals(1, roles.size());
        assertTrue((Boolean) fFlag.get(authorizer));
    }

    @Test
    public void test38_setCurrentRoleNonMemberThrows() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        Mockito.doReturn(new HashSet<>(Collections.singletonList("roleA"))).when(pluginSpy)
                .getRolesFromUserAndGroups(Mockito.eq("bob"), Mockito.anySet());

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        setStaticHivePlugin(pluginSpy);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("bob").when(ugi).getShortUserName();
        Mockito.doReturn(new String[] {"g1"}).when(ugi).getGroupNames();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        HiveAuthenticationProvider auth = Mockito.mock(HiveAuthenticationProvider.class);
        Mockito.doReturn("bob").when(auth).getUserName();
        Mockito.doReturn(auth).when(authorizer).getHiveAuthenticator();

        Field fUser = RangerHiveAuthorizer.class.getDeclaredField("currentUserName");
        fUser.setAccessible(true);
        fUser.set(authorizer, "bob");
        Field fRoles = RangerHiveAuthorizer.class.getDeclaredField("currentRoles");
        fRoles.setAccessible(true);
        fRoles.set(authorizer, new HashSet<String>());

        assertThrows(HiveAuthzPluginException.class, () -> authorizer.setCurrentRole("roleB"));
    }

    @Test
    public void test39_getCurrentRoleNames_happyPath() throws Exception {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("carol").when(ugi).getShortUserName();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        RangerBasePlugin plugin = (RangerBasePlugin) newInstanceRangerHivePlugin("hiveCLI");
        setStaticHivePlugin(plugin);

        Field fRoles = RangerHiveAuthorizer.class.getDeclaredField("currentRoles");
        fRoles.setAccessible(true);
        Set<String> roles = new HashSet<>();
        roles.add("r1");
        roles.add("r2");
        fRoles.set(authorizer, roles);
        Field fFlag = RangerHiveAuthorizer.class.getDeclaredField("isCurrentRoleSet");
        fFlag.setAccessible(true);
        fFlag.set(authorizer, true);

        List<String> ret = authorizer.getCurrentRoleNames();
        assertTrue(ret.contains("r1"));
        assertTrue(ret.contains("r2"));
    }

    @Test
    public void test40_getCurrentRoleNames_ugiNullThrows() throws Exception {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        Mockito.doReturn(null).when(authorizer).getCurrentUserGroupInfo();
        assertThrows(HiveAuthzPluginException.class, authorizer::getCurrentRoleNames);
    }

    @Test
    public void test41_hiveObj_fetchHiveObj_parsesDbAndTable() throws Exception {
        Class<?>         hiveObjCls = Class.forName("org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizer$HiveObj");
        Object           hiveObj    = hiveObjCls.getDeclaredConstructor().newInstance();
        HiveAuthzContext ctx        = Mockito.mock(HiveAuthzContext.class);
        Mockito.when(ctx.getCommandString()).thenReturn("OP X db1.tbl2 tail");

        Method m = hiveObjCls.getDeclaredMethod("fetchHiveObj", HiveAuthzContext.class);
        m.setAccessible(true);
        m.invoke(hiveObj, ctx);

        Method getDb  = hiveObjCls.getDeclaredMethod("getDatabaseName");
        Method getTbl = hiveObjCls.getDeclaredMethod("getTableName");
        assertEquals("db1", getDb.invoke(hiveObj));
        assertEquals("tbl2", getTbl.invoke(hiveObj));
    }

    @Test
    public void test42_hiveObj_fetchHiveObj_onlyDb() throws Exception {
        Class<?>         hiveObjCls = Class.forName("org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizer$HiveObj");
        Object           hiveObj    = hiveObjCls.getDeclaredConstructor().newInstance();
        HiveAuthzContext ctx        = Mockito.mock(HiveAuthzContext.class);
        Mockito.when(ctx.getCommandString()).thenReturn("OP X dbonly tail");

        Method m = hiveObjCls.getDeclaredMethod("fetchHiveObj", HiveAuthzContext.class);
        m.setAccessible(true);
        m.invoke(hiveObj, ctx);

        Method getDb  = hiveObjCls.getDeclaredMethod("getDatabaseName");
        Method getTbl = hiveObjCls.getDeclaredMethod("getTableName");
        assertEquals("dbonly", getDb.invoke(hiveObj));
        assertNull(getTbl.invoke(hiveObj));
    }

    @Test
    public void test43_getDataMaskAndRowFilterResult_delegatesToPlugin() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);

        RangerHiveAuthorizer    authorizer = new RangerHiveAuthorizer(null, null, null, null);
        RangerHiveResource      resource   = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.TABLE, "db", "t");
        RangerHiveAccessRequest req        = new RangerHiveAccessRequest(resource, "u", new HashSet<>(), new HashSet<>(), "QUERY", RangerHiveAuthorizer.HiveAccessType.SELECT, null, null);

        RangerAccessResult dm = Mockito.mock(RangerAccessResult.class);
        RangerAccessResult rf = Mockito.mock(RangerAccessResult.class);
        Mockito.doReturn(dm).when(pluginSpy).evalDataMaskPolicies(Mockito.eq(req), Mockito.isNull());
        Mockito.doReturn(rf).when(pluginSpy).evalRowFilterPolicies(Mockito.eq(req), Mockito.isNull());

        Method m1 = RangerHiveAuthorizer.class.getDeclaredMethod("getDataMaskResult", RangerHiveAccessRequest.class);
        m1.setAccessible(true);
        Method m2 = RangerHiveAuthorizer.class.getDeclaredMethod("getRowFilterResult", RangerHiveAccessRequest.class);
        m2.setAccessible(true);

        assertEquals(dm, m1.invoke(authorizer, req));
        assertEquals(rf, m2.invoke(authorizer, req));
    }

    @Test
    public void test44_isDataMaskEnabled_handlesNullAndTrue() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isDataMaskEnabled", RangerAccessResult.class);
        m.setAccessible(true);
        assertFalse((Boolean) m.invoke(authorizer, new Object[] {null}));
        RangerAccessResult res = Mockito.mock(RangerAccessResult.class);
        Mockito.when(res.isMaskEnabled()).thenReturn(true);
        assertTrue((Boolean) m.invoke(authorizer, res));
    }

    @Test
    public void test45_addCellValueTransformer_maskNullAndCustomType() throws Exception {
        RangerBasePlugin pluginSpy = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        setStaticHivePlugin(pluginSpy);

        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        UserGroupInformation ugi        = Mockito.mock(UserGroupInformation.class);
        Mockito.doReturn("alice").when(ugi).getShortUserName();
        Mockito.doReturn(new String[] {"g"}).when(ugi).getGroupNames();
        Mockito.doReturn(ugi).when(authorizer).getCurrentUserGroupInfo();

        HivePrivilegeObject table = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(table.getType()).thenReturn(HivePrivilegeObjectType.TABLE_OR_VIEW);
        Mockito.when(table.getDbname()).thenReturn("db1");
        Mockito.when(table.getObjectName()).thenReturn("t1");

        // First: MASK_TYPE_NULL
        RangerAccessResult dmNull = Mockito.mock(RangerAccessResult.class);
        Mockito.when(dmNull.isMaskEnabled()).thenReturn(true);
        Mockito.when(dmNull.getMaskType()).thenReturn(RangerPolicy.MASK_TYPE_NULL);
        Mockito.when(dmNull.getMaskTypeDef()).thenReturn(null);
        Mockito.doReturn(dmNull).when(pluginSpy).evalDataMaskPolicies(Mockito.any(), Mockito.any());

        List<String>     transformers = new ArrayList<>();
        IMetaStoreClient ms           = Mockito.mock(IMetaStoreClient.class);
        Map<String, String> owners       = new HashMap<>();

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod(
                "addCellValueTransformerAndCheckIfTransformed",
                HiveAuthzContext.class, HivePrivilegeObject.class, String.class, List.class, IMetaStoreClient.class, Map.class);
        m.setAccessible(true);
        boolean enabled = (Boolean) m.invoke(authorizer, null, table, "c1", transformers, ms, owners);
        assertTrue(enabled);
        assertEquals("NULL", transformers.get(0));

        // Second: custom masked value with {colType}
        RangerAccessResult dmTx = Mockito.mock(RangerAccessResult.class);
        Mockito.when(dmTx.isMaskEnabled()).thenReturn(true);
        Mockito.when(dmTx.getMaskType()).thenReturn(RangerPolicy.MASK_TYPE_CUSTOM);
        Mockito.when(dmTx.getMaskedValue()).thenReturn("cast({col} as {colType})");
        Mockito.when(dmTx.getMaskTypeDef()).thenReturn(null);
        Mockito.doReturn(dmTx).when(pluginSpy).evalDataMaskPolicies(Mockito.any(), Mockito.any());

        // stub column type
        Table             hiveTable = Mockito.mock(Table.class);
        StorageDescriptor sd        = Mockito.mock(StorageDescriptor.class);
        Mockito.when(hiveTable.getSd()).thenReturn(sd);
        Mockito.when(sd.getCols()).thenReturn(Collections.singletonList(new FieldSchema("c1", "int", null)));
        Mockito.when(ms.getTable("db1", "t1")).thenReturn(hiveTable);

        List<String> transformers2 = new ArrayList<>();
        boolean      enabled2      = (Boolean) m.invoke(authorizer, null, table, "c1", transformers2, ms, owners);
        assertTrue(enabled2);
        assertEquals("cast(c1 as int)", transformers2.get(0));
    }

    @Test
    public void test46_getHiveResource_databaseCreateNoOwnerLookup() throws Exception {
        RangerHiveAuthorizer       authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        HiveMetastoreClientFactory factory    = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms         = Mockito.mock(IMetaStoreClient.class);
        Mockito.doReturn(ms).when(factory).getHiveMetastoreClient();
        Mockito.doReturn(factory).when(authorizer).getMetastoreClientFactory();
        HivePrivilegeObject hiveObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(hiveObj.getType()).thenReturn(HivePrivilegeObjectType.DATABASE);
        Mockito.when(hiveObj.getDbname()).thenReturn("db1");

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getHiveResource", HiveOperationType.class, HivePrivilegeObject.class, List.class, List.class, Map.class);
        m.setAccessible(true);
        Object res = m.invoke(authorizer, HiveOperationType.CREATEDATABASE, hiveObj, Collections.emptyList(), Collections.emptyList(), new HashMap<>());
        assertInstanceOf(RangerHiveResource.class, res);
        RangerHiveResource r = (RangerHiveResource) res;
        assertEquals(RangerHiveAuthorizer.HiveObjectType.DATABASE, r.getObjectType());
        assertEquals("db1", r.getDatabase());
    }

    @Test
    public void test47_isCreateOperation_trueAndFalse() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isCreateOperation", HiveOperationType.class);
        m.setAccessible(true);
        assertTrue((Boolean) m.invoke(authorizer, HiveOperationType.CREATETABLE));
        assertFalse((Boolean) m.invoke(authorizer, HiveOperationType.DROPTABLE));
    }

    @Test
    public void test48_getDatabaseObject_outputsThenInputs() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        HivePrivilegeObject  outDb      = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(outDb.getType()).thenReturn(HivePrivilegeObjectType.DATABASE);
        Mockito.when(outDb.getDbname()).thenReturn("db1");
        HivePrivilegeObject inDb = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(inDb.getType()).thenReturn(HivePrivilegeObjectType.DATABASE);
        Mockito.when(inDb.getDbname()).thenReturn("db1");

        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getDatabaseObject", String.class, List.class, List.class);
        m.setAccessible(true);
        Object res1 = m.invoke(authorizer, "db1", Collections.singletonList(inDb), Collections.singletonList(outDb));
        assertEquals(outDb, res1);
        Object res2 = m.invoke(authorizer, "db1", Collections.singletonList(inDb), Collections.emptyList());
        assertEquals(inDb, res2);
    }

    @Test
    public void test49_getObjectType_mappings() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getObjectType", HivePrivilegeObject.class, HiveOperationType.class);
        m.setAccessible(true);

        HivePrivilegeObject db = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(db.getType()).thenReturn(HivePrivilegeObjectType.DATABASE);
        assertEquals(RangerHiveAuthorizer.HiveObjectType.DATABASE, m.invoke(authorizer, db, HiveOperationType.QUERY));

        HivePrivilegeObject part = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(part.getType()).thenReturn(HivePrivilegeObjectType.PARTITION);
        assertEquals(RangerHiveAuthorizer.HiveObjectType.PARTITION, m.invoke(authorizer, part, HiveOperationType.QUERY));

        HivePrivilegeObject tableWithCols = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(tableWithCols.getType()).thenReturn(HivePrivilegeObjectType.TABLE_OR_VIEW);
        Mockito.when(tableWithCols.getColumns()).thenReturn(Collections.singletonList("c1"));
        assertEquals(RangerHiveAuthorizer.HiveObjectType.COLUMN, m.invoke(authorizer, tableWithCols, HiveOperationType.QUERY));

        HivePrivilegeObject view = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(view.getType()).thenReturn(HivePrivilegeObjectType.TABLE_OR_VIEW);
        Mockito.when(view.getColumns()).thenReturn(null);
        assertEquals(RangerHiveAuthorizer.HiveObjectType.VIEW, m.invoke(authorizer, view, HiveOperationType.CREATEVIEW));

        HivePrivilegeObject uri = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(uri.getType()).thenReturn(HivePrivilegeObjectType.DFS_URI);
        assertEquals(RangerHiveAuthorizer.HiveObjectType.URI, m.invoke(authorizer, uri, HiveOperationType.QUERY));
    }

    @Test
    public void test50_isURIAccessAllowed_actionNoneShortCircuits() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isURIAccessAllowed", String.class, FsAction.class, Path.class, FileSystem.class);
        m.setAccessible(true);
        boolean ret = (Boolean) m.invoke(authorizer, "user", FsAction.NONE, new Path("/a"), null);
        assertTrue(ret);
    }

    @Test
    public void test51_resolvePath_successAndException() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        FileSystem           fs         = Mockito.mock(FileSystem.class);
        Path                 p          = new Path("/x");
        Path                 resolved   = new Path("/y");
        Mockito.when(fs.resolvePath(p)).thenReturn(resolved);
        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("resolvePath", Path.class, FileSystem.class);
        m.setAccessible(true);
        assertEquals(resolved, m.invoke(authorizer, p, fs));
        Mockito.when(fs.resolvePath(p)).thenThrow(new IOException("x"));
        assertNull(m.invoke(authorizer, p, fs));
    }

    @Test
    public void test52_isMountedFs_trueWhenChildrenPresent() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        FileSystem           fs         = Mockito.mock(FileSystem.class);
        FileSystem[]         children   = new FileSystem[] {Mockito.mock(FileSystem.class)};
        Mockito.when(fs.getChildFileSystems()).thenReturn(children);
        Method m = RangerHiveAuthorizer.class.getDeclaredMethod("isMountedFs", FileSystem.class);
        m.setAccessible(true);
        assertTrue((Boolean) m.invoke(authorizer, fs));
        Mockito.when(fs.getChildFileSystems()).thenReturn(null);
        assertFalse((Boolean) m.invoke(authorizer, fs));
    }

    @Test
    public void test53_existsByResourceAndAccessType() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("existsByResourceAndAccessType", Collection.class, RangerHiveResource.class, RangerHiveAuthorizer.HiveAccessType.class);
        m.setAccessible(true);
        RangerHiveResource                      r1      = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.TABLE, "db", "t");
        RangerHiveAccessRequest                 request = new RangerHiveAccessRequest(r1, "u", new HashSet<>(), new HashSet<>(), "QUERY", RangerHiveAuthorizer.HiveAccessType.SELECT, null, null);
        List<RangerHiveAccessRequest> list    = new ArrayList<>();
        list.add(request);
        assertTrue((Boolean) m.invoke(authorizer, list, r1, RangerHiveAuthorizer.HiveAccessType.SELECT));
        RangerHiveResource r2 = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.TABLE, "db", "t2");
        assertFalse((Boolean) m.invoke(authorizer, list, r2, RangerHiveAuthorizer.HiveAccessType.SELECT));
    }

    @Test
    public void test54_getAccessType_uriReadWrite() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getAccessType", HivePrivilegeObject.class, HiveOperationType.class, RangerHiveAuthorizer.HiveObjectType.class, boolean.class);
        m.setAccessible(true);
        HivePrivilegeObject uriObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(uriObj.getActionType()).thenReturn(HivePrivObjectActionType.OTHER);
        Object read  = m.invoke(authorizer, uriObj, HiveOperationType.QUERY, RangerHiveAuthorizer.HiveObjectType.URI, true);
        Object write = m.invoke(authorizer, uriObj, HiveOperationType.QUERY, RangerHiveAuthorizer.HiveObjectType.URI, false);
        assertEquals(RangerHiveAuthorizer.HiveAccessType.READ, read);
        assertEquals(RangerHiveAuthorizer.HiveAccessType.WRITE, write);
    }

    @Test
    public void test56_getAccessType_otherMappingsVarious() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getAccessType", HivePrivilegeObject.class, HiveOperationType.class, RangerHiveAuthorizer.HiveObjectType.class, boolean.class);
        m.setAccessible(true);
        HivePrivilegeObject dbObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(dbObj.getActionType()).thenReturn(HivePrivObjectActionType.OTHER);
        Mockito.when(dbObj.getType()).thenReturn(HivePrivilegeObjectType.DATABASE);
        assertEquals(RangerHiveAuthorizer.HiveAccessType.CREATE, m.invoke(authorizer, dbObj, HiveOperationType.CREATEDATABASE, RangerHiveAuthorizer.HiveObjectType.DATABASE, false));
        HivePrivilegeObject funcObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(funcObj.getActionType()).thenReturn(HivePrivObjectActionType.OTHER);
        Mockito.when(funcObj.getType()).thenReturn(HivePrivilegeObjectType.FUNCTION);
        assertEquals(RangerHiveAuthorizer.HiveAccessType.CREATE, m.invoke(authorizer, funcObj, HiveOperationType.CREATEFUNCTION, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // CREATE VIEW/TABLE: input -> SELECT, output -> CREATE
        HivePrivilegeObject tblObj = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(tblObj.getActionType()).thenReturn(HivePrivObjectActionType.OTHER);
        Mockito.when(tblObj.getType()).thenReturn(HivePrivilegeObjectType.TABLE_OR_VIEW);
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SELECT, m.invoke(authorizer, tblObj, HiveOperationType.CREATETABLE, RangerHiveAuthorizer.HiveObjectType.TABLE, true));
        assertEquals(RangerHiveAuthorizer.HiveAccessType.CREATE, m.invoke(authorizer, tblObj, HiveOperationType.CREATETABLE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // ALTERVIEW_AS: input table -> SELECT; output -> ALTER
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SELECT, m.invoke(authorizer, tblObj, HiveOperationType.ALTERVIEW_AS, RangerHiveAuthorizer.HiveObjectType.TABLE, true));
        assertEquals(RangerHiveAuthorizer.HiveAccessType.ALTER, m.invoke(authorizer, tblObj, HiveOperationType.ALTERVIEW_AS, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // ALTER operations map to ALTER
        assertEquals(RangerHiveAuthorizer.HiveAccessType.ALTER, m.invoke(authorizer, tblObj, HiveOperationType.ALTERTABLE_ADDCOLS, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // DROP operations map to DROP
        assertEquals(RangerHiveAuthorizer.HiveAccessType.DROP, m.invoke(authorizer, tblObj, HiveOperationType.DROPTABLE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // IMPORT input -> SELECT, output -> CREATE
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SELECT, m.invoke(authorizer, tblObj, HiveOperationType.IMPORT, RangerHiveAuthorizer.HiveObjectType.TABLE, true));
        assertEquals(RangerHiveAuthorizer.HiveAccessType.CREATE, m.invoke(authorizer, tblObj, HiveOperationType.IMPORT, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // EXPORT/LOAD: input -> SELECT; output -> UPDATE
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SELECT, m.invoke(authorizer, tblObj, HiveOperationType.EXPORT, RangerHiveAuthorizer.HiveObjectType.TABLE, true));
        assertEquals(RangerHiveAuthorizer.HiveAccessType.UPDATE, m.invoke(authorizer, tblObj, HiveOperationType.EXPORT, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // LOCK
        assertEquals(RangerHiveAuthorizer.HiveAccessType.LOCK, m.invoke(authorizer, tblObj, HiveOperationType.LOCKTABLE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // Metadata SELECT
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SELECT, m.invoke(authorizer, tblObj, HiveOperationType.SHOW_TBLPROPERTIES, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // USE
        assertEquals(RangerHiveAuthorizer.HiveAccessType.USE, m.invoke(authorizer, tblObj, HiveOperationType.SHOWDATABASES, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // TRUNCATE -> UPDATE
        assertEquals(RangerHiveAuthorizer.HiveAccessType.UPDATE, m.invoke(authorizer, tblObj, HiveOperationType.TRUNCATETABLE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // GRANT/REVOKE_PRIVILEGE -> NONE
        assertEquals(RangerHiveAuthorizer.HiveAccessType.NONE, m.invoke(authorizer, tblObj, HiveOperationType.GRANT_PRIVILEGE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // REPL* -> REPLADMIN
        assertEquals(RangerHiveAuthorizer.HiveAccessType.REPLADMIN, m.invoke(authorizer, tblObj, HiveOperationType.REPLDUMP, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // SERVICEADMIN
        assertEquals(RangerHiveAuthorizer.HiveAccessType.SERVICEADMIN, m.invoke(authorizer, tblObj, HiveOperationType.KILL_QUERY, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
        // TEMPUDFADMIN
        assertEquals(RangerHiveAuthorizer.HiveAccessType.TEMPUDFADMIN, m.invoke(authorizer, tblObj, HiveOperationType.COMPILE, RangerHiveAuthorizer.HiveObjectType.TABLE, false));
    }

    @Test
    public void test57_isPathInFSScheme_trueFalse() throws Exception {
        Object pluginObj = newInstanceRangerHivePlugin("hiveCLI");
        setStaticHivePlugin((RangerBasePlugin) pluginObj);
        Field fsField = pluginObj.getClass().getDeclaredField("fsScheme");
        fsField.setAccessible(true);
        fsField.set(pluginObj, new String[] {"hdfs://", "file://"});
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isPathInFSScheme", String.class);
        m.setAccessible(true);
        assertTrue((Boolean) m.invoke(authorizer, "hdfs://nn/tmp"));
        assertFalse((Boolean) m.invoke(authorizer, "s3a://bucket"));
    }

    @Test
    public void test58_createGrantRevokeData_buildsRequest() throws Exception {
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(null, null, null, null));
        RangerHiveResource   res        = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.TABLE, "db1", "t1");
        List<HivePrincipal>  principals = Arrays.asList(new HivePrincipal("alice", HivePrincipal.HivePrincipalType.USER), new HivePrincipal("dev", HivePrincipal.HivePrincipalType.GROUP));
        HivePrivilege        p1         = Mockito.mock(HivePrivilege.class);
        Mockito.when(p1.getName()).thenReturn("select");
        HivePrivilege p2 = Mockito.mock(HivePrivilege.class);
        Mockito.when(p2.getName()).thenReturn("Insert");
        List<HivePrivilege> privs = Arrays.asList(p1, p2);
        Method              m     = RangerHiveAuthorizer.class.getDeclaredMethod("createGrantRevokeData", RangerHiveResource.class, List.class, List.class, HivePrincipal.class, boolean.class);
        m.setAccessible(true);
        Object out = m.invoke(authorizer, res, principals, privs, principals.get(0), true);
        assertInstanceOf(GrantRevokeRequest.class, out);
        GrantRevokeRequest req = (GrantRevokeRequest) out;
        assertEquals("db1", req.getResource().get("database"));
        assertEquals("t1", req.getResource().get("table"));
        assertTrue(req.getUsers().contains("alice"));
        assertTrue(req.getGroups().contains("dev"));
        assertTrue(req.getAccessTypes().contains("select"));
        assertTrue(req.getAccessTypes().contains("update"));
    }

    @Test
    public void test59_getPluginPrivilegeObjType_mappingsAndAssertion() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getPluginPrivilegeObjType", HiveObjectType.class);
        m.setAccessible(true);
        assertThrows(AssertionError.class, () -> {
            try {
                m.invoke(authorizer, HiveObjectType.PARTITION);
            } catch (Exception e) {
                if (e.getCause() instanceof AssertionError) {
                    throw e.getCause();
                }
                throw new RuntimeException(e);
            }
        });
    }

    @Test
    public void test60_isTempUDFOperation_trueAndFalse() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("isTempUDFOperation", String.class, HivePrivilegeObject.class);
        m.setAccessible(true);

        HivePrivilegeObject objNoDb = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(objNoDb.getDbname()).thenReturn("");
        assertTrue((Boolean) m.invoke(authorizer, "createfunction", objNoDb));
        assertTrue((Boolean) m.invoke(authorizer, "dropfunction", objNoDb));

        HivePrivilegeObject objWithDb = Mockito.mock(HivePrivilegeObject.class);
        Mockito.when(objWithDb.getDbname()).thenReturn("db1");
        assertFalse((Boolean) m.invoke(authorizer, "createfunction", objWithDb));
        assertFalse((Boolean) m.invoke(authorizer, "otherop", objNoDb));
    }

    @Test
    public void test61_convertRangerACLsToHiveACLs_mapsValues() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("convertRangerACLsToHiveACLs", Map.class);
        m.setAccessible(true);

        Map<String, Map<String, RangerResourceACLs.AccessResult>> input = new HashMap<>();
        Map<String, RangerResourceACLs.AccessResult>                                                    alice = new HashMap<>();
        alice.put("select", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_ALLOWED, null));
        alice.put("update", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_DENIED, null));
        alice.put("drop", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_CONDITIONAL, null));
        input.put("alice", alice);

        @SuppressWarnings("unchecked")
        Map<String, Map<Privilege, AccessResult>> out = (Map<String, Map<Privilege, AccessResult>>) m.invoke(authorizer, input);
        assertNotNull(out);
        Map<Privilege, AccessResult> perms = out.get("alice");
        assertEquals(AccessResult.ALLOWED, perms.get(Privilege.SELECT));
        assertEquals(AccessResult.NOT_ALLOWED, perms.get(Privilege.UPDATE));
        assertEquals(AccessResult.CONDITIONAL_ALLOWED, perms.get(Privilege.DROP));
    }

    @Test
    public void test62_getPermission_variants() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               mCheck     = RangerHiveAuthorizer.class.getDeclaredMethod("checkACLIsAllowed", Privilege.class, Map.class);
        Method               mPerm      = RangerHiveAuthorizer.class.getDeclaredMethod("getPermission", Privilege.class, Map.class, RangerPolicy.class);
        mCheck.setAccessible(true);
        mPerm.setAccessible(true);

        Map<String, RangerResourceACLs.AccessResult> map = new HashMap<>();
        map.put("select", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_ALLOWED, null));
        map.put("update", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_UNDETERMINED, null));
        map.put("drop", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_CONDITIONAL, null));

        RangerPolicy policy = new RangerPolicy();

        assertEquals(RangerPolicyEvaluator.ACCESS_ALLOWED, mCheck.invoke(authorizer, Privilege.SELECT, map));
        String p1 = (String) mPerm.invoke(authorizer, Privilege.SELECT, map, policy);
        assertEquals("SELECT", p1);

        assertEquals(RangerPolicyEvaluator.ACCESS_UNDETERMINED, mCheck.invoke(authorizer, Privilege.UPDATE, map));
        String p2 = (String) mPerm.invoke(authorizer, Privilege.UPDATE, map, policy);
        assertTrue(p2.contains("ACCESS_UNDETERMINED"));

        assertEquals(RangerPolicyEvaluator.ACCESS_CONDITIONAL, mCheck.invoke(authorizer, Privilege.DROP, map));
        String p3 = (String) mPerm.invoke(authorizer, Privilege.DROP, map, policy);
        assertTrue(p3.contains("ACCESS_CONDITIONAL"));
    }

    @Test
    public void test63_getRangerPolicy_returnsPolicyWhenPresent() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getRangerPolicy", Map.class, String.class);
        m.setAccessible(true);

        Map<String, RangerResourceACLs.AccessResult> access = new HashMap<>();
        RangerPolicy                                 policy = new RangerPolicy();
        policy.setName("p1");
        access.put("select", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_ALLOWED, policy));

        Object out = m.invoke(authorizer, access, "SELECT");
        assertInstanceOf(RangerPolicy.class, out);
        assertEquals("p1", ((RangerPolicy) out).getName());
    }

    @Test
    public void test64_createHivePrivilegeInfo_buildsFieldsFromPolicy() throws Exception {
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(null, null, null, null);
        Method m = RangerHiveAuthorizer.class.getDeclaredMethod(
                "createHivePrivilegeInfo",
                HivePrincipal.class,
                HivePrivilegeObject.HivePrivilegeObjectType.class,
                String.class,
                String.class,
                String.class,
                List.class,
                String.class,
                RangerPolicy.class);
        m.setAccessible(true);

        RangerPolicy policy = new RangerPolicy();
        policy.setCreateTime(new Date(4000));
        RangerPolicy.RangerPolicyItem item   = new RangerPolicy.RangerPolicyItem();
        RangerPolicyItemAccess        access = new RangerPolicyItemAccess();
        access.setType("select");
        item.setAccesses(Collections.singletonList(access));
        item.setUsers(Collections.singletonList("alice"));
        item.setDelegateAdmin(true);
        policy.setPolicyItems(Collections.singletonList(item));

        HivePrincipal principal = new HivePrincipal("alice", HivePrincipal.HivePrincipalType.USER);
        Object        out       = m.invoke(authorizer, principal, HivePrivilegeObject.HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1", "", Collections.emptyList(), "SELECT", policy);
        assertInstanceOf(HivePrivilegeInfo.class, out);
        HivePrivilegeInfo info = (HivePrivilegeInfo) out;
        assertEquals("alice", info.getPrincipal().getName());
        assertEquals("ranger", info.getGrantorPrincipal().getName());
        assertTrue(info.isGrantOption());
        assertTrue(info.getGrantTime() > 0);
    }

    @Test
    public void test65_getRangerResourceACLs_delegatesToPlugin() throws Exception {
        RangerBasePlugin   plugin = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        RangerResourceACLs acls   = new RangerResourceACLs();
        Mockito.doReturn(acls).when(plugin).getResourceACLs(Mockito.any(RangerAccessRequestImpl.class));
        setStaticHivePlugin(plugin);

        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);

        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);
        Method               m          = RangerHiveAuthorizer.class.getDeclaredMethod("getRangerResourceACLs", HivePrivilegeObject.class);
        m.setAccessible(true);
        HivePrivilegeObject obj = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1");
        Object              out = m.invoke(authorizer, obj);
        assertInstanceOf(RangerResourceACLs.class, out);
    }

    @Test
    public void test67_getHivePrivilegeInfos_userPrincipal() throws Exception {
        RangerBasePlugin   plugin = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        RangerResourceACLs acls   = new RangerResourceACLs();
        RangerPolicy       pUser  = new RangerPolicy();
        pUser.setPolicyItems(Collections.emptyList());
        RangerPolicy pGrp = new RangerPolicy();
        pGrp.setPolicyItems(Collections.emptyList());
        acls.setUserAccessInfo("alice", "select", RangerPolicyEvaluator.ACCESS_ALLOWED, pUser);
        acls.setGroupAccessInfo("dev", "update", RangerPolicyEvaluator.ACCESS_ALLOWED, pGrp);
        Mockito.doReturn(acls).when(plugin).getResourceACLs(Mockito.any(RangerAccessRequestImpl.class));
        setStaticHivePlugin(plugin);

        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);
        RangerHiveAuthorizer authorizer = Mockito.spy(new RangerHiveAuthorizer(msFactory, null, null, null));

        // Prepare AuthorizationUtils response
        HiveObjectRef ref = Mockito.mock(HiveObjectRef.class);
        Mockito.when(ref.getDbName()).thenReturn("db1");
        Mockito.when(ref.getObjectName()).thenReturn("t1");
        Mockito.when(ref.getColumnName()).thenReturn(null);
        Mockito.when(ref.getPartValues()).thenReturn(null);
        Mockito.when(ref.getObjectType()).thenReturn(HiveObjectType.TABLE);

        try (MockedStatic<AuthorizationUtils> stat = Mockito.mockStatic(AuthorizationUtils.class)) {
            stat.when(() -> AuthorizationUtils.getThriftHiveObjectRef(Mockito.any(HivePrivilegeObject.class))).thenReturn(ref);

            // Seed UGI with dev group
            UserGroupInformation.setLoginUser(UserGroupInformation.createUserForTesting("alice", new String[] {"dev"}));

            Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getHivePrivilegeInfos", HivePrincipal.class, HivePrivilegeObject.class);
            m.setAccessible(true);

            HivePrivilegeObject resource  = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1");
            HivePrincipal       principal = new HivePrincipal("alice", HivePrincipal.HivePrincipalType.USER);

            @SuppressWarnings("unchecked")
            List<HivePrivilegeInfo> infos = (List<HivePrivilegeInfo>) m.invoke(authorizer, principal, resource);

            assertFalse(infos.isEmpty());
            assertTrue(infos.stream().anyMatch(i -> i.getPrivilege().getName().toLowerCase().startsWith("select")));
            assertTrue(infos.stream().anyMatch(i -> i.getPrivilege().getName().toLowerCase().startsWith("update")));
        }
    }

    @Test
    public void test68_getHivePrivilegeInfos_rolePrincipal() throws Exception {
        RangerBasePlugin   plugin = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        RangerResourceACLs acls   = new RangerResourceACLs();
        RangerPolicy       pRole  = new RangerPolicy();
        pRole.setPolicyItems(Collections.emptyList());
        acls.setRoleAccessInfo("analyst", "drop", RangerPolicyEvaluator.ACCESS_ALLOWED, pRole);
        Mockito.doReturn(acls).when(plugin).getResourceACLs(Mockito.any(RangerAccessRequestImpl.class));
        setStaticHivePlugin(plugin);

        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);

        HiveObjectRef ref = Mockito.mock(HiveObjectRef.class);
        Mockito.when(ref.getDbName()).thenReturn("db1");
        Mockito.when(ref.getObjectName()).thenReturn("t1");
        Mockito.when(ref.getColumnName()).thenReturn(null);
        Mockito.when(ref.getPartValues()).thenReturn(null);
        Mockito.when(ref.getObjectType()).thenReturn(HiveObjectType.TABLE);

        try (MockedStatic<AuthorizationUtils> stat = Mockito.mockStatic(AuthorizationUtils.class)) {
            stat.when(() -> AuthorizationUtils.getThriftHiveObjectRef(Mockito.any(HivePrivilegeObject.class))).thenReturn(ref);

            Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getHivePrivilegeInfos", HivePrincipal.class, HivePrivilegeObject.class);
            m.setAccessible(true);

            HivePrivilegeObject resource  = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1");
            HivePrincipal       principal = new HivePrincipal("analyst", HivePrincipal.HivePrincipalType.ROLE);

            @SuppressWarnings("unchecked")
            List<HivePrivilegeInfo> infos = (List<HivePrivilegeInfo>) m.invoke(authorizer, principal, resource);

            assertFalse(infos.isEmpty());
            assertTrue(infos.stream().anyMatch(i -> i.getPrivilege().getName().toLowerCase().startsWith("drop")));
        }
    }

    @Test
    public void test69_getHivePrivilegeInfos_allPrincipals() throws Exception {
        RangerBasePlugin   plugin = (RangerBasePlugin) Mockito.spy(newInstanceRangerHivePlugin("hiveCLI"));
        RangerResourceACLs acls   = new RangerResourceACLs();
        RangerPolicy       pUser  = new RangerPolicy();
        pUser.setPolicyItems(Collections.emptyList());
        RangerPolicy pGrp = new RangerPolicy();
        pGrp.setPolicyItems(Collections.emptyList());
        RangerPolicy pRole = new RangerPolicy();
        pRole.setPolicyItems(Collections.emptyList());
        acls.setUserAccessInfo("u1", "select", RangerPolicyEvaluator.ACCESS_ALLOWED, pUser);
        acls.setGroupAccessInfo("g1", "update", RangerPolicyEvaluator.ACCESS_ALLOWED, pGrp);
        acls.setRoleAccessInfo("r1", "drop", RangerPolicyEvaluator.ACCESS_ALLOWED, pRole);
        Mockito.doReturn(acls).when(plugin).getResourceACLs(Mockito.any(RangerAccessRequestImpl.class));
        setStaticHivePlugin(plugin);

        HiveMetastoreClientFactory msFactory = Mockito.mock(HiveMetastoreClientFactory.class);
        IMetaStoreClient           ms        = Mockito.mock(IMetaStoreClient.class);
        Mockito.when(msFactory.getHiveMetastoreClient()).thenReturn(ms);
        RangerHiveAuthorizer authorizer = new RangerHiveAuthorizer(msFactory, null, null, null);

        HiveObjectRef ref = Mockito.mock(HiveObjectRef.class);
        Mockito.when(ref.getDbName()).thenReturn("db1");
        Mockito.when(ref.getObjectName()).thenReturn("t1");
        Mockito.when(ref.getColumnName()).thenReturn(null);
        Mockito.when(ref.getPartValues()).thenReturn(null);
        Mockito.when(ref.getObjectType()).thenReturn(HiveObjectType.TABLE);

        try (MockedStatic<AuthorizationUtils> stat = Mockito.mockStatic(AuthorizationUtils.class)) {
            stat.when(() -> AuthorizationUtils.getThriftHiveObjectRef(Mockito.any(HivePrivilegeObject.class))).thenReturn(ref);

            Method m = RangerHiveAuthorizer.class.getDeclaredMethod("getHivePrivilegeInfos", HivePrincipal.class, HivePrivilegeObject.class);
            m.setAccessible(true);

            HivePrivilegeObject resource = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1");

            @SuppressWarnings("unchecked")
            List<HivePrivilegeInfo> infos = (List<HivePrivilegeInfo>) m.invoke(authorizer, null, resource);

            assertFalse(infos.isEmpty());
            // Ensure entries for user, group and role got included
            assertTrue(infos.stream().anyMatch(i -> i.getPrincipal().getType() == HivePrincipal.HivePrincipalType.USER));
            assertTrue(infos.stream().anyMatch(i -> i.getPrincipal().getType() == HivePrincipal.HivePrincipalType.GROUP));
            assertTrue(infos.stream().anyMatch(i -> i.getPrincipal().getType() == HivePrincipal.HivePrincipalType.ROLE));
        }
    }

    private static RangerAccessResult allowedResult() {
        RangerAccessResult res = new RangerAccessResult(RangerPolicy.POLICY_TYPE_ACCESS, "svc", null, new RangerAccessRequestImpl());
        res.setIsAudited(true);
        res.setIsAllowed(true);
        return res;
    }

    private static RangerBasePlugin getStaticHivePlugin() throws Exception {
        Field f = RangerHiveAuthorizer.class.getDeclaredField("hivePlugin");
        f.setAccessible(true);
        Object val = f.get(null);
        return (RangerBasePlugin) val;
    }

    private static void setStaticHivePlugin(RangerBasePlugin plugin) throws Exception {
        Field f = RangerHiveAuthorizer.class.getDeclaredField("hivePlugin");
        f.setAccessible(true);
        f.set(null, plugin);
    }

    private static void setRangerHivePluginUpdateFlag(boolean value) throws Exception {
        Field f = Class.forName("org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizer$RangerHivePlugin").getDeclaredField("updateXaPoliciesOnGrantRevoke");
        f.setAccessible(true);
        f.set(null, value);
    }

    private static Object newInstanceRangerHivePlugin(String appType) throws Exception {
        Class<?>                         c    = Class.forName("org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizer$RangerHivePlugin");
        java.lang.reflect.Constructor<?> ctor = c.getDeclaredConstructor(String.class);
        ctor.setAccessible(true);
        return ctor.newInstance(appType);
    }
}
