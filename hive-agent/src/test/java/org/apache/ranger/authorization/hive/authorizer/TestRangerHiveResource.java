/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.authorization.hive.authorizer;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerHiveResource
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHiveResource {
    @Test
    public void test01_databaseResourceSetsKeysAndType() {
        RangerHiveAuthorizer.HiveObjectType type     = RangerHiveAuthorizer.HiveObjectType.DATABASE;
        RangerHiveResource                  resource = new RangerHiveResource(type, "db1");

        Assertions.assertEquals(type, resource.getObjectType());
        Assertions.assertEquals("db1", resource.getDatabase());
        Assertions.assertNull(resource.getTable());
        Assertions.assertNull(resource.getColumn());
    }

    @Test
    public void test02_tableResourceSetsKeys() {
        RangerHiveAuthorizer.HiveObjectType type     = RangerHiveAuthorizer.HiveObjectType.TABLE;
        RangerHiveResource                  resource = new RangerHiveResource(type, "db1", "tbl1");

        Assertions.assertEquals("db1", resource.getDatabase());
        Assertions.assertEquals("tbl1", resource.getTable());
        Assertions.assertNull(resource.getColumn());
    }

    @Test
    public void test03_columnResourceSetsKeys() {
        RangerHiveAuthorizer.HiveObjectType type     = RangerHiveAuthorizer.HiveObjectType.COLUMN;
        RangerHiveResource                  resource = new RangerHiveResource(type, "db1", "tbl1", "col1");

        Assertions.assertEquals("db1", resource.getDatabase());
        Assertions.assertEquals("tbl1", resource.getTable());
        Assertions.assertEquals("col1", resource.getColumn());
    }

    @Test
    public void test04_uriResourceContainsUrlKey() {
        RangerHiveAuthorizer.HiveObjectType type     = RangerHiveAuthorizer.HiveObjectType.URI;
        RangerHiveResource                  resource = new RangerHiveResource(type, "/tmp/path");

        Assertions.assertTrue(resource.exists(RangerHiveResource.KEY_URL));
        Assertions.assertNotNull(resource.getAsMap().get(RangerHiveResource.KEY_URL));
    }

    @Test
    public void test05_functionResourceSetsDbEmptyAndUdf() {
        RangerHiveResource resource = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.FUNCTION, null, "myUdf");

        Assertions.assertEquals("", resource.getDatabase());
        Assertions.assertEquals("myUdf", resource.getUdf());
    }

    @Test
    public void test06_serviceNameResourceSetsHiveServiceEmpty() {
        RangerHiveResource resource = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.SERVICE_NAME, null);

        Assertions.assertEquals("", resource.getHiveService());
    }

    @Test
    public void test07_globalResourceSetsDefaultGlobalKey() {
        RangerHiveResource resource = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.GLOBAL, null);

        Assertions.assertTrue(resource.exists(RangerHiveResource.KEY_GLOBAL));
        Assertions.assertEquals(RangerHiveResource.KEY_GLOBAL, resource.getAsMap().get(RangerHiveResource.KEY_GLOBAL));
    }

    @Test
    public void test08_getUrlReturnsNullWhenNotSet() {
        RangerHiveResource resource = new RangerHiveResource(RangerHiveAuthorizer.HiveObjectType.DATABASE, "dbx");

        Assertions.assertNull(resource.getUrl());
    }
}
