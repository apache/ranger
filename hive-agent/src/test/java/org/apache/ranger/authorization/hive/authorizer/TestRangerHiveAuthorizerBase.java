/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.authorization.hive.authorizer;

import org.apache.hadoop.hive.conf.HiveConf;
import org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzPluginException;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzSessionContext;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveMetastoreClientFactory;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrincipal;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject;
import org.apache.hadoop.security.UserGroupInformation;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerHiveAuthorizerBase
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHiveAuthorizerBase {
    @Test
    public void test01_constructorSetsUgiWhenUserPresent() {
        HiveMetastoreClientFactory msFactory      = Mockito.mock(HiveMetastoreClientFactory.class);
        HiveAuthenticationProvider authenticator  = Mockito.mock(HiveAuthenticationProvider.class);
        HiveAuthzSessionContext    sessionContext = Mockito.mock(HiveAuthzSessionContext.class);

        Mockito.when(authenticator.getUserName()).thenReturn("alice");

        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(msFactory, null, authenticator, sessionContext).defaultAnswer(Mockito.CALLS_REAL_METHODS));

        UserGroupInformation ugi = auth.getCurrentUserGroupInfo();
        Assertions.assertNotNull(ugi);
        Assertions.assertEquals("alice", ugi.getShortUserName());
        Assertions.assertNull(auth.getHiveConf());
        Assertions.assertEquals(authenticator, auth.getHiveAuthenticator());
        Assertions.assertEquals(sessionContext, auth.getHiveAuthzSessionContext());
        Assertions.assertEquals(msFactory, auth.getMetastoreClientFactory());
    }

    @Test
    public void test02_constructorLeavesUgiNullWhenUserMissing() {
        HiveMetastoreClientFactory msFactory      = Mockito.mock(HiveMetastoreClientFactory.class);
        HiveAuthenticationProvider authenticator  = Mockito.mock(HiveAuthenticationProvider.class);
        HiveAuthzSessionContext    sessionContext = Mockito.mock(HiveAuthzSessionContext.class);

        Mockito.when(authenticator.getUserName()).thenReturn(null);

        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(msFactory, null, authenticator, sessionContext).defaultAnswer(Mockito.CALLS_REAL_METHODS));

        Assertions.assertNull(auth.getCurrentUserGroupInfo());
    }

    @Test
    public void test03_getVersionIsV1() {
        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, null, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));
        Assertions.assertEquals(RangerHiveAuthorizerBase.VERSION.V1, auth.getVersion());
    }

    @Test
    public void test05_getHivePolicyProviderReturnsNull() throws Exception {
        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, null, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));
        Assertions.assertNull(auth.getHivePolicyProvider());
    }

    @Test
    public void test06_applyAuthorizationConfigPolicy_addsDisallowHookForHS2WithEmptyHooks() throws Exception {
        assumeHiveAvailable();
        HiveConf conf = new HiveConf();
        conf.setVar(HiveConf.getConfVars("hive.exec.pre.hooks"), "");

        HiveAuthzSessionContext sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.when(sessionContext.getClientType()).thenReturn(HiveAuthzSessionContext.CLIENT_TYPE.HIVESERVER2);

        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, conf, null, sessionContext).defaultAnswer(Mockito.CALLS_REAL_METHODS));

        auth.applyAuthorizationConfigPolicy(conf);

        String hooks = conf.getVar(HiveConf.getConfVars("hive.exec.pre.hooks"));
        Assertions.assertTrue(hooks.contains("DisallowTransformHook"));
    }

    @Test
    public void test07_applyAuthorizationConfigPolicy_appendsDisallowHookForHS2WithExistingHooks() throws Exception {
        assumeHiveAvailable();
        HiveConf conf = new HiveConf();
        conf.setVar(HiveConf.getConfVars("hive.exec.pre.hooks"), "org.example.MyHook");

        HiveAuthzSessionContext sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.when(sessionContext.getClientType()).thenReturn(HiveAuthzSessionContext.CLIENT_TYPE.HIVESERVER2);

        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, conf, null, sessionContext).defaultAnswer(Mockito.CALLS_REAL_METHODS));

        auth.applyAuthorizationConfigPolicy(conf);

        String hooks = conf.getVar(HiveConf.getConfVars("hive.exec.pre.hooks"));
        Assertions.assertTrue(hooks.startsWith("org.example.MyHook"));
        Assertions.assertTrue(hooks.contains("DisallowTransformHook"));
    }

    @Test
    public void test08_applyAuthorizationConfigPolicy_noChangeWhenNotHS2() throws Exception {
        assumeHiveAvailable();
        HiveConf conf = new HiveConf();
        conf.setVar(HiveConf.getConfVars("hive.exec.pre.hooks"), "pre.Existing");

        HiveAuthzSessionContext sessionContext = Mockito.mock(HiveAuthzSessionContext.class);
        Mockito.when(sessionContext.getClientType()).thenReturn(HiveAuthzSessionContext.CLIENT_TYPE.HIVECLI);

        RangerHiveAuthorizerBase auth = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, conf, null, sessionContext).defaultAnswer(Mockito.CALLS_REAL_METHODS));

        auth.applyAuthorizationConfigPolicy(conf);

        String hooks = conf.getVar(HiveConf.getConfVars("hive.exec.pre.hooks"));
        Assertions.assertEquals("pre.Existing", hooks);
    }

    @Test
    public void test04_showPrivilegesThrowsNotImplemented() {
        RangerHiveAuthorizerBase auth      = Mockito.mock(RangerHiveAuthorizerBase.class, Mockito.withSettings().useConstructor(null, null, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));
        HivePrincipal            principal = Mockito.mock(HivePrincipal.class);
        HivePrivilegeObject      obj       = Mockito.mock(HivePrivilegeObject.class);

        Executable               call = () -> auth.showPrivileges(principal, obj);
        HiveAuthzPluginException ex   = Assertions.assertThrows(HiveAuthzPluginException.class, call);
        Assertions.assertTrue(ex.getMessage().contains("showPrivileges() not implemented"));
    }

    private static boolean canLoad(String cn) {
        try {
            Class.forName(cn);
            return true;
        } catch (Throwable t) {
            return false;
        }
    }

    private static void assumeHiveAvailable() {
        Assumptions.assumeTrue(canLoad("org.apache.hadoop.hive.conf.HiveConf"), "HiveConf not available in unit test runtime");
    }
}
