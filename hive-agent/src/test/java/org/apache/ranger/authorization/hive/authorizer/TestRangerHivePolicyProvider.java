/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hive.authorizer;

import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePolicyChangeListener;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HivePrivilegeObject.HivePrivilegeObjectType;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveResourceACLs;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveResourceACLs.AccessResult;
import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveResourceACLs.Privilege;
import org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizer.HiveObjectType;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngine;
import org.apache.ranger.plugin.policyengine.RangerResourceACLs;
import org.apache.ranger.plugin.policyevaluator.RangerPolicyEvaluator;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description : Unit Test cases for RangerHivePolicyProvider
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHivePolicyProvider {
    @Mock
    private RangerBasePlugin mockPlugin;

    @Mock
    private RangerHiveAuthorizer mockAuthorizer;

    @Test
    public void test01_registerListenerWiresThroughBasePlugin() {
        RangerHivePolicyProvider provider = new RangerHivePolicyProvider(mockPlugin, mockAuthorizer);
        HivePolicyChangeListener listener = mock(HivePolicyChangeListener.class);

        provider.registerHivePolicyChangeListener(listener);

        verify(mockPlugin, times(1)).registerAuthContextEventListener(any(RangerHivePolicyProvider.RangerHiveAuthContextListener.class));
    }

    @Test
    public void test02_getResourceACLsDelegatesToPluginAndConvertsResults() {
        RangerHivePolicyProvider provider = new RangerHivePolicyProvider(mockPlugin, mockAuthorizer);

        // Build Ranger ACLs
        RangerResourceACLs                           rangerAcls = new RangerResourceACLs();
        Map<String, RangerResourceACLs.AccessResult> userPerms  = new HashMap<>();
        userPerms.put("select", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_ALLOWED, null));
        userPerms.put("update", new RangerResourceACLs.AccessResult(RangerPolicyEvaluator.ACCESS_DENIED, null));
        rangerAcls.getUserACLs().put("alice", userPerms);

        when(mockPlugin.getResourceACLs(any(RangerAccessRequestImpl.class))).thenReturn(rangerAcls);

        RangerHiveResource hiveRes  = new RangerHiveResource(HiveObjectType.TABLE, "db", "t");
        HiveResourceACLs   hiveAcls = provider.getResourceACLs(hiveRes);

        assertNotNull(hiveAcls);
        Map<Privilege, AccessResult> alice = hiveAcls.getUserPermissions().get("alice");
        assertEquals(AccessResult.ALLOWED, alice.get(Privilege.SELECT));
        assertEquals(AccessResult.NOT_ALLOWED, alice.get(Privilege.UPDATE));

        ArgumentCaptor<RangerAccessRequestImpl> captor = ArgumentCaptor.forClass(RangerAccessRequestImpl.class);
        verify(mockPlugin).getResourceACLs(captor.capture());
        assertEquals(RangerPolicyEngine.ANY_ACCESS, captor.getValue().getAccessType());
    }

    @Test
    public void test03_getResourceACLsFromHivePrivilegeObjectUsesAuthorizerToCreateResource() {
        RangerHivePolicyProvider provider = new RangerHivePolicyProvider(mockPlugin, mockAuthorizer);
        HivePrivilegeObject      hiveObj  = new HivePrivilegeObject(HivePrivilegeObjectType.TABLE_OR_VIEW, "db1", "t1");
        RangerHiveResource       built    = new RangerHiveResource(HiveObjectType.TABLE, "db1", "t1");
        when(mockAuthorizer.createHiveResource(eq(hiveObj))).thenReturn(built);
        when(mockPlugin.getResourceACLs(any(RangerAccessRequestImpl.class))).thenReturn(new RangerResourceACLs());

        HiveResourceACLs hiveAcls = provider.getResourceACLs(hiveObj);
        assertNotNull(hiveAcls);
        verify(mockAuthorizer, times(1)).createHiveResource(eq(hiveObj));
    }

    @Test
    public void test01_contextChanged_notifiesRegisteredListeners() {
        RangerBasePlugin         plugin     = mock(RangerBasePlugin.class);
        RangerHiveAuthorizer     authorizer = new RangerHiveAuthorizer(null, null, null, null);
        RangerHivePolicyProvider provider   = new RangerHivePolicyProvider(plugin, authorizer);
        HivePolicyChangeListener listener   = mock(HivePolicyChangeListener.class);
        provider.registerHivePolicyChangeListener(listener);
        // trigger context change
        RangerHivePolicyProvider.RangerHiveAuthContextListener l = new RangerHivePolicyProvider.RangerHiveAuthContextListener();
        l.providerChangeListeners.add(listener);
        l.contextChanged();
        verify(listener, times(1)).notifyPolicyChange(null);
    }
}
