/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.ldapusersync.process;

import org.apache.ranger.unixusersync.config.UserGroupSyncConfig;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.extension.Extension;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.net.ssl.SSLSocketFactory;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.Socket;
import java.security.KeyStore;

import static java.util.Objects.requireNonNull;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for CustomSSLSocketFactory
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestCustomSSLSocketFactory {
    @Test
    public void testA_constructor_withStores_builds() throws Exception {
        resetConfig();
        File                ks  = createTempKeyStoreJks("p1pass");
        File                ts  = createTempKeyStoreJks("p1pass");
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.keystore.file.type", "JKS");
        cfg.setProperty("ranger.truststore.file.type", "JKS");
        cfg.setProperty("ranger.usersync.keystore.file", ks.getAbsolutePath());
        cfg.setProperty("ranger.usersync.keystore.password", "p1pass");
        cfg.setProperty("ranger.usersync.truststore.file", ts.getAbsolutePath());
        cfg.setProperty("ranger.usersync.truststore.password", "p1pass");
        SSLSocketFactory f = new CustomSSLSocketFactory();
        assertNotNull(f);
    }

    @Test
    public void testB_constructor_withValidKeyOrTrust_builds() throws Exception {
        resetConfig();
        File                ts  = createTempKeyStoreJks("changeit");
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.truststore.file.type", "JKS");
        cfg.setProperty("ranger.usersync.truststore.file", ts.getAbsolutePath());
        cfg.setProperty("ranger.usersync.truststore.password", "changeit");
        SSLSocketFactory f = new CustomSSLSocketFactory();
        assertNotNull(f);
    }

    @Test
    public void testC_getDefault_returnsFactory() throws Exception {
        resetConfig();
        // provide valid minimal store so default path always succeeds
        File                ts  = createTempKeyStoreJks("pp");
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.truststore.file.type", "JKS");
        cfg.setProperty("ranger.usersync.truststore.file", ts.getAbsolutePath());
        cfg.setProperty("ranger.usersync.truststore.password", "pp");
        assertNotNull(CustomSSLSocketFactory.getDefault());
    }

    @Test
    public void testD_methods_delegateToFactory() throws Exception {
        resetConfig();
        File                ks  = createTempKeyStoreJks("xxpass");
        File                ts  = createTempKeyStoreJks("xxpass");
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.keystore.file.type", "JKS");
        cfg.setProperty("ranger.truststore.file.type", "JKS");
        cfg.setProperty("ranger.usersync.keystore.file", ks.getAbsolutePath());
        cfg.setProperty("ranger.usersync.keystore.password", "xxpass");
        cfg.setProperty("ranger.usersync.truststore.file", ts.getAbsolutePath());
        cfg.setProperty("ranger.usersync.truststore.password", "xxpass");
        SSLSocketFactory f    = new CustomSSLSocketFactory();
        String[]         dflt = requireNonNull(f.getDefaultCipherSuites());
        String[]         supp = requireNonNull(f.getSupportedCipherSuites());
        assertArrayEquals(dflt, f.getDefaultCipherSuites());
        assertArrayEquals(supp, f.getSupportedCipherSuites());

        assertThrows(Throwable.class, () -> f.createSocket("localhost", 0));
        assertThrows(Throwable.class, () -> f.createSocket(InetAddress.getLoopbackAddress(), 0));
        assertThrows(Throwable.class, () -> f.createSocket(InetAddress.getLoopbackAddress(), 0, InetAddress.getLoopbackAddress(), 0));
        assertThrows(Throwable.class, () -> f.createSocket("localhost", 0, InetAddress.getLoopbackAddress(), 0));
        assertThrows(Throwable.class, () -> f.createSocket(new Socket(), "localhost", 0, true));
    }

    @Test
    public void testF_methods_delegateOverloads_viaInjectedRecordingFactory() throws Exception {
        resetConfig();
        SSLSocketFactory f = new CustomSSLSocketFactory();

        RecordingSSLSocketFactory recording = new RecordingSSLSocketFactory();
        Field                     fld       = CustomSSLSocketFactory.class.getDeclaredField("sockFactory");
        fld.setAccessible(true);
        fld.set(f, recording);

        f.createSocket("localhost", 1234);
        f.createSocket(InetAddress.getLoopbackAddress(), 1235);
        f.createSocket(InetAddress.getLoopbackAddress(), 1236, InetAddress.getLoopbackAddress(), 0);
        f.createSocket("localhost", 1237, InetAddress.getLoopbackAddress(), 0);
        f.createSocket(new Socket(), "localhost", 1238, true);

        assertTrue(recording.calledHostPort);
        assertTrue(recording.calledInetPort);
        assertTrue(recording.calledInetInet);
        assertTrue(recording.calledHostPortInet);
        assertTrue(recording.calledSocketHostPortAuto);
    }

    private static void resetConfig() throws Exception {
        java.lang.reflect.Field f = UserGroupSyncConfig.class.getDeclaredField("me");
        f.setAccessible(true);
        f.set(null, null);
    }

    private static File createTempKeyStoreJks(String password) throws Exception {
        File     file = File.createTempFile("tmpks", ".jks");
        KeyStore ks   = KeyStore.getInstance("JKS");
        ks.load(null, password.toCharArray());
        try (FileOutputStream fos = new FileOutputStream(file)) {
            ks.store(fos, password.toCharArray());
        }
        return file;
    }

    public static class MockitoExtension implements Extension {}

    public static class RecordingSSLSocketFactory extends SSLSocketFactory {
        public boolean calledHostPort;
        public boolean calledInetPort;
        public boolean calledInetInet;
        public boolean calledHostPortInet;
        public boolean calledSocketHostPortAuto;

        @Override
        public String[] getDefaultCipherSuites() {
            return new String[] {
                    "TLS"
            };
        }

        @Override
        public String[] getSupportedCipherSuites() {
            return new String[] {
                    "TLS"
            };
        }

        @Override
        public Socket createSocket(Socket s, String host, int port, boolean autoClose) {
            calledSocketHostPortAuto = true;
            return new Socket();
        }

        @Override
        public Socket createSocket(String host, int port) {
            calledHostPort = true;
            return new Socket();
        }

        @Override
        public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {
            calledHostPortInet = true;
            return new Socket();
        }

        @Override
        public Socket createSocket(InetAddress host, int port) {
            calledInetPort = true;
            return new Socket();
        }

        @Override
        public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) {
            calledInetInet = true;
            return new Socket();
        }
    }
}
