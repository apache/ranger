/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.usergroupsync;

import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.ugsyncutil.model.UgsyncAuditInfo;
import org.apache.ranger.unixusersync.config.UserGroupSyncConfig;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.extension.Extension;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UserGroupSync
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserGroupSync {
    @Test
    public void testA_syncUserGroup_enabled_invokesUpdateSink() throws Exception {
        UserGroupSyncConfig.getInstance().setProperty("ranger.usersync.enabled", "true");

        UserGroupSync userGroupSync = new UserGroupSync();
        StubSink      sink          = new StubSink();
        StubSource    source        = new StubSource();

        Field sinkField = UserGroupSync.class.getDeclaredField("ugSink");
        sinkField.setAccessible(true);
        sinkField.set(userGroupSync, sink);

        Field sourceField = UserGroupSync.class.getDeclaredField("ugSource");
        sourceField.setAccessible(true);
        sourceField.set(userGroupSync, source);

        Method syncMethod = UserGroupSync.class.getDeclaredMethod("syncUserGroup");
        syncMethod.setAccessible(true);
        syncMethod.invoke(userGroupSync);

        assertEquals(1, source.updateCalls);
    }

    @Test
    public void testB_syncUserGroup_disabled_noUpdate() throws Exception {
        UserGroupSyncConfig.getInstance().setProperty("ranger.usersync.enabled", "false");

        UserGroupSync userGroupSync = new UserGroupSync();
        StubSink      sink          = new StubSink();
        StubSource    source        = new StubSource();

        Field sinkField = UserGroupSync.class.getDeclaredField("ugSink");
        sinkField.setAccessible(true);
        sinkField.set(userGroupSync, sink);

        Field sourceField = UserGroupSync.class.getDeclaredField("ugSource");
        sourceField.setAccessible(true);
        sourceField.set(userGroupSync, source);

        Method syncMethod = UserGroupSync.class.getDeclaredMethod("syncUserGroup");
        syncMethod.setAccessible(true);
        syncMethod.invoke(userGroupSync);

        assertEquals(0, source.updateCalls);
    }

    @Test
    public void testC_run_passiveMode_doesNotInitializeSourceOrSink() throws Exception {
        // Reset HA singletons
        Class<?> serviceStateClz      = Class.forName("org.apache.ranger.ha.ServiceState");
        Field    serviceStateInstance = serviceStateClz.getDeclaredField("instance");
        serviceStateInstance.setAccessible(true);
        serviceStateInstance.set(null, null);

        Class<?> haInitClz  = Class.forName("org.apache.ranger.unixusersync.ha.UserSyncHAInitializerImpl");
        Field    haInstance = haInitClz.getDeclaredField("theInstance");
        haInstance.setAccessible(true);
        haInstance.set(null, null);

        // Inject a Hadoop Configuration with HA enabled into UserGroupSyncConfig
        Configuration haCfg = new Configuration();
        haCfg.set("ranger.service.name", "ranger-ugsync");
        haCfg.set("ranger-ugsync.server.ha.enabled", "true");

        UserGroupSyncConfig config               = UserGroupSyncConfig.getInstance();
        Field               userGroupConfigField = UserGroupSyncConfig.class.getDeclaredField("userGroupConfig");
        userGroupConfigField.setAccessible(true);
        userGroupConfigField.set(config, haCfg);

        UserGroupSync userGroupSync = new UserGroupSync();
        Thread        t             = new Thread(userGroupSync::run);
        t.setDaemon(true);
        t.start();

        Thread.sleep(30);
        t.interrupt();

        Field sinkField = UserGroupSync.class.getDeclaredField("ugSink");
        sinkField.setAccessible(true);
        Object sink = sinkField.get(userGroupSync);
        assertNull(sink);
    }

    @Test
    public void testD_run_activeMode_initializesAndPerformsInitialSync() throws Exception {
        // Reset HA singletons to pick up non-HA config
        Class<?> serviceStateClz      = Class.forName("org.apache.ranger.ha.ServiceState");
        Field    serviceStateInstance = serviceStateClz.getDeclaredField("instance");
        serviceStateInstance.setAccessible(true);
        serviceStateInstance.set(null, null);
        Class<?> haInitClz  = Class.forName("org.apache.ranger.unixusersync.ha.UserSyncHAInitializerImpl");
        Field    haInstance = haInitClz.getDeclaredField("theInstance");
        haInstance.setAccessible(true);
        haInstance.set(null, null);

        // Provide fresh non-HA configuration
        Configuration       activeCfg            = new Configuration();
        UserGroupSyncConfig config               = UserGroupSyncConfig.getInstance();
        Field               userGroupConfigField = UserGroupSyncConfig.class.getDeclaredField("userGroupConfig");
        userGroupConfigField.setAccessible(true);
        userGroupConfigField.set(config, activeCfg);

        config.setProperty("ranger.service.name", "ranger-ugsync");
        config.setProperty("ranger.usersync.sleeptimeinmillisbetweensynccycle", "1");
        config.setProperty("ranger.usersync.policymanager.testrun", "true");
        config.setProperty("ranger.usersync.enabled", "true");
        config.setProperty("ranger.usersync.source.impl.class", TestUserGroupSync.StubSource.class.getName());
        config.setProperty("ranger.usersync.sink.impl.class", TestUserGroupSync.StubSink.class.getName());
        TestUserGroupSync.StubSource.recordedUpdates = 0;

        UserGroupSync userGroupSync = new UserGroupSync();
        Thread        t             = new Thread(userGroupSync::run);
        t.setDaemon(true);
        t.start();

        Thread.sleep(200);
    }

    @Test
    public void testE_main_startsRun_andTriggersSyncPaths() throws Exception {
        // Reset HA singletons to pick up non-HA config
        Class<?> serviceStateClz      = Class.forName("org.apache.ranger.ha.ServiceState");
        Field    serviceStateInstance = serviceStateClz.getDeclaredField("instance");
        serviceStateInstance.setAccessible(true);
        serviceStateInstance.set(null, null);
        Class<?> haInitClz  = Class.forName("org.apache.ranger.unixusersync.ha.UserSyncHAInitializerImpl");
        Field    haInstance = haInitClz.getDeclaredField("theInstance");
        haInstance.setAccessible(true);
        haInstance.set(null, null);

        // Provide fresh non-HA configuration
        Configuration       activeCfg            = new Configuration();
        UserGroupSyncConfig config               = UserGroupSyncConfig.getInstance();
        Field               userGroupConfigField = UserGroupSyncConfig.class.getDeclaredField("userGroupConfig");
        userGroupConfigField.setAccessible(true);
        userGroupConfigField.set(config, activeCfg);

        config.setProperty("ranger.service.name", "ranger-ugsync");
        config.setProperty("ranger.usersync.sleeptimeinmillisbetweensynccycle", "1");
        config.setProperty("ranger.usersync.policymanager.testrun", "true");
        config.setProperty("ranger.usersync.enabled", "true");
        config.setProperty("ranger.usersync.source.impl.class", TestUserGroupSync.StubSource.class.getName());
        config.setProperty("ranger.usersync.sink.impl.class", TestUserGroupSync.StubSink.class.getName());

        int    before = TestUserGroupSync.StubSource.recordedUpdates;
        Thread t      = new Thread(() -> UserGroupSync.main(new String[] {}));
        t.setDaemon(true);
        t.start();
        Thread.sleep(200);
        assertTrue(TestUserGroupSync.StubSource.recordedUpdates > before);
    }

    public static class MockitoExtension implements Extension {}

    public static class StubSink implements UserGroupSink {
        public boolean inited;

        public StubSink() {}

        @Override
        public void init() {
            inited = true;
        }

        @Override
        public void postUserGroupAuditInfo(UgsyncAuditInfo ugsyncAuditInfo) {}

        @Override
        public void addOrUpdateUsersGroups(Map<String, Map<String, String>> sourceGroups, Map<String, Map<String, String>> sourceUsers, Map<String, Set<String>> sourceGroupUsers, boolean computeDeletes) {}
    }

    public static class StubSource implements UserGroupSource {
        public static volatile int recordedUpdates;

        public int updateCalls;

        public StubSource() {}

        @Override
        public void init() {}

        @Override
        public boolean isChanged() {
            return true;
        }

        @Override
        public void updateSink(UserGroupSink sink) {
            updateCalls++;
            recordedUpdates++;
        }
    }
}
