/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.usergroupsync;

import org.apache.ranger.plugin.util.RangerMetricsUtil;
import org.apache.ranger.unixusersync.config.UserGroupSyncConfig;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.extension.Extension;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UserGroupSyncConfig
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserSyncMetricsProducer {
    @Test
    public void testA_writeJVMMetrics_createsFile_andWritesJson() throws Exception {
        Path dir     = Files.createTempDirectory("ugsync-metrics-");
        Path metrics = dir.resolve("metric.json");

        UserGroupSyncConfig config = UserGroupSyncConfig.getInstance();
        config.setProperty("ranger.usersync.metrics.filepath", dir.toString());
        config.setProperty("ranger.usersync.metrics.filename", metrics.getFileName().toString());
        config.setProperty("ranger.usersync.metrics.frequencytimeinmillis", "5");

        UserSyncMetricsProducer producer = new UserSyncMetricsProducer();
        Thread                  t        = new Thread(producer::run);
        t.setDaemon(true);
        t.start();

        long start = System.currentTimeMillis();
        while ((!Files.exists(metrics) || Files.size(metrics) == 0) && System.currentTimeMillis() - start < 1000) {
            TimeUnit.MILLISECONDS.sleep(10);
        }
        assertTrue(Files.exists(metrics));

        // stop the loop
        Field shutdownField = UserSyncMetricsProducer.class.getDeclaredField("shutdownFlag");
        shutdownField.setAccessible(true);
        shutdownField.set(producer, true);
        t.interrupt();
    }

    @Test
    public void testB_writeJVMMetrics_setsRoleActive_whenHAEnabled() throws Exception {
        Path dir     = Files.createTempDirectory("ugsync-metrics-ha-");
        Path metrics = dir.resolve("metric.json");

        UserGroupSyncConfig config = UserGroupSyncConfig.getInstance();
        config.setProperty("ranger.usersync.metrics.filepath", dir.toString());
        config.setProperty("ranger.usersync.metrics.filename", metrics.getFileName().toString());
        config.setProperty("ranger-ugsync.server.ha.enabled", "true");
        config.setProperty("ranger.usersync.metrics.frequencytimeinmillis", "5");

        RangerMetricsUtil.setIsRoleActive(0);

        UserSyncMetricsProducer producer = new UserSyncMetricsProducer();
        Thread                  t        = new Thread(producer::run);
        t.setDaemon(true);
        t.start();

        long start = System.currentTimeMillis();
        while ((!Files.exists(metrics) || Files.size(metrics) == 0) && System.currentTimeMillis() - start < 1000) {
            TimeUnit.MILLISECONDS.sleep(10);
        }
        assertTrue(Files.exists(metrics));
        String content = new String(Files.readAllBytes(metrics), StandardCharsets.UTF_8);
        assertTrue(content.contains("\"jvm\""));
        assertEquals(0, RangerMetricsUtil.getIsRoleActive());

        Field shutdownField = UserSyncMetricsProducer.class.getDeclaredField("shutdownFlag");
        shutdownField.setAccessible(true);
        shutdownField.set(producer, true);
        t.interrupt();
    }

    @Test
    public void testC_run_writesPeriodically_whenFileConfigured() throws Exception {
        Path                dir    = Files.createTempDirectory("ugsync-metrics-run-");
        UserGroupSyncConfig config = UserGroupSyncConfig.getInstance();
        config.setProperty("ranger.usersync.metrics.filepath", dir.toString());
        config.setProperty("ranger.usersync.metrics.filename", "metric.json");
        config.setProperty("ranger.usersync.metrics.frequencytimeinmillis", "5");

        UserSyncMetricsProducer producer = new UserSyncMetricsProducer();
        Thread                  t        = new Thread(producer::run);
        t.setDaemon(true);
        t.start();

        Path metrics = dir.resolve("metric.json");
        long start   = System.currentTimeMillis();
        while ((!Files.exists(metrics) || Files.size(metrics) == 0) && System.currentTimeMillis() - start < 1000) {
            TimeUnit.MILLISECONDS.sleep(10);
        }
        File f = metrics.toFile();
        assertTrue(f.exists());
        assertTrue(f.length() > 0);

        Field shutdownField = UserSyncMetricsProducer.class.getDeclaredField("shutdownFlag");
        shutdownField.setAccessible(true);
        shutdownField.set(producer, true);
        t.interrupt();
    }

    @Test
    public void testD_run_noFileConfigured_logsAndExits() throws Exception {
        UserGroupSyncConfig config = UserGroupSyncConfig.getInstance();
        config.setProperty("ranger.usersync.metrics.filepath", "/path/does/not/exist/");
        config.setProperty("ranger.usersync.metrics.filename", "metric.json");

        UserSyncMetricsProducer producer = new UserSyncMetricsProducer();

        producer.run();

        Field shutdownField = UserSyncMetricsProducer.class.getDeclaredField("shutdownFlag");
        shutdownField.setAccessible(true);
        assertNotNull(shutdownField.get(producer));
    }

    public static class MockitoExtension implements Extension {}
}
