/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.unixusersync.ha;

import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.ha.CuratorFactory;
import org.apache.ranger.ha.service.ServiceManager;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.extension.Extension;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UserSyncHAInitializerImpl
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserSyncHAInitializerImpl {
    @Test
    public void testA_stop_invokesServiceAndCurator() throws Exception {
        Configuration             conf = new Configuration();
        UserSyncHAInitializerImpl impl = UserSyncHAInitializerImpl.getInstance(conf);

        RecordingServiceManager sm = new RecordingServiceManager();
        CuratorFactory          cf = CuratorFactory.getInstance(conf);

        setPrivateField(impl, "serviceManager", sm);
        setPrivateFieldOnSuperclass(impl, "curatorFactory", cf);

        impl.stop();

        assertTrue(sm.stopped);
        // cannot directly assert curatorFactory.close() effect; branch is covered by non-null set
    }

    private static void setPrivateField(Object target, String field, Object value) throws Exception {
        Field f = target.getClass().getDeclaredField(field);
        f.setAccessible(true);
        f.set(target, value);
    }

    private static void setPrivateFieldOnSuperclass(Object target, String field, Object value) throws Exception {
        Field f = target.getClass().getSuperclass().getDeclaredField(field);
        f.setAccessible(true);
        f.set(target, value);
    }

    public static class MockitoExtension implements Extension {}

    public static class RecordingServiceManager extends ServiceManager {
        public boolean stopped;

        public RecordingServiceManager() {
            super(new ArrayList<>());
        }

        @Override
        public void stop() {
            stopped = true;
        }
    }
}
