/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.unixusersync.config;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UserGroupSyncConfig
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserGroupSyncConfig {
    @Test
    public void testA_getSyncSource_trimsAndNullsEmpty() {
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.usersync.sync.source", "  LDAP/AD  ");
        assertEquals("LDAP/AD", cfg.getSyncSource());

        cfg.setProperty("ranger.usersync.sync.source", "   ");
        assertNull(cfg.getSyncSource());
    }

    @Test
    public void testB_getContextReferral_defaultsAndLowercases() {
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        // when not set, default remains "ignore"
        assertEquals("ignore", cfg.getContextReferral());

        cfg.setProperty("ranger.usersync.ldap.referral", "FOLLOW  ");
        assertEquals("follow", cfg.getContextReferral());

        cfg.setProperty("ranger.usersync.ldap.referral", "   ");
        assertEquals("ignore", cfg.getContextReferral());
    }

    @Test
    public void testC_getLdapBindPassword_readsFromAlias_whenKeystoreProvided() {
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        // Provide a keystore path (no actual file is read by CredentialReader during unit tests)
        cfg.setProperty("ranger.usersync.credstore.filename", "/tmp/nonexistent.jceks");
        // Ensure keystore type default is not bcfks
        cfg.setProperty("ranger.usersync.ssl.keystore.type", "jks");
        // This call should not throw and simply return whatever is in password property (likely default or null)
        String ignored = cfg.getLdapBindPassword();
        // Now set direct password using correct property key and ensure it is returned
        cfg.setProperty("ranger.usersync.ldap.ldapbindpassword", "directPass");
        assertEquals("directPass", cfg.getLdapBindPassword());
    }

    @Test
    public void testD_getSSLStorePathPasswords_updateFromAlias_noCrash() {
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        cfg.setProperty("ranger.usersync.credstore.filename", "/tmp/nonexistent.jceks");
        cfg.setProperty("ranger.usersync.ssl.keystore.type", "jks");

        // Touch properties using correct parameter keys and ensure returned
        cfg.setProperty("ranger.usersync.keystore.password", "ksp");
        cfg.setProperty("ranger.usersync.truststore.password", "tsp");
        assertEquals("ksp", cfg.getSSLKeyStorePathPassword());
        assertEquals("tsp", cfg.getSSLTrustStorePathPassword());
    }

    @Test
    public void testE_getUserSyncMetricsFileName_prefersConfiguredOrLogdir_thenDefaults() throws Exception {
        UserGroupSyncConfig cfg = UserGroupSyncConfig.getInstance();
        // Create a temp directory to act as metrics path or logdir
        Path   tmpDir = Files.createTempDirectory("ugsync-metrics");
        String tmp    = tmpDir.toFile().getAbsolutePath();

        // 1) Direct metrics path
        cfg.setProperty("ranger.usersync.metrics.filepath", tmp);
        cfg.setProperty("ranger.usersync.metrics.filename", "metrics.log");
        String p1 = cfg.getUserSyncMetricsFileName();
        assertNotNull(p1);
        assertTrue(p1.endsWith("/metrics.log"));

        // 2) Use usersync logdir when filepath blank
        cfg.setProperty("ranger.usersync.metrics.filepath", "");
        cfg.setProperty("ranger.usersync.logdir", tmp);
        String p2 = cfg.getUserSyncMetricsFileName();
        assertNotNull(p2);
        assertTrue(p2.startsWith(tmp));

        // 3) Use system property logdir when usersync logdir blank
        cfg.setProperty("ranger.usersync.logdir", "");
        System.setProperty("logdir", tmp);
        String p3 = cfg.getUserSyncMetricsFileName();
        assertNotNull(p3);
        assertTrue(p3.startsWith(tmp));

        // 4) Fallback to default relative path if both blank (ensure it resolves to current dir prefixed path or null if doesn't exist)
        cfg.setProperty("ranger.usersync.metrics.filepath", "");
        System.clearProperty("logdir");
        // Create default path to make it resolvable
        File def = new File("usersync/logs");
        def.mkdirs();
        String p4 = cfg.getUserSyncMetricsFileName();
        assertNotNull(p4);
    }
}
