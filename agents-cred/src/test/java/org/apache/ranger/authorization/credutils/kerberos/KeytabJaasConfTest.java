/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.credutils.kerberos;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.login.AppConfigurationEntry;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @generated by Cursor
 * @description : Unit Test cases for KeytabJaasConf
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class KeytabJaasConfTest {
    @Test
    public void getAppConfigurationEntry_includesExpectedOptions_andIsImmutable() {
        KeytabJaasConf          conf    = new KeytabJaasConf("user@EXAMPLE.COM", "/tmp/user.keytab", true);
        AppConfigurationEntry[] entries = conf.getAppConfigurationEntry("any");
        assertNotNull(entries);
        assertEquals(1, entries.length);

        AppConfigurationEntry entry = entries[0];
        assertEquals("com.sun.security.auth.module.Krb5LoginModule", entry.getLoginModuleName());
        assertEquals(AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, entry.getControlFlag());

        Map<String, ?> options = entry.getOptions();
        assertEquals("user@EXAMPLE.COM", options.get("principal"));
        assertEquals(Boolean.TRUE.toString(), options.get("isInitiator"));
        assertEquals(Boolean.TRUE.toString(), options.get("storeKey"));
        assertEquals(Boolean.TRUE.toString(), options.get("debug"));
        assertEquals(Boolean.TRUE.toString(), options.get("useKeyTab"));
        assertEquals("/tmp/user.keytab", options.get("keyTab"));
        assertEquals(Boolean.TRUE.toString(), options.get("doNotPrompt"));

        assertThrows(UnsupportedOperationException.class, () -> ((Map) options).put("x", "y"));
    }

    @Test
    public void getAppConfigurationEntry_respectsDebugFlag() {
        KeytabJaasConf          conf    = new KeytabJaasConf("user@EXAMPLE.COM", "/tmp/user.keytab", false);
        AppConfigurationEntry[] entries = conf.getAppConfigurationEntry("any");
        Map<String, ?>          options = entries[0].getOptions();
        assertEquals(Boolean.FALSE.toString(), options.get("debug"));
    }
}
