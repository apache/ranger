/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authentication.unix.jaas;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.jvnet.libpam.UnixUser;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @generated by Cursor
 * @description : Unit Test cases for PamPrincipal
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPamPrincipal {
    @Test
    public void test01_getters_returnValuesFromUnixUser() {
        Set<String> groups = new HashSet<>(Arrays.asList("g1", "g2"));
        UnixUser    user   = Mockito.mock(UnixUser.class);
        Mockito.when(user.getUserName()).thenReturn("alice");
        Mockito.when(user.getGecos()).thenReturn("gecos");
        Mockito.when(user.getDir()).thenReturn("/home/alice");
        Mockito.when(user.getShell()).thenReturn("/bin/bash");
        Mockito.when(user.getUID()).thenReturn(1000);
        Mockito.when(user.getGID()).thenReturn(100);
        Mockito.when(user.getGroups()).thenReturn(groups);

        PamPrincipal p = new PamPrincipal(user);
        assertEquals("alice", p.getName());
        assertEquals("gecos", p.getGecos());
        assertEquals("/home/alice", p.getHomeDir());
        assertEquals("/bin/bash", p.getShell());
        assertEquals(1000, p.getUid());
        assertEquals(100, p.getGid());
        assertEquals(groups, p.getGroups());
        assertThrows(UnsupportedOperationException.class, () -> p.getGroups().add("x"));
    }
}
