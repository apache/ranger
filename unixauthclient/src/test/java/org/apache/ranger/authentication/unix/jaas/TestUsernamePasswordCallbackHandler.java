/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authentication.unix.jaas;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;

import java.io.IOException;
import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UsernamePasswordCallbackHandler
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUsernamePasswordCallbackHandler {
    @Test
    public void test01_handle_name_only_constructorBug_setsNullName() throws IOException, UnsupportedCallbackException {
        UsernamePasswordCallbackHandler handler      = new UsernamePasswordCallbackHandler("alice", "secret");
        NameCallback                    nameCallback = new NameCallback("User:");
        handler.handle(new Callback[] {nameCallback});
        assertNull(nameCallback.getName());
    }

    @Test
    public void test02_handle_password_throwsNPE_whenPasswordNull() {
        UsernamePasswordCallbackHandler handler          = new UsernamePasswordCallbackHandler(null, null);
        PasswordCallback                passwordCallback = new PasswordCallback("Pass:", false);
        assertThrows(NullPointerException.class, () -> handler.handle(new Callback[] {passwordCallback}));
    }

    @Test
    public void test03_handle_setsNameAndPassword_whenFieldsInjected() throws Exception {
        UsernamePasswordCallbackHandler handler = new UsernamePasswordCallbackHandler(null, null);

        Field userField = UsernamePasswordCallbackHandler.class.getDeclaredField("user");
        userField.setAccessible(true);
        userField.set(handler, "bob");

        Field pwdField = UsernamePasswordCallbackHandler.class.getDeclaredField("password");
        pwdField.setAccessible(true);
        pwdField.set(handler, "p@ss");

        NameCallback     nameCallback     = new NameCallback("User:");
        PasswordCallback passwordCallback = new PasswordCallback("Pass:", false);

        handler.handle(new Callback[] {nameCallback, passwordCallback});

        assertEquals("bob", nameCallback.getName());
        assertArrayEquals("p@ss".toCharArray(), passwordCallback.getPassword());
    }

    @Test
    public void test04_handle_unsupportedCallback_throws() {
        UsernamePasswordCallbackHandler handler     = new UsernamePasswordCallbackHandler(null, null);
        Callback                        unsupported = new Callback() {};
        assertThrows(UnsupportedCallbackException.class, () -> handler.handle(new Callback[] {unsupported}));
    }
}
