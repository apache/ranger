/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authentication.unix.jaas;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @generated by Cursor
 * @description : Unit Test cases for ConsolePromptCallbackHandler
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestConsolePromptCallbackHandler {
    @Test
    public void test01_handle_setsNameAndPassword() throws IOException, UnsupportedCallbackException {
        String input = "alice\nsecret\n";
        System.setIn(new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)));

        ConsolePromptCallbackHandler handler          = new ConsolePromptCallbackHandler();
        NameCallback                 nameCallback     = new NameCallback("User: ");
        PasswordCallback             passwordCallback = new PasswordCallback("Pass: ", false);

        handler.handle(new Callback[] {nameCallback, passwordCallback});

        assertEquals("alice", nameCallback.getName());
        assertArrayEquals("secret".toCharArray(), passwordCallback.getPassword());
    }

    @Test
    public void test02_handle_unknownCallback_doesNotThrow() throws IOException, UnsupportedCallbackException {
        System.setIn(new ByteArrayInputStream("\n".getBytes(StandardCharsets.UTF_8)));
        ConsolePromptCallbackHandler handler = new ConsolePromptCallbackHandler();
        Callback                     unknown = new Callback() {};
        handler.handle(new Callback[] {unknown});
    }
}
