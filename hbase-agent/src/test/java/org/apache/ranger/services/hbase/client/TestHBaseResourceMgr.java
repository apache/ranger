/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hbase.client;

import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.plugin.util.TimedEventUtil;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @generated by Cursor
 * @description <Unit Test for HBaseResourceMgr class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHBaseResourceMgr {
    @Test
    public void test01_connectionTest_delegates() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        try (MockedStatic<HBaseClient> clientStatic = Mockito.mockStatic(HBaseClient.class)) {
            Map<String, Object> expected = new HashMap<>();
            expected.put("connectivityStatus", true);
            clientStatic.when(() -> HBaseClient.connectionTest("svc", cfg)).thenReturn(expected);

            Map<String, Object> ret = HBaseResourceMgr.connectionTest("svc", cfg);
            assertEquals(expected, ret);
        }
    }

    @Test
    public void test01a_connectionTest_propagatesException() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        try (MockedStatic<HBaseClient> clientStatic = Mockito.mockStatic(HBaseClient.class)) {
            clientStatic.when(() -> HBaseClient.connectionTest("svc", cfg)).thenThrow(new HadoopException("boom"));
            assertThrows(HadoopException.class, () -> HBaseResourceMgr.connectionTest("svc", cfg));
        }
    }

    @Test
    public void test02_getHBaseResource_tableFlow() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("table");
        ctx.setUserInput("tab");

        List<String> existingTables = new ArrayList<>();
        Map<String, List<String>> resources = new HashMap<>();
        resources.put("table", existingTables);
        ctx.setResources(resources);

        try (MockedConstruction<HBaseConnectionMgr> mgrConstr = Mockito.mockConstruction(HBaseConnectionMgr.class,
                (mgrMock, c) -> {
                    HBaseClient client = Mockito.mock(HBaseClient.class);
                    Mockito.when(mgrMock.getHBaseConnection(Mockito.eq("svc"), Mockito.eq("type"), Mockito.any()))
                            .thenReturn(client);
                    Mockito.when(client.getTableList(Mockito.eq("tab.*".replaceAll("\\*", ".\\*")),
                            Mockito.eq(existingTables)))
                            .thenReturn(new ArrayList<>(Arrays.asList("tab1", "tab2")));
                }); MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class)) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<List<String>> c = (Callable<List<String>>) inv
                                .getArgument(0);
                        return c.call();
                    });

            Map<String, String> conf = new HashMap<>();
            conf.put("k", "v");
            List<String> ret = HBaseResourceMgr.getHBaseResource("svc", "type", conf, ctx);
            assertNotNull(ret);
            assertEquals(2, ret.size());
        }
    }

    @Test
    public void test03_getHBaseResource_columnFamilyFlow() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("column-family");
        ctx.setUserInput("cf");

        List<String> existingTables = new ArrayList<>();
        existingTables.add("t1");
        Map<String, List<String>> resources = new HashMap<>();
        resources.put("table", existingTables);
        ctx.setResources(resources);

        try (MockedConstruction<HBaseConnectionMgr> mgrConstr = Mockito.mockConstruction(HBaseConnectionMgr.class,
                (mgrMock, c) -> {
                    HBaseClient client = Mockito.mock(HBaseClient.class);
                    Mockito.when(mgrMock.getHBaseConnection(Mockito.eq("svc"), Mockito.eq("type"), Mockito.any()))
                            .thenReturn(client);
                    Mockito.when(client.getColumnFamilyList(Mockito.eq("cf.*".replaceAll("\\*", ".\\*")),
                            Mockito.eq(existingTables), Mockito.isNull()))
                            .thenReturn(new ArrayList<>(Arrays.asList("cf1", "cf2")));
                }); MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class)) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<List<String>> c = (Callable<List<String>>) inv
                                .getArgument(0);
                        return c.call();
                    });

            Map<String, String> conf = new HashMap<>();
            conf.put("k", "v");
            List<String> ret = HBaseResourceMgr.getHBaseResource("svc", "type", conf, ctx);
            assertNotNull(ret);
            assertEquals(2, ret.size());
        }
    }

    @Test
    public void test04_getHBaseResource_propagatesException() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("table");
        ctx.setUserInput("tab");

        try (MockedConstruction<HBaseConnectionMgr> mgrConstr = Mockito.mockConstruction(HBaseConnectionMgr.class,
                (mgrMock, c) -> {
                    Mockito.when(mgrMock.getHBaseConnection(Mockito.eq("svc"), Mockito.eq("type"), Mockito.any()))
                            .thenThrow(new HadoopException("boom"));
                }); MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class)) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<List<String>> callable = (Callable<List<String>>) inv.getArgument(0);
                        return callable.call();
                    });

            Map<String, String> conf = new HashMap<>();
            conf.put("k", "v");
            assertThrows(HadoopException.class, () -> HBaseResourceMgr.getHBaseResource("svc", "type", conf, ctx));
        }
    }

    @Test
    public void test05_getHBaseResource_nullInputs_returnNull() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        // userInput and resourceName remain null

        List<String> ret = HBaseResourceMgr.getHBaseResource("svc", "type", new HashMap<>(), ctx);
        assertNull(ret);
    }

    @Test
    public void test06_getHBaseResource_unknownResource_returnsNull() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("unknown");
        ctx.setUserInput("abc");

        try (MockedConstruction<HBaseConnectionMgr> mgrConstr = Mockito.mockConstruction(HBaseConnectionMgr.class,
                (mgrMock, c) -> {
                    Mockito.when(mgrMock.getHBaseConnection(Mockito.eq("svc"), Mockito.eq("type"), Mockito.any()))
                            .thenReturn(Mockito.mock(HBaseClient.class));
                })) {
            List<String> ret = HBaseResourceMgr.getHBaseResource("svc", "type", new HashMap<>(), ctx);
            assertNull(ret);
        }
    }

    @Test
    public void test07_getHBaseResource_emptyColumnFamilyInput_returnsNull() throws Exception {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("column-family");
        ctx.setUserInput("");

        Map<String, List<String>> resources = new HashMap<>();
        resources.put("table", new ArrayList<>());
        ctx.setResources(resources);

        try (MockedConstruction<HBaseConnectionMgr> mgrConstr = Mockito.mockConstruction(HBaseConnectionMgr.class,
                (mgrMock, c) -> {
                    Mockito.when(mgrMock.getHBaseConnection(Mockito.eq("svc"), Mockito.eq("type"), Mockito.any()))
                            .thenReturn(Mockito.mock(HBaseClient.class));
                })) {
            List<String> ret = HBaseResourceMgr.getHBaseResource("svc", "type", new HashMap<>(), ctx);
            assertNull(ret);
        }
    }
}
