/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hbase.client;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.MasterNotRunningException;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.ZooKeeperConnectionException;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.ColumnFamilyDescriptor;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.TableDescriptor;
import org.apache.ranger.plugin.client.HadoopException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.Subject;

import java.io.IOException;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description <Unit Test for HBaseClient class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHBaseClient {
    @Test
    public void test01_connectionTest_success() throws Exception {
        Map<String, String> configs = new HashMap<>();
        configs.put("username", "user");

        try (MockedConstruction<HBaseClient> mockedConstruction = Mockito.mockConstruction(HBaseClient.class,
                (mock, context) -> {
                    Mockito.when(mock.getHBaseStatus()).thenReturn(true);
                })) {
            Map<String, Object> result = HBaseClient.connectionTest("svc", configs);
            assertNotNull(result);
            assertEquals(true, result.get("connectivityStatus"));
            assertEquals("ConnectionTest Successful", result.get("message"));
        }
    }

    @Test
    public void test02_connectionTest_failure() throws Exception {
        Map<String, String> configs = new HashMap<>();
        configs.put("username", "user");

        try (MockedConstruction<HBaseClient> mockedConstruction = Mockito.mockConstruction(HBaseClient.class,
                (mock, context) -> {
                    Mockito.when(mock.getHBaseStatus()).thenReturn(false);
                })) {
            Map<String, Object> result = HBaseClient.connectionTest("svc", configs);
            assertNotNull(result);
            assertEquals(false, result.get("connectivityStatus"));
            assertTrue(((String) result.get("description")).contains("Unable to retrieve any databases"));
        }
    }

    @Test
    public void test03_getHBaseStatus_success() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class);
                MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class))).thenAnswer(inv -> null);

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            boolean status = client.getHBaseStatus();
            assertTrue(status);
        }
    }

    @Test
    public void test04_getHBaseStatus_zkException() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class);
                MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class)))
                    .thenThrow(new ZooKeeperConnectionException("zk fail"));

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            HadoopException ex = assertThrows(HadoopException.class, client::getHBaseStatus);
            assertTrue(ex.getMessage().contains("Unable to connect to `ZooKeeper`"));
        }
    }

    @Test
    public void test05_getHBaseStatus_masterNotRunning() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class);
                MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class)))
                    .thenThrow(new MasterNotRunningException("master down"));

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            HadoopException ex = assertThrows(HadoopException.class, client::getHBaseStatus);
            assertTrue(ex.getMessage().contains("Master"));
        }
    }

    @Test
    public void test06_getHBaseStatus_ioException() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class);
                MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class)))
                    .thenThrow(new IOException("io"));

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            HadoopException ex = assertThrows(HadoopException.class, client::getHBaseStatus);
            assertTrue(ex.getMessage().contains("Unable to check availability of Hbase environment"));
        }
    }

    @Test
    public void test07_getHBaseStatus_throwable() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class);
                MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class)))
                    .thenThrow(new RuntimeException("boom"));

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            HadoopException ex = assertThrows(HadoopException.class, client::getHBaseStatus);
            assertTrue(ex.getMessage().contains("Unable to check availability of Hbase environment"));
        }
    }

    @Test
    public void test08_getTableList_filtersAndExceptions() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);

            TableDescriptor td1 = Mockito.mock(TableDescriptor.class);
            TableDescriptor td2 = Mockito.mock(TableDescriptor.class);
            TableName tn1 = TableName.valueOf("t1");
            TableName tn2 = TableName.valueOf("t2");
            Mockito.when(td1.getTableName()).thenReturn(tn1);
            Mockito.when(td2.getTableName()).thenReturn(tn2);
            Mockito.when(admin.listTableDescriptors(Mockito.any(Pattern.class))).thenReturn(Arrays.asList(td1, td2));

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            List<String> existing = new ArrayList<>(Collections.singletonList("t1"));
            List<String> ret = client.getTableList("t.*", existing);
            assertEquals(Collections.singletonList("t2"), ret);

            Mockito.when(admin.listTableDescriptors(Mockito.any(Pattern.class))).thenThrow(new IOException("io"));
            assertThrows(HadoopException.class, () -> client.getTableList("t.*", null));
        }
    }

    @Test
    public void test09_getColumnFamilyList_filtersAndExceptions() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> action = inv.getArgument(1);
                        return action.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);

            TableDescriptor td = Mockito.mock(TableDescriptor.class);
            TableName tn = TableName.valueOf("t1");
            Mockito.when(admin.getDescriptor(tn)).thenReturn(td);
            ColumnFamilyDescriptor cfd1 = mockCfd("cf1");
            ColumnFamilyDescriptor cfd2 = mockCfd("cf2");
            Mockito.when(td.getColumnFamilies()).thenReturn(new ColumnFamilyDescriptor[] {cfd1, cfd2});

            HBaseClient client = new TestableHBaseClient("svc", props, subject);

            List<String> tables = new ArrayList<>(Collections.singletonList("t1"));
            List<String> existing = new ArrayList<>(Collections.singletonList("cf1"));
            List<String> ret = client.getColumnFamilyList("cf.*", tables, existing);
            assertEquals(Collections.singletonList("cf2"), ret);

            Mockito.when(admin.getDescriptor(tn)).thenThrow(new IOException("io"));
            assertThrows(HadoopException.class, () -> client.getColumnFamilyList("cf.*", tables, null));
        }
    }

    @Test
    public void test10_addDefaultHBaseProp_behavior() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("hadoop.security.authorization", "false");
        cfg.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            HBaseClient client = new TestableHBaseClient("svc", cfg, null);
            Assertions.assertNotNull(client);
            assertTrue(cfg.containsKey("zookeeper.znode.parent"));
            assertEquals("/hbase-unsecure", cfg.get("zookeeper.znode.parent"));
        }
    }

    @Test
    public void test10a_addDefaultHBaseProp_existingZnodeNoChange() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("hadoop.security.authorization", "false");
        cfg.put("zookeeper.znode.parent", "/custom");
        cfg.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            HBaseClient client = new TestableHBaseClient("svc", cfg, null);
            Assertions.assertNotNull(client);
            assertEquals("/custom", cfg.get("zookeeper.znode.parent"));
        }
    }

    @Test
    public void test11_setClientConfigValues_updatesExistingKeysOnly() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("username", "user");
        cfg.put("x", "Y");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            Subject subject = Mockito.mock(Subject.class);
            HBaseClient client = new TestableHBaseClient("svc", cfg, subject);

            // Clear initial conf.set calls from constructor
            Mockito.clearInvocations(conf);

            Mockito.doReturn(null).when(conf).get(Mockito.anyString());
            Mockito.doReturn("different").when(conf).get("x");
            try (MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                    MockedStatic<HBaseAdmin> adminStatic = Mockito.mockStatic(HBaseAdmin.class)) {
                subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                        .thenAnswer(inv -> {
                            PrivilegedAction<?> action = inv.getArgument(1);
                            return action.run();
                        });

                adminStatic.when(() -> HBaseAdmin.available(Mockito.any(Configuration.class))).thenAnswer(inv -> null);

                client.getHBaseStatus();
                Mockito.verify(conf).set("x", "Y");
            }
        }
    }

    @Test
    public void test12_getTableList_zkException() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenThrow(new ZooKeeperConnectionException("zk"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            assertThrows(HadoopException.class, () -> client.getTableList("t.*", null));
        }
    }

    @Test
    public void test13_getTableList_masterNotRunning() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);
            Mockito.when(admin.listTableDescriptors(Mockito.any(Pattern.class)))
                    .thenThrow(new MasterNotRunningException("down"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            assertThrows(HadoopException.class, () -> client.getTableList("t.*", null));
        }
    }

    @Test
    public void test14_getTableList_throwable() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);
            Mockito.when(admin.listTableDescriptors(Mockito.any(Pattern.class)))
                    .thenThrow(new RuntimeException("boom"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            assertThrows(HadoopException.class, () -> client.getTableList("t.*", null));
        }
    }

    @Test
    public void test15_getColumnFamilyList_zkException() throws Exception {
        Map<String, String> props = new HashMap<>();

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenThrow(new ZooKeeperConnectionException("zk"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            List<String> tables = new ArrayList<>(Collections.singletonList("t1"));
            assertThrows(HadoopException.class, () -> client.getColumnFamilyList("cf.*", tables, null));
        }
    }

    @Test
    public void test16_getColumnFamilyList_masterNotRunning() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);

            Mockito.when(admin.getDescriptor(Mockito.any(TableName.class)))
                    .thenThrow(new MasterNotRunningException("down"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            List<String> tables = new ArrayList<>(Collections.singletonList("t1"));
            assertThrows(HadoopException.class, () -> client.getColumnFamilyList("cf.*", tables, null));
        }
    }

    @Test
    public void test17_getColumnFamilyList_securityException() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenThrow(new SecurityException("sec"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            List<String> tables = new ArrayList<>(Collections.singletonList("t1"));
            assertThrows(HadoopException.class, () -> client.getColumnFamilyList("cf.*", tables, null));
        }
    }

    @Test
    public void test18_getColumnFamilyList_throwable() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "user");

        try (MockedStatic<HBaseConfiguration> confStatic = Mockito.mockStatic(HBaseConfiguration.class);
                MockedStatic<Subject> subjectStatic = Mockito.mockStatic(Subject.class);
                MockedStatic<ConnectionFactory> connFactoryStatic = Mockito.mockStatic(ConnectionFactory.class)) {
            Configuration conf = Mockito.mock(Configuration.class);
            confStatic.when(HBaseConfiguration::create).thenReturn(conf);

            subjectStatic.when(() -> Subject.doAs(Mockito.any(), Mockito.any(PrivilegedAction.class)))
                    .thenAnswer(inv -> {
                        PrivilegedAction<?> a = inv.getArgument(1);
                        return a.run();
                    });

            Connection connection = Mockito.mock(Connection.class);
            Admin admin = Mockito.mock(Admin.class);
            connFactoryStatic.when(() -> ConnectionFactory.createConnection(Mockito.any(Configuration.class)))
                    .thenReturn(connection);
            Mockito.when(connection.getAdmin()).thenReturn(admin);

            Mockito.when(admin.getDescriptor(Mockito.any(TableName.class))).thenThrow(new RuntimeException("boom"));

            HBaseClient client = new TestableHBaseClient("svc", props, Mockito.mock(Subject.class));
            List<String> tables = new ArrayList<>(Collections.singletonList("t1"));
            assertThrows(HadoopException.class, () -> client.getColumnFamilyList("cf.*", tables, null));
        }
    }

    private ColumnFamilyDescriptor mockCfd(String name) {
        ColumnFamilyDescriptor cfd = Mockito.mock(ColumnFamilyDescriptor.class);
        Mockito.when(cfd.getNameAsString()).thenReturn(name);
        return cfd;
    }

    private static class TestableHBaseClient extends HBaseClient {
        private final Subject testSubject;

        public TestableHBaseClient(String serviceName, Map<String, String> connectionProp, Subject subject) {
            super(serviceName, connectionProp);
            this.testSubject = subject;
        }

        @Override
        protected void login() {
            // no-op to avoid real environment login
        }

        @Override
        protected Subject getLoginSubject() {
            return testSubject;
        }
    }
}
