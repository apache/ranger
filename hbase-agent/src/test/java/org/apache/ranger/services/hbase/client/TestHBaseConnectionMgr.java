/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hbase.client;

import org.apache.ranger.plugin.util.TimedEventUtil;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;

/**
 * @generated by Cursor
 * @description <Unit Test for HBaseConnectionMgr class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHBaseConnectionMgr {
    @Test
    public void test01_cacheMiss_thenPutIfAbsent_andCacheHit() throws Exception {
        HBaseConnectionMgr mgr = new HBaseConnectionMgr();
        Map<String, String> cfg = new HashMap<>();
        cfg.put("username", "u");

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HBaseClient> construct = Mockito.mockConstruction(HBaseClient.class, (mock, ctx) -> {})) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<HBaseClient> c = (Callable<HBaseClient>) inv.getArgument(0);
                        return c.call();
                    });

            HBaseClient c1 = mgr.getHBaseConnection("svc", "type", cfg);
            assertNotNull(c1);

            HBaseClient cached = mgr.getHBaseConnection("svc", "type", cfg);
            assertSame(c1, cached);
        }
    }

    @Test
    public void test02_cacheHit_butInvalid_thenReconnect() throws Exception {
        HBaseConnectionMgr mgr = new HBaseConnectionMgr();
        Map<String, String> cfg = new HashMap<>();
        cfg.put("username", "u");

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HBaseClient> construct = Mockito.mockConstruction(HBaseClient.class, (mock, ctx) -> {})) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<HBaseClient> c = (Callable<HBaseClient>) inv.getArgument(0);
                        return c.call();
                    });

            HBaseClient first = Mockito.mock(HBaseClient.class);
            HBaseClient c1 = mgr.getHBaseConnection("svc2", "type", cfg);
            mgr.hbaseConnectionCache.put("svc2", first);

            Mockito.when(first.getTableList(Mockito.anyString(), Mockito.isNull())).thenReturn(null);

            HBaseClient result = mgr.getHBaseConnection("svc2", "type", cfg);
            assertNotNull(result);
        }
    }

    @Test
    public void test03_nullConfigsPath_usesNullBranch() throws Exception {
        HBaseConnectionMgr mgr = new HBaseConnectionMgr();

        try (MockedStatic<TimedEventUtil> timed = Mockito.mockStatic(TimedEventUtil.class);
                MockedConstruction<HBaseClient> construct = Mockito.mockConstruction(HBaseClient.class, (mock, ctx) -> {})) {
            timed.when(() -> TimedEventUtil.timedTask(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                    .thenAnswer(inv -> {
                        @SuppressWarnings("unchecked")
                        Callable<HBaseClient> c = (Callable<HBaseClient>) inv.getArgument(0);
                        return c.call();
                    });

            HBaseClient c1 = mgr.getHBaseConnection("svc3", "type", null);
            assertNotNull(c1);
        }
    }

    @Test
    public void test04_nullServiceType_returnsNullAndNoThrow() {
        HBaseConnectionMgr mgr = new HBaseConnectionMgr();
        HBaseClient client = mgr.getHBaseConnection("svc", null, new HashMap<>());
        assertNull(client);
    }
}
