/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.services.hbase;

import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.service.RangerBaseService;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.services.hbase.client.HBaseResourceMgr;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceHBase class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceHBase {
    static final String sdName = "svcDef-HBase";
    static final String serviceName = "HBaseDef";

    @Test
    public void test01_validateConfig_success() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test hbase resource lookup and validateConfig",
                null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        HashMap<String, Object> expected = new HashMap<String, Object>();
        expected.put("status", "success");

        try (MockedStatic<HBaseResourceMgr> mocked = Mockito.mockStatic(HBaseResourceMgr.class)) {
            mocked.when(() -> HBaseResourceMgr.connectionTest(Mockito.eq(serviceName), Mockito.eq(configs)))
                    .thenReturn(expected);

            Map<String, Object> ret = svcHBase.validateConfig();

            assertNotNull(ret);
            assertEquals(expected, ret);

            mocked.verify(() -> HBaseResourceMgr.connectionTest(serviceName, configs));
        }
    }

    @Test
    public void test02_validateConfig_hadoopException() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test hbase resource lookup and validateConfig",
                null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        try (MockedStatic<HBaseResourceMgr> mocked = Mockito.mockStatic(HBaseResourceMgr.class)) {
            mocked.when(() -> HBaseResourceMgr.connectionTest(Mockito.eq(serviceName), Mockito.eq(configs)))
                    .thenThrow(new HadoopException("failure"));

            assertThrows(HadoopException.class, svcHBase::validateConfig);

            mocked.verify(() -> HBaseResourceMgr.connectionTest(serviceName, configs));
        }
    }

    @Test
    public void test03_lookupResource_success() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);

        ResourceLookupContext lookupContext = new ResourceLookupContext();
        buildLookupContext(lookupContext);

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test hbase resource lookup and validateConfig",
                null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        List<String> expected = new ArrayList<String>();
        expected.add("iemployee");
        expected.add("idepartment");

        try (MockedStatic<HBaseResourceMgr> mocked = Mockito.mockStatic(HBaseResourceMgr.class)) {
            mocked.when(() -> HBaseResourceMgr.getHBaseResource(Mockito.eq(serviceName), Mockito.eq(sdName),
                    Mockito.eq(configs), Mockito.eq(lookupContext))).thenReturn(expected);

            List<String> ret = svcHBase.lookupResource(lookupContext);

            assertNotNull(ret);
            assertEquals(expected, ret);

            mocked.verify(() -> HBaseResourceMgr.getHBaseResource(serviceName, sdName, configs, lookupContext));
        }
    }

    @Test
    public void test04_lookupResource_exception() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);

        ResourceLookupContext lookupContext = new ResourceLookupContext();
        buildLookupContext(lookupContext);

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test hbase resource lookup and validateConfig",
                null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        try (MockedStatic<HBaseResourceMgr> mocked = Mockito.mockStatic(HBaseResourceMgr.class)) {
            mocked.when(() -> HBaseResourceMgr.getHBaseResource(Mockito.eq(serviceName), Mockito.eq(sdName),
                    Mockito.eq(configs), Mockito.eq(lookupContext))).thenThrow(new RuntimeException("lookup failed"));

            assertThrows(RuntimeException.class, () -> svcHBase.lookupResource(lookupContext));

            mocked.verify(() -> HBaseResourceMgr.getHBaseResource(serviceName, sdName, configs, lookupContext));
        }
    }

    @Test
    public void test05_getDefaultRangerPolicies_noLookupUser() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);
        configs.put("setup.additional.default.policies", "true");
        configs.put("default-policy.1.name", "all - custom");
        configs.put("default-policy.1.resource.path", "/");

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test default policies", null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        Field lookupUserField = RangerBaseService.class.getDeclaredField("lookUpUser");
        lookupUserField.setAccessible(true);
        lookupUserField.set(svcHBase, null);

        List<RangerPolicy> policies = svcHBase.getDefaultRangerPolicies();
        assertNotNull(policies);

        RangerPolicy found = null;
        for (RangerPolicy p : policies) {
            if ("all - custom".equals(p.getName())) {
                found = p;
                break;
            }
        }
        assertNotNull(found);
        assertEquals(0, found.getPolicyItems() == null ? 0 : found.getPolicyItems().size());
    }

    @Test
    public void test06_getDefaultRangerPolicies_withLookupUser() throws Exception {
        Map<String, String> configs = new HashMap<String, String>();
        buildHbaseConnectionConfig(configs);
        configs.put("setup.additional.default.policies", "true");
        configs.put("default-policy.1.name", "all - custom");
        configs.put("default-policy.1.resource.path", "/");

        RangerServiceDef sd = new RangerServiceDef(sdName, "org.apache.ranger.services.hbase.RangerServiceHBase",
                "TestService", "test servicedef description", null, null, null, null, null, null, null);
        RangerService svc = new RangerService(sdName, serviceName, "unit test default policies", null, configs);

        RangerServiceHBase svcHBase = new RangerServiceHBase();
        svcHBase.init(sd, svc);

        Field lookupUserField = RangerBaseService.class.getDeclaredField("lookUpUser");
        lookupUserField.setAccessible(true);
        lookupUserField.set(svcHBase, "lookup_user");

        List<RangerPolicy> policies = svcHBase.getDefaultRangerPolicies();
        assertNotNull(policies);

        RangerPolicy found = null;
        for (RangerPolicy p : policies) {
            if ("all - custom".equals(p.getName())) {
                found = p;
                break;
            }
        }
        assertNotNull(found);

        List<RangerPolicyItem> items = found.getPolicyItems();
        assertNotNull(items);
        assertEquals(1, items.size());

        RangerPolicyItem item = items.get(0);
        assertNotNull(item.getUsers());
        assertEquals(1, item.getUsers().size());
        assertEquals("lookup_user", item.getUsers().get(0));
        assertEquals(Boolean.FALSE, item.getDelegateAdmin());

        List<RangerPolicyItemAccess> accesses = item.getAccesses();
        assertNotNull(accesses);
        assertEquals(2, accesses.size());

        List<String> types = new ArrayList<String>();
        for (RangerPolicyItemAccess a : accesses) {
            types.add(a.getType());
        }
        // Expect read and create added by RangerServiceHBase
        assertEquals(true, types.contains("read"));
        assertEquals(true, types.contains("create"));
    }

    public static void buildHbaseConnectionConfig(Map<String, String> configs) {
        configs.put("username", "hbaseuser");
        configs.put("password", "*******");
        configs.put("hadoop.security.authentication", "simple");
        configs.put("hbase.master.kerberos.principal", "hbase/_HOST@EXAMPLE.COM");
        configs.put("hbase.security.authentication", "simple");
        configs.put("hbase.zookeeper.property.clientPort", "2181");
        configs.put("hbase.zookeeper.quorum", "localhost");
        configs.put("zookeeper.znode.parent", "/hbase-unsecure");
        configs.put("isencrypted", "true");
    }

    public static void buildLookupContext(ResourceLookupContext lookupContext) {
        Map<String, List<String>> resourceMap = new HashMap<String, List<String>>();
        resourceMap.put(null, null);
        lookupContext.setUserInput("iem");
        lookupContext.setResourceName("table");
        lookupContext.setResources(resourceMap);
    }
}
