/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;

import static org.mockito.Mockito.mock;

/**
* @generated by Cursor
* @description <Unit Test for HbaseAuditHandlerImpl class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHbaseAuditHandlerImpl {
    @Test
    public void test01_getAuthzEventsAccumulatesAndSuppressesReturn() {
        HbaseAuditHandlerImpl handler = new HbaseAuditHandlerImpl();
        RangerAccessResult result = mock(RangerAccessResult.class);
        RangerAccessRequest req = mock(RangerAccessRequest.class);
        handler.mostRecentEvent = null;
        handler.getAuthzEvents(result);
        Assertions.assertNull(handler.getAndDiscardMostRecentEvent());
    }

    @Test
    public void test02_getCapturedEventsIncludesMostRecent() {
        HbaseAuditHandlerImpl handler = new HbaseAuditHandlerImpl();
        AuthzAuditEvent e1 = new AuthzAuditEvent();
        handler.setMostRecentEvent(e1);
        List<AuthzAuditEvent> events = handler.getCapturedEvents();
        Assertions.assertEquals(1, events.size());
        Assertions.assertSame(e1, events.get(0));
    }

    @Test
    public void test03_superUserOverrideAppliedToSingleEvent() {
        HbaseAuditHandlerImpl handler = new HbaseAuditHandlerImpl();
        handler.setSuperUserOverride(true);
        AuthzAuditEvent e1 = new AuthzAuditEvent();
        handler.setMostRecentEvent(e1);
        AuthzAuditEvent returned = handler.getAndDiscardMostRecentEvent();
        Assertions.assertEquals(1, returned.getAccessResult());
        Assertions.assertEquals(-1, returned.getPolicyId());
    }

    @Test
    public void test04_superUserOverrideAppliedToList() {
        HbaseAuditHandlerImpl handler = new HbaseAuditHandlerImpl();
        handler.setSuperUserOverride(true);
        AuthzAuditEvent e1 = new AuthzAuditEvent();
        handler.setMostRecentEvent(e1);
        List<AuthzAuditEvent> list = handler.getCapturedEvents();
        for (AuthzAuditEvent e : list) {
            Assertions.assertEquals(1, e.getAccessResult());
            Assertions.assertEquals(-1, e.getPolicyId());
        }
    }
}
