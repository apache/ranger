/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerHBaseResource class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHBaseResource {
    @Test
    public void test01_setValue_defaultNamespaceExpansion() {
        RangerHBaseResource resource = new RangerHBaseResource();
        resource.setValue(RangerHBaseResource.KEY_TABLE, "t1");
        Object value = resource.getValue(RangerHBaseResource.KEY_TABLE);
        Assertions.assertTrue(value instanceof List);
        @SuppressWarnings("unchecked")
        List<String> list = (List<String>) value;
        Assertions.assertEquals(3, list.size());
        Assertions.assertEquals("t1", list.get(0));
        Assertions.assertEquals(RangerHBaseResource.DEFAULT_NAMESPACE + "t1", list.get(1));
        Assertions.assertEquals("t1:", list.get(2));
    }

    @Test
    public void test02_setValue_defaultNamespaceAlreadyPresent() {
        RangerHBaseResource resource = new RangerHBaseResource();
        resource.setValue(RangerHBaseResource.KEY_TABLE, RangerHBaseResource.DEFAULT_NAMESPACE + "t2");
        Object value = resource.getValue(RangerHBaseResource.KEY_TABLE);
        Assertions.assertTrue(value instanceof List);
        @SuppressWarnings("unchecked")
        List<String> list = (List<String>) value;
        Assertions.assertEquals(2, list.size());
        Assertions.assertEquals(RangerHBaseResource.DEFAULT_NAMESPACE + "t2", list.get(0));
        Assertions.assertEquals("t2", list.get(1));
    }

    @Test
    public void test03_resetValueRevertsToFirst() {
        Map<String, Object> elements = new HashMap<>();
        elements.put(RangerHBaseResource.KEY_TABLE, "tbl");
        RangerHBaseResource resource = new RangerHBaseResource(elements);
        Object value = resource.getValue(RangerHBaseResource.KEY_TABLE);
        @SuppressWarnings("unchecked")
        List<String> list = (List<String>) value;
        // simulate that audit reset should pick first value
        resource.resetValue(RangerHBaseResource.KEY_TABLE);
        Object reset = resource.getValue(RangerHBaseResource.KEY_TABLE);
        Assertions.assertEquals(list.get(0), reset);
    }
}
