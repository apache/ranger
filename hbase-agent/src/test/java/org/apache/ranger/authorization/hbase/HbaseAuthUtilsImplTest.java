/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.RegionInfo;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.ipc.RpcServer;
import org.apache.hadoop.hbase.regionserver.Region;
import org.apache.hadoop.hbase.security.User;
import org.apache.hadoop.hbase.security.access.Permission;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.util.Optional;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for HbaseAuthUtilsImpl class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class HbaseAuthUtilsImplTest {
    @Test
    public void test01_isReadWriteExecuteAccess() {
        HbaseAuthUtilsImpl authUtils = new HbaseAuthUtilsImpl();
        Assertions.assertTrue(authUtils.isReadAccess("read"));
        Assertions.assertTrue(authUtils.isWriteAccess("write"));
        Assertions.assertTrue(authUtils.isExecuteAccess("execute"));
    }

    @Test
    public void test02_getAccess_forAllActions() {
        HbaseAuthUtilsImpl authUtils = new HbaseAuthUtilsImpl();
        Assertions.assertEquals("read", authUtils.getAccess(Permission.Action.READ));
        Assertions.assertEquals("write", authUtils.getAccess(Permission.Action.WRITE));
        Assertions.assertEquals("create", authUtils.getAccess(Permission.Action.CREATE));
        Assertions.assertEquals("admin", authUtils.getAccess(Permission.Action.ADMIN));
        Assertions.assertEquals("execute", authUtils.getAccess(Permission.Action.EXEC));
    }

    @Test
    public void test03_getActionName_forKnownAndUnknown() {
        HbaseAuthUtilsImpl authUtils = new HbaseAuthUtilsImpl();
        Assertions.assertEquals(Permission.Action.READ.name(), authUtils.getActionName("read"));
        Assertions.assertEquals(Permission.Action.WRITE.name(), authUtils.getActionName("write"));
        Assertions.assertEquals(Permission.Action.CREATE.name(), authUtils.getActionName("create"));
        Assertions.assertEquals(Permission.Action.ADMIN.name(), authUtils.getActionName("admin"));
        Assertions.assertEquals(Permission.Action.EXEC.name(), authUtils.getActionName("execute"));
        Assertions.assertEquals("CUSTOM", authUtils.getActionName("custom"));
    }

    @Test
    public void test04_getTable_fromRegionEnv() {
        HbaseAuthUtilsImpl authUtils = new HbaseAuthUtilsImpl();
        RegionCoprocessorEnvironment env = mock(RegionCoprocessorEnvironment.class);
        RegionInfo regionInfo = mock(RegionInfo.class);
        Region region = mock(Region.class);
        when(env.getRegion()).thenReturn(region);
        when(region.getRegionInfo()).thenReturn(regionInfo);
        when(regionInfo.getTable()).thenReturn(TableName.valueOf("t"));
        Assertions.assertEquals("t", authUtils.getTable(env));
    }

    @Test
    public void test05_isReadWriteExecuteAccessFalseCases() {
        HbaseAuthUtilsImpl authUtils = new HbaseAuthUtilsImpl();
        Assertions.assertFalse(authUtils.isReadAccess(null));
        Assertions.assertFalse(authUtils.isReadAccess("READ"));
        Assertions.assertFalse(authUtils.isWriteAccess("READ"));
        Assertions.assertFalse(authUtils.isExecuteAccess("WRITE"));
    }

    @Test
    public void test06_getUser_prefersRequestUser() {
        try (MockedStatic<RpcServer> rpcServerMock = Mockito.mockStatic(RpcServer.class)) {
            User user = mock(User.class);
            rpcServerMock.when(RpcServer::getRequestUser).thenReturn(Optional.of(user));

            HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
            Assertions.assertEquals(user, utils.getUser());
        }
    }

    @Test
    public void test07_getUser_usesCurrentWhenRequestUserEmpty() {
        try (MockedStatic<RpcServer> rpcMock = Mockito.mockStatic(RpcServer.class);
                MockedStatic<User> userStatic = Mockito.mockStatic(User.class)) {
            rpcMock.when(RpcServer::getRequestUser).thenReturn(Optional.empty());

            User current = mock(User.class);
            userStatic.when(User::getCurrent).thenReturn(current);

            HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
            Assertions.assertEquals(current, utils.getUser());
        }
    }

    @Test
    public void test08_getUser_handlesIOExceptionFromGetCurrent() {
        try (MockedStatic<RpcServer> rpcMock = Mockito.mockStatic(RpcServer.class);
                MockedStatic<User> userStatic = Mockito.mockStatic(User.class)) {
            rpcMock.when(RpcServer::getRequestUser).thenReturn(Optional.empty());
            userStatic.when(User::getCurrent).thenThrow(new IOException("ioe"));

            HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
            Assertions.assertNull(utils.getUser());
        }
    }

    @Test
    public void test09_getUserAsString_noArg_returnsEmptyWhenNoUser() {
        try (MockedStatic<RpcServer> rpcMock = Mockito.mockStatic(RpcServer.class);
                MockedStatic<User> userStatic = Mockito.mockStatic(User.class)) {
            rpcMock.when(RpcServer::getRequestUser).thenReturn(Optional.empty());
            userStatic.when(User::getCurrent).thenReturn(null);

            HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
            Assertions.assertEquals("", utils.getUserAsString());
        }
    }

    @Test
    public void test10_getUserAsString_noArg_returnsShortNameWhenUserPresent() {
        try (MockedStatic<RpcServer> rpcMock = Mockito.mockStatic(RpcServer.class)) {
            User reqUser = mock(User.class);
            when(reqUser.getShortName()).thenReturn("bob");
            rpcMock.when(RpcServer::getRequestUser).thenReturn(Optional.of(reqUser));

            HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
            Assertions.assertEquals("bob", utils.getUserAsString());
        }
    }
}
