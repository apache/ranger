/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.security.User;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for HbaseUserUtilsImpl class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHbaseUserUtilsImpl {
    @Test
    public void test01_initializeAndIsSuperUser() {
        try {
            Field fInit = HbaseUserUtilsImpl.class.getDeclaredField("isInitialized");
            fInit.setAccessible(true);
            ((AtomicBoolean) fInit.get(null)).set(false);
            Field fSup = HbaseUserUtilsImpl.class.getDeclaredField("superUsers");
            fSup.setAccessible(true);
            ((AtomicReference<Set<String>>) fSup.get(null)).set(new HashSet<>());
        } catch (Exception ignore) {
        }
        Configuration conf = new Configuration(false);
        conf.setStrings("hbase.superuser", "admin", "svc");
        HbaseUserUtilsImpl.initialize(conf);
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("admin");
        HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
        Assertions.assertTrue(utils.isSuperUser(user));
    }

    @Test
    public void test02_getUserAsStringAndGroups() {
        HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u1");
        when(user.getGroupNames()).thenReturn(new String[] {"g1", "g2"});
        Assertions.assertEquals("u1", utils.getUserAsString(user));
        Set<String> groups = utils.getUserGroups(user);
        Assertions.assertTrue(groups.contains("g1"));
        Assertions.assertTrue(groups.contains("g2"));
    }

    @Test
    public void test03_nullUserThrows() {
        HbaseUserUtilsImpl utils = new HbaseUserUtilsImpl();
        Assertions.assertThrows(IllegalArgumentException.class, () -> utils.getUserAsString(null));
        Assertions.assertThrows(IllegalArgumentException.class, () -> utils.getUserGroups(null));
    }
}
