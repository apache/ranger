/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.security.AccessDeniedException;
import org.apache.hadoop.hbase.security.User;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest.ResourceMatchingScope;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for AuthorizationSession class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class AuthorizationSessionTest {
    @Test
    public void testIsBuildable() {
        RangerHBasePlugin plugin = new RangerHBasePlugin("hbase");
        AuthorizationSession session = new AuthorizationSession(plugin);
        try {
            session.verifyBuildable();
            Assertions.fail("Should have thrown exception");
        } catch (IllegalStateException e) {
            // expected
        }
        // user and access are the only required ones.
        User user = mock(User.class);
        when(user.getGroupNames()).thenReturn(new String[] {"groups", "group2"});
        session.access(" ");
        session.user(user);
        try {
            session.verifyBuildable();
        } catch (IllegalStateException e) {
            Assertions.fail("Shouldn't have thrown an exception!");
        }
        session.columnFamily("family");
        try {
            session.verifyBuildable();
            Assertions.fail("Should have thrown an exception");
        } catch (IllegalStateException e) {
            // expected
        }
        session.table("table");
        try {
            session.verifyBuildable();
        } catch (IllegalStateException e) {
            Assertions.fail("Shouldn't have thrown an exception!");
        }
        // setting column without column-family is a problem
        session.columnFamily(null);
        session.column("col");
        try {
            session.verifyBuildable();
            Assertions.fail("Should have thrown an exception");
        } catch (IllegalStateException e) {
            // expected
        }
        session.columnFamily("family");
        try {
            session.verifyBuildable();
        } catch (IllegalStateException e) {
            Assertions.fail("Shouldn't have thrown an exception");
        }
    }

    @Test
    public void testIsProvided() {
        AuthorizationSession session = new AuthorizationSession(null);
        Assertions.assertFalse(session.isProvided(null));
        Assertions.assertFalse(session.isProvided(""));
        Assertions.assertTrue(session.isProvided(" "));
        Assertions.assertTrue(session.isProvided("xtq"));
    }

    @Test
    public void testAuthorize() {
        RangerHBasePlugin plugin = new RangerHBasePlugin("hbase");
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("user1");
        when(user.getGroupNames()).thenReturn(new String[] {"users"});
        AuthorizationSession session = new AuthorizationSession(plugin);
        session.access("read").user(user).table(":meta:").buildRequest().authorize();
    }

    @Test
    public void test_propertyDelegation_getPropertyIsColumnAuthOptimizationEnabled() {
        RangerHBasePlugin plugin = new RangerHBasePlugin("hbase");
        plugin.setColumnAuthOptimizationEnabled(true);
        AuthorizationSession session = new AuthorizationSession(plugin);
        Assertions.assertTrue(session.getPropertyIsColumnAuthOptimizationEnabled());
        plugin.setColumnAuthOptimizationEnabled(false);
        Assertions.assertFalse(session.getPropertyIsColumnAuthOptimizationEnabled());
    }

    @Test
    public void test_isNameSpaceOperation_trueAndFalse() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        Assertions.assertTrue(session.operation("createNamespace").isNameSpaceOperation());
        Assertions.assertTrue(session.operation("deleteNamespace").isNameSpaceOperation());
        Assertions.assertTrue(session.operation("modifyNamespace").isNameSpaceOperation());
        Assertions.assertTrue(session.operation("setUserNamespaceQuota").isNameSpaceOperation());
        Assertions.assertTrue(session.operation("setNamespaceQuota").isNameSpaceOperation());
        Assertions.assertTrue(session.operation("getUserPermissionForNamespace").isNameSpaceOperation());
        Assertions.assertFalse(session.operation("createTable").isNameSpaceOperation());
    }

    @Test
    public void test_authorize_throwsWhenRequestNotBuilt() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        Assertions.assertThrows(IllegalStateException.class, session::authorize);
    }

    @Test
    public void test_verifyBuildable_userNull_throws() {
        AuthorizationSession session = new AuthorizationSession(new RangerHBasePlugin("hbase"));
        session.access("read");
        Assertions.assertThrows(IllegalStateException.class, session::verifyBuildable);
    }

    @Test
    public void test_authorize_setsSuperUserOverrideAndCallsAuthorizer() {
        Configuration conf = new Configuration(false);
        conf.setStrings("hbase.superuser", "alice");
        try {
            Field fInit = HbaseUserUtilsImpl.class.getDeclaredField("isInitialized");
            fInit.setAccessible(true);
            ((AtomicBoolean) fInit.get(null)).set(false);
            Field fSup = HbaseUserUtilsImpl.class.getDeclaredField("superUsers");
            fSup.setAccessible(true);
            ((AtomicReference<Set<String>>) fSup.get(null)).set(new HashSet<>());
        } catch (Exception ignore) {
        }
        HbaseFactory.initialize(conf);

        RangerHBasePlugin plugin = mock(RangerHBasePlugin.class);
        HbaseAuditHandler handler = mock(HbaseAuditHandler.class);
        RangerAccessResult accessResult = mock(RangerAccessResult.class);
        when(plugin.isAccessAllowed(any(RangerAccessRequest.class), any(HbaseAuditHandler.class)))
                .thenReturn(accessResult);

        User user = mock(User.class);
        when(user.getShortName()).thenReturn("alice");
        when(user.getGroupNames()).thenReturn(new String[] {});

        AuthorizationSession session = new AuthorizationSession(plugin);
        session.auditHandler(handler).access("read").user(user).table("ns1:tbl").buildRequest().authorize();

        verify(handler, times(1)).setSuperUserOverride(true);
        verify(plugin, times(1)).isAccessAllowed(any(RangerAccessRequest.class), any(HbaseAuditHandler.class));
    }

    @Test
    public void test_logCapturedEvents_delegatesToAuditHandler() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        HbaseAuditHandler handler = mock(HbaseAuditHandler.class);
        List<AuthzAuditEvent> events = new ArrayList<>();
        events.add(new AuthzAuditEvent());
        when(handler.getCapturedEvents()).thenReturn(events);
        session.auditHandler(handler);

        session.logCapturedEvents();

        verify(handler, times(1)).logAuthzAudits(events);
    }

    @Test
    public void test_publishResults_authorizedAudited_logsAllEvents() throws Exception {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        HbaseAuditHandler handler = mock(HbaseAuditHandler.class);
        RangerAccessResult result = mock(RangerAccessResult.class);
        when(result.getIsAllowed()).thenReturn(true);
        when(result.getIsAudited()).thenReturn(true);
        List<AuthzAuditEvent> events = new ArrayList<>();
        events.add(new AuthzAuditEvent());
        when(handler.getCapturedEvents()).thenReturn(events);
        session.auditHandler(handler);
        session.result = result;

        session.publishResults();

        verify(handler, times(1)).logAuthzAudits(events);
    }

    @Test
    public void test_publishResults_deniedAudited_logsMostRecentEventAndThrows() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        HbaseAuditHandler handler = mock(HbaseAuditHandler.class);
        RangerAccessResult result = mock(RangerAccessResult.class);
        when(result.getIsAllowed()).thenReturn(false);
        when(result.getIsAudited()).thenReturn(true);
        AuthzAuditEvent last = new AuthzAuditEvent();
        when(handler.getAndDiscardMostRecentEvent()).thenReturn(last);
        User user = mock(User.class);
        when(user.getName()).thenReturn("bob");
        session.user = user;
        session.access = "read";
        session.auditHandler(handler);
        session.result = result;

        Assertions.assertThrows(AccessDeniedException.class, session::publishResults);
        verify(handler, times(1)).logAuthzAudits(any(List.class));
    }

    @Test
    public void test_isAudited_whenResultNull_returnsFalse() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        Assertions.assertFalse(session.isAudited());
    }

    @Test
    public void test_isAuthorized_superUserOverrideWhenResultNull() {
        Configuration conf = new Configuration(false);
        conf.setStrings("hbase.superuser", "alice");
        try {
            Field fInit = HbaseUserUtilsImpl.class.getDeclaredField("isInitialized");
            fInit.setAccessible(true);
            ((AtomicBoolean) fInit.get(null)).set(false);
            Field fSup = HbaseUserUtilsImpl.class.getDeclaredField("superUsers");
            fSup.setAccessible(true);
            ((AtomicReference<Set<String>>) fSup.get(null)).set(new HashSet<>());
        } catch (Exception ignore) {
        }
        HbaseFactory.initialize(conf);

        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("alice");
        when(user.getGroupNames()).thenReturn(new String[] {});
        session.user(user);

        Assertions.assertTrue(session.isAuthorized());
    }

    @Test
    public void test_getDenialReason_variants() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        // result null
        Assertions.assertEquals("", session.getDenialReason());

        // allowed true -> empty reason
        RangerAccessResult resAllowed = mock(RangerAccessResult.class);
        when(resAllowed.getIsAllowed()).thenReturn(true);
        session.result = resAllowed;
        Assertions.assertEquals("", session.getDenialReason());

        // denied -> return reason
        RangerAccessResult resDenied = mock(RangerAccessResult.class);
        when(resDenied.getIsAllowed()).thenReturn(false);
        when(resDenied.getReason()).thenReturn("nope");
        session.result = resDenied;
        Assertions.assertEquals("nope", session.getDenialReason());
    }

    @Test
    public void test_createHBaseResource_namespaceVsNonNamespace() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u");
        when(user.getGroupNames()).thenReturn(new String[] {"g"});

        // Namespace operation -> table becomes otherInformation + ":"
        session.access("read").user(user).operation("createNamespace").otherInformation("ns1").table("ignored")
                .buildRequest();
        RangerAccessRequest req1 = session.request;
        Assertions.assertEquals("ns1:", req1.getResource().getValue(RangerHBaseResource.KEY_TABLE));

        // Non-namespace operation with namespaced table -> value retained
        session.operation("put").otherInformation("info").table("ns1:tbl").columnFamily("cf").column("c")
                .buildRequest();
        RangerAccessRequest req2 = session.request;
        Assertions.assertEquals("ns1:tbl", req2.getResource().getValue(RangerHBaseResource.KEY_TABLE));
        Assertions.assertEquals("cf", req2.getResource().getValue(RangerHBaseResource.KEY_COLUMN_FAMILY));
        Assertions.assertEquals("c", req2.getResource().getValue(RangerHBaseResource.KEY_COLUMN));
    }

    @Test
    public void test_createRangerRequest_setsAllFields() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u1");
        when(user.getGroupNames()).thenReturn(new String[] {"g1"});

        session.access("read").user(user).table("ns1:tbl").operation("op").otherInformation("info")
                .remoteAddress("127.0.0.1").resourceMatchingScope(ResourceMatchingScope.SELF_OR_DESCENDANTS)
                .ignoreDescendantDeny(false).buildRequest();

        RangerAccessRequest req = session.request;
        Assertions.assertEquals("op", req.getAction());
        Assertions.assertEquals("info", req.getRequestData());
        Assertions.assertEquals("127.0.0.1", req.getClientIPAddress());
        Assertions.assertEquals(ResourceMatchingScope.SELF_OR_DESCENDANTS, req.getResourceMatchingScope());
        Assertions.assertNotNull(req.getAccessTime());
        Assertions.assertFalse(req.ignoreDescendantDeny());
    }

    @Test
    public void test_user_setsGroupsFromUGIWhenEmpty() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        UserGroupInformation ugi = mock(UserGroupInformation.class);
        when(user.getShortName()).thenReturn("joe");
        when(user.getGroupNames()).thenReturn(new String[] {});
        when(user.getUGI()).thenReturn(ugi);
        when(ugi.getGroupNames()).thenReturn(new String[] {"g1", "g2"});

        session.user(user);

        Assertions.assertTrue(session.groups.contains("g1"));
        Assertions.assertTrue(session.groups.contains("g2"));
    }

    @Test
    public void test_requestToString_delegatesToToString_andContainsKeyValues() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u1");
        when(user.getName()).thenReturn("u1@EXAMPLE");
        when(user.getGroupNames()).thenReturn(new String[] {"g1"});
        HbaseAuditHandler handler = mock(HbaseAuditHandler.class);

        session.operation("op").otherInformation("info").access("read").user(user)
                .table("ns1:tbl").columnFamily("cf").column("col").auditHandler(handler)
                .buildRequest();

        String s1 = session.requestToString();
        String s2 = session.toString();

        Assertions.assertEquals(s2, s1);
        Assertions.assertTrue(s1.contains("operation=op"));
        Assertions.assertTrue(s1.contains("otherInformation=info"));
        Assertions.assertTrue(s1.contains("access=read"));
        Assertions.assertTrue(s1.contains("user=u1@EXAMPLE"));
        Assertions.assertTrue(s1.contains("groups=[g1]"));
        Assertions.assertTrue(s1.contains("resource-matching-scope=SELF"));
        Assertions.assertTrue(s1.contains("ignoreDescendantDeny=true"));
    }

    @Test
    public void test_getPrintableValue_variants() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        Assertions.assertEquals("", session.getPrintableValue(null));
        Assertions.assertEquals("", session.getPrintableValue(""));
        Assertions.assertEquals(" ", session.getPrintableValue(" "));
        Assertions.assertEquals("abc", session.getPrintableValue("abc"));
    }

    @Test
    public void test_getLogMessage_allowedAndDenied() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u1");
        when(user.getGroupNames()).thenReturn(new String[] {"g1"});

        session.access("read").operation("op").otherInformation("info").table("ns1:tbl")
                .columnFamily("cf").column("col").user(user);

        try {
            Field f = AuthorizationSession.class.getDeclaredField("userUtils");
            f.setAccessible(true);
            HbaseUserUtils mockUserUtils = mock(HbaseUserUtils.class);
            when(mockUserUtils.getUserAsString()).thenReturn("");
            f.set(session, mockUserUtils);
        } catch (Exception e) {
            Assertions.fail("Failed to inject mock userUtils: " + e.getMessage());
        }

        String msgAllowed = session.getLogMessage(true, "ok");
        Assertions.assertTrue(msgAllowed.contains("status[allowed]"));
        Assertions.assertTrue(msgAllowed.endsWith("reason[ok]"));

        String msgDenied = session.getLogMessage(false, "nope");
        Assertions.assertTrue(msgDenied.contains("status[denied]"));
        Assertions.assertTrue(msgDenied.endsWith("reason[nope]"));
    }

    @Test
    public void test_getRequestMessage_formatsValuesIncludingPrintable() {
        AuthorizationSession session = new AuthorizationSession(mock(RangerHBasePlugin.class));
        User user = mock(User.class);
        when(user.getShortName()).thenReturn("u1");
        when(user.getGroupNames()).thenReturn(new String[] {"g1"});

        // Intentionally set a mix of null/empty and non-empty values to exercise getPrintableValue branches
        session.access("read").operation(" ").otherInformation("").table("ns1:tbl").columnFamily(null)
                .column(null).user(user);

        try {
            Field f = AuthorizationSession.class.getDeclaredField("userUtils");
            f.setAccessible(true);
            HbaseUserUtils mockUserUtils = mock(HbaseUserUtils.class);
            when(mockUserUtils.getUserAsString()).thenReturn("");
            f.set(session, mockUserUtils);
        } catch (Exception e) {
            Assertions.fail("Failed to inject mock userUtils: " + e.getMessage());
        }

        String reqMsg = session.getRequestMessage();
        Assertions.assertTrue(reqMsg.contains("Access[read]"));
        Assertions.assertTrue(reqMsg.contains("user[]"));
        Assertions.assertTrue(reqMsg.contains("groups[[g1]]"));
        Assertions.assertTrue(reqMsg.contains("table[ns1:tbl]"));
        Assertions.assertTrue(reqMsg.contains("column-family[]"));
        Assertions.assertTrue(reqMsg.contains("column[]"));
        Assertions.assertTrue(reqMsg.contains("operation[ ]"));
        Assertions.assertTrue(reqMsg.contains("otherInformation[]"));
    }
}
