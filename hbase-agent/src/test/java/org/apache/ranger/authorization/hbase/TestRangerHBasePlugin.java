/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.ranger.authorization.hbase;

import org.apache.ranger.authorization.hadoop.constants.RangerHadoopConstants;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.apache.ranger.plugin.policyengine.RangerAccessResultProcessor;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerHBasePlugin class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHBasePlugin {
    @Test
    public void test01_isAccessAllowed_whenShuttingDownAllowsNoAudit() {
        RangerHBasePlugin plugin = new RangerHBasePlugin("hbase");
        plugin.setHBaseShuttingDown(true);
        RangerAccessRequest request = new RangerAccessRequestImpl(new RangerAccessResourceImpl(), "read", "user", null, null);
        RangerAccessResult result = plugin.isAccessAllowed(request, (RangerAccessResultProcessor) null);
        Assertions.assertTrue(result.getIsAllowed());
        Assertions.assertFalse(result.getIsAudited());
    }

    @Test
    public void test02_setPolicies_setsColumnOptimizationFlag() {
        RangerHBasePlugin plugin = new RangerHBasePlugin("hbase");
        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("hbase");
        policies.setServiceDef(new RangerServiceDef());
        Map<String, String> configs = new HashMap<>();
        configs.put(RangerHadoopConstants.HBASE_COLUMN_AUTH_OPTIMIZATION, "true");
        policies.setServiceConfig(configs);
        plugin.setPolicies(policies);
        Assertions.assertTrue(plugin.getPropertyIsColumnAuthOptimizationEnabled());
        plugin.setColumnAuthOptimizationEnabled(false);
        Assertions.assertFalse(plugin.getPropertyIsColumnAuthOptimizationEnabled());
    }
}
