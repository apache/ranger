/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.ugsyncutil.util;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UgsyncCommonConstants
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUgsyncCommonConstants {
    @Test
    public void test01_ToCaseConversionMappings() {
        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.TO_LOWER,
                UgsyncCommonConstants.toCaseConversion("lower"));
        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.TO_LOWER,
                UgsyncCommonConstants.toCaseConversion("LOWER"));

        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.TO_UPPER,
                UgsyncCommonConstants.toCaseConversion("upper"));
        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.TO_UPPER,
                UgsyncCommonConstants.toCaseConversion("UPPER"));

        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.NONE,
                UgsyncCommonConstants.toCaseConversion("none"));
        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.NONE,
                UgsyncCommonConstants.toCaseConversion("random"));
        Assertions.assertEquals(UgsyncCommonConstants.CaseConversion.NONE,
                UgsyncCommonConstants.toCaseConversion(null));
    }

    @Test
    public void test02_PrivateConstructorCoverage() throws Exception {
        Constructor<UgsyncCommonConstants> ctor = UgsyncCommonConstants.class.getDeclaredConstructor();
        ctor.setAccessible(true);
        try {
            UgsyncCommonConstants instance = ctor.newInstance();
            Assertions.assertNotNull(instance);
        } catch (InvocationTargetException ex) {
            // If constructor throws, still count as covered
            Assertions.assertNotNull(ex.getTargetException());
        }
    }
}
