/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.ugsyncutil.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description : Unit Test cases for UsersGroupRoleAssignments
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUsersGroupRoleAssignments {
    @Test
    public void test01_GettersSetters() {
        UsersGroupRoleAssignments a = new UsersGroupRoleAssignments();
        List<String>              users      = Arrays.asList("u1", "u2");
        Map<String, String>       groupRoles = new HashMap<>();
        groupRoles.put("g1", "ROLE_ADMIN");
        Map<String, String> userRoles = new HashMap<>();
        userRoles.put("u1", "ROLE_USER");
        Map<String, String> wlGroupRoles = new HashMap<>();
        wlGroupRoles.put("g2", "ROLE_USER");
        Map<String, String> wlUserRoles = new HashMap<>();
        wlUserRoles.put("u3", "ROLE_AUDITOR");

        a.setUsers(users);
        a.setGroupRoleAssignments(groupRoles);
        a.setUserRoleAssignments(userRoles);
        a.setWhiteListGroupRoleAssignments(wlGroupRoles);
        a.setWhiteListUserRoleAssignments(wlUserRoles);
        a.setReset(true);
        a.setLastPage(true);

        Assertions.assertEquals(users, a.getUsers());
        Assertions.assertEquals(groupRoles, a.getGroupRoleAssignments());
        Assertions.assertEquals(userRoles, a.getUserRoleAssignments());
        Assertions.assertEquals(wlGroupRoles, a.getWhiteListGroupRoleAssignments());
        Assertions.assertEquals(wlUserRoles, a.getWhiteListUserRoleAssignments());
        Assertions.assertTrue(a.isReset());
        Assertions.assertTrue(a.isLastPage());
    }
}
