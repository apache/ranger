/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.ugsyncutil.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XGroupInfo
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXGroupInfo {
    @Test
    public void test01_EqualsHashCodeAndSetters() {
        XGroupInfo g1 = new XGroupInfo();
        XGroupInfo g2 = new XGroupInfo();
        g1.setName("dev");
        g2.setName("dev");

        Assertions.assertEquals(g1, g2);
        Assertions.assertEquals(g1.hashCode(), g2.hashCode());

        g2.setName("ops");
        Assertions.assertNotEquals(g1, g2);

        g1.setId("1");
        g1.setDescription("desc");
        g1.setGroupType("INTERNAL");
        g1.setIsVisible("true");
        g1.setGroupSource("ldap");
        g1.setSyncSource("LDAP");
        g1.setOtherAttributes("k=v");

        Assertions.assertEquals("1", g1.getId());
        Assertions.assertEquals("desc", g1.getDescription());
        Assertions.assertEquals("INTERNAL", g1.getGroupType());
        Assertions.assertEquals("true", g1.getIsVisible());
        Assertions.assertEquals("ldap", g1.getGroupSource());
        Assertions.assertEquals("LDAP", g1.getSyncSource());
        Assertions.assertEquals("k=v", g1.getOtherAttributes());
        Assertions.assertEquals("dev", g1.getName());
    }

    @Test
    public void test02_SetOtherAttrsMapNullDoesNotOverwrite() {
        XGroupInfo          g     = new XGroupInfo();
        Map<String, String> attrs = new HashMap<>();
        attrs.put("a", "1");
        g.setOtherAttrsMap(attrs);
        Assertions.assertEquals(attrs, g.getOtherAttrsMap());

        g.setOtherAttrsMap(null);
        Assertions.assertEquals(attrs, g.getOtherAttrsMap());
    }

    @Test
    public void test03_EqualsWhenNameNull() {
        XGroupInfo g1 = new XGroupInfo();
        XGroupInfo g2 = new XGroupInfo();
        Assertions.assertEquals(g1, g2);
    }

    @Test
    public void test04_EqualsSameInstanceTrue() {
        XGroupInfo g = new XGroupInfo();
        Assertions.assertEquals(g, g);
    }

    @Test
    public void test05_EqualsNullAndDifferentClassFalse() {
        XGroupInfo g = new XGroupInfo();
        Assertions.assertNotEquals(null, g);
        Assertions.assertNotEquals("not-a-group", g);
    }
}
