/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.ugsyncutil.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description : Unit Test cases for XUserInfo
 */

@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXUserInfo {
    @Test
    public void test01_EqualsHashCodeAndSetters() {
        XUserInfo u1 = new XUserInfo();
        XUserInfo u2 = new XUserInfo();
        u1.setName("alice");
        u2.setName("alice");

        Assertions.assertEquals(u1, u2);
        Assertions.assertEquals(u1.hashCode(), u2.hashCode());

        u2.setName("bob");
        Assertions.assertNotEquals(u1, u2);

        u1.setId("1");
        u1.setFirstName("Alice");
        u1.setDescription("desc");
        u1.setUserSource("ldap");
        u1.setStatus("ACTIVE");
        u1.setIsVisible("true");
        u1.setSyncSource("LDAP");
        u1.setOtherAttributes("k=v");

        Assertions.assertEquals("1", u1.getId());
        Assertions.assertEquals("Alice", u1.getFirstName());
        Assertions.assertEquals("desc", u1.getDescription());
        Assertions.assertEquals("ldap", u1.getUserSource());
        Assertions.assertEquals("ACTIVE", u1.getStatus());
        Assertions.assertEquals("true", u1.getIsVisible());
        Assertions.assertEquals("LDAP", u1.getSyncSource());
        Assertions.assertEquals("k=v", u1.getOtherAttributes());
        Assertions.assertEquals("alice", u1.getName());
    }

    @Test
    public void test02_GroupsAndRolesAndDeleteGroups() {
        XUserInfo    u      = new XUserInfo();
        List<String> groups = new ArrayList<>(Arrays.asList("g1", "g2", "g3"));
        u.setGroupNameList(groups);
        Assertions.assertEquals(groups, u.getGroupNameList());
        Assertions.assertEquals(groups, u.getGroups());

        List<String> roles = new ArrayList<>(Arrays.asList("ROLE_USER", "ROLE_ADMIN"));
        u.setUserRoleList(roles);
        Assertions.assertEquals(roles, u.getUserRoleList());

        u.deleteGroups(Arrays.asList("g2", "g3"));
        Assertions.assertEquals(Collections.singletonList("g1"), u.getGroupNameList());
    }

    @Test
    public void test03_SetOtherAttrsMapNullDoesNotOverwrite() {
        XUserInfo           u     = new XUserInfo();
        Map<String, String> attrs = new HashMap<>();
        attrs.put("a", "1");
        u.setOtherAttrsMap(attrs);
        Assertions.assertEquals(attrs, u.getOtherAttrsMap());

        u.setOtherAttrsMap(null);
        Assertions.assertEquals(attrs, u.getOtherAttrsMap());
    }

    @Test
    public void test04_ToStringContainsFields() {
        XUserInfo u = new XUserInfo();
        u.setId("1");
        u.setName("alice");
        u.setFirstName("Alice");
        u.setDescription("desc");
        u.setGroupNameList(new ArrayList<>(Arrays.asList("g1", "g2")));
        u.setUserRoleList(new ArrayList<>(Collections.singletonList("ROLE_USER")));

        String s = u.toString();
        Assertions.assertTrue(s.contains("XUserInfo"));
        Assertions.assertTrue(s.contains("alice"));
        Assertions.assertTrue(s.contains("g1"));
        Assertions.assertTrue(s.contains("ROLE_USER"));
    }

    @Test
    public void test05_EqualsWhenNameNull() {
        XUserInfo u1 = new XUserInfo();
        XUserInfo u2 = new XUserInfo();
        Assertions.assertEquals(u1, u2);
    }

    @Test
    public void test06_EqualsSameInstanceTrue() {
        XUserInfo u = new XUserInfo();
        Assertions.assertEquals(u, u);
    }

    @Test
    public void test07_EqualsNullAndDifferentClassFalse() {
        XUserInfo u = new XUserInfo();
        Assertions.assertNotEquals(null, u);
        Assertions.assertNotEquals("not-a-user", u);
    }
}
