/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.security;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for KrbPasswordSaverLoginModule class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestKrbPasswordSaverLoginModule {
    @Test
    public void test01_initialize_storesCredentialsInSharedState() throws Exception {
        KrbPasswordSaverLoginModule module = new KrbPasswordSaverLoginModule();
        Map<String, Object> shared = new HashMap<>();
        Map<String, Object> options = new HashMap<>();
        options.put(KrbPasswordSaverLoginModule.USERNAME_PARAM, "user1");
        options.put(KrbPasswordSaverLoginModule.PASSWORD_PARAM, "secret");

        module.initialize(new Subject(), (CallbackHandler) null, shared, options);

        assertEquals("user1", shared.get(KrbPasswordSaverLoginModule.USERNAME_PARAM));
        assertArrayEquals("secret".toCharArray(), (char[]) shared.get(KrbPasswordSaverLoginModule.PASSWORD_PARAM));
    }

    @Test
    public void test02_login_commit_abort_logout_returnTrue() throws Exception {
        KrbPasswordSaverLoginModule module = new KrbPasswordSaverLoginModule();
        assertTrue(module.login());
        assertTrue(module.commit());
        assertTrue(module.abort());
        assertTrue(module.logout());
    }

    @Test
    public void test03_initialize_withNullOptions_doesNotPopulateShared() {
        KrbPasswordSaverLoginModule module = new KrbPasswordSaverLoginModule();
        Map<String, Object> shared = new HashMap<>();
        module.initialize(new Subject(), (CallbackHandler) null, shared, null);
        assertTrue(shared.isEmpty());
    }
}
