/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.audit;

import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.audit.provider.AuditHandler;
import org.apache.ranger.authorization.hadoop.constants.RangerHadoopConstants;
import org.apache.ranger.plugin.contextenricher.RangerTagForEval;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.apache.ranger.plugin.policyengine.gds.GdsAccessResult;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerRESTUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerDefaultAuditHandler class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerDefaultAuditHandler {
    @Test
    public void test01_getAuthzEvents_nullsAndAuditFlag() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();

        AuthzAuditEvent ev = handler.getAuthzEvents((RangerAccessResult) null);
        Assertions.assertNull(ev);

        RangerAccessResult resWithNullReq = new RangerAccessResult(0, "svc", null, null);
        resWithNullReq.setIsAudited(true);
        Assertions.assertNull(handler.getAuthzEvents(resWithNullReq));

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        RangerAccessResult resNotAudited = new RangerAccessResult(0, "svc", null, req);
        resNotAudited.setIsAudited(false);
        Assertions.assertNull(handler.getAuthzEvents(resNotAudited));
    }

    @Test
    public void test02_getAuthzEvents_populatesFieldsAndDefaults() {
        RangerRESTUtils.hostname = "my-host";

        RangerServiceDef svcDef = new RangerServiceDef();
        svcDef.setId(5L);
        List<RangerResourceDef> resourceDefs = new ArrayList<>();
        RangerResourceDef r1 = new RangerResourceDef();
        r1.setName("db");
        RangerResourceDef r2 = new RangerResourceDef();
        r2.setName("table");
        RangerResourceDef r3 = new RangerResourceDef();
        r3.setName("column");
        resourceDefs.add(r1);
        resourceDefs.add(r2);
        resourceDefs.add(r3);
        svcDef.setResources(resourceDefs);

        Map<String, Object> elements = new HashMap<>();
        elements.put("db", "sales");
        elements.put("table", "orders");
        elements.put("column", "id");
        RangerAccessResourceImpl resource = new RangerAccessResourceImpl(elements);
        resource.setServiceDef(svcDef);

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(resource);
        req.setUser("alice");
        req.setAccessType("read");
        req.setAction("SELECT");
        req.setAccessTime(new Date(1720000000000L));
        req.setClientIPAddress("192.168.1.10");
        req.setRemoteIPAddress("10.0.0.1");
        List<String> fwd = new ArrayList<>(Arrays.asList("172.16.0.2", "172.16.0.3"));
        req.setForwardedAddresses(fwd);
        req.setClientType("jdbc");
        req.setSessionId("sess-1");
        req.setRequestData("req-json");
        req.setClusterName("clusterA");

        // Add a tag for getTags()
        Map<String, String> tagAttrs = new HashMap<>();
        tagAttrs.put("key", "value");
        RangerTag tag = new RangerTag("PII", tagAttrs);
        RangerTagForEval tagForEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF);
        Set<RangerTagForEval> tagSet = new HashSet<>();
        tagSet.add(tagForEval);
        RangerAccessRequestUtil.setRequestTagsInContext(req.getContext(), tagSet);

        // Add GDS datasets/projects
        GdsAccessResult gds = new GdsAccessResult();
        gds.addDataset("dataset1");
        gds.addProject("project1");
        RangerAccessRequestUtil.setGdsResultInContext(req, gds);

        RangerAccessResult result = new RangerAccessResult(0, "svcA", svcDef, req);
        result.setIsAudited(true);
        result.setIsAllowed(true);
        result.setPolicyId(123L);
        result.setZoneName("zone-1");
        result.setPolicyVersion(7L);

        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler(new Configuration());
        AuthzAuditEvent event = handler.getAuthzEvents(result);

        Assertions.assertNotNull(event);
        Assertions.assertEquals("svcA", event.getRepositoryName());
        Assertions.assertEquals(5, event.getRepositoryType());
        Assertions.assertEquals("column", event.getResourceType());
        Assertions.assertEquals("sales/orders/id", event.getResourcePath());
        Assertions.assertEquals("alice", event.getUser());
        Assertions.assertEquals("read", event.getAction());
        Assertions.assertEquals("SELECT", event.getAccessType());
        Assertions.assertEquals(1, event.getAccessResult());
        Assertions.assertEquals(123L, event.getPolicyId());
        Assertions.assertEquals("192.168.1.10", event.getClientIP());
        Assertions.assertEquals("jdbc", event.getClientType());
        Assertions.assertEquals("sess-1", event.getSessionId());
        Assertions.assertEquals(RangerHadoopConstants.DEFAULT_RANGER_MODULE_ACL_NAME, event.getAclEnforcer());
        Assertions.assertNotNull(event.getTags());
        Assertions.assertFalse(event.getTags().isEmpty());
        Assertions.assertEquals(new HashSet<>(Arrays.asList("dataset1")), event.getDatasets());
        Assertions.assertEquals(new HashSet<>(Arrays.asList("project1")), event.getProjects());
        Assertions.assertNotNull(event.getAdditionalInfo());
        Assertions.assertTrue(event.getAdditionalInfo().contains("10.0.0.1"));
        Assertions.assertTrue(event.getAdditionalInfo().contains("forwarded-ip-addresses"));
        Assertions.assertEquals("clusterA", event.getClusterName());
        Assertions.assertEquals("zone-1", event.getZoneName());
        Assertions.assertEquals(Long.valueOf(7L), event.getPolicyVersion());
        Assertions.assertEquals("my-host", event.getAgentHostname());
        Assertions.assertNotNull(event.getEventId());
        Assertions.assertEquals(event.getEventId(), result.getAuditLogId());
        Assertions.assertEquals("RangerAudit", event.getLogType());
    }

    @Test
    public void test03_getAuthzEvents_collectionSkipsNulls() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();

        RangerAccessRequestImpl req1 = new RangerAccessRequestImpl();
        RangerAccessResult r1 = new RangerAccessResult(0, "svc", null, req1);
        r1.setIsAudited(false); // will be skipped

        RangerAccessResult r2 = new RangerAccessResult(0, "svc", null, null); // request null, skipped
        r2.setIsAudited(true);

        RangerAccessRequestImpl req3 = new RangerAccessRequestImpl();
        RangerAccessResult r3 = new RangerAccessResult(0, "svc", null, req3);
        r3.setIsAudited(true);
        r3.setIsAllowed(true);

        List<RangerAccessResult> list = new ArrayList<>();
        list.add(r1);
        list.add(r2);
        list.add(r3);

        Collection<AuthzAuditEvent> events = handler.getAuthzEvents(list);
        Assertions.assertNotNull(events);
        Assertions.assertEquals(1, events.size());
    }

    @Test
    public void test04_logAuthzAudit_branches_providerSuccessAndFailure() {
        AuthzAuditEvent event = new AuthzAuditEvent();
        event.setRepositoryName("svc-x");

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc-x")).thenReturn(ok);

            RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
            handler.logAuthzAudit(event);
            Mockito.verify(ok, Mockito.times(1)).log(Mockito.any(AuthzAuditEvent.class));
        }

        AuthzAuditEvent event2 = new AuthzAuditEvent();
        event2.setRepositoryName("svc-y");
        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler fail = Mockito.mock(AuditHandler.class);
            Mockito.when(fail.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(false);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc-y")).thenReturn(fail);

            RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
            handler.logAuthzAudit(event2); // should not throw
            Mockito.verify(fail, Mockito.times(1)).log(Mockito.any(AuthzAuditEvent.class));
        }

        // null event branch
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
        handler.logAuthzAudit(null);
    }

    @Test
    public void test05_logAuthzAudits_iteratesEach() {
        AuthzAuditEvent e1 = new AuthzAuditEvent();
        e1.setRepositoryName("svc");
        AuthzAuditEvent e2 = new AuthzAuditEvent();
        e2.setRepositoryName("svc");

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(ok);

            RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
            List<AuthzAuditEvent> list = new ArrayList<>();
            list.add(e1);
            list.add(e2);
            handler.logAuthzAudits(list);
            Mockito.verify(ok, Mockito.times(2)).log(Mockito.any(AuthzAuditEvent.class));
        }

        // null input
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
        handler.logAuthzAudits(null);
    }

    @Test
    public void test06_createAuthzAuditEvent_returnsNew() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
        AuthzAuditEvent e = handler.createAuthzAuditEvent();
        Assertions.assertNotNull(e);
    }

    @Test
    public void test07_getDatasetsAndProjects_fromContext() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        GdsAccessResult gds = new GdsAccessResult();
        gds.addDataset("d1");
        gds.addProject("p1");
        RangerAccessRequestUtil.setGdsResultInContext(req, gds);

        Set<String> datasets = handler.getDatasets(req);
        Set<String> projects = handler.getProjects(req);
        Assertions.assertEquals(new HashSet<>(Arrays.asList("d1")), datasets);
        Assertions.assertEquals(new HashSet<>(Arrays.asList("p1")), projects);
    }

    @Test
    public void test08_getAdditionalInfo_nullAndNonNull() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setRemoteIPAddress(null);
        req.setForwardedAddresses(new ArrayList<>());
        Assertions.assertNull(handler.getAdditionalInfo(req));

        RangerAccessRequestImpl req2 = new RangerAccessRequestImpl();
        req2.setRemoteIPAddress("10.1.1.1");
        List<String> fwd = new ArrayList<>(Arrays.asList("1.1.1.1"));
        req2.setForwardedAddresses(fwd);
        String info = handler.getAdditionalInfo(req2);
        Assertions.assertNotNull(info);
        Assertions.assertTrue(info.contains("10.1.1.1"));
    }

    @Test
    public void test09_getTags_nullAndNonNull() {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        Assertions.assertNull(invokeGetTags(handler, req));

        Map<String, String> tagAttrs = new HashMap<>();
        tagAttrs.put("a", "b");
        RangerTag tag = new RangerTag("T1", tagAttrs);
        RangerTagForEval tagForEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF);
        Set<RangerTagForEval> tagSet = new HashSet<>();
        tagSet.add(tagForEval);
        RangerAccessRequestUtil.setRequestTagsInContext(req.getContext(), tagSet);

        Set<String> tags = invokeGetTags(handler, req);
        Assertions.assertNotNull(tags);
        Assertions.assertEquals(1, tags.size());
    }

    @Test
    public void test10_generateNextAuditEventId_resetsUuidOnCounterMax() throws Exception {
        RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();

        Field uuidField = RangerDefaultAuditHandler.class.getDeclaredField("uuid");
        uuidField.setAccessible(true);
        uuidField.set(handler, "fixed");

        Field counterField = RangerDefaultAuditHandler.class.getDeclaredField("counter");
        counterField.setAccessible(true);
        counterField.set(handler, new AtomicInteger(Integer.MAX_VALUE - 1));

        AuthzAuditEvent e1 = new AuthzAuditEvent();
        e1.setRepositoryName("svc");
        AuthzAuditEvent e2 = new AuthzAuditEvent();
        e2.setRepositoryName("svc");

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(ok);

            handler.logAuthzAudit(e1);
            handler.logAuthzAudit(e2);
        }

        String id1 = e1.getEventId();
        String id2 = e2.getEventId();
        Assertions.assertNotNull(id1);
        Assertions.assertNotNull(id2);
        Assertions.assertTrue(id1.startsWith("fixed-"));
        Assertions.assertFalse(id2.startsWith("fixed-"));
    }

    @Test
    public void test11_processResult_and_processResults() {
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        RangerAccessResult result = new RangerAccessResult(0, "svcP", null, req);
        result.setIsAudited(true);
        result.setIsAllowed(true);

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svcP")).thenReturn(ok);

            RangerDefaultAuditHandler handler = new RangerDefaultAuditHandler();
            handler.processResult(result);

            List<RangerAccessResult> list = new ArrayList<>();
            list.add(result);
            handler.processResults(list);

            Mockito.verify(ok, Mockito.atLeast(2)).log(Mockito.any(AuthzAuditEvent.class));
        }
    }

    private Set<String> invokeGetTags(RangerDefaultAuditHandler handler, RangerAccessRequest request) {
        try {
            Method m = RangerDefaultAuditHandler.class.getDeclaredMethod("getTags", RangerAccessRequest.class);
            m.setAccessible(true);
            @SuppressWarnings("unchecked")
            Set<String> ret = (Set<String>) m.invoke(handler, request);
            return ret;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}
