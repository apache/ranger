/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.client;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.Subject;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description <Unit Test for BaseClient class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestBaseClient {
    @Test
    public void test01_generateResponseDataMap_populatesAllKeys() {
        Map<String, Object> map = new HashMap<>();
        BaseClient.generateResponseDataMap(true, "msg", "desc", 5L, "field", map);
        assertEquals(true, map.get("connectivityStatus"));
        assertEquals("msg", map.get("message"));
        assertEquals("desc", map.get("description"));
        assertEquals(5L, map.get("objectId"));
        assertEquals("field", map.get("fieldName"));
    }

    @Test
    public void test02_getMessage_collectsFromCauseChainWithoutDuplicates() {
        Exception inner = new Exception("inner");
        Exception outer = new Exception("outer", inner);
        String msg = BaseClient.getMessage(outer);
        // order is preserved top-down
        assertEquals("outer. \ninner. \n", msg);
    }

    @Test
    public void test03_login_withUsernameSimpleAuth_createsSubjectAndServiceName() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "simple");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }

            public Subject subject() {
                return getLoginSubject();
            }
        }

        TestClient client = new TestClient("svcName", props);
        assertEquals("svcName", client.getSerivceName());
        assertNotNull(client.subject());
    }

    @Test
    public void test04_login_usesLookupPrincipalWhenProvided() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        props.put("lookupprincipal", "user/_HOST@EXAMPLE.COM");
        props.put("lookupkeytab", "/tmp/missing.keytab");
        props.put("hadoop.security.authentication", "kerberos");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }
        }

        try {
            new TestClient("svc", props);
        } catch (Exception ex) {
            if (ex instanceof HadoopException) {
                assertNotNull(((HadoopException) ex).getResponseData());
            }
        }
    }

    @Test
    public void test05_getConfigHolder_isNotNull_withNullConnectionProperties() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "xalogin.xml");
            }

            @Override
            protected void login() {
                /* no-op for test */ }

            public HadoopConfigHolder cfg() {
                return getConfigHolder();
            }
        }

        TestClient client = new TestClient("svcNull", props);
        assertNotNull(client.cfg());
    }

    @Test
    public void test06_createException_methods_viaReflection() throws Exception {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "xalogin.xml");
            }

            @Override
            protected void login() {
                /* no-op for reflection tests */ }
        }

        TestClient client = new TestClient("svcEx", props);

        Method m1 = BaseClient.class.getDeclaredMethod("createException", Exception.class);
        m1.setAccessible(true);
        HadoopException he1 = (HadoopException) m1.invoke(client, new IOException("io"));
        assertNotNull(he1.getResponseData());

        Method m2 = BaseClient.class.getDeclaredMethod("createException", String.class, Exception.class);
        m2.setAccessible(true);
        HadoopException he2 = (HadoopException) m2.invoke(client, "msg", new IOException("io2"));
        assertNotNull(he2.getResponseData());
    }

    @Test
    public void test07_login_keytabPresentButSimpleAuth_usesSimpleLogin() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        props.put("keytabfile", "/tmp/any.keytab");
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "simple");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }

            public Subject subject() {
                return getLoginSubject();
            }
        }

        TestClient client = new TestClient("svcKeytabSimple", props);
        assertNotNull(client.subject());
    }

    @Test
    public void test08_login_passwordDecryptFailureFallsBack_andKerberosPasswordPath() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        // deliberately set an invalid encrypted string to trigger decryption exception
        // path
        props.put("password", "not-base64-@#");
        props.put("authtype", "kerberos");
        props.put("hadoop.security.authentication", "kerberos");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }
        }

        try {
            new TestClient("svcPwdKrb", props);
        } catch (Exception ex) {
            // loginUserWithPassword will fail and be wrapped into HadoopException
            assertNotNull(((HadoopException) ex).getResponseData());
        }
    }

    @Test
    public void test09_constructor_twoArg_callsInitAndLogin() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "simple");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp);
            }

            public Subject subject() {
                return getLoginSubject();
            }
        }

        TestClient client = new TestClient("svc2Arg", props);
        assertNotNull(client.subject());
    }

    @Test
    public void test10_init_withNullConnectionProperties_usesGetInstanceWithoutProps() {
        class TestClient extends BaseClient {
            TestClient(String svc) {
                super(svc, null, "xalogin.xml");
            }

            @Override
            protected void login() {
                /* avoid external login for this test */ }

            public HadoopConfigHolder cfg() {
                return getConfigHolder();
            }
        }

        TestClient client = new TestClient("svcNullProps");
        assertNotNull(client.cfg());
    }

    @Test
    public void test11_login_missingUsername_throwsHadoopException() {
        Map<String, String> props = new HashMap<>();
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "simple");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }
        }

        try {
            new TestClient("svcNoUser", props);
        } catch (Exception ex) {
            assertEquals(HadoopException.class, ex.getClass());
            // message created in createException(String, Exception)
        }
    }

    @Test
    public void test12_login_lookupProvidedButSimpleAuth_usesUsernameLogin() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user");
        props.put("lookupprincipal", "user/_HOST@EXAMPLE.COM");
        props.put("lookupkeytab", "/tmp/missing.keytab");
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "simple");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }

            public Subject subject() {
                return getLoginSubject();
            }
        }

        TestClient client = new TestClient("svcLookupSimple", props);
        assertNotNull(client.subject());
    }

    @Test
    public void test13_login_keytabPresentKerberos_throwsWrappedException() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user@EXAMPLE.COM");
        props.put("keytabfile", "/tmp/missing.keytab");
        props.put("authtype", "kerberos");
        props.put("hadoop.security.authentication", "kerberos");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }
        }

        try {
            new TestClient("svcKeytabKrb", props);
        } catch (Exception ex) {
            assertEquals(IllegalArgumentException.class, ex.getClass());
        }
    }

    @Test
    public void test14_login_noPasswordConfigured_kerberosPath_throwsWrappedException() {
        Map<String, String> props = new HashMap<>();
        props.put("username", "unit_user@EXAMPLE.COM");
        // no password and no keytab
        props.put("authtype", "kerberos");
        props.put("hadoop.security.authentication", "kerberos");

        class TestClient extends BaseClient {
            TestClient(String svc, Map<String, String> cp) {
                super(svc, cp, "core-site.xml");
            }
        }

        try {
            new TestClient("svcNoPwdKrb", props);
        } catch (Exception ex) {
            assertEquals(IllegalArgumentException.class, ex.getClass());
        }
    }
}
