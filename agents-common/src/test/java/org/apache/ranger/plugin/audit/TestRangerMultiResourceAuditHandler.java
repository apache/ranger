/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.audit;

import org.apache.ranger.audit.model.AuthzAuditEvent;
import org.apache.ranger.audit.provider.AuditHandler;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerMultiResourceAuditHandler class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerMultiResourceAuditHandler {
    @Test
    public void test01_collectsEventsViaOverrides() {
        RangerMultiResourceAuditHandler handler = new RangerMultiResourceAuditHandler();

        AuthzAuditEvent e1 = new AuthzAuditEvent();
        e1.setAccessResult((short) 1);
        e1.setRepositoryName("svc");
        AuthzAuditEvent e2 = new AuthzAuditEvent();
        e2.setAccessResult((short) 0);
        e2.setRepositoryName("svc");

        handler.logAuthzAudit(e1);
        List<AuthzAuditEvent> list = new ArrayList<>();
        list.add(e2);
        handler.logAuthzAudits(list);

        // Now flush: since a denied exists, only denied should be forwarded
        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(ok);

            handler.flushAudit();
            Mockito.verify(ok, Mockito.times(1)).log(Mockito.<AuthzAuditEvent>argThat(a -> a.getAccessResult() == 0));
        }
    }

    @Test
    public void test02_flushAudit_allAllowedWhenNoDenied() {
        RangerMultiResourceAuditHandler handler = new RangerMultiResourceAuditHandler();

        AuthzAuditEvent e1 = new AuthzAuditEvent();
        e1.setAccessResult((short) 1);
        e1.setRepositoryName("svc");
        AuthzAuditEvent e2 = new AuthzAuditEvent();
        e2.setAccessResult((short) 1);
        e2.setRepositoryName("svc");

        List<AuthzAuditEvent> list = new ArrayList<>();
        list.add(e1);
        list.add(e2);
        handler.logAuthzAudits(list);

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            Mockito.when(ok.log(Mockito.any(AuthzAuditEvent.class))).thenReturn(true);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(ok);

            handler.flushAudit();
            Mockito.verify(ok, Mockito.times(2)).log(Mockito.any(AuthzAuditEvent.class));
        }
    }

    @Test
    public void test03_flushAudit_resetsBufferOnErrorToo() {
        RangerMultiResourceAuditHandler handler = new RangerMultiResourceAuditHandler();

        AuthzAuditEvent e1 = new AuthzAuditEvent();
        e1.setAccessResult((short) 1);
        e1.setRepositoryName("svc");
        AuthzAuditEvent e2 = new AuthzAuditEvent();
        e2.setAccessResult((short) 0);
        e2.setRepositoryName("svc");

        List<AuthzAuditEvent> list = new ArrayList<>();
        list.add(e1);
        list.add(e2);
        handler.logAuthzAudits(list);

        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler failing = Mockito.mock(AuditHandler.class);
            Mockito.when(failing.log(Mockito.any(AuthzAuditEvent.class))).thenThrow(new RuntimeException("boom"));
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(failing);

            handler.flushAudit();
        }

        // After exception, subsequent flush with no events should not send anything
        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            mocked.when(() -> RangerBasePlugin.getAuditProvider("svc")).thenReturn(ok);

            handler.flushAudit();
            Mockito.verify(ok, Mockito.never()).log(Mockito.any(AuthzAuditEvent.class));
        }
    }

    @Test
    public void test04_logAuthzAudits_emptyCollectionNoop() {
        RangerMultiResourceAuditHandler handler = new RangerMultiResourceAuditHandler();
        Collection<AuthzAuditEvent> empty = new ArrayList<>();
        handler.logAuthzAudits(empty);
        try (MockedStatic<RangerBasePlugin> mocked = Mockito.mockStatic(RangerBasePlugin.class)) {
            AuditHandler ok = Mockito.mock(AuditHandler.class);
            mocked.when(() -> RangerBasePlugin.getAuditProvider(Mockito.anyString())).thenReturn(ok);

            handler.flushAudit();
            Mockito.verify(ok, Mockito.never()).log(Mockito.any(AuthzAuditEvent.class));
        }
    }
}
