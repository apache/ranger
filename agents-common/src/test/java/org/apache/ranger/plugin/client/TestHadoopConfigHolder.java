/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.client;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description <Unit Test for HadoopConfigHolder class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestHadoopConfigHolder {
    @Test
    public void test01_getInstance_withConnectionProperties_populatesLoginInfoAndKerberosFlag() {
        String ds = "ds-" + System.nanoTime();
        Map<String, String> props = new HashMap<>();
        props.put("username", "user1");
        props.put("password", "pwd1");
        props.put("lookupprincipal", "lp/host@EXAMPLE.COM");
        props.put("lookupkeytab", "/tmp/lp.keytab");
        props.put("namerules", "DEFAULT");
        props.put("authtype", "simple");
        props.put("hadoop.security.authentication", "kerberos");

        HadoopConfigHolder holder = HadoopConfigHolder.getInstance(ds, props, "core-site.xml");

        assertNotNull(holder);
        assertEquals("user1", holder.getUserName());
        assertEquals("pwd1", holder.getPassword());
        assertEquals("lp/host@EXAMPLE.COM", holder.getLookupPrincipal());
        assertEquals("/tmp/lp.keytab", holder.getLookupKeytab());
        assertEquals("DEFAULT", holder.getNameRules());
        assertEquals("kerberos", holder.getHadoopSecurityAuthentication());
        assertTrue(holder.isKerberosAuthentication());
        assertTrue(holder.hasResourceExists("xalogin.xml"));
    }

    @Test
    public void test02_getInstance_replacesCachedWhenConnectionPropertiesChange() {
        String ds = "ds-" + System.nanoTime();
        Map<String, String> props1 = new HashMap<>();
        props1.put("username", "userA");
        HadoopConfigHolder h1 = HadoopConfigHolder.getInstance(ds, props1, "xalogin.xml");
        assertEquals("userA", h1.getUserName());

        Map<String, String> props2 = new HashMap<>();
        props2.put("username", "userB");
        HadoopConfigHolder h2 = HadoopConfigHolder.getInstance(ds, props2, "xalogin.xml");
        assertEquals("userB", h2.getUserName());
    }

    @Test
    public void test03_isKerberosAuthentication_trueWhenUsernameContainsRealm() {
        String ds = "ds-" + System.nanoTime();
        Map<String, String> props = new HashMap<>();
        props.put("username", "user@EXAMPLE.COM");
        HadoopConfigHolder holder = HadoopConfigHolder.getInstance(ds, props, "core-site.xml");
        assertTrue(holder.isKerberosAuthentication());
    }

    @Test
    public void test04_getters_forHiveAndAuthAndInternalKeys() {
        String ds = "ds-" + System.nanoTime();
        Map<String, String> props = new HashMap<>();
        props.put("enable.hive.metastore.lookup", "true");
        props.put("hive.site.file.path", "/etc/hive/hive-site.xml");
        props.put("authtype", "simple");
        HadoopConfigHolder holder = HadoopConfigHolder.getInstance(ds, props, "xalogin.xml");

        // getHiveSiteFilePath returns null unless the value is present and non-empty
        // in the xalogin.xml (RANGER_SECTION_NAME) section
        assertEquals("/etc/hive/hive-site.xml", holder.getHiveSiteFilePath());
        assertTrue(holder.isEnableHiveMetastoreLookup());
        assertEquals("simple", holder.getAuthType());
        Set<String> internalKeys = holder.getRangerInternalPropertyKeys();
        assertNotNull(internalKeys);
        assertTrue(internalKeys.contains("username"));
    }

    @Test
    public void test05_getInstance_withoutProps_usesStaticInitAndReturnsSameInstance() {
        String ds = "ds-" + System.nanoTime();
        HadoopConfigHolder h1 = HadoopConfigHolder.getInstance(ds);
        HadoopConfigHolder h2 = HadoopConfigHolder.getInstance(ds);
        assertNotNull(h1);
        assertEquals(h1, h2);
    }

    @Test
    public void test06_init_guardBranch_executedViaReflection() throws Exception {
        Field f = HadoopConfigHolder.class.getDeclaredField("initialized");
        f.setAccessible(true);

        Method init = HadoopConfigHolder.class.getDeclaredMethod("init");
        init.setAccessible(true);

        // First: force initialized=true then call init() to hit early return path
        f.setBoolean(null, true);
        init.invoke(null);

        // Second: force initialized=false then call init() to execute read path
        f.setBoolean(null, false);
        init.invoke(null);

        // Verify we can still obtain an instance afterward
        String ds = "ds-" + System.nanoTime();
        HadoopConfigHolder holder = HadoopConfigHolder.getInstance(ds);
        assertNotNull(holder);
    }

    @Test
    public void test07_isKerberosAuthentication_falseWithLookupCredsPresent() {
        String ds = "ds-" + System.nanoTime();
        Map<String, String> props = new HashMap<>();
        props.put("username", "user1");
        props.put("lookupprincipal", "user/_HOST@EXAMPLE.COM");
        props.put("lookupkeytab", "/tmp/lp.keytab");
        props.put("hadoop.security.authentication", "simple");

        HadoopConfigHolder holder = HadoopConfigHolder.getInstance(ds, props, "core-site.xml");
        assertNotNull(holder);
        assertEquals("simple", holder.getHadoopSecurityAuthentication());
        assertFalse(holder.isKerberosAuthentication());
    }

    @Test
    public void test10_init_whenResourcesMissing_setsInitializedAndKeepsGlobalPropsUnchanged() throws Exception {
        Field initializedField = HadoopConfigHolder.class.getDeclaredField("initialized");
        initializedField.setAccessible(true);
        initializedField.setBoolean(null, false);

        Field glp = HadoopConfigHolder.class.getDeclaredField("globalLoginProp");
        glp.setAccessible(true);
        Properties empty = new Properties();
        glp.set(null, empty);

        Method init = HadoopConfigHolder.class.getDeclaredMethod("init");
        init.setAccessible(true);
        init.invoke(null);

        assertTrue(initializedField.getBoolean(null));
        Properties current = (Properties) glp.get(null);
        assertTrue(current.isEmpty());
    }

    @Test
    public void test11_init_whenOnlyGlobalLoginPropsPresent_populatesGlobalLoginAndUserName() throws Exception {
        Field initializedField = HadoopConfigHolder.class.getDeclaredField("initialized");
        initializedField.setAccessible(true);
        initializedField.setBoolean(null, false);

        // Ensure globalLoginProp starts empty
        Field glp = HadoopConfigHolder.class.getDeclaredField("globalLoginProp");
        glp.setAccessible(true);
        Properties empty = new Properties();
        glp.set(null, empty);

        // Prepare temp dir with only hadoop-login.properties
        Path tempDir = Files.createTempDirectory("hcp-init-only-global-");
        Path loginProps = tempDir.resolve("hadoop-login.properties");
        Properties p = new Properties();
        p.setProperty("username", "from-global-only");
        try (OutputStream os = Files.newOutputStream(loginProps)) {
            p.store(os, "test");
        }

        // Use an isolated classloader so that init() can discover resources from tempDir
        URLClassLoader isolated = buildIsolatedLoader(tempDir);
        Class<?> isoClazz = Class.forName("org.apache.ranger.plugin.client.HadoopConfigHolder", true, isolated);

        Field isoInitializedField = isoClazz.getDeclaredField("initialized");
        isoInitializedField.setAccessible(true);
        isoInitializedField.setBoolean(null, false);

        Field isoGlp = isoClazz.getDeclaredField("globalLoginProp");
        isoGlp.setAccessible(true);
        isoGlp.set(null, new Properties());

        Method init = isoClazz.getDeclaredMethod("init");
        init.setAccessible(true);
        init.invoke(null);

        assertTrue(isoInitializedField.getBoolean(null));
        Properties current = (Properties) isoGlp.get(null);
        assertEquals("from-global-only", current.getProperty("username"));

        String ds = "ds-" + System.nanoTime();
        Method getInstance = isoClazz.getDeclaredMethod("getInstance", String.class);
        Object holder = getInstance.invoke(null, ds);
        Method getUserName = isoClazz.getDeclaredMethod("getUserName");
        String actualUser = (String) getUserName.invoke(holder);
        assertEquals("from-global-only", actualUser);
    }

    @Test
    public void test12_init_withDatasourceProperties_parsesKeysAndAddsConfigurations() throws Exception {
        // Create datasource.properties with a mix of valid and invalid keys
        Path tempDir = Files.createTempDirectory("hcp-init-ds-");
        Path dsProps = tempDir.resolve("datasource.properties");
        String content = String.join("\n", "ds1=ignored", // dotLocatedAt == -1 -> continue
                "ds1.core-site=ignored2", // resourceFoundAt == -1 -> skip
                "ds1.core-site.hadoop.security.authentication=kerberos", // valid
                "ds1.xalogin.username=testuser"); // valid

        Files.write(dsProps, content.getBytes(StandardCharsets.ISO_8859_1));

        URLClassLoader isolated = buildIsolatedLoader(tempDir);
        Class<?> isoClazz = Class.forName("org.apache.ranger.plugin.client.HadoopConfigHolder", true, isolated);

        Method init = isoClazz.getDeclaredMethod("init");
        init.setAccessible(true);
        init.invoke(null);

        Field mapField = isoClazz.getDeclaredField("dataSource2ResourceListMap");
        mapField.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, Map<String, Properties>> dsMap = (Map<String, Map<String, Properties>>) mapField.get(null);

        @SuppressWarnings("unchecked")
        Map<String, Properties> resources = dsMap.get("ds1");
        assertNotNull(resources);
        assertTrue(resources.containsKey("core-site.xml"));
        assertTrue(resources.containsKey("xalogin.xml"));
        assertEquals("kerberos", resources.get("core-site.xml").getProperty("hadoop.security.authentication"));
        assertEquals("testuser", resources.get("xalogin.xml").getProperty("username"));
    }

    @Test
    public void test13_init_withEmptyDatasourceProperties_returnsEarlyAndSkipsGlobalLogin() throws Exception {
        // Provide empty datasource.properties with no global login props, in an
        // isolated loader
        Path tempDir = Files.createTempDirectory("hcp-init-empty-ds-");
        Files.write(tempDir.resolve("datasource.properties"), new byte[0]);
        // do not create hadoop-login.properties in this tempDir

        URLClassLoader isolated = buildIsolatedLoader(tempDir);
        Class<?> isoClazz = Class.forName("org.apache.ranger.plugin.client.HadoopConfigHolder", true, isolated);

        Method init = isoClazz.getDeclaredMethod("init");
        init.setAccessible(true);
        init.invoke(null);

        Field glp = isoClazz.getDeclaredField("globalLoginProp");
        glp.setAccessible(true);
        Properties current = (Properties) glp.get(null);
        assertTrue(current.isEmpty()); // early return prevented reading global login
    }

    private static URLClassLoader buildIsolatedLoader(Path firstResourceDir) throws Exception {
        List<URL> urls = new ArrayList<>();
        urls.add(firstResourceDir.toUri().toURL());
        String cp = System.getProperty("java.class.path");
        if (cp != null && !cp.isEmpty()) {
            String[] parts = cp.split(File.pathSeparator);
            for (String part : parts) {
                File f = new File(part);
                if (f.exists()) {
                    urls.add(f.toURI().toURL());
                }
            }
        }
        return new URLClassLoader(urls.toArray(new URL[0]), null);
    }
}
