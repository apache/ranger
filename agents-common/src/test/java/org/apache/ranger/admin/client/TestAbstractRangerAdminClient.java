/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.admin.client;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.security.UserGroupInformation;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

/**
* @generated by Cursor
* @description <Unit Test for AbstractRangerAdminClient class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAbstractRangerAdminClient {
    public static class DummyClient extends AbstractRangerAdminClient {
        @Override
        public void init(String serviceName, String appId, String configPropertyPrefix, Configuration config) {
            super.init(serviceName, appId, configPropertyPrefix, config);
        }
    }

    @Test
    public void test01_initSetsGsonAndForceNonKerberos() {
        DummyClient c = new DummyClient();
        Configuration cfg = new Configuration(false);
        cfg.setBoolean("test.forceNonKerberos", true);
        c.init("svc", "app", "test", cfg);
        // isKerberosEnabled should return false when forceNonKerberos is true
        try (MockedStatic<UserGroupInformation> ignored = Mockito.mockStatic(UserGroupInformation.class)) {
            Assertions.assertFalse(c.isKerberosEnabled(null));
        }
    }

    @Test
    public void test02_isKerberosEnabled_respectsUGI() {
        DummyClient c = new DummyClient();
        Configuration cfg = new Configuration(false);
        cfg.setBoolean("p.forceNonKerberos", false);
        c.init("svc", "app", "p", cfg);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<UserGroupInformation> mocked = Mockito.mockStatic(UserGroupInformation.class)) {
            mocked.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);
            Assertions.assertTrue(c.isKerberosEnabled(ugi));

            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(false);
            Assertions.assertFalse(c.isKerberosEnabled(ugi));
        }
    }

    @Test
    public void test03_defaultNoOpMethodsReturnNullOrNoThrow() throws Exception {
        DummyClient c = new DummyClient();
        Configuration cfg = new Configuration(false);
        c.init("svc", "app", "p", cfg);
        Assertions.assertNull(c.getServicePoliciesIfUpdated(1L, 2L));
        Assertions.assertNull(c.getRolesIfUpdated(1L, 2L));
        Assertions.assertNull(c.createRole(null));
        c.dropRole("u", "r");
        Assertions.assertNull(c.getAllRoles("u"));
        Assertions.assertNull(c.getUserRoles("u"));
        Assertions.assertNull(c.getRole("u", "r"));
        c.grantRole(null);
        c.revokeRole(null);
        c.grantAccess(null);
        c.revokeAccess(null);
        Assertions.assertNull(c.getServiceTagsIfUpdated(1L, 2L));
        Assertions.assertNull(c.getTagTypes("x"));
        Assertions.assertNull(c.getUserStoreIfUpdated(1L, 2L));
        Assertions.assertNull(c.getGdsInfoIfUpdated(1L, 2L));
    }
}
