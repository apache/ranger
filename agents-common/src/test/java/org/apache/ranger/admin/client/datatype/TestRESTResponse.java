/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.admin.client.datatype;

import com.sun.jersey.api.client.ClientResponse;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for RESTResponse class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRESTResponse {
    @Test
    public void test01_toJson_and_fromJson_roundTrip() {
        RESTResponse resp = new RESTResponse();
        resp.setHttpStatusCode(200);
        resp.setStatusCode(RESTResponse.STATUS_SUCCESS);
        resp.setMsgDesc("ok");
        resp.setMessageList(Collections.emptyList());

        String json = resp.toJson();
        assertNotNull(json);

        RESTResponse parsed = RESTResponse.fromJson(json);
        assertNotNull(parsed);
        assertEquals(200, parsed.getHttpStatusCode());
        assertEquals(RESTResponse.STATUS_SUCCESS, parsed.getStatusCode());
        assertEquals("ok", parsed.getMsgDesc());
    }

    @Test
    public void test02_fromJson_invalid_returnsNull() {
        RESTResponse parsed = RESTResponse.fromJson("not-json");
        assertNull(parsed);
    }

    @Test
    public void test03_getMessage_usesMsgDescElseHttpStatus() {
        RESTResponse r1 = new RESTResponse();
        r1.setHttpStatusCode(404);
        r1.setMsgDesc("not found");
        assertEquals("not found", r1.getMessage());

        RESTResponse r2 = new RESTResponse();
        r2.setHttpStatusCode(500);
        assertEquals("HTTP 500", r2.getMessage());
    }

    @Test
    public void test04_fromClientResponse_parsesBodyAndSetsStatus() {
        ClientResponse clientResponse = mock(ClientResponse.class);
        when(clientResponse.getStatus()).thenReturn(201);
        when(clientResponse.getEntity(String.class)).thenReturn("{\"statusCode\":0,\"msgDesc\":\"done\"}");

        RESTResponse resp = RESTResponse.fromClientResponse(clientResponse);
        assertNotNull(resp);
        assertEquals(201, resp.getHttpStatusCode());
        assertEquals(0, resp.getStatusCode());
        assertEquals("done", resp.getMsgDesc());
    }

    @Test
    public void test05_fromClientResponse_nullResponse_createsDefault() {
        RESTResponse resp = RESTResponse.fromClientResponse(null);
        assertNotNull(resp);
        assertEquals(0, resp.getHttpStatusCode());
    }

    @Test
    public void test06_message_toJson_fromJson_roundTrip() {
        RESTResponse.Message msg = new RESTResponse.Message();
        msg.setName("n");
        msg.setRbKey("k");
        msg.setMessage("m");
        msg.setObjectId(1L);
        msg.setFieldName("f");

        String json = msg.toJson();
        assertNotNull(json);

        RESTResponse parsed = RESTResponse.Message.fromJson("{\"messageList\":[{"
                + "\"name\":\"n\",\"rbKey\":\"k\",\"message\":\"m\",\"objectId\":1,\"fieldName\":\"f\"}]} ");
        assertNotNull(parsed);
    }

    @Test
    public void test07_toString_delegatesToToJson() {
        RESTResponse resp = new RESTResponse();
        resp.setHttpStatusCode(202);
        String s = resp.toString();
        assertNotNull(s);
        assertEquals(resp.toJson(), s);
    }

    @Test
    public void test08_message_getters_and_toString() {
        RESTResponse.Message msg = new RESTResponse.Message();
        msg.setName("nm");
        msg.setRbKey("rb");
        msg.setMessage("ms");
        msg.setObjectId(5L);
        msg.setFieldName("fld");
        assertEquals("nm", msg.getName());
        assertEquals("rb", msg.getRbKey());
        assertEquals("ms", msg.getMessage());
        assertEquals(5L, msg.getObjectId().longValue());
        assertEquals("fld", msg.getFieldName());
        assertNotNull(msg.toString());
    }

    @Test
    public void test09_fromClientResponse_emptyBody_setsOnlyStatus() {
        ClientResponse clientResponse = mock(ClientResponse.class);
        when(clientResponse.getStatus()).thenReturn(204);
        when(clientResponse.getEntity(String.class)).thenReturn("");
        RESTResponse resp = RESTResponse.fromClientResponse(clientResponse);
        assertNotNull(resp);
        assertEquals(204, resp.getHttpStatusCode());
    }
}
