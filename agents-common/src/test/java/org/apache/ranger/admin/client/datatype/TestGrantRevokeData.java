/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.admin.client.datatype;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for GrantRevokeData class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGrantRevokeData {
    @Test
    public void test01_setHiveData_setsDefaultsAndAddsPermMap() {
        GrantRevokeData data = new GrantRevokeData();
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap();
        pm.addUser("u1");
        pm.addGroup("g1");
        pm.addPerm("select");

        data.setHiveData("grantor", "repo", null, null, null, pm);

        assertEquals("grantor", data.getGrantor());
        assertEquals("repo", data.getRepositoryName());
        assertEquals("hive", data.getRepositoryType());
        assertEquals("*", data.getDatabases());
        assertEquals("*", data.getTables());
        assertEquals("*", data.getColumns());
        assertEquals(1, data.getPermMapList().size());
    }

    @Test
    public void test02_setHBaseData_setsDefaultsAndAddsPermMap() {
        GrantRevokeData data = new GrantRevokeData();
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap("u1", "g1", "RW");

        data.setHBaseData("grantor", "repo", null, null, null, pm);

        assertEquals("grantor", data.getGrantor());
        assertEquals("repo", data.getRepositoryName());
        assertEquals("hbase", data.getRepositoryType());
        assertEquals("*", data.getTables());
        assertEquals("*", data.getColumns());
        assertEquals("*", data.getColumnFamilies());
        assertEquals(1, data.getPermMapList().size());
    }

    @Test
    public void test03_permMap_copyConstructor_and_toJson() {
        List<String> users = new ArrayList<>(Arrays.asList("u1", "u2"));
        List<String> groups = new ArrayList<>(Arrays.asList("g1"));
        List<String> perms = new ArrayList<>(Arrays.asList("read"));

        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap(users, groups, perms);
        assertEquals(2, pm.getUserList().size());
        assertEquals(1, pm.getGroupList().size());
        assertEquals(1, pm.getPermList().size());

        String json = pm.toJson();
        assertNotNull(json);
    }

    @Test
    public void test04_toJson_containsRepositoryType() {
        GrantRevokeData data = new GrantRevokeData();
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap("u", "g", "p");
        data.setHiveData("grantor", "repo", "db", "tbl", "col", pm);

        String json = data.toJson();
        assertNotNull(json);
        assertTrue(json.contains("\"repositoryType\":\"hive\""));
    }

    @Test
    public void test05_permMap_addMethods_ignoreNullOrEmpty() throws Exception {
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap();
        pm.addUser("");
        pm.addUser(null);
        pm.addGroup("");
        pm.addGroup(null);
        pm.addPerm("");
        pm.addPerm(null);
        assertTrue(pm.getUserList().isEmpty());
        assertTrue(pm.getGroupList().isEmpty());
        assertTrue(pm.getPermList().isEmpty());
    }

    @Test
    public void test06_permMap_threeArgConstructor_populatesLists_and_toString() {
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap("uX", "gX", "pX");
        assertEquals(1, pm.getUserList().size());
        assertEquals("uX", pm.getUserList().get(0));
        assertEquals(1, pm.getGroupList().size());
        assertEquals("gX", pm.getGroupList().get(0));
        assertEquals(1, pm.getPermList().size());
        assertEquals("pX", pm.getPermList().get(0));
        assertNotNull(pm.toString());
    }

    @Test
    public void test07_permMap_copyConstructor_ignoresNullAndEmpty() {
        List<String> users = new ArrayList<>(Arrays.asList("", null, "u1"));
        List<String> groups = new ArrayList<>(Arrays.asList(null, "", "g1"));
        List<String> perms = new ArrayList<>(Arrays.asList("", null, "p1"));
        GrantRevokeData.PermMap pm = new GrantRevokeData.PermMap(users, groups, perms);
        assertEquals(1, pm.getUserList().size());
        assertEquals("u1", pm.getUserList().get(0));
        assertEquals(1, pm.getGroupList().size());
        assertEquals("g1", pm.getGroupList().get(0));
        assertEquals(1, pm.getPermList().size());
        assertEquals("p1", pm.getPermList().get(0));
    }

    @Test
    public void test08_setPermMapList_replacesList() {
        GrantRevokeData data = new GrantRevokeData();
        GrantRevokeData.PermMap pm1 = new GrantRevokeData.PermMap("u1", "g1", "p1");
        GrantRevokeData.PermMap pm2 = new GrantRevokeData.PermMap("u2", "g2", "p2");
        List<GrantRevokeData.PermMap> newList = new ArrayList<>();
        newList.add(pm1);
        newList.add(pm2);
        data.setPermMapList(newList);
        assertEquals(2, data.getPermMapList().size());
        assertEquals("u2", data.getPermMapList().get(1).getUserList().get(0));
    }
}
