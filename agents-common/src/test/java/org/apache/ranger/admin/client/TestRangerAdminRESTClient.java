/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the
 *  License.
 */

package org.apache.ranger.admin.client;

import com.sun.jersey.api.client.ClientResponse;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.security.AccessControlException;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.ranger.admin.client.datatype.RESTResponse;
import org.apache.ranger.audit.provider.MiscUtil;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.util.GrantRevokeRequest;
import org.apache.ranger.plugin.util.GrantRevokeRoleRequest;
import org.apache.ranger.plugin.util.RangerRESTClient;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerServiceNotFoundException;
import org.apache.ranger.plugin.util.ServiceGdsInfo;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.NewCookie;

import java.lang.reflect.Field;
import java.security.PrivilegedExceptionAction;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerAdminRESTClient class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAdminRESTClient {
    private static void setPrivateField(Object target, String name, Object value) throws Exception {
        Field f = target.getClass().getDeclaredField(name);
        f.setAccessible(true);
        f.set(target, value);
    }

    private static Object getPrivateField(Object target, String name) throws Exception {
        Field f = target.getClass().getDeclaredField(name);
        f.setAccessible(true);
        return f.get(target);
    }

    @Test
    public void test01_getTagTypes_okAndCookieSet() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        cfg.setBoolean("p.policy.rest.client.cookie.enabled", true);
        cfg.set("p.policy.rest.client.session.cookie.name", "RANGERSESSION");
        client.init("svc", "app", "p", cfg);

        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse resp = Mockito.mock(ClientResponse.class);
        Mockito.when(resp.getStatus()).thenReturn(200);
        Mockito.when(resp.getEntity(String.class)).thenReturn("[\"t1\",\"t2\"]");
        Mockito.when(resp.getCookies()).thenReturn(Arrays.asList(new NewCookie("RANGERSESSION", "abc")));

        ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<Map> params = ArgumentCaptor.forClass(Map.class);
        ArgumentCaptor<Cookie> cookie = ArgumentCaptor.forClass(Cookie.class);
        Mockito.when(rest.get(url.capture(), params.capture(), cookie.capture())).thenReturn(resp);

        List<String> tags = client.getTagTypes("t");
        Assertions.assertEquals(Arrays.asList("t1", "t2"), tags);

        // Invoke again to verify a cookie is now being sent
        ClientResponse resp2 = Mockito.mock(ClientResponse.class);
        Mockito.when(resp2.getStatus()).thenReturn(500);
        Mockito.when(resp2.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(resp2);
        Assertions.assertThrows(Exception.class, () -> client.getTagTypes("t"));
    }

    @Test
    public void test02_getTagTypes_errorThrows() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);

        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse resp = Mockito.mock(ClientResponse.class);
        Mockito.when(resp.getStatus()).thenReturn(500);
        Mockito.when(resp.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("server-error");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(resp);

        Assertions.assertThrows(Exception.class, () -> client.getTagTypes("t"));
    }

    @Test
    public void test03_getServicePoliciesIfUpdated_notModifiedReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse resp = Mockito.mock(ClientResponse.class);
        Mockito.when(resp.getStatus()).thenReturn(304);
        Mockito.when(resp.getCookies()).thenReturn(Arrays.asList(new NewCookie("R", "v")));
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(resp);

        Assertions.assertNull(client.getServicePoliciesIfUpdated(1L, 2L));
    }

    @Test
    public void test04_getServicePoliciesIfUpdated_notFoundThrowsServiceNotFound() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse resp = Mockito.mock(ClientResponse.class);
        Mockito.when(resp.getStatus()).thenReturn(404);
        String body = "\"RANGER_ERROR_SERVICE_NOT_FOUND: ServiceName=svc\"";
        Mockito.when(resp.hasEntity()).thenReturn(true);
        Mockito.when(resp.getEntity(String.class)).thenReturn(body);
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(resp);

        Assertions.assertThrows(RangerServiceNotFoundException.class, () -> client.getServicePoliciesIfUpdated(1L, 2L));
    }

    @Test
    public void test05_createRole_unauthorizedAndNullResponse() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        RangerRole role = new RangerRole();
        role.setName("r1");

        ClientResponse unauthorized = Mockito.mock(ClientResponse.class);
        Mockito.when(unauthorized.getStatus()).thenReturn(401);
        Mockito.when(unauthorized.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(unauthorized);
        Assertions.assertThrows(AccessControlException.class, () -> client.createRole(role));

        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.createRole(role));
    }

    @Test
    public void test06_dropRole_okAndError() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok204 = Mockito.mock(ClientResponse.class);
        Mockito.when(ok204.getStatus()).thenReturn(204);
        Mockito.when(rest.delete(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok204);
        client.dropRole("u", "r");

        Mockito.when(rest.delete(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.dropRole("u", "r"));
    }

    @Test
    public void test07_getAllRoles_okAndUnauthorized() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("[\"a\"]");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        Assertions.assertEquals(Arrays.asList("a"), client.getAllRoles("u"));

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.getAllRoles("u"));
    }

    @Test
    public void test08_getServiceTagsIfUpdated_branches() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertNull(client.getServiceTagsIfUpdated(1L, 2L));

        ClientResponse notFound = Mockito.mock(ClientResponse.class);
        Mockito.when(notFound.getStatus()).thenReturn(404);
        Mockito.when(notFound.hasEntity()).thenReturn(true);
        Mockito.when(notFound.getEntity(String.class))
                .thenReturn("\"RANGER_ERROR_SERVICE_NOT_FOUND: ServiceName=svc\"");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notFound);
        Assertions.assertThrows(RangerServiceNotFoundException.class, () -> client.getServiceTagsIfUpdated(1L, 2L));
    }

    @Test
    public void test09_getUserStoreIfUpdated_and_getGdsInfoIfUpdated_unexpectedStatusResetsCookie() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        cfg.setBoolean("p.policy.rest.client.cookie.enabled", true);
        cfg.set("p.policy.rest.client.session.cookie.name", "RANGERSESSION");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("{}\n");
        Mockito.when(ok.getCookies()).thenReturn(Arrays.asList(new NewCookie("RANGERSESSION", "abc")));
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        client.getUserStoreIfUpdated(1L, 2L);
        Assertions.assertNotNull(getPrivateField(client, "sessionId"));

        ClientResponse unexpected = Mockito.mock(ClientResponse.class);
        Mockito.when(unexpected.getStatus()).thenReturn(418); // unexpected status
        Mockito.when(unexpected.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("teapot");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(unexpected);
        client.getGdsInfoIfUpdated(1L, 2L);
        Assertions.assertNull(getPrivateField(client, "sessionId"));
    }

    @Test
    public void test10_secureModeBranches_usePrivilegedAction() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);

            Assertions.assertNull(client.getServicePoliciesIfUpdated(1L, 2L));
        }
    }

    @Test
    public void test11_getRolesIfUpdated_branches_notModifiedAndNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertNull(client.getRolesIfUpdated(1L, 2L));

        ClientResponse notModified = Mockito.mock(ClientResponse.class);
        Mockito.when(notModified.getStatus()).thenReturn(304);
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notModified);
        Assertions.assertNull(client.getRolesIfUpdated(1L, 2L));
    }

    @Test
    public void test12_getRolesIfUpdated_ok() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class))
                .thenReturn("{\n  \"serviceName\": \"svc\",\n  \"roleVersion\": 5\n}\n");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        RangerRoles roles = client.getRolesIfUpdated(1L, 2L);
        Assertions.assertNotNull(roles);
    }

    @Test
    public void test13_getRolesIfUpdated_notFoundThrowsServiceNotFound() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse notFound = Mockito.mock(ClientResponse.class);
        Mockito.when(notFound.getStatus()).thenReturn(404);
        Mockito.when(notFound.hasEntity()).thenReturn(true);
        Mockito.when(notFound.getEntity(String.class))
                .thenReturn("\"RANGER_ERROR_SERVICE_NOT_FOUND: ServiceName=svc\"");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notFound);
        Assertions.assertThrows(RangerServiceNotFoundException.class, () -> client.getRolesIfUpdated(1L, 2L));
    }

    @Test
    public void test14_getRolesIfUpdated_unexpectedStatusReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse unexpected = Mockito.mock(ClientResponse.class);
        Mockito.when(unexpected.getStatus()).thenReturn(500);
        Mockito.when(unexpected.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unexpected);
        Assertions.assertNull(client.getRolesIfUpdated(1L, 2L));
    }

    @Test
    public void test15_getUserRoles_okUnauthorizedAndNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("[\"r1\",\"r2\"]");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.isNull(), Mockito.isNull())).thenReturn(ok);
        Assertions.assertEquals(Arrays.asList("r1", "r2"), client.getUserRoles("u"));

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.isNull(), Mockito.isNull())).thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.getUserRoles("u"));

        Mockito.when(rest.get(Mockito.anyString(), Mockito.isNull(), Mockito.isNull())).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.getUserRoles("u"));
    }

    @Test
    public void test16_getRole_okUnauthorizedAndNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("{\n  \"name\": \"role1\"\n}\n");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        RangerRole role = client.getRole("u", "role1");
        Assertions.assertNotNull(role);

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.getRole("u", "role1"));

        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.getRole("u", "role1"));
    }

    @Test
    public void test17_grantRole_branches() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        GrantRevokeRoleRequest req = new GrantRevokeRoleRequest();

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.grantRole(req));

        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.grantRole(req));

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(err);
        Assertions.assertThrows(Exception.class, () -> client.grantRole(req));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class))).thenReturn(ok);
        client.grantRole(req);
    }

    @Test
    public void test18_revokeRole_branches() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        GrantRevokeRoleRequest req = new GrantRevokeRoleRequest();

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.revokeRole(req));

        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.revokeRole(req));

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class)))
                .thenReturn(err);
        Assertions.assertThrows(Exception.class, () -> client.revokeRole(req));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(rest.put(Mockito.anyString(), Mockito.<Object>any(), Mockito.isNull(Cookie.class))).thenReturn(ok);
        client.revokeRole(req);
    }

    @Test
    public void test19_grantAccess_branches() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        GrantRevokeRequest req = new GrantRevokeRequest();

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.grantAccess(req));

        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.grantAccess(req));

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull())).thenReturn(err);
        Assertions.assertThrows(Exception.class, () -> client.grantAccess(req));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull())).thenReturn(ok);
        client.grantAccess(req);
    }

    @Test
    public void test20_revokeAccess_branches() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        GrantRevokeRequest req = new GrantRevokeRequest();

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.revokeAccess(req));

        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull()))
                .thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.revokeAccess(req));

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull())).thenReturn(err);
        Assertions.assertThrows(Exception.class, () -> client.revokeAccess(req));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull())).thenReturn(ok);
        client.revokeAccess(req);
    }

    @Test
    public void test21_getServicePoliciesIfUpdated_ok() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class))
                .thenReturn("{\n  \"serviceName\": \"svc\",\n  \"policyVersion\": 3\n}\n");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        ServicePolicies policies = client.getServicePoliciesIfUpdated(1L, 2L);
        Assertions.assertNotNull(policies);
    }

    @Test
    public void test22_getServicePoliciesIfUpdated_unexpectedStatusReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse unexpected = Mockito.mock(ClientResponse.class);
        Mockito.when(unexpected.getStatus()).thenReturn(500);
        Mockito.when(unexpected.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unexpected);
        Assertions.assertNull(client.getServicePoliciesIfUpdated(1L, 2L));
    }

    // ==================== Additional tests to cover missing branches
    // ====================

    @Test
    public void test23_createRole_ok() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        RangerRole roleReq = new RangerRole();
        roleReq.setName("r1");

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("{\"name\":\"r1\"}");
        Mockito.when(rest.post(Mockito.anyString(), Mockito.anyMap(), Mockito.any(), Mockito.isNull())).thenReturn(ok);

        RangerRole role = client.createRole(roleReq);
        Assertions.assertNotNull(role);
    }

    @Test
    public void test24_dropRole_unauthorizedAndError() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse unauth = Mockito.mock(ClientResponse.class);
        Mockito.when(unauth.getStatus()).thenReturn(401);
        Mockito.when(unauth.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("unauth");
            }
        }.toJson());
        Mockito.when(rest.delete(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unauth);
        Assertions.assertThrows(AccessControlException.class, () -> client.dropRole("u", "r"));

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.delete(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(err);
        Assertions.assertThrows(Exception.class, () -> client.dropRole("u", "r"));
    }

    @Test
    public void test25_getAllRoles_nullResponseThrows() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> client.getAllRoles("u"));
    }

    @Test
    public void test26_getServiceTagsIfUpdated_notModifiedReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse notModified = Mockito.mock(ClientResponse.class);
        Mockito.when(notModified.getStatus()).thenReturn(304);
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notModified);
        Assertions.assertNull(client.getServiceTagsIfUpdated(1L, 2L));
    }

    @Test
    public void test27_getServiceTagsIfUpdated_okReturnsObject() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("{}\n");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        ServiceTags tags = client.getServiceTagsIfUpdated(1L, 2L);
        Assertions.assertNotNull(tags);
    }

    @Test
    public void test28_getServiceTagsIfUpdated_unexpectedStatusReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse unexpected = Mockito.mock(ClientResponse.class);
        Mockito.when(unexpected.getStatus()).thenReturn(500);
        Mockito.when(unexpected.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unexpected);
        Assertions.assertNull(client.getServiceTagsIfUpdated(1L, 2L));
    }

    @Test
    public void test29_getUserStoreIfUpdated_notModifiedNotFoundAndUnexpected() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse notModified = Mockito.mock(ClientResponse.class);
        Mockito.when(notModified.getStatus()).thenReturn(304);
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notModified);
        Assertions.assertNull(client.getUserStoreIfUpdated(1L, 2L));

        ClientResponse notFound = Mockito.mock(ClientResponse.class);
        Mockito.when(notFound.getStatus()).thenReturn(404);
        Mockito.when(notFound.hasEntity()).thenReturn(true);
        Mockito.when(notFound.getEntity(String.class))
                .thenReturn("\"RANGER_ERROR_SERVICE_NOT_FOUND: ServiceName=svc\"");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notFound);
        Assertions.assertThrows(RangerServiceNotFoundException.class, () -> client.getUserStoreIfUpdated(1L, 2L));

        ClientResponse unexpected = Mockito.mock(ClientResponse.class);
        Mockito.when(unexpected.getStatus()).thenReturn(500);
        Mockito.when(unexpected.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(unexpected);
        Assertions.assertNull(client.getUserStoreIfUpdated(1L, 2L));
    }

    @Test
    public void test30_getGdsInfoIfUpdated_nullNotModifiedOkNotFound() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(null);
        Assertions.assertNull(client.getGdsInfoIfUpdated(1L, 2L));

        ClientResponse notModified = Mockito.mock(ClientResponse.class);
        Mockito.when(notModified.getStatus()).thenReturn(304);
        Mockito.when(notModified.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("not-modified");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notModified);
        Assertions.assertNull(client.getGdsInfoIfUpdated(1L, 2L));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("{}\n");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(ok);
        ServiceGdsInfo gds = client.getGdsInfoIfUpdated(1L, 2L);
        Assertions.assertNotNull(gds);

        ClientResponse notFound = Mockito.mock(ClientResponse.class);
        Mockito.when(notFound.getStatus()).thenReturn(404);
        Mockito.when(notFound.hasEntity()).thenReturn(true);
        Mockito.when(notFound.getEntity(String.class))
                .thenReturn("\"RANGER_ERROR_SERVICE_NOT_FOUND: ServiceName=svc\"");
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(notFound);
        Assertions.assertThrows(RangerServiceNotFoundException.class, () -> client.getGdsInfoIfUpdated(1L, 2L));
    }

    @Test
    public void test31_getServicePoliciesIfUpdated_noContentReturnsNull() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse noContent = Mockito.mock(ClientResponse.class);
        Mockito.when(noContent.getStatus()).thenReturn(204);
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(noContent);

        Assertions.assertNull(client.getServicePoliciesIfUpdated(1L, 2L));
    }

    @Test
    public void test32_getAllRoles_errorThrowsNonUnauthorized() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(err);

        Assertions.assertThrows(Exception.class, () -> client.getAllRoles("u"));
    }

    @Test
    public void test33_getUserRoles_errorThrowsNonUnauthorized() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.isNull(), Mockito.isNull())).thenReturn(err);

        Assertions.assertThrows(Exception.class, () -> client.getUserRoles("u"));
    }

    @Test
    public void test34_getRole_errorThrowsNonUnauthorized() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        ClientResponse err = Mockito.mock(ClientResponse.class);
        Mockito.when(err.getStatus()).thenReturn(500);
        Mockito.when(err.getEntity(String.class)).thenReturn(new RESTResponse() {
            {
                setMsgDesc("err");
            }
        }.toJson());
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.isNull())).thenReturn(err);

        Assertions.assertThrows(Exception.class, () -> client.getRole("u", "r"));
    }

    @Test
    public void test35_cookieNullResponseResetsSessionId() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        cfg.setBoolean("p.policy.rest.client.cookie.enabled", true);
        cfg.set("p.policy.rest.client.session.cookie.name", "RANGERSESSION");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        // First call sets the cookie
        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatus()).thenReturn(200);
        Mockito.when(ok.getEntity(String.class)).thenReturn("[\"t\"]");
        Mockito.when(ok.getCookies()).thenReturn(Arrays.asList(new NewCookie("RANGERSESSION", "abc")));
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(ok);
        client.getTagTypes("t");
        Assertions.assertNotNull(getPrivateField(client, "sessionId"));

        // Next call returns null response; sessionId should be reset to null
        Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(null);
        client.getServicePoliciesIfUpdated(1L, 2L);
        Assertions.assertNull(getPrivateField(client, "sessionId"));
    }

    @Test
    public void test36_getRolesIfUpdated_secureMode_usesSecureUrl() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);
            misc.when(() -> MiscUtil.executePrivilegedAction(Mockito.<PrivilegedExceptionAction<ClientResponse>>any()))
                    .thenAnswer(inv -> {
                        PrivilegedExceptionAction<ClientResponse> action = inv.getArgument(0);
                        return action.run();
                    });

            ClientResponse notModified = Mockito.mock(ClientResponse.class);
            Mockito.when(notModified.getStatus()).thenReturn(304);
            Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(notModified);

            Assertions.assertNull(client.getRolesIfUpdated(1L, 2L));

            ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
            Mockito.verify(rest).get(url.capture(), Mockito.anyMap(), Mockito.any());
            Assertions.assertEquals("/service/roles/secure/download/svc", url.getValue());
        }
    }

    @Test
    public void test37_getServiceTagsIfUpdated_secureMode_usesSecureUrl() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);
            misc.when(() -> MiscUtil.executePrivilegedAction(Mockito.<PrivilegedExceptionAction<ClientResponse>>any()))
                    .thenAnswer(inv -> {
                        PrivilegedExceptionAction<ClientResponse> action = inv.getArgument(0);
                        return action.run();
                    });

            ClientResponse notModified = Mockito.mock(ClientResponse.class);
            Mockito.when(notModified.getStatus()).thenReturn(304);
            Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(notModified);

            Assertions.assertNull(client.getServiceTagsIfUpdated(1L, 2L));

            ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
            Mockito.verify(rest).get(url.capture(), Mockito.anyMap(), Mockito.any());
            Assertions.assertEquals("/service/tags/secure/download/svc", url.getValue());
        }
    }

    @Test
    public void test38_getUserStoreIfUpdated_secureMode_usesSecureUrl() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);
            misc.when(() -> MiscUtil.executePrivilegedAction(Mockito.<PrivilegedExceptionAction<ClientResponse>>any()))
                    .thenAnswer(inv -> {
                        PrivilegedExceptionAction<ClientResponse> action = inv.getArgument(0);
                        return action.run();
                    });

            ClientResponse notModified = Mockito.mock(ClientResponse.class);
            Mockito.when(notModified.getStatus()).thenReturn(304);
            Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(notModified);

            Assertions.assertNull(client.getUserStoreIfUpdated(1L, 2L));

            ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
            Mockito.verify(rest).get(url.capture(), Mockito.anyMap(), Mockito.any());
            Assertions.assertEquals("/service/xusers/secure/download/svc", url.getValue());
        }
    }

    @Test
    public void test39_getGdsInfoIfUpdated_secureMode_usesSecureUrl() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);
            Mockito.when(ugi.hasKerberosCredentials()).thenReturn(true);
            misc.when(() -> MiscUtil.executePrivilegedAction(Mockito.<PrivilegedExceptionAction<ClientResponse>>any()))
                    .thenAnswer(inv -> {
                        PrivilegedExceptionAction<ClientResponse> action = inv.getArgument(0);
                        return action.run();
                    });

            ClientResponse notModified = Mockito.mock(ClientResponse.class);
            Mockito.when(notModified.getStatus()).thenReturn(304);
            Mockito.when(rest.get(Mockito.anyString(), Mockito.anyMap(), Mockito.any())).thenReturn(notModified);

            Assertions.assertNull(client.getGdsInfoIfUpdated(1L, 2L));

            ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
            Mockito.verify(rest).get(url.capture(), Mockito.anyMap(), Mockito.any());
            Assertions.assertEquals("/service/gds/secure/download/svc", url.getValue());
        }
    }

    @Test
    public void test40_forceNonKerberos_disablesSecureMode_forRolesEndpoint() throws Exception {
        RangerAdminRESTClient client = new RangerAdminRESTClient();
        Configuration cfg = new Configuration(false);
        cfg.set("p.policy.rest.url", "http://localhost:6080");
        cfg.setBoolean("p.forceNonKerberos", true);
        client.init("svc", "app", "p", cfg);
        RangerRESTClient rest = Mockito.mock(RangerRESTClient.class);
        setPrivateField(client, "restClient", rest);

        UserGroupInformation ugi = Mockito.mock(UserGroupInformation.class);
        try (MockedStatic<MiscUtil> misc = Mockito.mockStatic(MiscUtil.class);
                MockedStatic<UserGroupInformation> ugiStatic = Mockito.mockStatic(UserGroupInformation.class)) {
            misc.when(MiscUtil::getUGILoginUser).thenReturn(ugi);
            ugiStatic.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);

            ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);
            ClientResponse notModified = Mockito.mock(ClientResponse.class);
            Mockito.when(notModified.getStatus()).thenReturn(304);
            Mockito.when(rest.get(url.capture(), Mockito.anyMap(), Mockito.any())).thenReturn(notModified);

            Assertions.assertNull(client.getRolesIfUpdated(1L, 2L));
            Assertions.assertEquals("/service/roles/download/svc", url.getValue());
        }
    }
}
