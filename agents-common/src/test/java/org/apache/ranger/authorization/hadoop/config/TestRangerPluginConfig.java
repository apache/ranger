/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hadoop.config;

import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerPluginConfig class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPluginConfig {
    @Test
    public void test01_constructor_setsDefaults_andPolicyOptionsConfigured() {
        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", null, null, null, null, (List<File>) null, null);

        assertEquals("hdfs", cfg.getServiceType());
        assertEquals("hdfs", cfg.getAppId());
        assertEquals("ranger.plugin.hdfs", cfg.getPropertyPrefix());
        assertNotNull(cfg.getPolicyEngineOptions());
    }

    @Test
    public void test02_constructor_serviceNameFromConfig_whenNullInCtor() throws Exception {
        // create a temp config file that sets service name property
        Path tmp = Files.createTempFile("ranger-plugin-", ".xml");
        String key = "ranger.plugin.hdfs.service.name";
        String xml = "<configuration>\n" +
                "  <property>\n" +
                "    <name>" + key + "</name>\n" +
                "    <value>svcA</value>\n" +
                "  </property>\n" +
                "</configuration>\n";
        Files.write(tmp, xml.getBytes(StandardCharsets.UTF_8));

        List<File> files = new ArrayList<>();
        files.add(tmp.toFile());

        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", null, null, null, null, files, null);

        assertNull(cfg.getServiceName());
        assertEquals("svcA", cfg.get(key));
    }

    @Test
    public void test03_constructor_clusterName_clusterType_resolution() {
        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", "svc", null, null, null, (List<File>) null, null);

        assertEquals("", cfg.getClusterName());
        assertEquals("", cfg.getClusterType());
    }

    @Test
    public void test04_xForwardedAndTrustedProxy_parsing_andWarnings() {
        // Provide a config file enabling forwarded IP and a list of proxies
        Path tmp;
        try {
            tmp = Files.createTempFile("ranger-plugin-ip-", ".xml");
            String prefix = "ranger.plugin.hdfs";
            String xml = "<configuration>\n" +
                    "  <property><name>" + prefix + ".use.x-forwarded-for.ipaddress</name><value>true</value></property>\n" +
                    "  <property><name>" + prefix + ".trusted.proxy.ipaddresses</name><value>10.0.0.1, 10.0.0.2</value></property>\n" +
                    "</configuration>\n";
            Files.write(tmp, xml.getBytes(StandardCharsets.UTF_8));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        List<File> files = new ArrayList<>();
        files.add(tmp.toFile());

        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", "svc", null, null, null, files, null);

        assertTrue(cfg.isUseForwardedIPAddress());
        assertArrayEquals(new String[] {"10.0.0.1", "10.0.0.2"}, cfg.getTrustedProxyAddresses());
    }

    @Test
    public void test05_policyEngineOptions_providedIsUsed() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", "svc", "app", "cln", "clt", Collections.<File>emptyList(), opts);
        assertSame(opts, cfg.getPolicyEngineOptions());
    }

    @Test
    public void test06_auditAndSuperUsersGroupsRoles_apis() {
        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", "svc", null, null, null, (List<File>) null, null);

        Set<String> users = new HashSet<>(Arrays.asList("u1", "u2"));
        Set<String> groups = new HashSet<>(Arrays.asList("g1", "g2"));
        Set<String> roles = new HashSet<>(Arrays.asList("r1"));
        cfg.setAuditExcludedUsersGroupsRoles(users, groups, roles);

        assertTrue(cfg.isAuditExcludedUser("u1"));
        assertTrue(cfg.hasAuditExcludedGroup(new HashSet<>(Arrays.asList("g2"))));
        assertTrue(cfg.hasAuditExcludedRole(new HashSet<>(Arrays.asList("r1", "r2"))));

        cfg.setSuperUsersGroups(new HashSet<>(Arrays.asList("su1")), new HashSet<>(Arrays.asList("sg1")));
        assertTrue(cfg.isSuperUser("su1"));
        assertTrue(cfg.hasSuperGroup(new HashSet<>(Arrays.asList("sg1", "sgX"))));

        cfg.setServiceAdmins(new HashSet<>(Arrays.asList("admin1")));
        assertTrue(cfg.isServiceAdmin("admin1"));

        cfg.addSuperUsers(new ArrayList<>(Arrays.asList("su2")));
        assertTrue(cfg.isSuperUser("su2"));
    }

    @Test
    public void test07_getSSLConfigResource_returnsNullForMissingFile() throws Exception {
        RangerPluginConfig cfg = new RangerPluginConfig("hdfs", "svc", null, null, null, (List<File>) null, null);
        Method m = RangerPluginConfig.class.getDeclaredMethod("getSSLConfigResource", String.class);
        m.setAccessible(true);
        Object ret = m.invoke(cfg, "file-that-does-not-exist-xyz.txt");
        assertNull(ret);
    }
}
