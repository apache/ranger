/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hadoop.config;

import org.apache.hadoop.conf.Configuration;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URL;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerLegacyConfigBuilder class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerLegacyConfigBuilder {
    @Test
    public void test01_getPropertyName_replacesPlaceholder() {
        String prop = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_SERVICE_NAME, "hdfs");
        assertEquals("ranger.plugin.hdfs.service.name", prop);
    }

    @Test
    public void test02_getPolicyMgrURL_extractsBase() {
        String url = "http://host:6080/service/public/v2/api/service/name";
        String base = RangerLegacyConfigBuilder.getPolicyMgrURL(url);
        assertEquals("http://host:6080", base);
    }

    @Test
    public void test03_getServiceNameFromURL_extractsName() {
        String url = "http://host:6080/service/public/v2/api/service/myservice";
        assertEquals("myservice", RangerLegacyConfigBuilder.getServiceNameFromURL(url));
    }

    @Test
    public void test04_getCacheFileURL_parentDir() {
        assertEquals("/var/cache/ranger", RangerLegacyConfigBuilder.getCacheFileURL("/var/cache/ranger/policies.json"));
    }

    @Test
    public void test05_buildRangerSecurityConf_knoxGetsDefaultImpl() {
        Configuration conf = RangerLegacyConfigBuilder.buildRangerSecurityConf("knox");
        String key = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_SOURCE_IMPL, "knox");
        assertEquals("org.apache.ranger.admin.client.RangerAdminJersey2RESTClient", conf.get(key));
    }

    @Test
    public void test06_buildRangerSecurityConf_nonKnoxEmptyImpl() {
        Configuration conf = RangerLegacyConfigBuilder.buildRangerSecurityConf("hdfs");
        String key = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_SOURCE_IMPL, "hdfs");
        assertEquals("", conf.get(key));
    }

    @Test
    public void test07_getConfigChangeMap_containsExpectedKeys() {
        assertTrue(RangerLegacyConfigBuilder.getConfigChangeMap("hdfs").size() >= 4);
    }

    @Test
    public void test08_getFileURL_unknownResource_null() {
        URL url = RangerLegacyConfigBuilder.getFileURL("this-file-definitely-does-not-exist-xyz.txt");
        assertNull(url);
    }

    @Test
    public void test09_fetchLegacyValue_behaviors() throws Exception {
        // set static serviceType used by fetchLegacyValue
        Field f = RangerLegacyConfigBuilder.class.getDeclaredField("serviceType");
        f.setAccessible(true);
        f.set(null, "hdfs");
        String serviceNameKey = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_SERVICE_NAME, "hdfs");
        String restUrlKey = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_REST_URL, "hdfs");
        String cacheDirKey = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_CACHE_DIR, "hdfs");

        assertEquals("svc", RangerLegacyConfigBuilder.fetchLegacyValue("http://host:6080/service/public/rest/svc", serviceNameKey));
        assertEquals("http://host:6080", RangerLegacyConfigBuilder.fetchLegacyValue("http://host:6080/service/public/rest/svc", restUrlKey));
        assertEquals("/var/cache/ranger", RangerLegacyConfigBuilder.fetchLegacyValue("/var/cache/ranger/policies.json", cacheDirKey));
    }

    @Test
    public void test10_getSecurityConfig_returnsNullWhenLegacyNotFound() {
        Configuration cfg = RangerLegacyConfigBuilder.getSecurityConfig("nonexistent-svc");
        assertNull(cfg);
    }

    @Test
    public void test11_getAuditConfig_returnsNullIfNoSiteFiles() throws Throwable {
        URL url = RangerLegacyConfigBuilder.getAuditConfig("hdfs");
        // in unit test env, hive/hbase/hdfs site files are not present; should return null
        assertNull(url);
    }

    @Test
    public void test12_getConfigChangeMap_specificMappingsForHdfsAndHbase() {
        // HDFS adds XASECURE_ADD_HADDOP_AUTHORZATION -> RANGER_PLUGIN_ADD_HADDOOP_AUTHORIZATION
        assertTrue(RangerLegacyConfigBuilder.getConfigChangeMap("hdfs").containsKey(RangerConfigConstants.XASECURE_ADD_HADDOP_AUTHORZATION));
        assertEquals(RangerConfigConstants.RANGER_PLUGIN_ADD_HADDOOP_AUTHORIZATION,
                RangerLegacyConfigBuilder.getConfigChangeMap("hdfs").get(RangerConfigConstants.XASECURE_ADD_HADDOP_AUTHORZATION));

        // HBase adds update grant mapping
        String hbaseLegacy = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.XASECURE_UPDATE_XAPOLICIES_ON_GRANT, "hbase");
        String hbaseRanger = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.XASECURE_UPDATE_XAPOLICIES_ON_GRANT, "hbase");
        assertEquals(hbaseRanger, RangerLegacyConfigBuilder.getConfigChangeMap("hbase").get(hbaseLegacy));
    }

    @Test
    public void test13_fetchLegacyValue_unmatchedKey_returnsNull() {
        String unmatchedKey = "some.random.key";
        assertNull(RangerLegacyConfigBuilder.fetchLegacyValue("value", unmatchedKey));
    }

    @Test
    public void test14_mapLegacyConfigToRanger_appliesTransforms_viaReflection() throws Exception {
        // Ensure static serviceType used by mapLegacyConfigToRanger is set
        Field f = RangerLegacyConfigBuilder.class.getDeclaredField("serviceType");
        f.setAccessible(true);
        f.set(null, "hdfs");

        Configuration legacy = new Configuration();
        String legacyUrlKey   = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.XASECURE_POLICYMGR_URL, "hdfs");
        String legacyCacheKey = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.XASECURE_POLICYMGR_URL_LASTSTOREDFILE, "hdfs");
        String legacyReload   = RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.XASECURE_POLICYMGR_GRL_RELOADINTERVALINMILLIS, "hdfs");
        legacy.set(legacyUrlKey,   "http://host:6080/service/public/rest/svc");
        legacy.set(legacyCacheKey, "/var/cache/ranger/policies.json");
        legacy.set(legacyReload,   "5000");
        legacy.set(RangerConfigConstants.XASECURE_ADD_HADDOP_AUTHORZATION, "true");

        Configuration rangerIn = new Configuration();

        Method m = RangerLegacyConfigBuilder.class.getDeclaredMethod("mapLegacyConfigToRanger", Configuration.class, Configuration.class);
        m.setAccessible(true);
        Configuration out = (Configuration) m.invoke(null, rangerIn, legacy);

        assertNotNull(out);
        assertEquals("svc", out.get(RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_SERVICE_NAME, "hdfs")));
        assertEquals("http://host:6080", out.get(RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_REST_URL, "hdfs")));
        assertEquals("/var/cache/ranger", out.get(RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_CACHE_DIR, "hdfs")));
        assertEquals("5000", out.get(RangerLegacyConfigBuilder.getPropertyName(RangerConfigConstants.RANGER_PLUGIN_POLICY_POLLINVETERVALMS, "hdfs")));
        assertEquals("true", out.get(RangerConfigConstants.RANGER_PLUGIN_ADD_HADDOOP_AUTHORIZATION));
    }

    @Test
    public void test15_getFileLocation_unknownReturnsNull() {
        assertNull(RangerLegacyConfigBuilder.getFileLocation("definitely-not-present-xyz.xml"));
    }
}
