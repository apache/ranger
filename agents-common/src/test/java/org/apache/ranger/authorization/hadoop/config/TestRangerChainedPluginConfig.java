/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hadoop.config;

import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerChainedPluginConfig class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerChainedPluginConfig {
    @Test
    public void test01_copiesPropertiesWithNewPrefix_andExcludesNonChained() {
        RangerPluginConfig base = new RangerPluginConfig("hdfs", "baseSvc", "app", null, null, null);
        String basePrefix = base.getPropertyPrefix();

        base.set(basePrefix + ".prop1", "v1");
        base.set(basePrefix + ".chained.services", "svcA,svcB");
        base.set("xasecure.policymgr.clientssl.keystore", "ks");

        RangerChainedPluginConfig chained = new RangerChainedPluginConfig("hive", "hiveSvc", "app2", base);

        String chainedPrefix = chained.getPropertyPrefix();
        // copied
        assertEquals("v1", chained.get(chainedPrefix + ".prop1"));
        // chained property is intentionally NOT copied in copyProperties, and only copied if already present with the new prefix in source; expect null here
        assertNull(chained.get(chainedPrefix + ".chained.services"));
        // legacy ssl copied
        assertEquals("ks", chained.get("xasecure.policymgr.clientssl.keystore"));
        // service.name overridden to new service
        assertEquals("hiveSvc", chained.get(chainedPrefix + ".service.name"));
    }

    @Test
    public void test02_toString_containsClassNameAndProperties() {
        RangerPluginConfig base = new RangerPluginConfig("hdfs", "baseSvc", "app", null, null, (RangerPolicyEngineOptions) null);
        RangerChainedPluginConfig chained = new RangerChainedPluginConfig("hive", "hiveSvc", "app2", base);
        String s = chained.toString();
        assertTrue(s.contains("RangerChainedPluginConfig"));
        assertTrue(s.contains("propertyName:"));
    }
}
