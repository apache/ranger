/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.hadoop.config;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerConfiguration class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerConfiguration {
    public static class ThrowingAddResourceConfig extends RangerConfiguration {
        @Override
        public void addResource(URL url) {
            throw new RuntimeException("forced failure");
        }
    }

    @Test
    public void test01_addResourceIfReadable_nonExisting_returnsFalse() {
        RangerConfiguration conf = new RangerConfiguration();

        boolean added = conf.addResourceIfReadable("file-does-not-exist-12345.xml");

        assertFalse(added);
    }

    @Test
    public void test02_addResourceIfReadable_existingFile_returnsTrue_andLoadsProperty() throws Exception {
        RangerConfiguration conf = new RangerConfiguration();

        Path tmp = Files.createTempFile("ranger-config-", ".xml");
        String xml = "<configuration>\n" +
                "  <property>\n" +
                "    <name>test.key</name>\n" +
                "    <value>testValue</value>\n" +
                "  </property>\n" +
                "</configuration>\n";
        Files.write(tmp, xml.getBytes(StandardCharsets.UTF_8));

        boolean added = conf.addResourceIfReadable(tmp.toFile().getAbsolutePath());

        assertTrue(added);
        assertEquals("testValue", conf.get("test.key"));
    }

    @Test
    public void test03_addResourceIfReadable_whenAddResourceThrows_returnsFalse() throws Exception {
        ThrowingAddResourceConfig conf = new ThrowingAddResourceConfig();

        Path tmp = Files.createTempFile("ranger-config-throw-", ".xml");
        String xml = "<configuration/>";
        Files.write(tmp, xml.getBytes(StandardCharsets.UTF_8));

        boolean added = conf.addResourceIfReadable(tmp.toFile().getAbsolutePath());

        assertFalse(added);
    }

    @Test
    public void test04_getProperties_returnsNotNull() {
        RangerConfiguration conf = new RangerConfiguration();
        assertNotNull(conf.getProperties());
    }
}
