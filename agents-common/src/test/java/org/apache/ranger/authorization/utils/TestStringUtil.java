/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.authorization.utils;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZone.RangerSecurityZoneService;
import org.apache.ranger.plugin.util.RangerSecurityZoneHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
* @generated by Cursor
* @description <Unit Test for StringUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestStringUtil {
    public static Map<String, String> mapFromStrings(String... args) {
        Map<String, String> ret = new HashMap<>();

        if (args != null) {
            for (int i = 0; i < args.length; i += 2) {
                String key = args[i];
                String val = (args.length > (i + 1)) ? args[i + 1] : null;

                ret.put(key, val);
            }
        }

        return ret;
    }

    public static HashMap<String, List<String>> mapFromStringStringList(Object... args) {
        HashMap<String, List<String>> ret = new HashMap<>();

        if (args != null) {
            for (int i = 0; i < args.length; i += 2) {
                String key = (String) args[i];
                List<String> val = (args.length > (i + 1)) ? ((List<String>) args[i + 1]) : null;

                ret.put(key, val);
            }
        }

        return ret;
    }

    @Test
    public void testDedupString() {
        Map<String, String> strTbl = new HashMap<>();
        String s1 = getString("database");
        String s2 = getString("database");

        // s1 and s2 point to different instances of String
        Assertions.assertNotSame(s1, s2);

        // strTbl doesn't have s1; dedupString(s1) should return s1
        Assertions.assertSame(s1, StringUtil.dedupString(s1, strTbl));

        // strTbl now has s1; s2 has same value as s1, hence dedupString() should return s1
        Assertions.assertSame(s1, StringUtil.dedupString(s2, strTbl));
    }

    @Test
    public void testDedupStringsList() {
        Map<String, String> strTbl = new HashMap<>();
        List<String> l1 = null;

        Assertions.assertSame(l1, StringUtil.dedupStringsList(l1, strTbl));

        l1 = Collections.emptyList();
        Assertions.assertSame(l1, StringUtil.dedupStringsList(l1, strTbl));

        l1 = new ArrayList<>();
        Assertions.assertSame(l1, StringUtil.dedupStringsList(l1, strTbl));

        l1 = new ArrayList<>(Collections.singletonList("*"));
        Assertions.assertNotSame(l1, StringUtil.dedupStringsList(l1, strTbl));

        l1 = new ArrayList<>(Arrays.asList(getString("*"), getString("db1")));
        Assertions.assertNotSame(l1, StringUtil.dedupStringsList(l1, strTbl));

        List<String> l2 = new ArrayList<>(Arrays.asList(getString("*"), getString("db1")));

        for (int i = 0; i < l1.size(); i++) {
            Assertions.assertNotSame(l1.get(i), l2.get(i));
        }

        l1 = StringUtil.dedupStringsList(l1, strTbl);
        l2 = StringUtil.dedupStringsList(l2, strTbl);

        for (int i = 0; i < l1.size(); i++) {
            Assertions.assertSame(l1.get(i), l2.get(i));
        }
    }

    @Test
    public void testDedupStringsSet() {
        Map<String, String> strTbl = new HashMap<>();
        Set<String> s1 = null;

        Assertions.assertSame(s1, StringUtil.dedupStringsSet(s1, strTbl));

        s1 = Collections.emptySet();
        Assertions.assertSame(s1, StringUtil.dedupStringsSet(s1, strTbl));

        s1 = new HashSet<>();
        Assertions.assertSame(s1, StringUtil.dedupStringsSet(s1, strTbl));

        s1 = new HashSet<>(Collections.singletonList(getString("*")));
        Assertions.assertNotSame(s1, StringUtil.dedupStringsSet(s1, strTbl));

        s1 = new HashSet<>(Arrays.asList(getString("*"), getString("db1")));
        Assertions.assertNotSame(s1, StringUtil.dedupStringsSet(s1, strTbl));

        Set<String> s2 = new HashSet<>(Arrays.asList(getString("*"), getString("db1")));

        for (String elem : s1) {
            Assertions.assertFalse(containsInstance(s2, elem));
        }

        s1 = StringUtil.dedupStringsSet(s1, strTbl);
        s2 = StringUtil.dedupStringsSet(s2, strTbl);

        for (String elem : s1) {
            Assertions.assertTrue(containsInstance(s2, elem));
        }
    }

    @Test
    public void testDedupStringsMap() {
        Map<String, String> strTbl = new HashMap<>();
        Map<String, String> m1 = null;

        Assertions.assertSame(m1, StringUtil.dedupStringsMap(m1, strTbl));

        m1 = Collections.emptyMap();
        Assertions.assertSame(m1, StringUtil.dedupStringsMap(m1, strTbl));

        m1 = new HashMap<>();
        Assertions.assertSame(m1, StringUtil.dedupStringsMap(m1, strTbl));

        m1 = new HashMap<>();
        m1.put(getString("database"), getString("*"));
        Assertions.assertNotSame(m1, StringUtil.dedupStringsMap(m1, strTbl));

        Map<String, String> m2 = new HashMap<>();
        m2.put(getString("database"), getString("*"));

        for (Map.Entry<String, String> entry : m1.entrySet()) {
            String key = entry.getKey();

            Assertions.assertFalse(containsInstance(m2.keySet(), key));
            Assertions.assertNotSame(m1.get(key), m2.get(key));
        }

        m1 = StringUtil.dedupStringsMap(m1, strTbl);
        m2 = StringUtil.dedupStringsMap(m2, strTbl);

        for (Map.Entry<String, String> entry : m1.entrySet()) {
            String key = entry.getKey();

            Assertions.assertTrue(containsInstance(m2.keySet(), key));
            Assertions.assertSame(m1.get(key), m2.get(key));
        }
    }

    @Test
    public void testDedupMapOfPolicyResource() {
        Map<String, String> strTbl = new HashMap<>();
        Map<String, RangerPolicyResource> m1 = null;

        Assertions.assertSame(m1, StringUtil.dedupStringsMapOfPolicyResource(m1, strTbl));

        m1 = Collections.emptyMap();
        Assertions.assertSame(m1, StringUtil.dedupStringsMapOfPolicyResource(m1, strTbl));

        m1 = new HashMap<>();
        Assertions.assertSame(m1, StringUtil.dedupStringsMapOfPolicyResource(m1, strTbl));

        m1 = new HashMap<>();
        m1.put(getString("database"), new RangerPolicyResource(getString("db1")));
        m1.put(getString("table"), new RangerPolicyResource(getString("*")));
        Assertions.assertNotSame(m1, StringUtil.dedupStringsMapOfPolicyResource(m1, strTbl));

        Map<String, RangerPolicyResource> m2 = new HashMap<>();
        m2.put(getString("database"), new RangerPolicyResource(getString("db1")));
        m2.put(getString("table"), new RangerPolicyResource(getString("*")));

        for (Map.Entry<String, RangerPolicyResource> entry : m1.entrySet()) {
            String key = entry.getKey();
            RangerPolicyResource value1 = entry.getValue();
            RangerPolicyResource value2 = m2.get(key);

            Assertions.assertFalse(containsInstance(m2.keySet(), key));

            for (String value : value1.getValues()) {
                Assertions.assertFalse(containsInstance(value2.getValues(), value));
            }
        }

        m1 = StringUtil.dedupStringsMapOfPolicyResource(m1, strTbl);
        m2 = StringUtil.dedupStringsMapOfPolicyResource(m2, strTbl);

        for (Map.Entry<String, RangerPolicyResource> entry : m1.entrySet()) {
            String key = entry.getKey();
            RangerPolicyResource value1 = entry.getValue();
            RangerPolicyResource value2 = m2.get(key);

            Assertions.assertTrue(containsInstance(m2.keySet(), key));

            for (String value : value1.getValues()) {
                Assertions.assertTrue(containsInstance(value2.getValues(), value));
            }
        }
    }

    @Test
    public void testJsonCompression() throws IOException {
        int[] sizeFactors = new int[] {1, 10, 50, 100, 250, 300, 400, 500};

        for (int sizeFactor : sizeFactors) {
            RangerSecurityZone zone = generateLargeSecurityZone(sizeFactor);
            String json = JsonUtils.objectToJson(zone);
            String compressed = StringUtil.compressString(json);
            String deCompressed = StringUtil.decompressString(compressed);

            System.out.printf("%d: resourceCount=%d: len(json)=%,d, len(compressed)=%,d, savings=(%,d == %.03f%%)%n",
                    sizeFactor, getResourceCount(zone), json.length(), compressed.length(),
                    (json.length() - compressed.length()),
                    ((json.length() - compressed.length()) / (float) json.length()) * 100);

            Assertions.assertTrue(compressed.length() < deCompressed.length());

            Assertions.assertEquals(json, deCompressed);
        }
    }

    @Test
    public void test01_EqualsAndEqualsIgnoreCase_String() {
        Assertions.assertTrue(StringUtil.equals((String) null, (String) null));
        Assertions.assertFalse(StringUtil.equals((String) null, "a"));
        Assertions.assertFalse(StringUtil.equals("a", (String) null));
        Assertions.assertTrue(StringUtil.equals("a", "a"));

        Assertions.assertTrue(StringUtil.equalsIgnoreCase((String) null, (String) null));
        Assertions.assertFalse(StringUtil.equalsIgnoreCase((String) null, "A"));
        Assertions.assertFalse(StringUtil.equalsIgnoreCase("A", (String) null));
        Assertions.assertTrue(StringUtil.equalsIgnoreCase("a", "A"));
    }

    @Test
    public void test02_EqualsAndEqualsIgnoreCase_Collections() {
        List<String> l1 = null;
        List<String> l2 = null;
        Assertions.assertTrue(StringUtil.equals(l1, l2));
        Assertions.assertTrue(StringUtil.equalsIgnoreCase(l1, l2));

        l1 = new ArrayList<>();
        l2 = new ArrayList<>();
        Assertions.assertTrue(StringUtil.equals(l1, l2));
        Assertions.assertTrue(StringUtil.equalsIgnoreCase(l1, l2));

        l1 = new ArrayList<>(Arrays.asList("a", "b"));
        l2 = new ArrayList<>(Arrays.asList("B", "A"));
        Assertions.assertFalse(StringUtil.equals(l1, l2));
        Assertions.assertTrue(StringUtil.equalsIgnoreCase(l1, l2));
    }

    @Test
    public void test03_MatchesAndContains() {
        Assertions.assertTrue(StringUtil.matches(null, null));
        Assertions.assertTrue(StringUtil.matches("", ""));
        Assertions.assertTrue(StringUtil.matches(".*", ""));
        Assertions.assertTrue(StringUtil.matches("a.*b", "acb"));
        Assertions.assertTrue(StringUtil.matches("a.*b", "acxb"));

        Assertions.assertTrue(StringUtil.contains("abc", "b"));
        Assertions.assertFalse(StringUtil.contains("abc", (String) null));
        Assertions.assertFalse(StringUtil.contains((String) null, "a"));

        Assertions.assertTrue(StringUtil.containsIgnoreCase("AbC", "b"));
        Assertions.assertFalse(StringUtil.containsIgnoreCase("abc", (String) null));
        Assertions.assertFalse(StringUtil.containsIgnoreCase((String) null, "a"));

        String[] arr = new String[] {"x", "Y"};
        Assertions.assertTrue(StringUtil.contains(arr, "x"));
        Assertions.assertFalse(StringUtil.contains(arr, "z"));
        Assertions.assertTrue(StringUtil.containsIgnoreCase(arr, "y"));
    }

    @Test
    public void test04_ToStringVariants() {
        List<String> list = new ArrayList<>();
        Assertions.assertEquals("", StringUtil.toString(list));
        list.add("a");
        list.add("b");
        Assertions.assertEquals("a, b", StringUtil.toString(list));

        String[] arr = new String[] {};
        Assertions.assertEquals("", StringUtil.toString(arr));
        arr = new String[] {"a", "b", "c"};
        Assertions.assertEquals("a, b, c", StringUtil.toString(arr));
    }

    @Test
    public void test05_IsEmptyToLowerGetBytes() {
        Assertions.assertTrue(StringUtil.isEmpty((String) null));
        Assertions.assertTrue(StringUtil.isEmpty("   "));
        Assertions.assertFalse(StringUtil.isEmpty("a"));

        List<String> list = new ArrayList<>();
        Assertions.assertTrue(StringUtil.isEmpty((Collection<String>) list));
        list.add("x");
        Assertions.assertFalse(StringUtil.isEmpty(list));

        Assertions.assertNull(StringUtil.toLower(null));
        Assertions.assertEquals("abc", StringUtil.toLower("AbC"));

        Assertions.assertNull(StringUtil.getBytes(null));
        Assertions.assertArrayEquals("abc".getBytes(), StringUtil.getBytes("abc"));
    }

    @Test
    public void test06_UTCDateHelpers() {
        Assertions.assertNotNull(StringUtil.getUTCDate());
        Assertions.assertNotNull(StringUtil.getUTCDateForLocalDate(new Date()));
    }

    @Test
    public void test07_ToStringObjectMap_Set_List_URLs() {
        Map<String, String> src = new HashMap<>();
        src.put("a", "1");
        Map<String, Object> out = StringUtil.toStringObjectMap(src);
        Assertions.assertNotNull(out);
        Assertions.assertEquals("1", out.get("a"));

        Assertions.assertTrue(StringUtil.toSet(null).isEmpty());
        Set<String> set = StringUtil.toSet(" a, ,b , c ");
        Assertions.assertTrue(set.contains("a"));
        Assertions.assertTrue(set.contains("b"));
        Assertions.assertTrue(set.contains("c"));

        Assertions.assertTrue(StringUtil.toList(null).isEmpty());
        List<String> list = StringUtil.toList(" a, ,b , c ");
        Assertions.assertEquals(Arrays.asList("a", "b", "c"), list);

        List<String> urls = StringUtil.getURLs(" http://x/ , https://y/z ");
        Assertions.assertEquals(" http://x/ ", urls.get(0));
        Assertions.assertEquals(" https://y/z ", urls.get(1));
    }

    @Test
    public void test08_DedupMapSetListVariantsAndCollection() {
        Map<String, String> strTbl = new HashMap<>();

        Map<String, Map<String, String>> mom = new HashMap<>();
        Map<String, String> inner = new HashMap<>();
        inner.put(getString("k1"), getString("v1"));
        mom.put(getString("outer"), inner);
        Map<String, Map<String, String>> mom2 = StringUtil.dedupStringsMapOfMap(mom, strTbl);
        Assertions.assertNotSame(mom, mom2);

        Map<String, Set<String>> mos = new HashMap<>();
        Set<String> iv = new HashSet<>(Arrays.asList(getString("a"), getString("b")));
        mos.put(getString("outer"), iv);
        Map<String, Set<String>> mos2 = StringUtil.dedupStringsMapOfSet(mos, strTbl);
        Assertions.assertNotSame(mos, mos2);

        Map<String, List<String>> mol = new HashMap<>();
        List<String> il = new ArrayList<>(Arrays.asList(getString("a"), getString("b")));
        mol.put(getString("outer"), il);
        Map<String, List<String>> mol2 = StringUtil.dedupStringsMapOfList(mol, strTbl);
        Assertions.assertNotSame(mol, mol2);

        HashMap<String, List<String>> hm = new HashMap<>();
        hm.put(getString("outer"), new ArrayList<>(Arrays.asList(getString("a"))));
        HashMap<String, List<String>> hm2 = StringUtil.dedupStringsHashMapOfList(hm, strTbl);
        Assertions.assertNotSame(hm, hm2);

        Map<String, Object> moo = new HashMap<>();
        moo.put(getString("x"), getString("y"));
        Map<String, Object> moo2 = StringUtil.dedupStringsMapOfObject(moo, strTbl);
        Assertions.assertNotSame(moo, moo2);

        Collection<String> coll = new ArrayList<>(Arrays.asList(getString("x"), getString("y")));
        Collection<String> coll2 = StringUtil.dedupStringsCollection(coll, strTbl);
        Assertions.assertNotSame(coll, coll2);
    }

    @Test
    public void test09_GzipHelpersAndEmptyCompress() throws IOException {
        String empty = "";
        Assertions.assertEquals(empty, StringUtil.compressString(empty));
        Assertions.assertEquals(empty, StringUtil.decompressString(empty));

        String original = "hello world";
        byte[] compressed = StringUtil.gzipCompress(original);
        String decompressed = StringUtil.gzipDecompress(compressed);
        Assertions.assertEquals(original, decompressed);

        byte[] bad = new byte[] {1, 2, 3};
        try {
            StringUtil.gzipDecompress(bad);
            Assertions.fail("Expected IOException");
        } catch (IOException expected) {
            // expected
        }
    }

    private boolean containsInstance(Collection<String> coll, String key) {
        boolean ret = false;

        if (coll != null) {
            for (String elem : coll) {
                if (elem == key) {
                    ret = true;

                    break;
                }
            }
        }

        return ret;
    }

    private String getString(String str) {
        return str == null ? str : new String(str);
    }

    private RangerSecurityZone generateLargeSecurityZone(int sizeFactor) {
        RangerSecurityZone zone = new RangerSecurityZone();
        int svcCount = sizeFactor;
        int resourceCount = sizeFactor;
        int resNameLen = (sizeFactor / 10) + 1;

        zone.setName("test-zone");
        zone.setDescription("this is a test zone");
        zone.setTagServices(generateStrings("tag-service-", 25, 1));
        zone.setAdminUsers(generateStrings("admin-", 20, 10));
        zone.setAdminUserGroups(generateStrings("admin-group-", 20, 5));
        zone.setAdminRoles(generateStrings("admin-role-", 20, 5));
        zone.setAuditUsers(generateStrings("audit-", 20, 10));
        zone.setAuditUserGroups(generateStrings("audit-group-", 20, 5));
        zone.setAuditRoles(generateStrings("audit-role-", 20, 5));

        for (int i = 0; i < svcCount; i++) {
            RangerSecurityZoneService svc = new RangerSecurityZoneService();

            for (int j = 0; j < resourceCount; j++) {
                HashMap<String, List<String>> resource = new HashMap<>();

                resource.put("database", generateStrings("db-", resNameLen, 1));
                resource.put("table", generateStrings("tbl-", resNameLen, 2));
                resource.put("column", generateStrings("col-", resNameLen, 3));

                svc.getResources().add(resource);
            }

            zone.getServices().put("service-" + i, svc);
        }

        return new RangerSecurityZoneHelper(zone, "testUser").getZone(); // add resourcesBaseInfo
    }

    private int getResourceCount(RangerSecurityZone zone) {
        int ret = 0;

        for (RangerSecurityZone.RangerSecurityZoneService svc : zone.getServices().values()) {
            ret += svc.getResources().size();
        }

        return ret;
    }

    private List<String> generateStrings(String prefix, int maxLen, int count) {
        List<String> ret = new ArrayList<>(count);

        for (int i = 0; i < count; i++) {
            ret.add(generateResourceName(prefix, maxLen));
        }

        return ret;
    }

    private String generateResourceName(String prefix, int maxLen) {
        return prefix.length() < maxLen ? (prefix + RandomStringUtils.random(maxLen - prefix.length(), true, true))
                : prefix;
    }
}
