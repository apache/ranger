/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.authorization.utils;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.ranger.plugin.model.AuditFilter;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerPrincipal;
import org.apache.ranger.plugin.model.RangerPrincipal.PrincipalType;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerValidityRecurrence;
import org.apache.ranger.plugin.model.RangerValidityRecurrence.RecurrenceSchedule;
import org.apache.ranger.plugin.model.RangerValidityRecurrence.ValidityInterval;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
* @generated by Cursor
* @description <Unit Test for JsonUtils class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestJsonUtils {
    @Test
    public void test01_getMapperConfiguration() {
        ObjectMapper mapper = JsonUtils.getMapper();
        Assertions.assertNotNull(mapper);
        // Verify custom date format set via configuration
        Assertions.assertNotNull(mapper.getDateFormat());
    }

    @Test
    public void test02_mapListSetObjectToJson_successAndEmpty() {
        Map<String, Object> map = new HashMap<>();
        map.put("k", "v");
        String mapJson = JsonUtils.mapToJson(map);
        Assertions.assertEquals("{\"k\":\"v\"}", mapJson);

        List<String> list = Arrays.asList("a", "b");
        String listJson = JsonUtils.listToJson(list);
        Assertions.assertEquals("[\"a\",\"b\"]", listJson);

        Set<String> set = new HashSet<>(Arrays.asList("x", "y"));
        String setJson = JsonUtils.setToJson(set);
        Assertions.assertTrue(setJson.contains("x"));
        Assertions.assertTrue(setJson.contains("y"));

        String objJson = JsonUtils.objectToJson(new RangerPrincipal(PrincipalType.USER, "alice"));
        Assertions.assertTrue(objJson.contains("alice"));

        Assertions.assertNull(JsonUtils.mapToJson(null));
        Assertions.assertNull(JsonUtils.listToJson(new ArrayList<>()));
        Assertions.assertNull(JsonUtils.setToJson(new HashSet<>()));
        Assertions.assertNull(JsonUtils.objectToJson(null));
    }

    @Test
    public void test03_jsonToObject_withReaderAndWriter_andClass() {
        RangerPrincipal in = new RangerPrincipal(PrincipalType.ROLE, "analyst");
        String json = JsonUtils.objectToJson(in);
        Writer w = new StringWriter();
        JsonUtils.objectToWriter(w, in);
        String serialized = w.toString();
        Assertions.assertTrue(serialized.contains("analyst"));

        Reader r = new StringReader(json);
        RangerPrincipal out = JsonUtils.jsonToObject(r, RangerPrincipal.class);
        Assertions.assertEquals(in, out);

        // null safety
        Assertions.assertNull(JsonUtils.jsonToObject((Reader) null, RangerPrincipal.class));
        JsonUtils.objectToWriter(null, in); // should not throw
    }

    @Test
    public void test04_jsonToObject_withTypeReference_andBranching() throws Exception {
        Map<String, Integer> m = new HashMap<>();
        m.put("a", 1);
        String json = JsonUtils.objectToJson(m);
        Map<String, Integer> out = JsonUtils.jsonToObject(json, new TypeReference<Map<String, Integer>>() {
        });
        Assertions.assertEquals(1, out.get("a").intValue());

        Assertions.assertNull(JsonUtils.jsonToObject((String) null, new TypeReference<Map<String, Integer>>() {
        }));
    }

    @Test
    public void test05_jsonToPrimitivesCollectionsHelpers() {
        Assertions.assertNull(JsonUtils.jsonToMapStringString(null));
        Assertions.assertNull(JsonUtils.jsonToSetString(null));
        Assertions.assertNull(JsonUtils.jsonToListString(null));

        String mapJson = "{\"k\":\"v\"}";
        Map<String, String> map = JsonUtils.jsonToMapStringString(mapJson);
        Assertions.assertEquals("v", map.get("k"));

        String setJson = "[\"u\",\"v\"]";
        Set<String> set = JsonUtils.jsonToSetString(setJson);
        Assertions.assertTrue(set.contains("u"));
        Assertions.assertTrue(set.contains("v"));

        String listJson = "[\"p\",\"q\"]";
        List<String> list = JsonUtils.jsonToListString(listJson);
        Assertions.assertEquals(Arrays.asList("p", "q"), list);
    }

    @Test
    public void test06_jsonToValidityAndAuditRelatedHelpers_success() {
        RangerValiditySchedule sched = new RangerValiditySchedule();
        sched.setTimeZone("UTC");
        sched.setStartTime("2020/01/01 00:00:00");
        sched.setEndTime("2025/01/01 00:00:00");
        RangerValidityRecurrence rec = new RangerValidityRecurrence();
        RecurrenceSchedule rs = new RecurrenceSchedule("0", "*", "*", "*", "*", "*");
        rec.setSchedule(rs);
        rec.setInterval(new ValidityInterval(0, 1, 0));
        sched.setRecurrences(Arrays.asList(rec));
        String schedJson = JsonUtils.objectToJson(Arrays.asList(sched));
        List<RangerValiditySchedule> backSched = JsonUtils.jsonToRangerValiditySchedule(schedJson);
        Assertions.assertEquals(1, backSched.size());

        AuditFilter af = new AuditFilter();
        af.setAccessTypes(Arrays.asList("read"));
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("database", new RangerPolicyResource("db1"));
        af.setResources(res);
        String afJson = JsonUtils.objectToJson(Arrays.asList(af));
        List<AuditFilter> backAF = JsonUtils.jsonToAuditFilterList(afJson);
        Assertions.assertEquals(1, backAF.size());

        RangerValidityRecurrence rr = new RangerValidityRecurrence(rs, new ValidityInterval(0, 0, 30));
        String rrJson = JsonUtils.objectToJson(Arrays.asList(rr));
        List<RangerValidityRecurrence> backRR = JsonUtils.jsonToRangerValidityRecurringSchedule(rrJson);
        Assertions.assertEquals(1, backRR.size());

        RangerPrincipal p = new RangerPrincipal(PrincipalType.USER, "bob");
        String pJson = JsonUtils.objectToJson(Arrays.asList(p));
        List<RangerPrincipal> backP = JsonUtils.jsonToRangerPrincipalList(pJson);
        Assertions.assertEquals(1, backP.size());

        RangerTag tag = new RangerTag("guid-1", "PII", new HashMap<String, String>() {
            {
                put("level", "high");
            }
        }, RangerTag.OWNER_SERVICERESOURCE);
        String tagJson = JsonUtils.objectToJson(Arrays.asList(tag));
        List<RangerTag> backTag = JsonUtils.jsonToRangerTagList(tagJson);
        Assertions.assertEquals(1, backTag.size());
    }

    @Test
    public void test07_jsonToGdsMaskInfoAndPolicyResource_success() {
        RangerGdsMaskInfo mi = new RangerGdsMaskInfo();
        mi.setValues(Arrays.asList("col1"));
        mi.setMaskInfo(new RangerPolicyItemDataMaskInfo("MASK", null, null));
        String miJson = JsonUtils.objectToJson(Arrays.asList(mi));
        List<RangerGdsMaskInfo> backMi = JsonUtils.jsonToListGdsMaskInfo(miJson);
        Assertions.assertEquals(1, backMi.size());

        Map<String, RangerPolicyResource> m = new HashMap<>();
        m.put("table", new RangerPolicyResource("t1"));
        String mJson = JsonUtils.objectToJson(m);
        Map<String, RangerPolicyResource> backM = JsonUtils.jsonToMapPolicyResource(mJson);
        Assertions.assertTrue(backM.containsKey("table"));
        Assertions.assertEquals("t1", backM.get("table").getValues().get(0));
    }

    @Test
    public void test08_errorPaths_returnNullAndLogging() {
        // invalid JSON strings should not throw and should return null
        Assertions.assertNull(JsonUtils.jsonToMapStringString("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToSetString("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToListString("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToRangerValiditySchedule("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToAuditFilterList("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToRangerValidityRecurringSchedule("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToRangerPrincipalList("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToRangerTagList("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToListGdsMaskInfo("{invalid}"));
        Assertions.assertNull(JsonUtils.jsonToMapPolicyResource("{invalid}"));

        Assertions.assertNull(JsonUtils.jsonToObject("{invalid}", RangerPrincipal.class));
    }
}
