/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.knox.client;

import org.apache.ranger.plugin.model.RangerService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for KnoxConnectionMgr class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestKnoxConnectionMgr {
    @Test
    public void test01_getKnoxClientbyService_nullService_returnsNull() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Assertions.assertNull(mgr.getKnoxClientbyService(null));
    }

    @Test
    public void test02_getKnoxClientbyService_validService_returnsClient() {
        RangerService svc = Mockito.mock(RangerService.class);
        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");
        Mockito.when(svc.getConfigs()).thenReturn(cfg);

        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        KnoxClient client = mgr.getKnoxClientbyService(svc);
        Assertions.assertNotNull(client);
    }

    @Test
    public void test03_getKnoxClientByConfig_null_returnsNull() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Assertions.assertNull(mgr.getKnoxClientByConfig(null));
    }

    @Test
    public void test04_getKnoxClientByConfig_valid_returnsClient() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");
        Assertions.assertNotNull(mgr.getKnoxClientByConfig(cfg));
    }

    @Test
    public void test05_getKnoxClient_nullConfig_returnsNull() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Assertions.assertNull(mgr.getKnoxClient("svc", null));
    }

    @Test
    public void test06_getKnoxClient_validConfig_returnsClient() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");
        Assertions.assertNotNull(mgr.getKnoxClient("svc", cfg));
    }

    @Test
    public void test07_getKnoxClient_byValues_validatesInputs() {
        KnoxConnectionMgr mgr = new KnoxConnectionMgr();
        Assertions.assertNull(mgr.getKnoxClient(null, "u", "p"));
        Assertions.assertNull(mgr.getKnoxClient("", "u", "p"));
        Assertions.assertNull(mgr.getKnoxClient("https://knox", null, "p"));
        Assertions.assertNull(mgr.getKnoxClient("https://knox", "", "p"));
        Assertions.assertNull(mgr.getKnoxClient("https://knox", "u", null));
        Assertions.assertNull(mgr.getKnoxClient("https://knox", "u", ""));
        Assertions.assertNotNull(mgr.getKnoxClient("https://knox", "u", "p"));
    }
}
