/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.knox.client;

import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for KnoxResourceMgr class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestKnoxResourceMgr {
    @Test
    public void test01_validateConfig_success() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");

        try (MockedStatic<KnoxClient> kc = Mockito.mockStatic(KnoxClient.class)) {
            kc.when(() -> KnoxClient.connectionTest("svc", cfg)).thenReturn(new HashMap<String, Object>() {
                {
                    put("connectivityStatus", true);
                    put("message", "ok");
                    put("description", "ok");
                }
            });

            Map<String, Object> resp = KnoxResourceMgr.validateConfig("svc", cfg);
            Assertions.assertEquals(Boolean.TRUE, resp.get("connectivityStatus"));
        }
    }

    @Test
    public void test02_validateConfig_exceptionPropagates() {
        Map<String, String> cfg = new HashMap<>();
        try (MockedStatic<KnoxClient> kc = Mockito.mockStatic(KnoxClient.class)) {
            kc.when(() -> KnoxClient.connectionTest("svc", cfg)).thenThrow(new HadoopException("boom"));
            Assertions.assertThrows(HadoopException.class, () -> KnoxResourceMgr.validateConfig("svc", cfg));
        }
    }

    @Test
    public void test03_getKnoxResources_missingConfig_returnsNull() {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("x");
        ctx.setResourceName("topology");

        Map<String, String> cfg = new HashMap<>();
        // missing all
        Assertions.assertNull(KnoxResourceMgr.getKnoxResources("svc", cfg, ctx));

        cfg.put("knox.url", "");
        Assertions.assertNull(KnoxResourceMgr.getKnoxResources("svc", cfg, ctx));

        cfg.put("knox.url", "https://knox");
        Assertions.assertNull(KnoxResourceMgr.getKnoxResources("svc", cfg, ctx));

        cfg.put("username", "u");
        Assertions.assertNull(KnoxResourceMgr.getKnoxResources("svc", cfg, ctx));
    }

    @Test
    public void test04_getKnoxResources_topologyFlow() {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("adm");
        ctx.setResourceName("topology");

        Map<String, List<String>> resMap = new HashMap<>();
        resMap.put("topology", new ArrayList<>());
        ctx.setResources(resMap);

        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");

        try (MockedStatic<KnoxClient> kc = Mockito.mockStatic(KnoxClient.class)) {
            kc.when(() -> KnoxClient.getKnoxResources(Mockito.any(KnoxClient.class), Mockito.eq("adm"),
                    Mockito.isNull(), Mockito.anyList(), Mockito.isNull())).thenReturn(new ArrayList<String>() {
                        {
                            add("admin");
                        }
                    });

            // Use real call for connection mgr within KnoxResourceMgr
            List<String> result = KnoxResourceMgr.getKnoxResources("svc", cfg, ctx);
            Assertions.assertNotNull(result);
            Assertions.assertEquals(1, result.size());
        }
    }

    @Test
    public void test05_getKnoxResources_serviceFlow() {
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setUserInput("HI");
        ctx.setResourceName("service");

        Map<String, List<String>> resMap = new HashMap<>();
        resMap.put("service", new ArrayList<>());
        resMap.put("topology", new ArrayList<String>() {
            {
                add("top1");
            }
        });
        ctx.setResources(resMap);

        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");

        try (MockedStatic<KnoxClient> kc = Mockito.mockStatic(KnoxClient.class)) {
            kc.when(() -> KnoxClient.getKnoxResources(Mockito.any(KnoxClient.class), Mockito.isNull(), Mockito.eq("HI"),
                    Mockito.anyList(), Mockito.anyList())).thenReturn(new ArrayList<String>() {
                        {
                            add("HIVE");
                        }
                    });

            List<String> result = KnoxResourceMgr.getKnoxResources("svc", cfg, ctx);
            Assertions.assertNotNull(result);
            Assertions.assertEquals(1, result.size());
        }
    }
}
