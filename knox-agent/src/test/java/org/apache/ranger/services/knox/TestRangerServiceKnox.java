/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.knox;

import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.services.knox.client.KnoxResourceMgr;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerServiceKnox class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceKnox {
    private RangerServiceKnox createService(String serviceName, Map<String, String> configs) {
        RangerServiceKnox svc = new RangerServiceKnox();
        RangerServiceDef def = new RangerServiceDef();
        RangerService service = new RangerService("knox", serviceName, "desc", null, configs);
        svc.init(def, service);
        return svc;
    }

    @Test
    public void test01_validateConfig_success() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("knox.url", "https://knox");
        cfg.put("username", "u");
        cfg.put("password", "p");

        RangerServiceKnox svc = createService("svc", cfg);

        try (MockedStatic<KnoxResourceMgr> km = Mockito.mockStatic(KnoxResourceMgr.class)) {
            Map<String, Object> expected = new HashMap<>();
            expected.put("connectivityStatus", true);
            km.when(() -> KnoxResourceMgr.validateConfig("svc", cfg)).thenReturn(expected);

            Map<String, Object> resp = svc.validateConfig();
            Assertions.assertEquals(Boolean.TRUE, resp.get("connectivityStatus"));
        }
    }

    @Test
    public void test02_validateConfig_exceptionPropagates() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        RangerServiceKnox svc = createService("svc", cfg);
        try (MockedStatic<KnoxResourceMgr> km = Mockito.mockStatic(KnoxResourceMgr.class)) {
            km.when(() -> KnoxResourceMgr.validateConfig("svc", cfg)).thenThrow(new HadoopException("boom"));
            Assertions.assertThrows(HadoopException.class, svc::validateConfig);
        }
    }

    @Test
    public void test03_lookupResource_nullContext_returnsEmpty() throws Exception {
        RangerServiceKnox svc = createService("svc", new HashMap<>());
        List<String> ret = svc.lookupResource(null);
        Assertions.assertNotNull(ret);
        Assertions.assertTrue(ret.isEmpty());
    }

    @Test
    public void test04_lookupResource_success() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        RangerServiceKnox svc = createService("svc", cfg);
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("topology");
        ctx.setUserInput("adm");

        try (MockedStatic<KnoxResourceMgr> km = Mockito.mockStatic(KnoxResourceMgr.class)) {
            List<String> expected = new ArrayList<>();
            expected.add("admin");
            km.when(() -> KnoxResourceMgr.getKnoxResources("svc", cfg, ctx)).thenReturn(expected);

            List<String> ret = svc.lookupResource(ctx);
            Assertions.assertEquals(expected, ret);
        }
    }

    @Test
    public void test05_lookupResource_exceptionPropagates() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        RangerServiceKnox svc = createService("svc", cfg);
        ResourceLookupContext ctx = new ResourceLookupContext();

        try (MockedStatic<KnoxResourceMgr> km = Mockito.mockStatic(KnoxResourceMgr.class)) {
            km.when(() -> KnoxResourceMgr.getKnoxResources("svc", cfg, ctx)).thenThrow(new HadoopException("boom"));
            Assertions.assertThrows(HadoopException.class, () -> svc.lookupResource(ctx));
        }
    }

    @Test
    public void test06_getDefaultRangerPolicies_addsLookupUserPolicyItem() throws Exception {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("setup.additional.default.policies", "true");
        cfg.put("default-policy.1.name", "all endpoints");
        cfg.put("default-policy.1.resource.path", "/*");
        cfg.put("default-policy.1.policyItem.1.users", "user1");
        cfg.put("default-policy.1.policyItem.1.accessTypes", "read,write");

        RangerServiceKnox svc = createService("svc", cfg);

        // set lookUpUser via reflection to cover branch in RangerServiceKnox
        Field f = org.apache.ranger.plugin.service.RangerBaseService.class.getDeclaredField("lookUpUser");
        f.setAccessible(true);
        f.set(svc, "lookupUser");

        List<RangerPolicy> policies = svc.getDefaultRangerPolicies();
        Assertions.assertNotNull(policies);
        Assertions.assertFalse(policies.isEmpty());

        boolean foundAugmented = false;
        for (RangerPolicy p : policies) {
            if (p.getName() != null && p.getName().contains("all")) {
                for (RangerPolicyItem item : p.getPolicyItems()) {
                    if (item.getUsers() != null && item.getUsers().contains("lookupUser")) {
                        List<RangerPolicyItemAccess> acc = item.getAccesses();
                        Assertions.assertEquals(1, acc.size());
                        Assertions.assertEquals(RangerServiceKnox.ACCESS_TYPE_ALLOW, acc.get(0).getType());
                        foundAugmented = true;
                        break;
                    }
                }
            }
        }
        Assertions.assertTrue(foundAugmented, "Expected policy item for lookupUser was not added");
    }
}
