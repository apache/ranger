/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.admin.client;

import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.security.AccessControlException;
import org.apache.ranger.admin.client.RangerAdminJersey2RESTClient.GsonUnixDateDeserializer;
import org.apache.ranger.plugin.util.RangerRESTUtils;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerServiceNotFoundException;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.apache.ranger.plugin.util.ServiceTags;
import org.glassfish.jersey.client.ClientProperties;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.ArgumentMatchers;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.ws.rs.ProcessingException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.NewCookie;
import javax.ws.rs.core.Response;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerAdminJersey2RESTClient class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAdminJersey2RESTClient {
    private static final String PREFIX = "ranger.plugin.test";
    private static final String SERVICE = "svc";
    private static final String APPID = "app";
    private static final String BASE_URL = "http://localhost:6080";
    private static final String HTTPS_URL = "https://localhost:6182";
    private static final String COOKIE_NAME = "RANGERADMINSESSION";

    private Configuration buildBaseConfig(String baseUrl) {
        Configuration conf = new Configuration();
        conf.set(PREFIX + ".policy.rest.url", baseUrl);
        conf.setInt(PREFIX + ".policy.rest.client.connection.timeoutMs", 111);
        conf.setInt(PREFIX + ".policy.rest.client.read.timeoutMs", 222);
        conf.setInt(PREFIX + ".policy.rest.client.max.retry.attempts", 2);
        conf.setInt(PREFIX + ".policy.rest.client.retry.interval.ms", 0);
        conf.set(PREFIX + ".access.cluster.name", "");
        conf.setBoolean(PREFIX + ".policy.rest.client.cookie.enabled", true);
        conf.set(PREFIX + ".policy.rest.client.session.cookie.name", COOKIE_NAME);
        conf.setBoolean(PREFIX + ".forceNonKerberos", true);
        return conf;
    }

    private void initWithMockClient(RangerAdminJersey2RESTClient clientUnderTest, Client clientMock,
            Configuration conf) {
        clientUnderTest.client = clientMock;
        clientUnderTest.init(SERVICE, APPID, PREFIX, conf);
    }

    @Test
    public void test01_init_sets_fields_and_timeouts() {
        Client clientMock = mock(Client.class);
        when(clientMock.property(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(clientMock);

        Configuration conf = buildBaseConfig(HTTPS_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();

        initWithMockClient(underTest, clientMock, conf);

        assertEquals(true, underTest.isSSL);
        assertEquals(111, underTest.restClientConnTimeOutMs);
        assertEquals(222, underTest.restClientReadTimeOutMs);
        assertEquals(2, underTest.restClientMaxRetryAttempts);
        assertEquals(0, underTest.restClientRetryIntervalMs);
        assertEquals(SERVICE, underTest.serviceName);

        verify(clientMock, times(1)).property(ClientProperties.CONNECT_TIMEOUT, 111);
        verify(clientMock, times(1)).property(ClientProperties.READ_TIMEOUT, 222);
    }

    @Test
    public void test02_getServicePolicies_credential200_then_cookie304() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response304 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);
        when(response304.getStatus()).thenReturn(304);
        when(response304.getCookies()).thenReturn(cookies);

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response304);

        ServicePolicies first = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNotNull(first);
        ServicePolicies second = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(second);

        ArgumentCaptor<Cookie> captor = ArgumentCaptor.forClass(Cookie.class);
        verify(builderMock, times(2)).cookie(captor.capture());
        Cookie firstCookie = captor.getAllValues().get(0);
        Cookie secondCookie = captor.getAllValues().get(1);
        assertNull(firstCookie);
        assertNotNull(secondCookie);
    }

    @Test
    public void test03_getServicePolicies_404_and_default_and_null() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response404 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn("");
        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response404, response500, null);

        ServicePolicies on404 = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(on404);
        ServicePolicies on500 = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(on500);
        ServicePolicies onNull = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(onNull);
    }

    @Test
    public void test04_getServiceTags_flows() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response304 = mock(Response.class);
        Response response404 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);
        when(response304.getStatus()).thenReturn(304);
        when(response304.getCookies()).thenReturn(cookies);
        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn("");
        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response304, response404, response500, null);

        ServiceTags t200 = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNotNull(t200);
        ServiceTags t304 = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(t304);
        ServiceTags t404 = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(t404);
        ServiceTags t500 = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(t500);
        ServiceTags tNull = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(tNull);
    }

    @Test
    public void test05_getRoles_flows() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response304 = mock(Response.class);
        Response response404 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);
        when(response304.getStatus()).thenReturn(304);
        when(response304.getCookies()).thenReturn(cookies);
        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn("");
        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response304, response404, response500, null);

        RangerRoles r200 = underTest.getRolesIfUpdated(1L, 2L);
        assertNotNull(r200);
        RangerRoles r304 = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(r304);
        RangerRoles r404 = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(r404);
        RangerRoles r500 = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(r500);
        RangerRoles rNull = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(rNull);
    }

    @Test
    public void test06_grant_and_revoke_access_paths() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response401 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        when(response200.getStatus()).thenReturn(200);
        when(response401.getStatus()).thenReturn(401);
        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response401, response500, null);

        underTest.grantAccess(null);
        assertThrows(AccessControlException.class, () -> underTest.grantAccess(null));
        assertThrows(Exception.class, () -> underTest.grantAccess(null));
        assertThrows(Exception.class, () -> underTest.grantAccess(null));

        when(builderMock.get()).thenReturn(response200, response401, response500, null);
        underTest.revokeAccess(null);
        assertThrows(AccessControlException.class, () -> underTest.revokeAccess(null));
        assertThrows(Exception.class, () -> underTest.revokeAccess(null));
        assertThrows(Exception.class, () -> underTest.revokeAccess(null));
    }

    @Test
    public void test07_getUserStore_paths_non_secure() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response304 = mock(Response.class);
        Response response404 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        conf.setBoolean(PREFIX + ".forceNonKerberos", true);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response304.getStatus()).thenReturn(304);
        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(false);
        when(response500.getStatus()).thenReturn(500);
        when(response500.hasEntity()).thenReturn(true);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response304, response404, response500);

        RangerUserStore u200 = underTest.getUserStoreIfUpdated(1L, 2L);
        assertNotNull(u200);
        RangerUserStore u304 = underTest.getUserStoreIfUpdated(1L, 2L);
        assertNull(u304);
        RangerUserStore u404 = underTest.getUserStoreIfUpdated(1L, 2L);
        assertNull(u404);
        RangerUserStore u500 = underTest.getUserStoreIfUpdated(1L, 2L);
        assertNull(u500);
    }

    @Test
    public void test08_shouldRetry_and_exception_path() {
        Client clientMock = mock(Client.class);
        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        boolean first = underTest.shouldRetry(BASE_URL, 0, 0, new ProcessingException("e"));
        assertEquals(true, first);
        assertThrows(ProcessingException.class,
                () -> underTest.shouldRetry(BASE_URL, 0, 2, new ProcessingException("e")));
    }

    @Test
    public void test09_getClient_lazy_build_and_singleton() {
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        underTest.isSSL = false;
        underTest.client = null;
        Client c1 = underTest.getClient();
        Client c2 = underTest.getClient();
        assertNotNull(c1);
        assertEquals(c1, c2);
    }

    @Test
    public void test10_gson_unix_date_deserializer() {
        GsonUnixDateDeserializer deser = new GsonUnixDateDeserializer();
        long ts = 123456789L;
        JsonElement el = new JsonPrimitive(ts);
        Date d = deser.deserialize(el, Date.class, null);
        assertEquals(ts, d.getTime());
    }

    @Test
    public void test11_getTagTypes_not_implemented() {
        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        // use a real client here only to init; we won't make network calls
        underTest.client = mock(Client.class);
        underTest.init(SERVICE, APPID, PREFIX, conf);

        assertThrows(Exception.class, () -> underTest.getTagTypes("pat"));
    }

    @Test
    public void test12_policies_secure_mode_uses_secure_url() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        conf.setBoolean(PREFIX + ".forceNonKerberos", false);
        RangerAdminJersey2RESTClient underTest = spy(new RangerAdminJersey2RESTClient());
        underTest.client = clientMock;
        underTest.init(SERVICE, APPID, PREFIX, conf);
        doReturn(true).when(underTest).isKerberosEnabled(ArgumentMatchers.any());

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        ArgumentCaptor<String> urlCaptor = ArgumentCaptor.forClass(String.class);

        when(clientMock.target(urlCaptor.capture())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200);

        ServicePolicies ret = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNotNull(ret);

        String calledUrl = urlCaptor.getValue();
        assertNotNull(calledUrl);
        String expectedPrefix = RangerRESTUtils.REST_URL_POLICY_GET_FOR_SECURE_SERVICE_IF_UPDATED + SERVICE;
        // expect full URL to contain secure relative path
        Assertions.assertTrue(calledUrl.contains(expectedPrefix));
    }

    @Test
    public void test13_tags_secure_mode_uses_secure_url() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        conf.setBoolean(PREFIX + ".forceNonKerberos", false);
        RangerAdminJersey2RESTClient underTest = spy(new RangerAdminJersey2RESTClient());
        underTest.client = clientMock;
        underTest.init(SERVICE, APPID, PREFIX, conf);
        doReturn(true).when(underTest).isKerberosEnabled(ArgumentMatchers.any());

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        ArgumentCaptor<String> urlCaptor = ArgumentCaptor.forClass(String.class);

        when(clientMock.target(urlCaptor.capture())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200);

        ServiceTags ret = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNotNull(ret);

        String calledUrl = urlCaptor.getValue();
        assertNotNull(calledUrl);
        String expectedPrefix = RangerRESTUtils.REST_URL_GET_SECURE_SERVICE_TAGS_IF_UPDATED + SERVICE;
        Assertions.assertTrue(calledUrl.contains(expectedPrefix));
    }

    @Test
    public void test14_roles_secure_mode_uses_secure_url() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        conf.setBoolean(PREFIX + ".forceNonKerberos", false);
        RangerAdminJersey2RESTClient underTest = spy(new RangerAdminJersey2RESTClient());
        underTest.client = clientMock;
        underTest.init(SERVICE, APPID, PREFIX, conf);
        doReturn(true).when(underTest).isKerberosEnabled(ArgumentMatchers.any());

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        ArgumentCaptor<String> urlCaptor = ArgumentCaptor.forClass(String.class);

        when(clientMock.target(urlCaptor.capture())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200);

        RangerRoles ret = underTest.getRolesIfUpdated(1L, 2L);
        assertNotNull(ret);

        String calledUrl = urlCaptor.getValue();
        assertNotNull(calledUrl);
        String expectedPrefix = RangerRESTUtils.REST_URL_SERVICE_SERCURE_GET_USER_GROUP_ROLES + SERVICE;
        Assertions.assertTrue(calledUrl.contains(expectedPrefix));
    }

    @Test
    public void test15_userstore_secure_mode_uses_secure_url() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        conf.setBoolean(PREFIX + ".forceNonKerberos", false);
        RangerAdminJersey2RESTClient underTest = spy(new RangerAdminJersey2RESTClient());
        underTest.client = clientMock;
        underTest.init(SERVICE, APPID, PREFIX, conf);
        doReturn(true).when(underTest).isKerberosEnabled(ArgumentMatchers.any());

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");

        ArgumentCaptor<String> urlCaptor = ArgumentCaptor.forClass(String.class);

        when(clientMock.target(urlCaptor.capture())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200);

        RangerUserStore ret = underTest.getUserStoreIfUpdated(1L, 2L);
        assertNotNull(ret);

        String calledUrl = urlCaptor.getValue();
        assertNotNull(calledUrl);
        String expectedPrefix = RangerRESTUtils.REST_URL_SERVICE_SERCURE_GET_USERSTORE + SERVICE;
        Assertions.assertTrue(calledUrl.contains(expectedPrefix));
    }

    @Test
    public void test16_buildClient_ssl_path() throws Exception {
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        underTest.isSSL = true;
        underTest.sslContext = SSLContext.getInstance("TLS");
        underTest.sslContext.init(null, null, null);
        HostnameVerifier verifier = (h, s) -> true;
        underTest.hv = verifier;
        underTest.client = null;

        Client c = underTest.buildClient();
        assertNotNull(c);
    }

    @Test
    public void test17_policies_cookie_404_throws_service_not_found() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response404 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn(RangerServiceNotFoundException.buildExceptionMsg(SERVICE));

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response404);

        ServicePolicies first = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNotNull(first);
        assertThrows(RangerServiceNotFoundException.class, () -> underTest.getServicePoliciesIfUpdated(1L, 2L));
    }

    @Test
    public void test18_policies_cookie_default_and_minus1() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response500, null);

        ServicePolicies first = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNotNull(first);
        ServicePolicies second = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(second);
        ServicePolicies third = underTest.getServicePoliciesIfUpdated(1L, 2L);
        assertNull(third);
    }

    @Test
    public void test19_roles_cookie_404_throws_service_not_found() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response404 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn(RangerServiceNotFoundException.buildExceptionMsg(SERVICE));

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response404);

        RangerRoles first = underTest.getRolesIfUpdated(1L, 2L);
        assertNotNull(first);
        assertThrows(RangerServiceNotFoundException.class, () -> underTest.getRolesIfUpdated(1L, 2L));
    }

    @Test
    public void test20_roles_cookie_default_and_minus1() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response500, null);

        RangerRoles first = underTest.getRolesIfUpdated(1L, 2L);
        assertNotNull(first);
        RangerRoles second = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(second);
        RangerRoles third = underTest.getRolesIfUpdated(1L, 2L);
        assertNull(third);
    }

    @Test
    public void test21_tags_cookie_404_throws_service_not_found() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response404 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response404.getStatus()).thenReturn(404);
        when(response404.hasEntity()).thenReturn(true);
        when(response404.readEntity(String.class)).thenReturn(RangerServiceNotFoundException.buildExceptionMsg(SERVICE));

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response404);

        ServiceTags first = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNotNull(first);
        assertThrows(RangerServiceNotFoundException.class, () -> underTest.getServiceTagsIfUpdated(1L, 2L));
    }

    @Test
    public void test22_tags_cookie_default_and_minus1() throws Exception {
        Client clientMock = mock(Client.class);
        WebTarget targetMock = mock(WebTarget.class);
        Invocation.Builder builderMock = mock(Invocation.Builder.class);
        Response response200 = mock(Response.class);
        Response response500 = mock(Response.class);

        Configuration conf = buildBaseConfig(BASE_URL);
        RangerAdminJersey2RESTClient underTest = new RangerAdminJersey2RESTClient();
        initWithMockClient(underTest, clientMock, conf);

        Map<String, NewCookie> cookies = new HashMap<>();
        cookies.put(COOKIE_NAME, new NewCookie(COOKIE_NAME, "v"));

        when(response200.getStatus()).thenReturn(200);
        when(response200.readEntity(String.class)).thenReturn("{}");
        when(response200.getCookies()).thenReturn(cookies);

        when(response500.getStatus()).thenReturn(500);
        when(response500.readEntity(String.class)).thenReturn("ERR");

        when(clientMock.target(ArgumentMatchers.anyString())).thenReturn(targetMock);
        when(targetMock.queryParam(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(targetMock);
        when(targetMock.request(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builderMock);
        when(builderMock.cookie(ArgumentMatchers.nullable(Cookie.class))).thenReturn(builderMock);
        when(builderMock.get()).thenReturn(response200, response500, null);

        ServiceTags first = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNotNull(first);
        ServiceTags second = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(second);
        ServiceTags third = underTest.getServiceTagsIfUpdated(1L, 2L);
        assertNull(third);
    }
}
