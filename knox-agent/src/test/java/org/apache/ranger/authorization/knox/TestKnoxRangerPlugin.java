/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.authorization.knox;

import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
* @generated by Cursor
* @description <Unit Test for KnoxRangerPlugin class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestKnoxRangerPlugin {
    @Test
    public void test01_init_setsResultProcessorOnce() {
        KnoxRangerPlugin plugin = new KnoxRangerPlugin();

        Assertions.assertNull(plugin.getResultProcessor());
        plugin.init();
        Assertions.assertNotNull(plugin.getResultProcessor());

        // second init should not reset and should not throw
        plugin.init();
        Assertions.assertNotNull(plugin.getResultProcessor());
    }

    @Test
    public void test02_requestBuilder_verifyBuildable_throwsOnMissing() {
        KnoxRangerPlugin.RequestBuilder b = new KnoxRangerPlugin.RequestBuilder();
        Assertions.assertThrows(IllegalStateException.class, b::verifyBuildable);

        b.service("svc");
        Assertions.assertThrows(IllegalStateException.class, b::verifyBuildable);

        b.topology("top");
        Assertions.assertThrows(IllegalStateException.class, b::verifyBuildable);

        b.user("u");
        // no exception now
        b.verifyBuildable();
    }

    @Test
    public void test03_requestBuilder_build_setsAllFields() {
        Set<String> groups = new HashSet<>(Arrays.asList("g1", "g2"));
        List<String> fwd = Arrays.asList("1.1.1.1", "2.2.2.2");

        KnoxRangerPlugin.RequestBuilder b = new KnoxRangerPlugin.RequestBuilder()
                .service("svc")
                .topology("top")
                .user("user")
                .groups(groups)
                .clientIp("10.0.0.1")
                .remoteIp("10.0.0.1")
                .forwardedAddresses(fwd);

        RangerAccessRequest req = b.build();
        Assertions.assertEquals("user", req.getUser());
        Assertions.assertEquals("allow", req.getAction());
        Assertions.assertEquals("allow", req.getAccessType());
        Assertions.assertEquals("10.0.0.1", req.getClientIPAddress());
        Assertions.assertEquals(groups, req.getUserGroups());
        Assertions.assertEquals(fwd, req.getForwardedAddresses());

        RangerAccessResource res = req.getResource();
        Assertions.assertTrue(res instanceof RangerAccessResourceImpl);
        Assertions.assertEquals("svc", ((RangerAccessResourceImpl) res).getValue(KnoxRangerPlugin.KnoxConstants.ResourceName.Service));
        Assertions.assertEquals("top", ((RangerAccessResourceImpl) res).getValue(KnoxRangerPlugin.KnoxConstants.ResourceName.Topology));
    }
}
